
Flying_arm_Kalman_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009878  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  08009a08  08009a08  0000aa08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ca0  08009ca0  0000b0c0  2**0
                  CONTENTS
  4 .ARM          00000008  08009ca0  08009ca0  0000aca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ca8  08009ca8  0000b0c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ca8  08009ca8  0000aca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009cac  08009cac  0000acac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c0  20000000  08009cb0  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b0c0  2**0
                  CONTENTS
 10 .bss          000007dc  200000c0  200000c0  0000b0c0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000089c  2000089c  0000b0c0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b0c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013933  00000000  00000000  0000b0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000311d  00000000  00000000  0001ea23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f28  00000000  00000000  00021b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b4b  00000000  00000000  00022a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023d74  00000000  00000000  000235b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013f57  00000000  00000000  00047327  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dbe7e  00000000  00000000  0005b27e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000bc  00000000  00000000  001370fc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000049c4  00000000  00000000  001371b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000075  00000000  00000000  0013bb7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00001e7a  00000000  00000000  0013bbf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000060  00000000  00000000  0013da6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c0 	.word	0x200000c0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080099f0 	.word	0x080099f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000c4 	.word	0x200000c4
 80001cc:	080099f0 	.word	0x080099f0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f78:	b5b0      	push	{r4, r5, r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f7c:	f001 ff9a 	bl	8002eb4 <HAL_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  //SystemClock_Config();
  Clock_init();
 8000f80:	f000 ff9c 	bl	8001ebc <Clock_init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */

  Motor_init();
 8000f84:	f001 f804 	bl	8001f90 <Motor_init>
  Sensor_init();
 8000f88:	f001 f928 	bl	80021dc <Sensor_init>
  Lcd_init();
 8000f8c:	f000 fe1c 	bl	8001bc8 <Lcd_init>

#ifdef KALMAN_FILTER
  init_matrix();
 8000f90:	f000 fa82 	bl	8001498 <init_matrix>
#endif

  // Lcd begining
  Lcd_clear();
 8000f94:	f000 fed6 	bl	8001d44 <Lcd_clear>
  Lcd_cursor(0,0);
 8000f98:	2100      	movs	r1, #0
 8000f9a:	2000      	movs	r0, #0
 8000f9c:	f000 feb8 	bl	8001d10 <Lcd_cursor>
  Lcd_string("Starting...");
 8000fa0:	48c3      	ldr	r0, [pc, #780]	@ (80012b0 <main+0x338>)
 8000fa2:	f000 fe97 	bl	8001cd4 <Lcd_string>

  HAL_Delay(3000);
 8000fa6:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000faa:	f001 fff5 	bl	8002f98 <HAL_Delay>

  Lcd_clear();
 8000fae:	f000 fec9 	bl	8001d44 <Lcd_clear>

  ADC_init_PotOffset();
 8000fb2:	f001 f9bf 	bl	8002334 <ADC_init_PotOffset>

#ifdef LEAD_PHASE_CTRL
  c1 = Ts + 2*t_ldc;
 8000fb6:	eddf 7abf 	vldr	s15, [pc, #764]	@ 80012b4 <main+0x33c>
 8000fba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000fbe:	ed9f 7abe 	vldr	s14, [pc, #760]	@ 80012b8 <main+0x340>
 8000fc2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000fc6:	ee17 0a90 	vmov	r0, s15
 8000fca:	f7ff fabd 	bl	8000548 <__aeabi_f2d>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	49ba      	ldr	r1, [pc, #744]	@ (80012bc <main+0x344>)
 8000fd4:	e9c1 2300 	strd	r2, r3, [r1]
  c2 = Ts - 2*t_ldc;
 8000fd8:	ed9f 7ab7 	vldr	s14, [pc, #732]	@ 80012b8 <main+0x340>
 8000fdc:	eddf 7ab5 	vldr	s15, [pc, #724]	@ 80012b4 <main+0x33c>
 8000fe0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000fe4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fe8:	ee17 0a90 	vmov	r0, s15
 8000fec:	f7ff faac 	bl	8000548 <__aeabi_f2d>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	49b2      	ldr	r1, [pc, #712]	@ (80012c0 <main+0x348>)
 8000ff6:	e9c1 2300 	strd	r2, r3, [r1]
  c3 = Ts + 2*a_ldc*t_ldc;
 8000ffa:	eddf 7ab2 	vldr	s15, [pc, #712]	@ 80012c4 <main+0x34c>
 8000ffe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001002:	ed9f 7aac 	vldr	s14, [pc, #688]	@ 80012b4 <main+0x33c>
 8001006:	ee67 7a87 	vmul.f32	s15, s15, s14
 800100a:	ed9f 7aab 	vldr	s14, [pc, #684]	@ 80012b8 <main+0x340>
 800100e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001012:	ee17 0a90 	vmov	r0, s15
 8001016:	f7ff fa97 	bl	8000548 <__aeabi_f2d>
 800101a:	4602      	mov	r2, r0
 800101c:	460b      	mov	r3, r1
 800101e:	49aa      	ldr	r1, [pc, #680]	@ (80012c8 <main+0x350>)
 8001020:	e9c1 2300 	strd	r2, r3, [r1]
  c4 = Ts - 2*a_ldc*t_ldc;
 8001024:	ed9f 7aa4 	vldr	s14, [pc, #656]	@ 80012b8 <main+0x340>
 8001028:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 80012c4 <main+0x34c>
 800102c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001030:	eddf 6aa0 	vldr	s13, [pc, #640]	@ 80012b4 <main+0x33c>
 8001034:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001038:	ee77 7a67 	vsub.f32	s15, s14, s15
 800103c:	ee17 0a90 	vmov	r0, s15
 8001040:	f7ff fa82 	bl	8000548 <__aeabi_f2d>
 8001044:	4602      	mov	r2, r0
 8001046:	460b      	mov	r3, r1
 8001048:	49a0      	ldr	r1, [pc, #640]	@ (80012cc <main+0x354>)
 800104a:	e9c1 2300 	strd	r2, r3, [r1]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // Measurements //
	  theta_measure = Sensor_GetAngle();
 800104e:	f001 f8cd 	bl	80021ec <Sensor_GetAngle>
 8001052:	eeb0 7a40 	vmov.f32	s14, s0
 8001056:	eef0 7a60 	vmov.f32	s15, s1
 800105a:	4b9d      	ldr	r3, [pc, #628]	@ (80012d0 <main+0x358>)
 800105c:	ed83 7b00 	vstr	d7, [r3]
	  theta_dot_measure = Sensor_GetGyro() * deg_to_rad; // unit : [deg/s] ? -> to convert
 8001060:	f001 f8d2 	bl	8002208 <Sensor_GetGyro>
 8001064:	ec55 4b10 	vmov	r4, r5, d0
 8001068:	4b9a      	ldr	r3, [pc, #616]	@ (80012d4 <main+0x35c>)
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff fa6c 	bl	8000548 <__aeabi_f2d>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	4620      	mov	r0, r4
 8001076:	4629      	mov	r1, r5
 8001078:	f7ff fabe 	bl	80005f8 <__aeabi_dmul>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	4995      	ldr	r1, [pc, #596]	@ (80012d8 <main+0x360>)
 8001082:	e9c1 2300 	strd	r2, r3, [r1]

	  // Retrieve the estimation from the EKF //
#ifdef KALMAN_FILTER
#ifdef DEBUG_ELAPSED_TIME
	  elapsed_1 = HAL_GetTick();
 8001086:	f001 ff7b 	bl	8002f80 <HAL_GetTick>
 800108a:	4603      	mov	r3, r0
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff fa39 	bl	8000504 <__aeabi_ui2d>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	4991      	ldr	r1, [pc, #580]	@ (80012dc <main+0x364>)
 8001098:	e9c1 2300 	strd	r2, r3, [r1]
#endif
	  kalman_estimation(thrust, theta_measure, theta_dot_measure);
 800109c:	4b90      	ldr	r3, [pc, #576]	@ (80012e0 <main+0x368>)
 800109e:	ed93 7b00 	vldr	d7, [r3]
 80010a2:	4b8b      	ldr	r3, [pc, #556]	@ (80012d0 <main+0x358>)
 80010a4:	ed93 6b00 	vldr	d6, [r3]
 80010a8:	4b8b      	ldr	r3, [pc, #556]	@ (80012d8 <main+0x360>)
 80010aa:	ed93 5b00 	vldr	d5, [r3]
 80010ae:	eeb0 2a45 	vmov.f32	s4, s10
 80010b2:	eef0 2a65 	vmov.f32	s5, s11
 80010b6:	eeb0 1a46 	vmov.f32	s2, s12
 80010ba:	eef0 1a66 	vmov.f32	s3, s13
 80010be:	eeb0 0a47 	vmov.f32	s0, s14
 80010c2:	eef0 0a67 	vmov.f32	s1, s15
 80010c6:	f000 fb13 	bl	80016f0 <kalman_estimation>

	  theta_est = m_X_est.pData[0];
 80010ca:	4b86      	ldr	r3, [pc, #536]	@ (80012e4 <main+0x36c>)
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a85      	ldr	r2, [pc, #532]	@ (80012e8 <main+0x370>)
 80010d2:	6013      	str	r3, [r2, #0]
	  theta_dot_est = m_X_est.pData[1];
 80010d4:	4b83      	ldr	r3, [pc, #524]	@ (80012e4 <main+0x36c>)
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	4a84      	ldr	r2, [pc, #528]	@ (80012ec <main+0x374>)
 80010dc:	6013      	str	r3, [r2, #0]

#ifdef DEBUG_ELAPSED_TIME
	  elapsed_2 = HAL_GetTick() - elapsed_1;
 80010de:	f001 ff4f 	bl	8002f80 <HAL_GetTick>
 80010e2:	4603      	mov	r3, r0
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff fa0d 	bl	8000504 <__aeabi_ui2d>
 80010ea:	4b7c      	ldr	r3, [pc, #496]	@ (80012dc <main+0x364>)
 80010ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f0:	f7ff f8ca 	bl	8000288 <__aeabi_dsub>
 80010f4:	4602      	mov	r2, r0
 80010f6:	460b      	mov	r3, r1
 80010f8:	497d      	ldr	r1, [pc, #500]	@ (80012f0 <main+0x378>)
 80010fa:	e9c1 2300 	strd	r2, r3, [r1]
#endif

#endif
	  // Error evaluation //
	  theta_error = theta_target - theta_measure;
 80010fe:	4b7d      	ldr	r3, [pc, #500]	@ (80012f4 <main+0x37c>)
 8001100:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001104:	4b72      	ldr	r3, [pc, #456]	@ (80012d0 <main+0x358>)
 8001106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110a:	f7ff f8bd 	bl	8000288 <__aeabi_dsub>
 800110e:	4602      	mov	r2, r0
 8001110:	460b      	mov	r3, r1
 8001112:	4979      	ldr	r1, [pc, #484]	@ (80012f8 <main+0x380>)
 8001114:	e9c1 2300 	strd	r2, r3, [r1]
	  //theta_error = theta_target - theta_est;

	  // Plant linearisation //
	  thrust = distOG*mass_arm_prop*gravity*sin(theta_measure)/L;
 8001118:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 80012fc <main+0x384>
 800111c:	eddf 7a78 	vldr	s15, [pc, #480]	@ 8001300 <main+0x388>
 8001120:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001124:	ed9f 7a77 	vldr	s14, [pc, #476]	@ 8001304 <main+0x38c>
 8001128:	ee67 7a87 	vmul.f32	s15, s15, s14
 800112c:	ee17 0a90 	vmov	r0, s15
 8001130:	f7ff fa0a 	bl	8000548 <__aeabi_f2d>
 8001134:	4604      	mov	r4, r0
 8001136:	460d      	mov	r5, r1
 8001138:	4b65      	ldr	r3, [pc, #404]	@ (80012d0 <main+0x358>)
 800113a:	ed93 7b00 	vldr	d7, [r3]
 800113e:	eeb0 0a47 	vmov.f32	s0, s14
 8001142:	eef0 0a67 	vmov.f32	s1, s15
 8001146:	f006 fdbb 	bl	8007cc0 <sin>
 800114a:	ec53 2b10 	vmov	r2, r3, d0
 800114e:	4620      	mov	r0, r4
 8001150:	4629      	mov	r1, r5
 8001152:	f7ff fa51 	bl	80005f8 <__aeabi_dmul>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	4614      	mov	r4, r2
 800115c:	461d      	mov	r5, r3
 800115e:	4b6a      	ldr	r3, [pc, #424]	@ (8001308 <main+0x390>)
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff f9f1 	bl	8000548 <__aeabi_f2d>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	4620      	mov	r0, r4
 800116c:	4629      	mov	r1, r5
 800116e:	f7ff fb6d 	bl	800084c <__aeabi_ddiv>
 8001172:	4602      	mov	r2, r0
 8001174:	460b      	mov	r3, r1
 8001176:	495a      	ldr	r1, [pc, #360]	@ (80012e0 <main+0x368>)
 8001178:	e9c1 2300 	strd	r2, r3, [r1]

#ifdef LEAD_PHASE_CTRL
	  // Update input and compute output //
	  input_ldc[1] = theta_error;
 800117c:	4b5e      	ldr	r3, [pc, #376]	@ (80012f8 <main+0x380>)
 800117e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001182:	4962      	ldr	r1, [pc, #392]	@ (800130c <main+0x394>)
 8001184:	e9c1 2302 	strd	r2, r3, [r1, #8]
	  output_ldc[1] = (input_ldc[1] * c3 + input_ldc[0] * c4 - output_ldc[0] * c2)/c1;
 8001188:	4b60      	ldr	r3, [pc, #384]	@ (800130c <main+0x394>)
 800118a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800118e:	4b4e      	ldr	r3, [pc, #312]	@ (80012c8 <main+0x350>)
 8001190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001194:	f7ff fa30 	bl	80005f8 <__aeabi_dmul>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	4614      	mov	r4, r2
 800119e:	461d      	mov	r5, r3
 80011a0:	4b5a      	ldr	r3, [pc, #360]	@ (800130c <main+0x394>)
 80011a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011a6:	4b49      	ldr	r3, [pc, #292]	@ (80012cc <main+0x354>)
 80011a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ac:	f7ff fa24 	bl	80005f8 <__aeabi_dmul>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	4620      	mov	r0, r4
 80011b6:	4629      	mov	r1, r5
 80011b8:	f7ff f868 	bl	800028c <__adddf3>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4614      	mov	r4, r2
 80011c2:	461d      	mov	r5, r3
 80011c4:	4b52      	ldr	r3, [pc, #328]	@ (8001310 <main+0x398>)
 80011c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011ca:	4b3d      	ldr	r3, [pc, #244]	@ (80012c0 <main+0x348>)
 80011cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d0:	f7ff fa12 	bl	80005f8 <__aeabi_dmul>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	4620      	mov	r0, r4
 80011da:	4629      	mov	r1, r5
 80011dc:	f7ff f854 	bl	8000288 <__aeabi_dsub>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	4610      	mov	r0, r2
 80011e6:	4619      	mov	r1, r3
 80011e8:	4b34      	ldr	r3, [pc, #208]	@ (80012bc <main+0x344>)
 80011ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ee:	f7ff fb2d 	bl	800084c <__aeabi_ddiv>
 80011f2:	4602      	mov	r2, r0
 80011f4:	460b      	mov	r3, r1
 80011f6:	4946      	ldr	r1, [pc, #280]	@ (8001310 <main+0x398>)
 80011f8:	e9c1 2302 	strd	r2, r3, [r1, #8]

	  // Correction of the thrust //
	  thrust += output_ldc[1];
 80011fc:	4b44      	ldr	r3, [pc, #272]	@ (8001310 <main+0x398>)
 80011fe:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001202:	4b37      	ldr	r3, [pc, #220]	@ (80012e0 <main+0x368>)
 8001204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001208:	f7ff f840 	bl	800028c <__adddf3>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4933      	ldr	r1, [pc, #204]	@ (80012e0 <main+0x368>)
 8001212:	e9c1 2300 	strd	r2, r3, [r1]

	  // Shift the in/out //
	  input_ldc[0] = input_ldc[1];
 8001216:	4b3d      	ldr	r3, [pc, #244]	@ (800130c <main+0x394>)
 8001218:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800121c:	493b      	ldr	r1, [pc, #236]	@ (800130c <main+0x394>)
 800121e:	e9c1 2300 	strd	r2, r3, [r1]
	  output_ldc[0] = output_ldc[1];
 8001222:	4b3b      	ldr	r3, [pc, #236]	@ (8001310 <main+0x398>)
 8001224:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001228:	4939      	ldr	r1, [pc, #228]	@ (8001310 <main+0x398>)
 800122a:	e9c1 2300 	strd	r2, r3, [r1]
	  // Sensor-feed controller //
	  thrust += K_dot_theta *( K_theta * theta_error - theta_dot_measure);
#endif

	  // Bound the thrust to its caracteristics //
	  thrust = min_max(thrust,0,2.76);
 800122e:	4b2c      	ldr	r3, [pc, #176]	@ (80012e0 <main+0x368>)
 8001230:	ed93 7b00 	vldr	d7, [r3]
 8001234:	ed9f 2b1a 	vldr	d2, [pc, #104]	@ 80012a0 <main+0x328>
 8001238:	ed9f 1b1b 	vldr	d1, [pc, #108]	@ 80012a8 <main+0x330>
 800123c:	eeb0 0a47 	vmov.f32	s0, s14
 8001240:	eef0 0a67 	vmov.f32	s1, s15
 8001244:	f000 f8c8 	bl	80013d8 <min_max>
 8001248:	eeb0 7a40 	vmov.f32	s14, s0
 800124c:	eef0 7a60 	vmov.f32	s15, s1
 8001250:	4b23      	ldr	r3, [pc, #140]	@ (80012e0 <main+0x368>)
 8001252:	ed83 7b00 	vstr	d7, [r3]

	  // Set the corresponding PWM //
	  Pwm_ctrl = thrust_to_PWM(thrust);
 8001256:	4b22      	ldr	r3, [pc, #136]	@ (80012e0 <main+0x368>)
 8001258:	ed93 7b00 	vldr	d7, [r3]
 800125c:	eeb0 0a47 	vmov.f32	s0, s14
 8001260:	eef0 0a67 	vmov.f32	s1, s15
 8001264:	f000 f8e4 	bl	8001430 <thrust_to_PWM>
 8001268:	eeb0 7a40 	vmov.f32	s14, s0
 800126c:	eef0 7a60 	vmov.f32	s15, s1
 8001270:	4b28      	ldr	r3, [pc, #160]	@ (8001314 <main+0x39c>)
 8001272:	ed83 7b00 	vstr	d7, [r3]
	  Motor_SetTime(Pwm_ctrl);
 8001276:	4b27      	ldr	r3, [pc, #156]	@ (8001314 <main+0x39c>)
 8001278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127c:	4610      	mov	r0, r2
 800127e:	4619      	mov	r1, r3
 8001280:	f7ff fc92 	bl	8000ba8 <__aeabi_d2uiz>
 8001284:	4603      	mov	r3, r0
 8001286:	b29b      	uxth	r3, r3
 8001288:	4618      	mov	r0, r3
 800128a:	f000 fdfd 	bl	8001e88 <Motor_SetTime>

	  // Display the estimates (in degrees)
#ifdef KALMAN_FILTER
	  theta_est_deg = theta_est * rad_to_deg;
 800128e:	4b16      	ldr	r3, [pc, #88]	@ (80012e8 <main+0x370>)
 8001290:	edd3 7a00 	vldr	s15, [r3]
 8001294:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8001318 <main+0x3a0>
 8001298:	ee67 7a87 	vmul.f32	s15, s15, s14
 800129c:	e03e      	b.n	800131c <main+0x3a4>
 800129e:	bf00      	nop
 80012a0:	e147ae14 	.word	0xe147ae14
 80012a4:	4006147a 	.word	0x4006147a
	...
 80012b0:	08009a08 	.word	0x08009a08
 80012b4:	3da28241 	.word	0x3da28241
 80012b8:	3c23d70a 	.word	0x3c23d70a
 80012bc:	20000108 	.word	0x20000108
 80012c0:	20000110 	.word	0x20000110
 80012c4:	40ba7efa 	.word	0x40ba7efa
 80012c8:	20000118 	.word	0x20000118
 80012cc:	20000120 	.word	0x20000120
 80012d0:	200000e0 	.word	0x200000e0
 80012d4:	3c8efa35 	.word	0x3c8efa35
 80012d8:	200000e8 	.word	0x200000e8
 80012dc:	20000148 	.word	0x20000148
 80012e0:	20000100 	.word	0x20000100
 80012e4:	20000224 	.word	0x20000224
 80012e8:	20000158 	.word	0x20000158
 80012ec:	2000015c 	.word	0x2000015c
 80012f0:	20000150 	.word	0x20000150
 80012f4:	20000000 	.word	0x20000000
 80012f8:	200000f0 	.word	0x200000f0
 80012fc:	3ec28f5c 	.word	0x3ec28f5c
 8001300:	3e75c28f 	.word	0x3e75c28f
 8001304:	411cf5c3 	.word	0x411cf5c3
 8001308:	3f266666 	.word	0x3f266666
 800130c:	20000138 	.word	0x20000138
 8001310:	20000128 	.word	0x20000128
 8001314:	200000f8 	.word	0x200000f8
 8001318:	42652ee1 	.word	0x42652ee1
 800131c:	4b25      	ldr	r3, [pc, #148]	@ (80013b4 <main+0x43c>)
 800131e:	edc3 7a00 	vstr	s15, [r3]
	  theta_dot_est_deg = theta_dot_est * rad_to_deg;
 8001322:	4b25      	ldr	r3, [pc, #148]	@ (80013b8 <main+0x440>)
 8001324:	edd3 7a00 	vldr	s15, [r3]
 8001328:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 80013bc <main+0x444>
 800132c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001330:	4b23      	ldr	r3, [pc, #140]	@ (80013c0 <main+0x448>)
 8001332:	edc3 7a00 	vstr	s15, [r3]
	  Lcd_cursor(0,0);
 8001336:	2100      	movs	r1, #0
 8001338:	2000      	movs	r0, #0
 800133a:	f000 fce9 	bl	8001d10 <Lcd_cursor>
	  Lcd_string("Pos est : ");
 800133e:	4821      	ldr	r0, [pc, #132]	@ (80013c4 <main+0x44c>)
 8001340:	f000 fcc8 	bl	8001cd4 <Lcd_string>
	  Lcd_cursor(0,11);
 8001344:	210b      	movs	r1, #11
 8001346:	2000      	movs	r0, #0
 8001348:	f000 fce2 	bl	8001d10 <Lcd_cursor>
	  Lcd_int(theta_est_deg);
 800134c:	4b19      	ldr	r3, [pc, #100]	@ (80013b4 <main+0x43c>)
 800134e:	edd3 7a00 	vldr	s15, [r3]
 8001352:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001356:	ee17 0a90 	vmov	r0, s15
 800135a:	f000 fca5 	bl	8001ca8 <Lcd_int>
	  Lcd_string("   ");
 800135e:	481a      	ldr	r0, [pc, #104]	@ (80013c8 <main+0x450>)
 8001360:	f000 fcb8 	bl	8001cd4 <Lcd_string>

	  Lcd_cursor(1,0);
 8001364:	2100      	movs	r1, #0
 8001366:	2001      	movs	r0, #1
 8001368:	f000 fcd2 	bl	8001d10 <Lcd_cursor>
	  Lcd_string("Vel est : ");
 800136c:	4817      	ldr	r0, [pc, #92]	@ (80013cc <main+0x454>)
 800136e:	f000 fcb1 	bl	8001cd4 <Lcd_string>
	  Lcd_cursor(1,11);
 8001372:	210b      	movs	r1, #11
 8001374:	2001      	movs	r0, #1
 8001376:	f000 fccb 	bl	8001d10 <Lcd_cursor>
	  Lcd_int(theta_dot_est_deg);
 800137a:	4b11      	ldr	r3, [pc, #68]	@ (80013c0 <main+0x448>)
 800137c:	edd3 7a00 	vldr	s15, [r3]
 8001380:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001384:	ee17 0a90 	vmov	r0, s15
 8001388:	f000 fc8e 	bl	8001ca8 <Lcd_int>
	  Lcd_string("   ");
 800138c:	480e      	ldr	r0, [pc, #56]	@ (80013c8 <main+0x450>)
 800138e:	f000 fca1 	bl	8001cd4 <Lcd_string>
#endif
	  // Create a fixed-loop execution //
	  Wait_Until(Ts * 1000);
 8001392:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80013d0 <main+0x458>
 8001396:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 80013d4 <main+0x45c>
 800139a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800139e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013a2:	ee17 3a90 	vmov	r3, s15
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	4618      	mov	r0, r3
 80013aa:	f000 fecd 	bl	8002148 <Wait_Until>
	  theta_measure = Sensor_GetAngle();
 80013ae:	bf00      	nop
 80013b0:	e64d      	b.n	800104e <main+0xd6>
 80013b2:	bf00      	nop
 80013b4:	20000160 	.word	0x20000160
 80013b8:	2000015c 	.word	0x2000015c
 80013bc:	42652ee1 	.word	0x42652ee1
 80013c0:	20000164 	.word	0x20000164
 80013c4:	08009a14 	.word	0x08009a14
 80013c8:	08009a20 	.word	0x08009a20
 80013cc:	08009a24 	.word	0x08009a24
 80013d0:	3c23d70a 	.word	0x3c23d70a
 80013d4:	447a0000 	.word	0x447a0000

080013d8 <min_max>:
double map(double val, double min_in, double max_in, double min_out, double max_out){
	 return (val - min_in) * (max_out - min_out) / (max_in - min_in) + min_out;

}

double min_max(double val, double min, double max){
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	ed87 0b04 	vstr	d0, [r7, #16]
 80013e2:	ed87 1b02 	vstr	d1, [r7, #8]
 80013e6:	ed87 2b00 	vstr	d2, [r7]
	if (val > max){
 80013ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80013ee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013f2:	f7ff fb91 	bl	8000b18 <__aeabi_dcmpgt>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d002      	beq.n	8001402 <min_max+0x2a>
		return max;
 80013fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001400:	e00d      	b.n	800141e <min_max+0x46>
	}
	if (val < min){
 8001402:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001406:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800140a:	f7ff fb67 	bl	8000adc <__aeabi_dcmplt>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d002      	beq.n	800141a <min_max+0x42>
		return min;
 8001414:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001418:	e001      	b.n	800141e <min_max+0x46>
	}
	else{
		return val;
 800141a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
	}

}
 800141e:	ec43 2b17 	vmov	d7, r2, r3
 8001422:	eeb0 0a47 	vmov.f32	s0, s14
 8001426:	eef0 0a67 	vmov.f32	s1, s15
 800142a:	3718      	adds	r7, #24
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <thrust_to_PWM>:
/*
 * Returns the appropriate PWM length to attain the given thrust
 * */
double thrust_to_PWM(double thrust){
 8001430:	b5b0      	push	{r4, r5, r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	ed87 0b00 	vstr	d0, [r7]
	return T_pwm_offset + sqrt(thrust / alpha_pwm);
 800143a:	4b15      	ldr	r3, [pc, #84]	@ (8001490 <thrust_to_PWM+0x60>)
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff f883 	bl	8000548 <__aeabi_f2d>
 8001442:	4604      	mov	r4, r0
 8001444:	460d      	mov	r5, r1
 8001446:	4b13      	ldr	r3, [pc, #76]	@ (8001494 <thrust_to_PWM+0x64>)
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff f87d 	bl	8000548 <__aeabi_f2d>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001456:	f7ff f9f9 	bl	800084c <__aeabi_ddiv>
 800145a:	4602      	mov	r2, r0
 800145c:	460b      	mov	r3, r1
 800145e:	ec43 2b17 	vmov	d7, r2, r3
 8001462:	eeb0 0a47 	vmov.f32	s0, s14
 8001466:	eef0 0a67 	vmov.f32	s1, s15
 800146a:	f006 fba9 	bl	8007bc0 <sqrt>
 800146e:	ec53 2b10 	vmov	r2, r3, d0
 8001472:	4620      	mov	r0, r4
 8001474:	4629      	mov	r1, r5
 8001476:	f7fe ff09 	bl	800028c <__adddf3>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001482:	eeb0 0a47 	vmov.f32	s0, s14
 8001486:	eef0 0a67 	vmov.f32	s1, s15
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bdb0      	pop	{r4, r5, r7, pc}
 8001490:	44898000 	.word	0x44898000
 8001494:	373148eb 	.word	0x373148eb

08001498 <init_matrix>:
#ifdef KALMAN_FILTER

/*
 * Initializes all the matrix for the EKF.
 */
void init_matrix(){
 8001498:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800149c:	af00      	add	r7, sp, #0

	phi[0] = 1;
 800149e:	4b6a      	ldr	r3, [pc, #424]	@ (8001648 <init_matrix+0x1b0>)
 80014a0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80014a4:	601a      	str	r2, [r3, #0]
	phi[1] = Ts;
 80014a6:	4a69      	ldr	r2, [pc, #420]	@ (800164c <init_matrix+0x1b4>)
 80014a8:	4b67      	ldr	r3, [pc, #412]	@ (8001648 <init_matrix+0x1b0>)
 80014aa:	605a      	str	r2, [r3, #4]
	phi[3] = 1;
 80014ac:	4b66      	ldr	r3, [pc, #408]	@ (8001648 <init_matrix+0x1b0>)
 80014ae:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80014b2:	60da      	str	r2, [r3, #12]
	arm_mat_init_f32(&m_phi, ROW_2, COL_2, phi);
 80014b4:	4b64      	ldr	r3, [pc, #400]	@ (8001648 <init_matrix+0x1b0>)
 80014b6:	2202      	movs	r2, #2
 80014b8:	2102      	movs	r1, #2
 80014ba:	4865      	ldr	r0, [pc, #404]	@ (8001650 <init_matrix+0x1b8>)
 80014bc:	f005 fe00 	bl	80070c0 <arm_mat_init_f32>

	arm_mat_init_f32(&m_X_est, ROW_2, COL_1, X_est);
 80014c0:	4b64      	ldr	r3, [pc, #400]	@ (8001654 <init_matrix+0x1bc>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	2102      	movs	r1, #2
 80014c6:	4864      	ldr	r0, [pc, #400]	@ (8001658 <init_matrix+0x1c0>)
 80014c8:	f005 fdfa 	bl	80070c0 <arm_mat_init_f32>
	arm_mat_init_f32(&m_X_proj, ROW_2, COL_1, X_proj);
 80014cc:	4b63      	ldr	r3, [pc, #396]	@ (800165c <init_matrix+0x1c4>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	2102      	movs	r1, #2
 80014d2:	4863      	ldr	r0, [pc, #396]	@ (8001660 <init_matrix+0x1c8>)
 80014d4:	f005 fdf4 	bl	80070c0 <arm_mat_init_f32>
	arm_mat_init_f32(&m_Yk, ROW_2, COL_1, Yk);
 80014d8:	4b62      	ldr	r3, [pc, #392]	@ (8001664 <init_matrix+0x1cc>)
 80014da:	2201      	movs	r2, #1
 80014dc:	2102      	movs	r1, #2
 80014de:	4862      	ldr	r0, [pc, #392]	@ (8001668 <init_matrix+0x1d0>)
 80014e0:	f005 fdee 	bl	80070c0 <arm_mat_init_f32>
	arm_mat_init_f32(&m_Uk, COL_1, COL_1, Uk);
 80014e4:	4b61      	ldr	r3, [pc, #388]	@ (800166c <init_matrix+0x1d4>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	2101      	movs	r1, #1
 80014ea:	4861      	ldr	r0, [pc, #388]	@ (8001670 <init_matrix+0x1d8>)
 80014ec:	f005 fde8 	bl	80070c0 <arm_mat_init_f32>
	arm_mat_init_f32(&m_Rk, ROW_2, COL_2, Rk);
 80014f0:	4b60      	ldr	r3, [pc, #384]	@ (8001674 <init_matrix+0x1dc>)
 80014f2:	2202      	movs	r2, #2
 80014f4:	2102      	movs	r1, #2
 80014f6:	4860      	ldr	r0, [pc, #384]	@ (8001678 <init_matrix+0x1e0>)
 80014f8:	f005 fde2 	bl	80070c0 <arm_mat_init_f32>
	arm_mat_init_f32(&m_Hk, ROW_2, COL_2, Hk);
 80014fc:	4b5f      	ldr	r3, [pc, #380]	@ (800167c <init_matrix+0x1e4>)
 80014fe:	2202      	movs	r2, #2
 8001500:	2102      	movs	r1, #2
 8001502:	485f      	ldr	r0, [pc, #380]	@ (8001680 <init_matrix+0x1e8>)
 8001504:	f005 fddc 	bl	80070c0 <arm_mat_init_f32>

	Qk[0] = gam * (Ts + pow(Ts,3)/3);
 8001508:	4b5e      	ldr	r3, [pc, #376]	@ (8001684 <init_matrix+0x1ec>)
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff f81c 	bl	8000548 <__aeabi_f2d>
 8001510:	4604      	mov	r4, r0
 8001512:	460d      	mov	r5, r1
 8001514:	4b4d      	ldr	r3, [pc, #308]	@ (800164c <init_matrix+0x1b4>)
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff f816 	bl	8000548 <__aeabi_f2d>
 800151c:	4680      	mov	r8, r0
 800151e:	4689      	mov	r9, r1
 8001520:	4b4a      	ldr	r3, [pc, #296]	@ (800164c <init_matrix+0x1b4>)
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff f810 	bl	8000548 <__aeabi_f2d>
 8001528:	4602      	mov	r2, r0
 800152a:	460b      	mov	r3, r1
 800152c:	ed9f 1b44 	vldr	d1, [pc, #272]	@ 8001640 <init_matrix+0x1a8>
 8001530:	ec43 2b10 	vmov	d0, r2, r3
 8001534:	f006 fad4 	bl	8007ae0 <pow>
 8001538:	ec51 0b10 	vmov	r0, r1, d0
 800153c:	f04f 0200 	mov.w	r2, #0
 8001540:	4b51      	ldr	r3, [pc, #324]	@ (8001688 <init_matrix+0x1f0>)
 8001542:	f7ff f983 	bl	800084c <__aeabi_ddiv>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	4640      	mov	r0, r8
 800154c:	4649      	mov	r1, r9
 800154e:	f7fe fe9d 	bl	800028c <__adddf3>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	4620      	mov	r0, r4
 8001558:	4629      	mov	r1, r5
 800155a:	f7ff f84d 	bl	80005f8 <__aeabi_dmul>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	4610      	mov	r0, r2
 8001564:	4619      	mov	r1, r3
 8001566:	f7ff fb3f 	bl	8000be8 <__aeabi_d2f>
 800156a:	4603      	mov	r3, r0
 800156c:	4a47      	ldr	r2, [pc, #284]	@ (800168c <init_matrix+0x1f4>)
 800156e:	6013      	str	r3, [r2, #0]
	arm_mat_init_f32(&m_Qk, ROW_2, COL_2, Qk);
 8001570:	4b46      	ldr	r3, [pc, #280]	@ (800168c <init_matrix+0x1f4>)
 8001572:	2202      	movs	r2, #2
 8001574:	2102      	movs	r1, #2
 8001576:	4846      	ldr	r0, [pc, #280]	@ (8001690 <init_matrix+0x1f8>)
 8001578:	f005 fda2 	bl	80070c0 <arm_mat_init_f32>

	Gk[0] = Ts*Ts*L /(2*Inertia_Jz);
 800157c:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8001694 <init_matrix+0x1fc>
 8001580:	eddf 7a44 	vldr	s15, [pc, #272]	@ 8001694 <init_matrix+0x1fc>
 8001584:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001588:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8001698 <init_matrix+0x200>
 800158c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001590:	eddf 7a42 	vldr	s15, [pc, #264]	@ 800169c <init_matrix+0x204>
 8001594:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001598:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800159c:	4b40      	ldr	r3, [pc, #256]	@ (80016a0 <init_matrix+0x208>)
 800159e:	edc3 7a00 	vstr	s15, [r3]
	Gk[1] = Ts*L/Inertia_Jz;
 80015a2:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8001694 <init_matrix+0x1fc>
 80015a6:	eddf 7a3c 	vldr	s15, [pc, #240]	@ 8001698 <init_matrix+0x200>
 80015aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015ae:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800169c <init_matrix+0x204>
 80015b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015b6:	4b3a      	ldr	r3, [pc, #232]	@ (80016a0 <init_matrix+0x208>)
 80015b8:	edc3 7a01 	vstr	s15, [r3, #4]
	arm_mat_init_f32(&m_Gk, ROW_2, COL_2, Gk);
 80015bc:	4b38      	ldr	r3, [pc, #224]	@ (80016a0 <init_matrix+0x208>)
 80015be:	2202      	movs	r2, #2
 80015c0:	2102      	movs	r1, #2
 80015c2:	4838      	ldr	r0, [pc, #224]	@ (80016a4 <init_matrix+0x20c>)
 80015c4:	f005 fd7c 	bl	80070c0 <arm_mat_init_f32>

	arm_mat_init_f32(&m_Eye_2, ROW_2, COL_2, Eye_2);
 80015c8:	4b37      	ldr	r3, [pc, #220]	@ (80016a8 <init_matrix+0x210>)
 80015ca:	2202      	movs	r2, #2
 80015cc:	2102      	movs	r1, #2
 80015ce:	4837      	ldr	r0, [pc, #220]	@ (80016ac <init_matrix+0x214>)
 80015d0:	f005 fd76 	bl	80070c0 <arm_mat_init_f32>
	arm_mat_init_f32(&m_Pk, ROW_2, COL_2, Pk);
 80015d4:	4b36      	ldr	r3, [pc, #216]	@ (80016b0 <init_matrix+0x218>)
 80015d6:	2202      	movs	r2, #2
 80015d8:	2102      	movs	r1, #2
 80015da:	4836      	ldr	r0, [pc, #216]	@ (80016b4 <init_matrix+0x21c>)
 80015dc:	f005 fd70 	bl	80070c0 <arm_mat_init_f32>
	arm_mat_init_f32(&m_P_proj, ROW_2, COL_2, P_proj);
 80015e0:	4b35      	ldr	r3, [pc, #212]	@ (80016b8 <init_matrix+0x220>)
 80015e2:	2202      	movs	r2, #2
 80015e4:	2102      	movs	r1, #2
 80015e6:	4835      	ldr	r0, [pc, #212]	@ (80016bc <init_matrix+0x224>)
 80015e8:	f005 fd6a 	bl	80070c0 <arm_mat_init_f32>
	arm_mat_init_f32(&m_Kk, ROW_2, COL_2, Kk);
 80015ec:	4b34      	ldr	r3, [pc, #208]	@ (80016c0 <init_matrix+0x228>)
 80015ee:	2202      	movs	r2, #2
 80015f0:	2102      	movs	r1, #2
 80015f2:	4834      	ldr	r0, [pc, #208]	@ (80016c4 <init_matrix+0x22c>)
 80015f4:	f005 fd64 	bl	80070c0 <arm_mat_init_f32>

	arm_mat_init_f32(&m_inter_1_2x2, ROW_2, COL_2, inter_1_2x2);
 80015f8:	4b33      	ldr	r3, [pc, #204]	@ (80016c8 <init_matrix+0x230>)
 80015fa:	2202      	movs	r2, #2
 80015fc:	2102      	movs	r1, #2
 80015fe:	4833      	ldr	r0, [pc, #204]	@ (80016cc <init_matrix+0x234>)
 8001600:	f005 fd5e 	bl	80070c0 <arm_mat_init_f32>
	arm_mat_init_f32(&m_inter_2_2x2, ROW_2, COL_2, inter_2_2x2);
 8001604:	4b32      	ldr	r3, [pc, #200]	@ (80016d0 <init_matrix+0x238>)
 8001606:	2202      	movs	r2, #2
 8001608:	2102      	movs	r1, #2
 800160a:	4832      	ldr	r0, [pc, #200]	@ (80016d4 <init_matrix+0x23c>)
 800160c:	f005 fd58 	bl	80070c0 <arm_mat_init_f32>
	arm_mat_init_f32(&m_inter_3_2x2, ROW_2, COL_2, inter_3_2x2);
 8001610:	4b31      	ldr	r3, [pc, #196]	@ (80016d8 <init_matrix+0x240>)
 8001612:	2202      	movs	r2, #2
 8001614:	2102      	movs	r1, #2
 8001616:	4831      	ldr	r0, [pc, #196]	@ (80016dc <init_matrix+0x244>)
 8001618:	f005 fd52 	bl	80070c0 <arm_mat_init_f32>
	arm_mat_init_f32(&m_inter_4_2x1, ROW_2, COL_1, inter_4_2x1);
 800161c:	4b30      	ldr	r3, [pc, #192]	@ (80016e0 <init_matrix+0x248>)
 800161e:	2201      	movs	r2, #1
 8001620:	2102      	movs	r1, #2
 8001622:	4830      	ldr	r0, [pc, #192]	@ (80016e4 <init_matrix+0x24c>)
 8001624:	f005 fd4c 	bl	80070c0 <arm_mat_init_f32>
	arm_mat_init_f32(&m_inter_5_2x1, ROW_2, COL_1, inter_5_2x1);
 8001628:	4b2f      	ldr	r3, [pc, #188]	@ (80016e8 <init_matrix+0x250>)
 800162a:	2201      	movs	r2, #1
 800162c:	2102      	movs	r1, #2
 800162e:	482f      	ldr	r0, [pc, #188]	@ (80016ec <init_matrix+0x254>)
 8001630:	f005 fd46 	bl	80070c0 <arm_mat_init_f32>
}
 8001634:	bf00      	nop
 8001636:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800163a:	bf00      	nop
 800163c:	f3af 8000 	nop.w
 8001640:	00000000 	.word	0x00000000
 8001644:	40080000 	.word	0x40080000
 8001648:	20000168 	.word	0x20000168
 800164c:	3c23d70a 	.word	0x3c23d70a
 8001650:	2000021c 	.word	0x2000021c
 8001654:	20000178 	.word	0x20000178
 8001658:	20000224 	.word	0x20000224
 800165c:	20000180 	.word	0x20000180
 8001660:	2000022c 	.word	0x2000022c
 8001664:	20000188 	.word	0x20000188
 8001668:	20000234 	.word	0x20000234
 800166c:	20000190 	.word	0x20000190
 8001670:	2000023c 	.word	0x2000023c
 8001674:	20000194 	.word	0x20000194
 8001678:	20000244 	.word	0x20000244
 800167c:	20000008 	.word	0x20000008
 8001680:	2000024c 	.word	0x2000024c
 8001684:	41200000 	.word	0x41200000
 8001688:	40080000 	.word	0x40080000
 800168c:	200001a4 	.word	0x200001a4
 8001690:	20000254 	.word	0x20000254
 8001694:	3c23d70a 	.word	0x3c23d70a
 8001698:	3f266666 	.word	0x3f266666
 800169c:	3d6bedfa 	.word	0x3d6bedfa
 80016a0:	200001b4 	.word	0x200001b4
 80016a4:	2000025c 	.word	0x2000025c
 80016a8:	20000018 	.word	0x20000018
 80016ac:	20000264 	.word	0x20000264
 80016b0:	200001bc 	.word	0x200001bc
 80016b4:	2000026c 	.word	0x2000026c
 80016b8:	20000028 	.word	0x20000028
 80016bc:	20000274 	.word	0x20000274
 80016c0:	200001cc 	.word	0x200001cc
 80016c4:	2000027c 	.word	0x2000027c
 80016c8:	200001dc 	.word	0x200001dc
 80016cc:	20000284 	.word	0x20000284
 80016d0:	200001ec 	.word	0x200001ec
 80016d4:	2000028c 	.word	0x2000028c
 80016d8:	200001fc 	.word	0x200001fc
 80016dc:	20000294 	.word	0x20000294
 80016e0:	2000020c 	.word	0x2000020c
 80016e4:	2000029c 	.word	0x2000029c
 80016e8:	20000214 	.word	0x20000214
 80016ec:	200002a4 	.word	0x200002a4

080016f0 <kalman_estimation>:
 * arm_mat_trans_f32(&src,&dst);
 * arm_mat_mult_f32(&srcA,&srcB,&dst);
 * arm_mat_inverse_f32(&src,&dst);
 *
 */
void kalman_estimation(double thrust, double pos_measure, double vel_measure){
 80016f0:	b5b0      	push	{r4, r5, r7, lr}
 80016f2:	b088      	sub	sp, #32
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	ed87 0b04 	vstr	d0, [r7, #16]
 80016fa:	ed87 1b02 	vstr	d1, [r7, #8]
 80016fe:	ed87 2b00 	vstr	d2, [r7]

	// Matrix Kk computation
	arm_mat_trans_f32(	&m_Hk,			&m_inter_1_2x2); 						// Hk^t  -> inter_1
 8001702:	49a3      	ldr	r1, [pc, #652]	@ (8001990 <kalman_estimation+0x2a0>)
 8001704:	48a3      	ldr	r0, [pc, #652]	@ (8001994 <kalman_estimation+0x2a4>)
 8001706:	f005 f989 	bl	8006a1c <arm_mat_trans_f32>
	arm_mat_mult_f32(	&m_P_proj,		&m_inter_1_2x2,		&m_inter_2_2x2);	// P_proj * Hk^t -> inter_3
 800170a:	4aa3      	ldr	r2, [pc, #652]	@ (8001998 <kalman_estimation+0x2a8>)
 800170c:	49a0      	ldr	r1, [pc, #640]	@ (8001990 <kalman_estimation+0x2a0>)
 800170e:	48a3      	ldr	r0, [pc, #652]	@ (800199c <kalman_estimation+0x2ac>)
 8001710:	f005 fa9a 	bl	8006c48 <arm_mat_mult_f32>
	arm_mat_mult_f32(	&m_Hk,			&m_inter_3_2x2,		&m_inter_1_2x2);	// Hk * P_proj * Hk^t -> inter_1
 8001714:	4a9e      	ldr	r2, [pc, #632]	@ (8001990 <kalman_estimation+0x2a0>)
 8001716:	49a2      	ldr	r1, [pc, #648]	@ (80019a0 <kalman_estimation+0x2b0>)
 8001718:	489e      	ldr	r0, [pc, #632]	@ (8001994 <kalman_estimation+0x2a4>)
 800171a:	f005 fa95 	bl	8006c48 <arm_mat_mult_f32>
	arm_mat_add_f32(	&m_inter_1_2x2,	&m_Rk,				&m_inter_2_2x2);	// Hk * P_proj * Hk^t + Rk -> inter_2
 800171e:	4a9e      	ldr	r2, [pc, #632]	@ (8001998 <kalman_estimation+0x2a8>)
 8001720:	49a0      	ldr	r1, [pc, #640]	@ (80019a4 <kalman_estimation+0x2b4>)
 8001722:	489b      	ldr	r0, [pc, #620]	@ (8001990 <kalman_estimation+0x2a0>)
 8001724:	f005 fcd0 	bl	80070c8 <arm_mat_add_f32>
	arm_mat_inverse_f32(	&m_inter_2_2x2,	&m_inter_1_2x2);					// [Hk * P_proj * Hk^t + Rk]^(-1) -> inter_1
 8001728:	4999      	ldr	r1, [pc, #612]	@ (8001990 <kalman_estimation+0x2a0>)
 800172a:	489b      	ldr	r0, [pc, #620]	@ (8001998 <kalman_estimation+0x2a8>)
 800172c:	f005 fb9c 	bl	8006e68 <arm_mat_inverse_f32>
	arm_mat_mult_f32(	&m_inter_3_2x2,	&m_inter_1_2x2,		&m_Kk);				// Kk = P_proj * Hk^t * [Hk * P_proj * Hk^t + Rk]^(-1)
 8001730:	4a9d      	ldr	r2, [pc, #628]	@ (80019a8 <kalman_estimation+0x2b8>)
 8001732:	4997      	ldr	r1, [pc, #604]	@ (8001990 <kalman_estimation+0x2a0>)
 8001734:	489a      	ldr	r0, [pc, #616]	@ (80019a0 <kalman_estimation+0x2b0>)
 8001736:	f005 fa87 	bl	8006c48 <arm_mat_mult_f32>

	// Matrix Pk computation
	arm_mat_mult_f32(	&m_Kk,			&m_Hk,			  	&m_inter_1_2x2);	// Kk * Hk -> inter_1
 800173a:	4a95      	ldr	r2, [pc, #596]	@ (8001990 <kalman_estimation+0x2a0>)
 800173c:	4995      	ldr	r1, [pc, #596]	@ (8001994 <kalman_estimation+0x2a4>)
 800173e:	489a      	ldr	r0, [pc, #616]	@ (80019a8 <kalman_estimation+0x2b8>)
 8001740:	f005 fa82 	bl	8006c48 <arm_mat_mult_f32>
	arm_mat_sub_f32(	&m_Eye_2,		&m_inter_1_2x2,		&m_inter_2_2x2);	// I2 - Kk * Hk -> inter_2
 8001744:	4a94      	ldr	r2, [pc, #592]	@ (8001998 <kalman_estimation+0x2a8>)
 8001746:	4992      	ldr	r1, [pc, #584]	@ (8001990 <kalman_estimation+0x2a0>)
 8001748:	4898      	ldr	r0, [pc, #608]	@ (80019ac <kalman_estimation+0x2bc>)
 800174a:	f005 fa11 	bl	8006b70 <arm_mat_sub_f32>
	arm_mat_mult_f32( 	&m_inter_2_2x2,	&m_P_proj,			&m_Pk);				// Pk = [I2 - Kk * Hk ] * P_proj
 800174e:	4a98      	ldr	r2, [pc, #608]	@ (80019b0 <kalman_estimation+0x2c0>)
 8001750:	4992      	ldr	r1, [pc, #584]	@ (800199c <kalman_estimation+0x2ac>)
 8001752:	4891      	ldr	r0, [pc, #580]	@ (8001998 <kalman_estimation+0x2a8>)
 8001754:	f005 fa78 	bl	8006c48 <arm_mat_mult_f32>

	// State vector estimate  X_est computation
	arm_mat_mult_f32(	&m_Hk,			&m_X_proj,			&m_inter_4_2x1);	// Hk * X_proj -> inter_4
 8001758:	4a96      	ldr	r2, [pc, #600]	@ (80019b4 <kalman_estimation+0x2c4>)
 800175a:	4997      	ldr	r1, [pc, #604]	@ (80019b8 <kalman_estimation+0x2c8>)
 800175c:	488d      	ldr	r0, [pc, #564]	@ (8001994 <kalman_estimation+0x2a4>)
 800175e:	f005 fa73 	bl	8006c48 <arm_mat_mult_f32>
	m_Yk.pData[0] = pos_measure;
 8001762:	4b96      	ldr	r3, [pc, #600]	@ (80019bc <kalman_estimation+0x2cc>)
 8001764:	685c      	ldr	r4, [r3, #4]
 8001766:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800176a:	f7ff fa3d 	bl	8000be8 <__aeabi_d2f>
 800176e:	4603      	mov	r3, r0
 8001770:	6023      	str	r3, [r4, #0]
	m_Yk.pData[1] = vel_measure;
 8001772:	4b92      	ldr	r3, [pc, #584]	@ (80019bc <kalman_estimation+0x2cc>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	1d1c      	adds	r4, r3, #4
 8001778:	e9d7 0100 	ldrd	r0, r1, [r7]
 800177c:	f7ff fa34 	bl	8000be8 <__aeabi_d2f>
 8001780:	4603      	mov	r3, r0
 8001782:	6023      	str	r3, [r4, #0]
	arm_mat_sub_f32(	&m_Yk,			&m_inter_4_2x1,		&m_inter_5_2x1); 	// Yk - Hk * X_proj -> inter_5
 8001784:	4a8e      	ldr	r2, [pc, #568]	@ (80019c0 <kalman_estimation+0x2d0>)
 8001786:	498b      	ldr	r1, [pc, #556]	@ (80019b4 <kalman_estimation+0x2c4>)
 8001788:	488c      	ldr	r0, [pc, #560]	@ (80019bc <kalman_estimation+0x2cc>)
 800178a:	f005 f9f1 	bl	8006b70 <arm_mat_sub_f32>
	arm_mat_mult_f32(	&m_Kk,			&m_inter_5_2x1,		&m_inter_4_2x1);	// Kk * [ Yk - Hk * X_proj ] -> inter_4
 800178e:	4a89      	ldr	r2, [pc, #548]	@ (80019b4 <kalman_estimation+0x2c4>)
 8001790:	498b      	ldr	r1, [pc, #556]	@ (80019c0 <kalman_estimation+0x2d0>)
 8001792:	4885      	ldr	r0, [pc, #532]	@ (80019a8 <kalman_estimation+0x2b8>)
 8001794:	f005 fa58 	bl	8006c48 <arm_mat_mult_f32>
	arm_mat_add_f32(	&m_X_proj,		&m_inter_4_2x1,		&m_X_est);			// X_est = X_proj +  Kk * [ Yk - Hk * X_proj ]
 8001798:	4a8a      	ldr	r2, [pc, #552]	@ (80019c4 <kalman_estimation+0x2d4>)
 800179a:	4986      	ldr	r1, [pc, #536]	@ (80019b4 <kalman_estimation+0x2c4>)
 800179c:	4886      	ldr	r0, [pc, #536]	@ (80019b8 <kalman_estimation+0x2c8>)
 800179e:	f005 fc93 	bl	80070c8 <arm_mat_add_f32>

	// Matrix phi computation
	float32_t Apf_update =  Apf * cos(pos_measure);
 80017a2:	4b89      	ldr	r3, [pc, #548]	@ (80019c8 <kalman_estimation+0x2d8>)
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7fe fecf 	bl	8000548 <__aeabi_f2d>
 80017aa:	4604      	mov	r4, r0
 80017ac:	460d      	mov	r5, r1
 80017ae:	ed97 0b02 	vldr	d0, [r7, #8]
 80017b2:	f006 fa31 	bl	8007c18 <cos>
 80017b6:	ec53 2b10 	vmov	r2, r3, d0
 80017ba:	4620      	mov	r0, r4
 80017bc:	4629      	mov	r1, r5
 80017be:	f7fe ff1b 	bl	80005f8 <__aeabi_dmul>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	4610      	mov	r0, r2
 80017c8:	4619      	mov	r1, r3
 80017ca:	f7ff fa0d 	bl	8000be8 <__aeabi_d2f>
 80017ce:	4603      	mov	r3, r0
 80017d0:	61fb      	str	r3, [r7, #28]
	m_phi.pData[2] = Ts * Apf_update;											// To complete the transition state matrix
 80017d2:	ed9f 7a7e 	vldr	s14, [pc, #504]	@ 80019cc <kalman_estimation+0x2dc>
 80017d6:	4b7e      	ldr	r3, [pc, #504]	@ (80019d0 <kalman_estimation+0x2e0>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	3308      	adds	r3, #8
 80017dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80017e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017e4:	edc3 7a00 	vstr	s15, [r3]

	// Matrix Qk computation
	m_Qk.pData[1] = Ts * Ts * (Apf_update + 1) * 0.5;
 80017e8:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 80019cc <kalman_estimation+0x2dc>
 80017ec:	eddf 7a77 	vldr	s15, [pc, #476]	@ 80019cc <kalman_estimation+0x2dc>
 80017f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017f4:	edd7 7a07 	vldr	s15, [r7, #28]
 80017f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80017fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001800:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001804:	4b73      	ldr	r3, [pc, #460]	@ (80019d4 <kalman_estimation+0x2e4>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	3304      	adds	r3, #4
 800180a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800180e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001812:	edc3 7a00 	vstr	s15, [r3]
	m_Qk.pData[2] = m_Qk.pData[1];
 8001816:	4b6f      	ldr	r3, [pc, #444]	@ (80019d4 <kalman_estimation+0x2e4>)
 8001818:	685a      	ldr	r2, [r3, #4]
 800181a:	4b6e      	ldr	r3, [pc, #440]	@ (80019d4 <kalman_estimation+0x2e4>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	3308      	adds	r3, #8
 8001820:	6852      	ldr	r2, [r2, #4]
 8001822:	601a      	str	r2, [r3, #0]
	m_Qk.pData[3] = pow(Ts,3) * Apf_update * Apf_update / 3 + Ts;
 8001824:	4b6c      	ldr	r3, [pc, #432]	@ (80019d8 <kalman_estimation+0x2e8>)
 8001826:	4618      	mov	r0, r3
 8001828:	f7fe fe8e 	bl	8000548 <__aeabi_f2d>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	ed9f 1b55 	vldr	d1, [pc, #340]	@ 8001988 <kalman_estimation+0x298>
 8001834:	ec43 2b10 	vmov	d0, r2, r3
 8001838:	f006 f952 	bl	8007ae0 <pow>
 800183c:	ec55 4b10 	vmov	r4, r5, d0
 8001840:	69f8      	ldr	r0, [r7, #28]
 8001842:	f7fe fe81 	bl	8000548 <__aeabi_f2d>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	4620      	mov	r0, r4
 800184c:	4629      	mov	r1, r5
 800184e:	f7fe fed3 	bl	80005f8 <__aeabi_dmul>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	4614      	mov	r4, r2
 8001858:	461d      	mov	r5, r3
 800185a:	69f8      	ldr	r0, [r7, #28]
 800185c:	f7fe fe74 	bl	8000548 <__aeabi_f2d>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	4620      	mov	r0, r4
 8001866:	4629      	mov	r1, r5
 8001868:	f7fe fec6 	bl	80005f8 <__aeabi_dmul>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	4610      	mov	r0, r2
 8001872:	4619      	mov	r1, r3
 8001874:	f04f 0200 	mov.w	r2, #0
 8001878:	4b58      	ldr	r3, [pc, #352]	@ (80019dc <kalman_estimation+0x2ec>)
 800187a:	f7fe ffe7 	bl	800084c <__aeabi_ddiv>
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	4614      	mov	r4, r2
 8001884:	461d      	mov	r5, r3
 8001886:	4b54      	ldr	r3, [pc, #336]	@ (80019d8 <kalman_estimation+0x2e8>)
 8001888:	4618      	mov	r0, r3
 800188a:	f7fe fe5d 	bl	8000548 <__aeabi_f2d>
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	4620      	mov	r0, r4
 8001894:	4629      	mov	r1, r5
 8001896:	f7fe fcf9 	bl	800028c <__adddf3>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	4610      	mov	r0, r2
 80018a0:	4619      	mov	r1, r3
 80018a2:	4b4c      	ldr	r3, [pc, #304]	@ (80019d4 <kalman_estimation+0x2e4>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f103 040c 	add.w	r4, r3, #12
 80018aa:	f7ff f99d 	bl	8000be8 <__aeabi_d2f>
 80018ae:	4603      	mov	r3, r0
 80018b0:	6023      	str	r3, [r4, #0]

	// State vector projection computation
	arm_mat_mult_f32(	&m_phi,			&m_X_est,			&m_inter_1_2x2);	// phi * X_est -> inter_1
 80018b2:	4a37      	ldr	r2, [pc, #220]	@ (8001990 <kalman_estimation+0x2a0>)
 80018b4:	4943      	ldr	r1, [pc, #268]	@ (80019c4 <kalman_estimation+0x2d4>)
 80018b6:	4846      	ldr	r0, [pc, #280]	@ (80019d0 <kalman_estimation+0x2e0>)
 80018b8:	f005 f9c6 	bl	8006c48 <arm_mat_mult_f32>
	m_Uk.pData[0] = thrust;
 80018bc:	4b48      	ldr	r3, [pc, #288]	@ (80019e0 <kalman_estimation+0x2f0>)
 80018be:	685c      	ldr	r4, [r3, #4]
 80018c0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018c4:	f7ff f990 	bl	8000be8 <__aeabi_d2f>
 80018c8:	4603      	mov	r3, r0
 80018ca:	6023      	str	r3, [r4, #0]
	arm_mat_mult_f32(	&m_Gk,			&m_Uk,				&m_inter_2_2x2); 	// Gk * Uk -> inter_2
 80018cc:	4a32      	ldr	r2, [pc, #200]	@ (8001998 <kalman_estimation+0x2a8>)
 80018ce:	4944      	ldr	r1, [pc, #272]	@ (80019e0 <kalman_estimation+0x2f0>)
 80018d0:	4844      	ldr	r0, [pc, #272]	@ (80019e4 <kalman_estimation+0x2f4>)
 80018d2:	f005 f9b9 	bl	8006c48 <arm_mat_mult_f32>
	arm_mat_add_f32( 	&m_inter_1_2x2,	&m_inter_2_2x2,		&m_inter_3_2x2);	// phi * X_est + Gk * Uk -> inter_3
 80018d6:	4a32      	ldr	r2, [pc, #200]	@ (80019a0 <kalman_estimation+0x2b0>)
 80018d8:	492f      	ldr	r1, [pc, #188]	@ (8001998 <kalman_estimation+0x2a8>)
 80018da:	482d      	ldr	r0, [pc, #180]	@ (8001990 <kalman_estimation+0x2a0>)
 80018dc:	f005 fbf4 	bl	80070c8 <arm_mat_add_f32>
	m_inter_3_2x2.pData[0] = Ts * m_inter_3_2x2.pData[0];
 80018e0:	4b2f      	ldr	r3, [pc, #188]	@ (80019a0 <kalman_estimation+0x2b0>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	edd3 7a00 	vldr	s15, [r3]
 80018e8:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80019cc <kalman_estimation+0x2dc>
 80018ec:	4b2c      	ldr	r3, [pc, #176]	@ (80019a0 <kalman_estimation+0x2b0>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018f4:	edc3 7a00 	vstr	s15, [r3]
	m_inter_3_2x2.pData[1] = Ts * m_inter_3_2x2.pData[1];
 80018f8:	4b29      	ldr	r3, [pc, #164]	@ (80019a0 <kalman_estimation+0x2b0>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	3304      	adds	r3, #4
 80018fe:	edd3 7a00 	vldr	s15, [r3]
 8001902:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80019cc <kalman_estimation+0x2dc>
 8001906:	4b26      	ldr	r3, [pc, #152]	@ (80019a0 <kalman_estimation+0x2b0>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	3304      	adds	r3, #4
 800190c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001910:	edc3 7a00 	vstr	s15, [r3]
	m_inter_3_2x2.pData[2] = Ts * m_inter_3_2x2.pData[2];
 8001914:	4b22      	ldr	r3, [pc, #136]	@ (80019a0 <kalman_estimation+0x2b0>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	3308      	adds	r3, #8
 800191a:	edd3 7a00 	vldr	s15, [r3]
 800191e:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80019cc <kalman_estimation+0x2dc>
 8001922:	4b1f      	ldr	r3, [pc, #124]	@ (80019a0 <kalman_estimation+0x2b0>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	3308      	adds	r3, #8
 8001928:	ee67 7a87 	vmul.f32	s15, s15, s14
 800192c:	edc3 7a00 	vstr	s15, [r3]
	m_inter_3_2x2.pData[3] = Ts * m_inter_3_2x2.pData[3];						// Not a very efficient way of doing this, I agree.
 8001930:	4b1b      	ldr	r3, [pc, #108]	@ (80019a0 <kalman_estimation+0x2b0>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	330c      	adds	r3, #12
 8001936:	edd3 7a00 	vldr	s15, [r3]
 800193a:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 80019cc <kalman_estimation+0x2dc>
 800193e:	4b18      	ldr	r3, [pc, #96]	@ (80019a0 <kalman_estimation+0x2b0>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	330c      	adds	r3, #12
 8001944:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001948:	edc3 7a00 	vstr	s15, [r3]
	arm_mat_add_f32(	&m_X_est,		&m_inter_3_2x2,		&m_X_proj);			// X_proj = X_est + Ts * [ phi * X_est + Gk * Uk ]
 800194c:	4a1a      	ldr	r2, [pc, #104]	@ (80019b8 <kalman_estimation+0x2c8>)
 800194e:	4914      	ldr	r1, [pc, #80]	@ (80019a0 <kalman_estimation+0x2b0>)
 8001950:	481c      	ldr	r0, [pc, #112]	@ (80019c4 <kalman_estimation+0x2d4>)
 8001952:	f005 fbb9 	bl	80070c8 <arm_mat_add_f32>

	// Matrix P_proj computation
	arm_mat_trans_f32(	&m_phi,			&m_inter_1_2x2);						// phi^t -> inter_1
 8001956:	490e      	ldr	r1, [pc, #56]	@ (8001990 <kalman_estimation+0x2a0>)
 8001958:	481d      	ldr	r0, [pc, #116]	@ (80019d0 <kalman_estimation+0x2e0>)
 800195a:	f005 f85f 	bl	8006a1c <arm_mat_trans_f32>
	arm_mat_mult_f32(	&m_Pk,			&m_inter_1_2x2,		&m_inter_2_2x2);	// Pk * phi^t -> inter_2
 800195e:	4a0e      	ldr	r2, [pc, #56]	@ (8001998 <kalman_estimation+0x2a8>)
 8001960:	490b      	ldr	r1, [pc, #44]	@ (8001990 <kalman_estimation+0x2a0>)
 8001962:	4813      	ldr	r0, [pc, #76]	@ (80019b0 <kalman_estimation+0x2c0>)
 8001964:	f005 f970 	bl	8006c48 <arm_mat_mult_f32>
	arm_mat_mult_f32(	&m_phi,			&m_inter_2_2x2,		&m_inter_1_2x2);	// phi * Pk *phi^t -> inter_1
 8001968:	4a09      	ldr	r2, [pc, #36]	@ (8001990 <kalman_estimation+0x2a0>)
 800196a:	490b      	ldr	r1, [pc, #44]	@ (8001998 <kalman_estimation+0x2a8>)
 800196c:	4818      	ldr	r0, [pc, #96]	@ (80019d0 <kalman_estimation+0x2e0>)
 800196e:	f005 f96b 	bl	8006c48 <arm_mat_mult_f32>
	arm_mat_add_f32(	&m_inter_1_2x2,	&m_Qk,				&m_P_proj);			// P_proj = phi * Pk *phi^t + Qk
 8001972:	4a0a      	ldr	r2, [pc, #40]	@ (800199c <kalman_estimation+0x2ac>)
 8001974:	4917      	ldr	r1, [pc, #92]	@ (80019d4 <kalman_estimation+0x2e4>)
 8001976:	4806      	ldr	r0, [pc, #24]	@ (8001990 <kalman_estimation+0x2a0>)
 8001978:	f005 fba6 	bl	80070c8 <arm_mat_add_f32>

	// Return the estimated data
	//return m_X_est.pData;
}
 800197c:	bf00      	nop
 800197e:	3720      	adds	r7, #32
 8001980:	46bd      	mov	sp, r7
 8001982:	bdb0      	pop	{r4, r5, r7, pc}
 8001984:	f3af 8000 	nop.w
 8001988:	00000000 	.word	0x00000000
 800198c:	40080000 	.word	0x40080000
 8001990:	20000284 	.word	0x20000284
 8001994:	2000024c 	.word	0x2000024c
 8001998:	2000028c 	.word	0x2000028c
 800199c:	20000274 	.word	0x20000274
 80019a0:	20000294 	.word	0x20000294
 80019a4:	20000244 	.word	0x20000244
 80019a8:	2000027c 	.word	0x2000027c
 80019ac:	20000264 	.word	0x20000264
 80019b0:	2000026c 	.word	0x2000026c
 80019b4:	2000029c 	.word	0x2000029c
 80019b8:	2000022c 	.word	0x2000022c
 80019bc:	20000234 	.word	0x20000234
 80019c0:	200002a4 	.word	0x200002a4
 80019c4:	20000224 	.word	0x20000224
 80019c8:	c178872b 	.word	0xc178872b
 80019cc:	3c23d70a 	.word	0x3c23d70a
 80019d0:	2000021c 	.word	0x2000021c
 80019d4:	20000254 	.word	0x20000254
 80019d8:	3c23d70a 	.word	0x3c23d70a
 80019dc:	40080000 	.word	0x40080000
 80019e0:	2000023c 	.word	0x2000023c
 80019e4:	2000025c 	.word	0x2000025c

080019e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	607b      	str	r3, [r7, #4]
 80019f2:	4b10      	ldr	r3, [pc, #64]	@ (8001a34 <HAL_MspInit+0x4c>)
 80019f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019f6:	4a0f      	ldr	r2, [pc, #60]	@ (8001a34 <HAL_MspInit+0x4c>)
 80019f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80019fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001a34 <HAL_MspInit+0x4c>)
 8001a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a06:	607b      	str	r3, [r7, #4]
 8001a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	603b      	str	r3, [r7, #0]
 8001a0e:	4b09      	ldr	r3, [pc, #36]	@ (8001a34 <HAL_MspInit+0x4c>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a12:	4a08      	ldr	r2, [pc, #32]	@ (8001a34 <HAL_MspInit+0x4c>)
 8001a14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a18:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a1a:	4b06      	ldr	r3, [pc, #24]	@ (8001a34 <HAL_MspInit+0x4c>)
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a22:	603b      	str	r3, [r7, #0]
 8001a24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	40023800 	.word	0x40023800

08001a38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a3c:	bf00      	nop
 8001a3e:	e7fd      	b.n	8001a3c <NMI_Handler+0x4>

08001a40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a44:	bf00      	nop
 8001a46:	e7fd      	b.n	8001a44 <HardFault_Handler+0x4>

08001a48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a4c:	bf00      	nop
 8001a4e:	e7fd      	b.n	8001a4c <MemManage_Handler+0x4>

08001a50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a54:	bf00      	nop
 8001a56:	e7fd      	b.n	8001a54 <BusFault_Handler+0x4>

08001a58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a5c:	bf00      	nop
 8001a5e:	e7fd      	b.n	8001a5c <UsageFault_Handler+0x4>

08001a60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a64:	bf00      	nop
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr

08001a6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a72:	bf00      	nop
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a8e:	f001 fa63 	bl	8002f58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
	...

08001a98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001aa0:	4a14      	ldr	r2, [pc, #80]	@ (8001af4 <_sbrk+0x5c>)
 8001aa2:	4b15      	ldr	r3, [pc, #84]	@ (8001af8 <_sbrk+0x60>)
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001aac:	4b13      	ldr	r3, [pc, #76]	@ (8001afc <_sbrk+0x64>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d102      	bne.n	8001aba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ab4:	4b11      	ldr	r3, [pc, #68]	@ (8001afc <_sbrk+0x64>)
 8001ab6:	4a12      	ldr	r2, [pc, #72]	@ (8001b00 <_sbrk+0x68>)
 8001ab8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aba:	4b10      	ldr	r3, [pc, #64]	@ (8001afc <_sbrk+0x64>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d207      	bcs.n	8001ad8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ac8:	f005 fb92 	bl	80071f0 <__errno>
 8001acc:	4603      	mov	r3, r0
 8001ace:	220c      	movs	r2, #12
 8001ad0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad6:	e009      	b.n	8001aec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ad8:	4b08      	ldr	r3, [pc, #32]	@ (8001afc <_sbrk+0x64>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ade:	4b07      	ldr	r3, [pc, #28]	@ (8001afc <_sbrk+0x64>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	4a05      	ldr	r2, [pc, #20]	@ (8001afc <_sbrk+0x64>)
 8001ae8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aea:	68fb      	ldr	r3, [r7, #12]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3718      	adds	r7, #24
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	20020000 	.word	0x20020000
 8001af8:	00000400 	.word	0x00000400
 8001afc:	200002ac 	.word	0x200002ac
 8001b00:	200008a0 	.word	0x200008a0

08001b04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b08:	4b06      	ldr	r3, [pc, #24]	@ (8001b24 <SystemInit+0x20>)
 8001b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b0e:	4a05      	ldr	r2, [pc, #20]	@ (8001b24 <SystemInit+0x20>)
 8001b10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b18:	bf00      	nop
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	e000ed00 	.word	0xe000ed00

08001b28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b60 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001b2c:	f7ff ffea 	bl	8001b04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b30:	480c      	ldr	r0, [pc, #48]	@ (8001b64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b32:	490d      	ldr	r1, [pc, #52]	@ (8001b68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b34:	4a0d      	ldr	r2, [pc, #52]	@ (8001b6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b38:	e002      	b.n	8001b40 <LoopCopyDataInit>

08001b3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b3e:	3304      	adds	r3, #4

08001b40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b44:	d3f9      	bcc.n	8001b3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b46:	4a0a      	ldr	r2, [pc, #40]	@ (8001b70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b48:	4c0a      	ldr	r4, [pc, #40]	@ (8001b74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b4c:	e001      	b.n	8001b52 <LoopFillZerobss>

08001b4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b50:	3204      	adds	r2, #4

08001b52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b54:	d3fb      	bcc.n	8001b4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b56:	f005 fb51 	bl	80071fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b5a:	f7ff fa0d 	bl	8000f78 <main>
  bx  lr    
 8001b5e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b68:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8001b6c:	08009cb0 	.word	0x08009cb0
  ldr r2, =_sbss
 8001b70:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8001b74:	2000089c 	.word	0x2000089c

08001b78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b78:	e7fe      	b.n	8001b78 <ADC_IRQHandler>

08001b7a <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8001b7a:	b4b0      	push	{r4, r5, r7}
 8001b7c:	b08b      	sub	sp, #44	@ 0x2c
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	60f8      	str	r0, [r7, #12]
 8001b82:	60b9      	str	r1, [r7, #8]
 8001b84:	607a      	str	r2, [r7, #4]
 8001b86:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8001b88:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001b8c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	lcd.en_pin = en_pin;
 8001b90:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001b94:	84bb      	strh	r3, [r7, #36]	@ 0x24
	lcd.en_port = en_port;
 8001b96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b98:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8001b9a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001b9c:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	613b      	str	r3, [r7, #16]

	return lcd;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	461d      	mov	r5, r3
 8001bae:	f107 0410 	add.w	r4, r7, #16
 8001bb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bb6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001bba:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001bbe:	68f8      	ldr	r0, [r7, #12]
 8001bc0:	372c      	adds	r7, #44	@ 0x2c
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bcb0      	pop	{r4, r5, r7}
 8001bc6:	4770      	bx	lr

08001bc8 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(void) {
 8001bc8:	b5b0      	push	{r4, r5, r7, lr}
 8001bca:	b090      	sub	sp, #64	@ 0x40
 8001bcc:	af04      	add	r7, sp, #16

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bce:	f107 031c 	add.w	r3, r7, #28
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	605a      	str	r2, [r3, #4]
 8001bd8:	609a      	str	r2, [r3, #8]
 8001bda:	60da      	str	r2, [r3, #12]
 8001bdc:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	61bb      	str	r3, [r7, #24]
 8001be2:	4b2c      	ldr	r3, [pc, #176]	@ (8001c94 <Lcd_init+0xcc>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be6:	4a2b      	ldr	r2, [pc, #172]	@ (8001c94 <Lcd_init+0xcc>)
 8001be8:	f043 0310 	orr.w	r3, r3, #16
 8001bec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bee:	4b29      	ldr	r3, [pc, #164]	@ (8001c94 <Lcd_init+0xcc>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf2:	f003 0310 	and.w	r3, r3, #16
 8001bf6:	61bb      	str	r3, [r7, #24]
 8001bf8:	69bb      	ldr	r3, [r7, #24]

	/* Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, LCD_data7_Pin|LCD_data6_Pin|LCD_data5_Pin|LCD_data4_Pin
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f64a 3180 	movw	r1, #43904	@ 0xab80
 8001c00:	4825      	ldr	r0, [pc, #148]	@ (8001c98 <Lcd_init+0xd0>)
 8001c02:	f002 fc1d 	bl	8004440 <HAL_GPIO_WritePin>
						  	|LCD_RS_Pin|LCD_EN_Pin, GPIO_PIN_RESET);

	/* Configure GPIO pins for the LCD screen */
	GPIO_InitStruct.Pin = LCD_data7_Pin|LCD_data6_Pin|LCD_data5_Pin|LCD_data4_Pin
 8001c06:	f64a 3380 	movw	r3, #43904	@ 0xab80
 8001c0a:	61fb      	str	r3, [r7, #28]
						  |LCD_RS_Pin|LCD_EN_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c14:	2300      	movs	r3, #0
 8001c16:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c18:	f107 031c 	add.w	r3, r7, #28
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	481e      	ldr	r0, [pc, #120]	@ (8001c98 <Lcd_init+0xd0>)
 8001c20:	f002 fa72 	bl	8004108 <HAL_GPIO_Init>



	/* LCD configuration */
	lcd = Lcd_create(ports, pins, LCD_RS_GPIO_Port, LCD_RS_Pin, LCD_EN_GPIO_Port, LCD_EN_Pin, LCD_4_BIT_MODE);
 8001c24:	4c1d      	ldr	r4, [pc, #116]	@ (8001c9c <Lcd_init+0xd4>)
 8001c26:	4638      	mov	r0, r7
 8001c28:	2300      	movs	r3, #0
 8001c2a:	9303      	str	r3, [sp, #12]
 8001c2c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001c30:	9302      	str	r3, [sp, #8]
 8001c32:	4b19      	ldr	r3, [pc, #100]	@ (8001c98 <Lcd_init+0xd0>)
 8001c34:	9301      	str	r3, [sp, #4]
 8001c36:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c3a:	9300      	str	r3, [sp, #0]
 8001c3c:	4b16      	ldr	r3, [pc, #88]	@ (8001c98 <Lcd_init+0xd0>)
 8001c3e:	4a18      	ldr	r2, [pc, #96]	@ (8001ca0 <Lcd_init+0xd8>)
 8001c40:	4918      	ldr	r1, [pc, #96]	@ (8001ca4 <Lcd_init+0xdc>)
 8001c42:	f7ff ff9a 	bl	8001b7a <Lcd_create>
 8001c46:	4625      	mov	r5, r4
 8001c48:	463c      	mov	r4, r7
 8001c4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c4e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c52:	e885 0003 	stmia.w	r5, {r0, r1}

	if(lcd.mode == LCD_4_BIT_MODE) {
 8001c56:	4b11      	ldr	r3, [pc, #68]	@ (8001c9c <Lcd_init+0xd4>)
 8001c58:	7d9b      	ldrb	r3, [r3, #22]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d109      	bne.n	8001c72 <Lcd_init+0xaa>
		lcd_write_command(0x33);
 8001c5e:	2033      	movs	r0, #51	@ 0x33
 8001c60:	f000 f878 	bl	8001d54 <lcd_write_command>
		lcd_write_command(0x32);
 8001c64:	2032      	movs	r0, #50	@ 0x32
 8001c66:	f000 f875 	bl	8001d54 <lcd_write_command>
		lcd_write_command(FUNCTION_SET | OPT_N);				// 4-bit mode
 8001c6a:	2028      	movs	r0, #40	@ 0x28
 8001c6c:	f000 f872 	bl	8001d54 <lcd_write_command>
 8001c70:	e002      	b.n	8001c78 <Lcd_init+0xb0>
	}
	else {
		lcd_write_command(FUNCTION_SET | OPT_DL | OPT_N);
 8001c72:	2038      	movs	r0, #56	@ 0x38
 8001c74:	f000 f86e 	bl	8001d54 <lcd_write_command>
	}

	lcd_write_command(CLEAR_DISPLAY);						// Clear screen
 8001c78:	2001      	movs	r0, #1
 8001c7a:	f000 f86b 	bl	8001d54 <lcd_write_command>
	lcd_write_command(DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8001c7e:	200c      	movs	r0, #12
 8001c80:	f000 f868 	bl	8001d54 <lcd_write_command>
	lcd_write_command(ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8001c84:	2006      	movs	r0, #6
 8001c86:	f000 f865 	bl	8001d54 <lcd_write_command>
}
 8001c8a:	bf00      	nop
 8001c8c:	3730      	adds	r7, #48	@ 0x30
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bdb0      	pop	{r4, r5, r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40023800 	.word	0x40023800
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	200002b0 	.word	0x200002b0
 8001ca0:	2000004c 	.word	0x2000004c
 8001ca4:	2000003c 	.word	0x2000003c

08001ca8 <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(int number) {
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
	char buffer[11];
	sprintf(buffer, "%d", number);
 8001cb0:	f107 030c 	add.w	r3, r7, #12
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	4906      	ldr	r1, [pc, #24]	@ (8001cd0 <Lcd_int+0x28>)
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f005 fa71 	bl	80071a0 <siprintf>

	Lcd_string(buffer);
 8001cbe:	f107 030c 	add.w	r3, r7, #12
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f000 f806 	bl	8001cd4 <Lcd_string>
}
 8001cc8:	bf00      	nop
 8001cca:	3718      	adds	r7, #24
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	08009a30 	.word	0x08009a30

08001cd4 <Lcd_string>:
}

/**
 * Write a string on the current position
 */
void Lcd_string(char * string) {
 8001cd4:	b590      	push	{r4, r7, lr}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < strlen(string); i++) {
 8001cdc:	2300      	movs	r3, #0
 8001cde:	73fb      	strb	r3, [r7, #15]
 8001ce0:	e009      	b.n	8001cf6 <Lcd_string+0x22>
			lcd_write_data(string[i]);
 8001ce2:	7bfb      	ldrb	r3, [r7, #15]
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f000 f85e 	bl	8001dac <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++) {
 8001cf0:	7bfb      	ldrb	r3, [r7, #15]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	73fb      	strb	r3, [r7, #15]
 8001cf6:	7bfc      	ldrb	r4, [r7, #15]
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f7fe fa69 	bl	80001d0 <strlen>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	429c      	cmp	r4, r3
 8001d02:	d3ee      	bcc.n	8001ce2 <Lcd_string+0xe>
	}
}
 8001d04:	bf00      	nop
 8001d06:	bf00      	nop
 8001d08:	3714      	adds	r7, #20
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd90      	pop	{r4, r7, pc}
	...

08001d10 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(uint8_t row, uint8_t col) {
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	460a      	mov	r2, r1
 8001d1a:	71fb      	strb	r3, [r7, #7]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	71bb      	strb	r3, [r7, #6]
	#ifdef LCD20xN
	lcd_write_command(SET_DDRAM_ADDR + ROW_20[row] + col);
 8001d20:	79fb      	ldrb	r3, [r7, #7]
 8001d22:	4a07      	ldr	r2, [pc, #28]	@ (8001d40 <Lcd_cursor+0x30>)
 8001d24:	5cd2      	ldrb	r2, [r2, r3]
 8001d26:	79bb      	ldrb	r3, [r7, #6]
 8001d28:	4413      	add	r3, r2
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	3b80      	subs	r3, #128	@ 0x80
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	4618      	mov	r0, r3
 8001d32:	f000 f80f 	bl	8001d54 <lcd_write_command>
	#endif

	#ifdef LCD16xN
	lcd_write_command(SET_DDRAM_ADDR + ROW_16[row] + col);
	#endif
}
 8001d36:	bf00      	nop
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	08009a58 	.word	0x08009a58

08001d44 <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(void) {
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
	lcd_write_command(CLEAR_DISPLAY);
 8001d48:	2001      	movs	r0, #1
 8001d4a:	f000 f803 	bl	8001d54 <lcd_write_command>
}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
	...

08001d54 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(uint8_t command)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(lcd.rs_port, lcd.rs_pin, LCD_COMMAND_REG);		// Write to command register
 8001d5e:	4b12      	ldr	r3, [pc, #72]	@ (8001da8 <lcd_write_command+0x54>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	4a11      	ldr	r2, [pc, #68]	@ (8001da8 <lcd_write_command+0x54>)
 8001d64:	8991      	ldrh	r1, [r2, #12]
 8001d66:	2200      	movs	r2, #0
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f002 fb69 	bl	8004440 <HAL_GPIO_WritePin>

	if(lcd.mode == LCD_4_BIT_MODE)
 8001d6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001da8 <lcd_write_command+0x54>)
 8001d70:	7d9b      	ldrb	r3, [r3, #22]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d10f      	bne.n	8001d96 <lcd_write_command+0x42>
	{
		lcd_write((command >> 4), LCD_NIB);
 8001d76:	79fb      	ldrb	r3, [r7, #7]
 8001d78:	091b      	lsrs	r3, r3, #4
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	2104      	movs	r1, #4
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f000 f840 	bl	8001e04 <lcd_write>
		lcd_write(command & 0x0F, LCD_NIB);
 8001d84:	79fb      	ldrb	r3, [r7, #7]
 8001d86:	f003 030f 	and.w	r3, r3, #15
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	2104      	movs	r1, #4
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f000 f838 	bl	8001e04 <lcd_write>
	else
	{
		lcd_write(command, LCD_BYTE);
	}

}
 8001d94:	e004      	b.n	8001da0 <lcd_write_command+0x4c>
		lcd_write(command, LCD_BYTE);
 8001d96:	79fb      	ldrb	r3, [r7, #7]
 8001d98:	2108      	movs	r1, #8
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f000 f832 	bl	8001e04 <lcd_write>
}
 8001da0:	bf00      	nop
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	200002b0 	.word	0x200002b0

08001dac <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(uint8_t data)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(lcd.rs_port, lcd.rs_pin, LCD_DATA_REG);			// Write to data register
 8001db6:	4b12      	ldr	r3, [pc, #72]	@ (8001e00 <lcd_write_data+0x54>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	4a11      	ldr	r2, [pc, #68]	@ (8001e00 <lcd_write_data+0x54>)
 8001dbc:	8991      	ldrh	r1, [r2, #12]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f002 fb3d 	bl	8004440 <HAL_GPIO_WritePin>

	if(lcd.mode == LCD_4_BIT_MODE)
 8001dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8001e00 <lcd_write_data+0x54>)
 8001dc8:	7d9b      	ldrb	r3, [r3, #22]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d10f      	bne.n	8001dee <lcd_write_data+0x42>
	{
		lcd_write(data >> 4, LCD_NIB);
 8001dce:	79fb      	ldrb	r3, [r7, #7]
 8001dd0:	091b      	lsrs	r3, r3, #4
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	2104      	movs	r1, #4
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f000 f814 	bl	8001e04 <lcd_write>
		lcd_write(data & 0x0F, LCD_NIB);
 8001ddc:	79fb      	ldrb	r3, [r7, #7]
 8001dde:	f003 030f 	and.w	r3, r3, #15
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	2104      	movs	r1, #4
 8001de6:	4618      	mov	r0, r3
 8001de8:	f000 f80c 	bl	8001e04 <lcd_write>
	else
	{
		lcd_write(data, LCD_BYTE);
	}

}
 8001dec:	e004      	b.n	8001df8 <lcd_write_data+0x4c>
		lcd_write(data, LCD_BYTE);
 8001dee:	79fb      	ldrb	r3, [r7, #7]
 8001df0:	2108      	movs	r1, #8
 8001df2:	4618      	mov	r0, r3
 8001df4:	f000 f806 	bl	8001e04 <lcd_write>
}
 8001df8:	bf00      	nop
 8001dfa:	3708      	adds	r7, #8
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	200002b0 	.word	0x200002b0

08001e04 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(uint8_t data, uint8_t len)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	460a      	mov	r2, r1
 8001e0e:	71fb      	strb	r3, [r7, #7]
 8001e10:	4613      	mov	r3, r2
 8001e12:	71bb      	strb	r3, [r7, #6]
	for(uint8_t i = 0; i < len; i++)
 8001e14:	2300      	movs	r3, #0
 8001e16:	73fb      	strb	r3, [r7, #15]
 8001e18:	e019      	b.n	8001e4e <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd.data_port[i], lcd.data_pin[i], (data >> i) & 0x01);
 8001e1a:	4b1a      	ldr	r3, [pc, #104]	@ (8001e84 <lcd_write+0x80>)
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	7bfb      	ldrb	r3, [r7, #15]
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	6818      	ldr	r0, [r3, #0]
 8001e26:	4b17      	ldr	r3, [pc, #92]	@ (8001e84 <lcd_write+0x80>)
 8001e28:	685a      	ldr	r2, [r3, #4]
 8001e2a:	7bfb      	ldrb	r3, [r7, #15]
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	4413      	add	r3, r2
 8001e30:	8819      	ldrh	r1, [r3, #0]
 8001e32:	79fa      	ldrb	r2, [r7, #7]
 8001e34:	7bfb      	ldrb	r3, [r7, #15]
 8001e36:	fa42 f303 	asr.w	r3, r2, r3
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	461a      	mov	r2, r3
 8001e44:	f002 fafc 	bl	8004440 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8001e48:	7bfb      	ldrb	r3, [r7, #15]
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	73fb      	strb	r3, [r7, #15]
 8001e4e:	7bfa      	ldrb	r2, [r7, #15]
 8001e50:	79bb      	ldrb	r3, [r7, #6]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d3e1      	bcc.n	8001e1a <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd.en_port, lcd.en_pin, 1);
 8001e56:	4b0b      	ldr	r3, [pc, #44]	@ (8001e84 <lcd_write+0x80>)
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e84 <lcd_write+0x80>)
 8001e5c:	8a91      	ldrh	r1, [r2, #20]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	4618      	mov	r0, r3
 8001e62:	f002 faed 	bl	8004440 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001e66:	2001      	movs	r0, #1
 8001e68:	f001 f896 	bl	8002f98 <HAL_Delay>
	HAL_GPIO_WritePin(lcd.en_port, lcd.en_pin, 0); 		// Data receive on falling edge
 8001e6c:	4b05      	ldr	r3, [pc, #20]	@ (8001e84 <lcd_write+0x80>)
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	4a04      	ldr	r2, [pc, #16]	@ (8001e84 <lcd_write+0x80>)
 8001e72:	8a91      	ldrh	r1, [r2, #20]
 8001e74:	2200      	movs	r2, #0
 8001e76:	4618      	mov	r0, r3
 8001e78:	f002 fae2 	bl	8004440 <HAL_GPIO_WritePin>
}
 8001e7c:	bf00      	nop
 8001e7e:	3710      	adds	r7, #16
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	200002b0 	.word	0x200002b0

08001e88 <Motor_SetTime>:
	uint32_t range = TIM4->ARR / 10;

	TIM4->CCR1 = range + (range * pourcent / 100);
}

void Motor_SetTime(uint16_t usTime){
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	4603      	mov	r3, r0
 8001e90:	80fb      	strh	r3, [r7, #6]
	TIM4->CCR1 = TIM4->ARR * usTime / 10000;
 8001e92:	4b08      	ldr	r3, [pc, #32]	@ (8001eb4 <Motor_SetTime+0x2c>)
 8001e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e96:	88fa      	ldrh	r2, [r7, #6]
 8001e98:	fb02 f303 	mul.w	r3, r2, r3
 8001e9c:	4a05      	ldr	r2, [pc, #20]	@ (8001eb4 <Motor_SetTime+0x2c>)
 8001e9e:	4906      	ldr	r1, [pc, #24]	@ (8001eb8 <Motor_SetTime+0x30>)
 8001ea0:	fba1 1303 	umull	r1, r3, r1, r3
 8001ea4:	0b5b      	lsrs	r3, r3, #13
 8001ea6:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	40000800 	.word	0x40000800
 8001eb8:	d1b71759 	.word	0xd1b71759

08001ebc <Clock_init>:


void Clock_init(void) {
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b094      	sub	sp, #80	@ 0x50
 8001ec0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ec2:	f107 0320 	add.w	r3, r7, #32
 8001ec6:	2230      	movs	r2, #48	@ 0x30
 8001ec8:	2100      	movs	r1, #0
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f005 f988 	bl	80071e0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ed0:	f107 030c 	add.w	r3, r7, #12
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	605a      	str	r2, [r3, #4]
 8001eda:	609a      	str	r2, [r3, #8]
 8001edc:	60da      	str	r2, [r3, #12]
 8001ede:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	*/
	__HAL_RCC_PWR_CLK_ENABLE();
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	60bb      	str	r3, [r7, #8]
 8001ee4:	4b28      	ldr	r3, [pc, #160]	@ (8001f88 <Clock_init+0xcc>)
 8001ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee8:	4a27      	ldr	r2, [pc, #156]	@ (8001f88 <Clock_init+0xcc>)
 8001eea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001eee:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ef0:	4b25      	ldr	r3, [pc, #148]	@ (8001f88 <Clock_init+0xcc>)
 8001ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ef8:	60bb      	str	r3, [r7, #8]
 8001efa:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001efc:	2300      	movs	r3, #0
 8001efe:	607b      	str	r3, [r7, #4]
 8001f00:	4b22      	ldr	r3, [pc, #136]	@ (8001f8c <Clock_init+0xd0>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a21      	ldr	r2, [pc, #132]	@ (8001f8c <Clock_init+0xd0>)
 8001f06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f0a:	6013      	str	r3, [r2, #0]
 8001f0c:	4b1f      	ldr	r3, [pc, #124]	@ (8001f8c <Clock_init+0xd0>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f14:	607b      	str	r3, [r7, #4]
 8001f16:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f1c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f20:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f22:	2302      	movs	r3, #2
 8001f24:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f26:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001f2c:	2308      	movs	r3, #8
 8001f2e:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001f30:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001f34:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f36:	2302      	movs	r3, #2
 8001f38:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f3a:	2304      	movs	r3, #4
 8001f3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f3e:	f107 0320 	add.w	r3, r7, #32
 8001f42:	4618      	mov	r0, r3
 8001f44:	f002 fa96 	bl	8004474 <HAL_RCC_OscConfig>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <Clock_init+0x96>
	{
		MOTOR_Error_Handler();
 8001f4e:	f000 f941 	bl	80021d4 <MOTOR_Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f52:	230f      	movs	r3, #15
 8001f54:	60fb      	str	r3, [r7, #12]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f56:	2302      	movs	r3, #2
 8001f58:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f5e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001f62:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f68:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f6a:	f107 030c 	add.w	r3, r7, #12
 8001f6e:	2105      	movs	r1, #5
 8001f70:	4618      	mov	r0, r3
 8001f72:	f002 fcf7 	bl	8004964 <HAL_RCC_ClockConfig>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <Clock_init+0xc4>
	{
		MOTOR_Error_Handler();
 8001f7c:	f000 f92a 	bl	80021d4 <MOTOR_Error_Handler>
	}
}
 8001f80:	bf00      	nop
 8001f82:	3750      	adds	r7, #80	@ 0x50
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	40007000 	.word	0x40007000

08001f90 <Motor_init>:


void Motor_init(void) {
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b096      	sub	sp, #88	@ 0x58
 8001f94:	af00      	add	r7, sp, #0

	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	4b65      	ldr	r3, [pc, #404]	@ (8002130 <Motor_init+0x1a0>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9e:	4a64      	ldr	r2, [pc, #400]	@ (8002130 <Motor_init+0x1a0>)
 8001fa0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fa6:	4b62      	ldr	r3, [pc, #392]	@ (8002130 <Motor_init+0x1a0>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001faa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60bb      	str	r3, [r7, #8]
 8001fb6:	4b5e      	ldr	r3, [pc, #376]	@ (8002130 <Motor_init+0x1a0>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fba:	4a5d      	ldr	r2, [pc, #372]	@ (8002130 <Motor_init+0x1a0>)
 8001fbc:	f043 0308 	orr.w	r3, r3, #8
 8001fc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fc2:	4b5b      	ldr	r3, [pc, #364]	@ (8002130 <Motor_init+0x1a0>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc6:	f003 0308 	and.w	r3, r3, #8
 8001fca:	60bb      	str	r3, [r7, #8]
 8001fcc:	68bb      	ldr	r3, [r7, #8]

	__HAL_RCC_TIM4_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	607b      	str	r3, [r7, #4]
 8001fd2:	4b57      	ldr	r3, [pc, #348]	@ (8002130 <Motor_init+0x1a0>)
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd6:	4a56      	ldr	r2, [pc, #344]	@ (8002130 <Motor_init+0x1a0>)
 8001fd8:	f043 0304 	orr.w	r3, r3, #4
 8001fdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fde:	4b54      	ldr	r3, [pc, #336]	@ (8002130 <Motor_init+0x1a0>)
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe2:	f003 0304 	and.w	r3, r3, #4
 8001fe6:	607b      	str	r3, [r7, #4]
 8001fe8:	687b      	ldr	r3, [r7, #4]

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fea:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	605a      	str	r2, [r3, #4]
 8001ff4:	609a      	str	r2, [r3, #8]
 8001ff6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ff8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8002002:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	605a      	str	r2, [r3, #4]
 800200c:	609a      	str	r2, [r3, #8]
 800200e:	60da      	str	r2, [r3, #12]
 8002010:	611a      	str	r2, [r3, #16]
 8002012:	615a      	str	r2, [r3, #20]
 8002014:	619a      	str	r2, [r3, #24]

	htim4.Instance = TIM4;
 8002016:	4b47      	ldr	r3, [pc, #284]	@ (8002134 <Motor_init+0x1a4>)
 8002018:	4a47      	ldr	r2, [pc, #284]	@ (8002138 <Motor_init+0x1a8>)
 800201a:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 204;
 800201c:	4b45      	ldr	r3, [pc, #276]	@ (8002134 <Motor_init+0x1a4>)
 800201e:	22cc      	movs	r2, #204	@ 0xcc
 8002020:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002022:	4b44      	ldr	r3, [pc, #272]	@ (8002134 <Motor_init+0x1a4>)
 8002024:	2200      	movs	r2, #0
 8002026:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 4095;
 8002028:	4b42      	ldr	r3, [pc, #264]	@ (8002134 <Motor_init+0x1a4>)
 800202a:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800202e:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002030:	4b40      	ldr	r3, [pc, #256]	@ (8002134 <Motor_init+0x1a4>)
 8002032:	2200      	movs	r2, #0
 8002034:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002036:	4b3f      	ldr	r3, [pc, #252]	@ (8002134 <Motor_init+0x1a4>)
 8002038:	2200      	movs	r2, #0
 800203a:	619a      	str	r2, [r3, #24]

	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 800203c:	483d      	ldr	r0, [pc, #244]	@ (8002134 <Motor_init+0x1a4>)
 800203e:	f002 feb1 	bl	8004da4 <HAL_TIM_Base_Init>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <Motor_init+0xbc>
		MOTOR_Error_Handler();
 8002048:	f000 f8c4 	bl	80021d4 <MOTOR_Error_Handler>
	}

    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800204c:	2200      	movs	r2, #0
 800204e:	2100      	movs	r1, #0
 8002050:	201e      	movs	r0, #30
 8002052:	f001 fcb2 	bl	80039ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002056:	201e      	movs	r0, #30
 8002058:	f001 fccb 	bl	80039f2 <HAL_NVIC_EnableIRQ>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800205c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002060:	64bb      	str	r3, [r7, #72]	@ 0x48

	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8002062:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002066:	4619      	mov	r1, r3
 8002068:	4832      	ldr	r0, [pc, #200]	@ (8002134 <Motor_init+0x1a4>)
 800206a:	f003 fa15 	bl	8005498 <HAL_TIM_ConfigClockSource>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <Motor_init+0xe8>
		MOTOR_Error_Handler();
 8002074:	f000 f8ae 	bl	80021d4 <MOTOR_Error_Handler>
	}

	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 8002078:	482e      	ldr	r0, [pc, #184]	@ (8002134 <Motor_init+0x1a4>)
 800207a:	f002 feec 	bl	8004e56 <HAL_TIM_PWM_Init>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <Motor_init+0xf8>
		MOTOR_Error_Handler();
 8002084:	f000 f8a6 	bl	80021d4 <MOTOR_Error_Handler>
	}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002088:	2300      	movs	r3, #0
 800208a:	643b      	str	r3, [r7, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800208c:	2300      	movs	r3, #0
 800208e:	647b      	str	r3, [r7, #68]	@ 0x44

	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK) {
 8002090:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002094:	4619      	mov	r1, r3
 8002096:	4827      	ldr	r0, [pc, #156]	@ (8002134 <Motor_init+0x1a4>)
 8002098:	f003 fe14 	bl	8005cc4 <HAL_TIMEx_MasterConfigSynchronization>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <Motor_init+0x116>
		MOTOR_Error_Handler();
 80020a2:	f000 f897 	bl	80021d4 <MOTOR_Error_Handler>
	}

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020a6:	2360      	movs	r3, #96	@ 0x60
 80020a8:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigOC.Pulse = 0;
 80020aa:	2300      	movs	r3, #0
 80020ac:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020ae:	2300      	movs	r3, #0
 80020b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020b2:	2300      	movs	r3, #0
 80020b4:	637b      	str	r3, [r7, #52]	@ 0x34

	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 80020b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020ba:	2200      	movs	r2, #0
 80020bc:	4619      	mov	r1, r3
 80020be:	481d      	ldr	r0, [pc, #116]	@ (8002134 <Motor_init+0x1a4>)
 80020c0:	f003 f928 	bl	8005314 <HAL_TIM_PWM_ConfigChannel>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <Motor_init+0x13e>
		MOTOR_Error_Handler();
 80020ca:	f000 f883 	bl	80021d4 <MOTOR_Error_Handler>
	}

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ce:	f107 0310 	add.w	r3, r7, #16
 80020d2:	2200      	movs	r2, #0
 80020d4:	601a      	str	r2, [r3, #0]
 80020d6:	605a      	str	r2, [r3, #4]
 80020d8:	609a      	str	r2, [r3, #8]
 80020da:	60da      	str	r2, [r3, #12]
 80020dc:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80020de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e4:	2302      	movs	r3, #2
 80020e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e8:	2300      	movs	r3, #0
 80020ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ec:	2300      	movs	r3, #0
 80020ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80020f0:	2302      	movs	r3, #2
 80020f2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020f4:	f107 0310 	add.w	r3, r7, #16
 80020f8:	4619      	mov	r1, r3
 80020fa:	4810      	ldr	r0, [pc, #64]	@ (800213c <Motor_init+0x1ac>)
 80020fc:	f002 f804 	bl	8004108 <HAL_GPIO_Init>

	HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1);
 8002100:	2100      	movs	r1, #0
 8002102:	480c      	ldr	r0, [pc, #48]	@ (8002134 <Motor_init+0x1a4>)
 8002104:	f002 ff00 	bl	8004f08 <HAL_TIM_PWM_Start_IT>

	TIM4->CCR1 = 410;
 8002108:	4b0b      	ldr	r3, [pc, #44]	@ (8002138 <Motor_init+0x1a8>)
 800210a:	f44f 72cd 	mov.w	r2, #410	@ 0x19a
 800210e:	635a      	str	r2, [r3, #52]	@ 0x34

	PWM_flag = 0;
 8002110:	4b0b      	ldr	r3, [pc, #44]	@ (8002140 <Motor_init+0x1b0>)
 8002112:	2200      	movs	r2, #0
 8002114:	801a      	strh	r2, [r3, #0]
	old_PWM_flag = 0xFFFF;
 8002116:	4b0b      	ldr	r3, [pc, #44]	@ (8002144 <Motor_init+0x1b4>)
 8002118:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800211c:	801a      	strh	r2, [r3, #0]

	HAL_Delay(3000);
 800211e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002122:	f000 ff39 	bl	8002f98 <HAL_Delay>
}
 8002126:	bf00      	nop
 8002128:	3758      	adds	r7, #88	@ 0x58
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40023800 	.word	0x40023800
 8002134:	200002c8 	.word	0x200002c8
 8002138:	40000800 	.word	0x40000800
 800213c:	40020c00 	.word	0x40020c00
 8002140:	20000310 	.word	0x20000310
 8002144:	20000312 	.word	0x20000312

08002148 <Wait_Until>:

void Wait_Until(uint16_t time) {
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	80fb      	strh	r3, [r7, #6]

	time /= 10;
 8002152:	88fb      	ldrh	r3, [r7, #6]
 8002154:	4a13      	ldr	r2, [pc, #76]	@ (80021a4 <Wait_Until+0x5c>)
 8002156:	fba2 2303 	umull	r2, r3, r2, r3
 800215a:	08db      	lsrs	r3, r3, #3
 800215c:	80fb      	strh	r3, [r7, #6]

	if(old_PWM_flag == 0xFFFF){PWM_flag = time;}
 800215e:	4b12      	ldr	r3, [pc, #72]	@ (80021a8 <Wait_Until+0x60>)
 8002160:	881b      	ldrh	r3, [r3, #0]
 8002162:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002166:	4293      	cmp	r3, r2
 8002168:	d102      	bne.n	8002170 <Wait_Until+0x28>
 800216a:	4a10      	ldr	r2, [pc, #64]	@ (80021ac <Wait_Until+0x64>)
 800216c:	88fb      	ldrh	r3, [r7, #6]
 800216e:	8013      	strh	r3, [r2, #0]

	if(PWM_flag > old_PWM_flag){ return; }
 8002170:	4b0e      	ldr	r3, [pc, #56]	@ (80021ac <Wait_Until+0x64>)
 8002172:	881a      	ldrh	r2, [r3, #0]
 8002174:	4b0c      	ldr	r3, [pc, #48]	@ (80021a8 <Wait_Until+0x60>)
 8002176:	881b      	ldrh	r3, [r3, #0]
 8002178:	429a      	cmp	r2, r3
 800217a:	d80c      	bhi.n	8002196 <Wait_Until+0x4e>

	while(PWM_flag != 0);
 800217c:	bf00      	nop
 800217e:	4b0b      	ldr	r3, [pc, #44]	@ (80021ac <Wait_Until+0x64>)
 8002180:	881b      	ldrh	r3, [r3, #0]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1fb      	bne.n	800217e <Wait_Until+0x36>

	PWM_flag = time;
 8002186:	4a09      	ldr	r2, [pc, #36]	@ (80021ac <Wait_Until+0x64>)
 8002188:	88fb      	ldrh	r3, [r7, #6]
 800218a:	8013      	strh	r3, [r2, #0]
	old_PWM_flag = PWM_flag;
 800218c:	4b07      	ldr	r3, [pc, #28]	@ (80021ac <Wait_Until+0x64>)
 800218e:	881a      	ldrh	r2, [r3, #0]
 8002190:	4b05      	ldr	r3, [pc, #20]	@ (80021a8 <Wait_Until+0x60>)
 8002192:	801a      	strh	r2, [r3, #0]
 8002194:	e000      	b.n	8002198 <Wait_Until+0x50>
	if(PWM_flag > old_PWM_flag){ return; }
 8002196:	bf00      	nop
}
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	cccccccd 	.word	0xcccccccd
 80021a8:	20000312 	.word	0x20000312
 80021ac:	20000310 	.word	0x20000310

080021b0 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void) {
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
	PWM_flag--;
 80021b4:	4b05      	ldr	r3, [pc, #20]	@ (80021cc <TIM4_IRQHandler+0x1c>)
 80021b6:	881b      	ldrh	r3, [r3, #0]
 80021b8:	3b01      	subs	r3, #1
 80021ba:	b29a      	uxth	r2, r3
 80021bc:	4b03      	ldr	r3, [pc, #12]	@ (80021cc <TIM4_IRQHandler+0x1c>)
 80021be:	801a      	strh	r2, [r3, #0]
	HAL_TIM_IRQHandler(&htim4);
 80021c0:	4803      	ldr	r0, [pc, #12]	@ (80021d0 <TIM4_IRQHandler+0x20>)
 80021c2:	f002 ffb7 	bl	8005134 <HAL_TIM_IRQHandler>
}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	20000310 	.word	0x20000310
 80021d0:	200002c8 	.word	0x200002c8

080021d4 <MOTOR_Error_Handler>:

void MOTOR_Error_Handler(void) {
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
    while(1);
 80021d8:	bf00      	nop
 80021da:	e7fd      	b.n	80021d8 <MOTOR_Error_Handler+0x4>

080021dc <Sensor_init>:

/*********************************************************/
/*********************** Sensor **************************/
/*********************************************************/

void Sensor_init(void) {
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0

	ADC_init();
 80021e0:	f000 f826 	bl	8002230 <ADC_init>
	IMU_init();
 80021e4:	f000 f9ce 	bl	8002584 <IMU_init>
}
 80021e8:	bf00      	nop
 80021ea:	bd80      	pop	{r7, pc}

080021ec <Sensor_GetAngle>:

double Sensor_GetAngle(void) {
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
	return ADC_Calculate_Pot();
 80021f0:	f000 f8ca 	bl	8002388 <ADC_Calculate_Pot>
 80021f4:	eeb0 7a40 	vmov.f32	s14, s0
 80021f8:	eef0 7a60 	vmov.f32	s15, s1
}
 80021fc:	eeb0 0a47 	vmov.f32	s0, s14
 8002200:	eef0 0a67 	vmov.f32	s1, s15
 8002204:	bd80      	pop	{r7, pc}
	...

08002208 <Sensor_GetGyro>:

double Sensor_GetGyro(void) {
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
	IMU_Calculate_Gyro();
 800220c:	f000 fa70 	bl	80026f0 <IMU_Calculate_Gyro>
	return gyro[1];
 8002210:	4b04      	ldr	r3, [pc, #16]	@ (8002224 <Sensor_GetGyro+0x1c>)
 8002212:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002216:	ec43 2b17 	vmov	d7, r2, r3
}
 800221a:	eeb0 0a47 	vmov.f32	s0, s14
 800221e:	eef0 0a67 	vmov.f32	s1, s15
 8002222:	bd80      	pop	{r7, pc}
 8002224:	20000708 	.word	0x20000708

08002228 <Sensor_Error_Handler>:

double Sensor_GetMotorSpeed(void) {
	return 0;
}

void Sensor_Error_Handler(void) {
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
    while(1);
 800222c:	bf00      	nop
 800222e:	e7fd      	b.n	800222c <Sensor_Error_Handler+0x4>

08002230 <ADC_init>:

uint32_t ADC_data_buffer[ADC_MEAN_VALUE];
uint32_t ADC_Start_Angle;


void ADC_init(void) {
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	607b      	str	r3, [r7, #4]
 800223a:	4b39      	ldr	r3, [pc, #228]	@ (8002320 <ADC_init+0xf0>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223e:	4a38      	ldr	r2, [pc, #224]	@ (8002320 <ADC_init+0xf0>)
 8002240:	f043 0304 	orr.w	r3, r3, #4
 8002244:	6313      	str	r3, [r2, #48]	@ 0x30
 8002246:	4b36      	ldr	r3, [pc, #216]	@ (8002320 <ADC_init+0xf0>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224a:	f003 0304 	and.w	r3, r3, #4
 800224e:	607b      	str	r3, [r7, #4]
 8002250:	687b      	ldr	r3, [r7, #4]

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8002252:	2300      	movs	r3, #0
 8002254:	603b      	str	r3, [r7, #0]
 8002256:	4b32      	ldr	r3, [pc, #200]	@ (8002320 <ADC_init+0xf0>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225a:	4a31      	ldr	r2, [pc, #196]	@ (8002320 <ADC_init+0xf0>)
 800225c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002260:	6313      	str	r3, [r2, #48]	@ 0x30
 8002262:	4b2f      	ldr	r3, [pc, #188]	@ (8002320 <ADC_init+0xf0>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002266:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800226a:	603b      	str	r3, [r7, #0]
 800226c:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800226e:	2200      	movs	r2, #0
 8002270:	2100      	movs	r1, #0
 8002272:	203a      	movs	r0, #58	@ 0x3a
 8002274:	f001 fba1 	bl	80039ba <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002278:	203a      	movs	r0, #58	@ 0x3a
 800227a:	f001 fbba 	bl	80039f2 <HAL_NVIC_EnableIRQ>

	ADC_ChannelConfTypeDef sConfig = {0};
 800227e:	f107 0308 	add.w	r3, r7, #8
 8002282:	2200      	movs	r2, #0
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	605a      	str	r2, [r3, #4]
 8002288:	609a      	str	r2, [r3, #8]
 800228a:	60da      	str	r2, [r3, #12]

	hadc2.Instance = ADC2;
 800228c:	4b25      	ldr	r3, [pc, #148]	@ (8002324 <ADC_init+0xf4>)
 800228e:	4a26      	ldr	r2, [pc, #152]	@ (8002328 <ADC_init+0xf8>)
 8002290:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002292:	4b24      	ldr	r3, [pc, #144]	@ (8002324 <ADC_init+0xf4>)
 8002294:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002298:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800229a:	4b22      	ldr	r3, [pc, #136]	@ (8002324 <ADC_init+0xf4>)
 800229c:	2200      	movs	r2, #0
 800229e:	609a      	str	r2, [r3, #8]
	hadc2.Init.ScanConvMode = DISABLE;
 80022a0:	4b20      	ldr	r3, [pc, #128]	@ (8002324 <ADC_init+0xf4>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	611a      	str	r2, [r3, #16]
	hadc2.Init.ContinuousConvMode = ENABLE;
 80022a6:	4b1f      	ldr	r3, [pc, #124]	@ (8002324 <ADC_init+0xf4>)
 80022a8:	2201      	movs	r2, #1
 80022aa:	761a      	strb	r2, [r3, #24]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 80022ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002324 <ADC_init+0xf4>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 2020 	strb.w	r2, [r3, #32]
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80022b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002324 <ADC_init+0xf4>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002324 <ADC_init+0xf4>)
 80022bc:	4a1b      	ldr	r2, [pc, #108]	@ (800232c <ADC_init+0xfc>)
 80022be:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022c0:	4b18      	ldr	r3, [pc, #96]	@ (8002324 <ADC_init+0xf4>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	60da      	str	r2, [r3, #12]
	hadc2.Init.NbrOfConversion = 1;
 80022c6:	4b17      	ldr	r3, [pc, #92]	@ (8002324 <ADC_init+0xf4>)
 80022c8:	2201      	movs	r2, #1
 80022ca:	61da      	str	r2, [r3, #28]
	hadc2.Init.DMAContinuousRequests = ENABLE;
 80022cc:	4b15      	ldr	r3, [pc, #84]	@ (8002324 <ADC_init+0xf4>)
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80022d4:	4b13      	ldr	r3, [pc, #76]	@ (8002324 <ADC_init+0xf4>)
 80022d6:	2201      	movs	r2, #1
 80022d8:	615a      	str	r2, [r3, #20]

	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 80022da:	4812      	ldr	r0, [pc, #72]	@ (8002324 <ADC_init+0xf4>)
 80022dc:	f000 fe80 	bl	8002fe0 <HAL_ADC_Init>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <ADC_init+0xba>
		Sensor_Error_Handler();
 80022e6:	f7ff ff9f 	bl	8002228 <Sensor_Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	*/
	sConfig.Channel = ADC_CHANNEL_10;
 80022ea:	230a      	movs	r3, #10
 80022ec:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 80022ee:	2301      	movs	r3, #1
 80022f0:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80022f2:	2300      	movs	r3, #0
 80022f4:	613b      	str	r3, [r7, #16]

	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 80022f6:	f107 0308 	add.w	r3, r7, #8
 80022fa:	4619      	mov	r1, r3
 80022fc:	4809      	ldr	r0, [pc, #36]	@ (8002324 <ADC_init+0xf4>)
 80022fe:	f000 ffe1 	bl	80032c4 <HAL_ADC_ConfigChannel>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <ADC_init+0xdc>
		Sensor_Error_Handler();
 8002308:	f7ff ff8e 	bl	8002228 <Sensor_Error_Handler>
	}

	HAL_ADC_Start_DMA(&hadc2, ADC_data_buffer, ADC_MEAN_VALUE);
 800230c:	2264      	movs	r2, #100	@ 0x64
 800230e:	4908      	ldr	r1, [pc, #32]	@ (8002330 <ADC_init+0x100>)
 8002310:	4804      	ldr	r0, [pc, #16]	@ (8002324 <ADC_init+0xf4>)
 8002312:	f000 fea9 	bl	8003068 <HAL_ADC_Start_DMA>
}
 8002316:	bf00      	nop
 8002318:	3718      	adds	r7, #24
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	40023800 	.word	0x40023800
 8002324:	20000314 	.word	0x20000314
 8002328:	40012100 	.word	0x40012100
 800232c:	0f000001 	.word	0x0f000001
 8002330:	200003bc 	.word	0x200003bc

08002334 <ADC_init_PotOffset>:


void ADC_init_PotOffset(void) {
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0

	for(int i = 0; i < ADC_MEAN_VALUE; i++){
 800233a:	2300      	movs	r3, #0
 800233c:	607b      	str	r3, [r7, #4]
 800233e:	e00b      	b.n	8002358 <ADC_init_PotOffset+0x24>
		ADC_Start_Angle += ADC_data_buffer[i];
 8002340:	4a0e      	ldr	r2, [pc, #56]	@ (800237c <ADC_init_PotOffset+0x48>)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002348:	4b0d      	ldr	r3, [pc, #52]	@ (8002380 <ADC_init_PotOffset+0x4c>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4413      	add	r3, r2
 800234e:	4a0c      	ldr	r2, [pc, #48]	@ (8002380 <ADC_init_PotOffset+0x4c>)
 8002350:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < ADC_MEAN_VALUE; i++){
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	3301      	adds	r3, #1
 8002356:	607b      	str	r3, [r7, #4]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2b63      	cmp	r3, #99	@ 0x63
 800235c:	ddf0      	ble.n	8002340 <ADC_init_PotOffset+0xc>
	}

	ADC_Start_Angle /= ADC_MEAN_VALUE;
 800235e:	4b08      	ldr	r3, [pc, #32]	@ (8002380 <ADC_init_PotOffset+0x4c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a08      	ldr	r2, [pc, #32]	@ (8002384 <ADC_init_PotOffset+0x50>)
 8002364:	fba2 2303 	umull	r2, r3, r2, r3
 8002368:	095b      	lsrs	r3, r3, #5
 800236a:	4a05      	ldr	r2, [pc, #20]	@ (8002380 <ADC_init_PotOffset+0x4c>)
 800236c:	6013      	str	r3, [r2, #0]
}
 800236e:	bf00      	nop
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	200003bc 	.word	0x200003bc
 8002380:	2000054c 	.word	0x2000054c
 8002384:	51eb851f 	.word	0x51eb851f

08002388 <ADC_Calculate_Pot>:

double ADC_Calculate_Pot(void) {
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0

	uint32_t mean_adc_value = 0;
 800238e:	2300      	movs	r3, #0
 8002390:	60fb      	str	r3, [r7, #12]

	for(int i = 0; i < ADC_MEAN_VALUE; i++){
 8002392:	2300      	movs	r3, #0
 8002394:	60bb      	str	r3, [r7, #8]
 8002396:	e009      	b.n	80023ac <ADC_Calculate_Pot+0x24>
		mean_adc_value += ADC_data_buffer[i];
 8002398:	4a37      	ldr	r2, [pc, #220]	@ (8002478 <ADC_Calculate_Pot+0xf0>)
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	4413      	add	r3, r2
 80023a4:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < ADC_MEAN_VALUE; i++){
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	3301      	adds	r3, #1
 80023aa:	60bb      	str	r3, [r7, #8]
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	2b63      	cmp	r3, #99	@ 0x63
 80023b0:	ddf2      	ble.n	8002398 <ADC_Calculate_Pot+0x10>
	}

	mean_adc_value /= ADC_MEAN_VALUE;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	4a31      	ldr	r2, [pc, #196]	@ (800247c <ADC_Calculate_Pot+0xf4>)
 80023b6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ba:	095b      	lsrs	r3, r3, #5
 80023bc:	60fb      	str	r3, [r7, #12]

	double angle;

	if ( mean_adc_value < 1600 ) {
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80023c4:	d215      	bcs.n	80023f2 <ADC_Calculate_Pot+0x6a>
		angle = ADC_COEF_A_L * mean_adc_value + ADC_COEF_B_L;
 80023c6:	68f8      	ldr	r0, [r7, #12]
 80023c8:	f7fe f89c 	bl	8000504 <__aeabi_ui2d>
 80023cc:	a320      	add	r3, pc, #128	@ (adr r3, 8002450 <ADC_Calculate_Pot+0xc8>)
 80023ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d2:	f7fe f911 	bl	80005f8 <__aeabi_dmul>
 80023d6:	4602      	mov	r2, r0
 80023d8:	460b      	mov	r3, r1
 80023da:	4610      	mov	r0, r2
 80023dc:	4619      	mov	r1, r3
 80023de:	a31e      	add	r3, pc, #120	@ (adr r3, 8002458 <ADC_Calculate_Pot+0xd0>)
 80023e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e4:	f7fd ff50 	bl	8000288 <__aeabi_dsub>
 80023e8:	4602      	mov	r2, r0
 80023ea:	460b      	mov	r3, r1
 80023ec:	e9c7 2300 	strd	r2, r3, [r7]
 80023f0:	e018      	b.n	8002424 <ADC_Calculate_Pot+0x9c>
	}
	else if ( mean_adc_value >= 1600 ) {
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80023f8:	d314      	bcc.n	8002424 <ADC_Calculate_Pot+0x9c>
		angle = ADC_COEF_A_H * mean_adc_value + ADC_COEF_B_H;
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	f7fe f882 	bl	8000504 <__aeabi_ui2d>
 8002400:	a317      	add	r3, pc, #92	@ (adr r3, 8002460 <ADC_Calculate_Pot+0xd8>)
 8002402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002406:	f7fe f8f7 	bl	80005f8 <__aeabi_dmul>
 800240a:	4602      	mov	r2, r0
 800240c:	460b      	mov	r3, r1
 800240e:	4610      	mov	r0, r2
 8002410:	4619      	mov	r1, r3
 8002412:	a315      	add	r3, pc, #84	@ (adr r3, 8002468 <ADC_Calculate_Pot+0xe0>)
 8002414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002418:	f7fd ff36 	bl	8000288 <__aeabi_dsub>
 800241c:	4602      	mov	r2, r0
 800241e:	460b      	mov	r3, r1
 8002420:	e9c7 2300 	strd	r2, r3, [r7]
	}

	angle *= M_PI/180;
 8002424:	a312      	add	r3, pc, #72	@ (adr r3, 8002470 <ADC_Calculate_Pot+0xe8>)
 8002426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800242a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800242e:	f7fe f8e3 	bl	80005f8 <__aeabi_dmul>
 8002432:	4602      	mov	r2, r0
 8002434:	460b      	mov	r3, r1
 8002436:	e9c7 2300 	strd	r2, r3, [r7]

	return angle;
 800243a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800243e:	ec43 2b17 	vmov	d7, r2, r3
}
 8002442:	eeb0 0a47 	vmov.f32	s0, s14
 8002446:	eef0 0a67 	vmov.f32	s1, s15
 800244a:	3710      	adds	r7, #16
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	ff972474 	.word	0xff972474
 8002454:	3fab7e90 	.word	0x3fab7e90
 8002458:	a5119ce0 	.word	0xa5119ce0
 800245c:	401381bd 	.word	0x401381bd
 8002460:	f212d773 	.word	0xf212d773
 8002464:	3fb6cf41 	.word	0x3fb6cf41
 8002468:	25aee632 	.word	0x25aee632
 800246c:	404ec3e4 	.word	0x404ec3e4
 8002470:	a2529d39 	.word	0xa2529d39
 8002474:	3f91df46 	.word	0x3f91df46
 8002478:	200003bc 	.word	0x200003bc
 800247c:	51eb851f 	.word	0x51eb851f

08002480 <HAL_ADC_MspInit>:


void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc) {
 8002480:	b580      	push	{r7, lr}
 8002482:	b08a      	sub	sp, #40	@ 0x28
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002488:	f107 0314 	add.w	r3, r7, #20
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	605a      	str	r2, [r3, #4]
 8002492:	609a      	str	r2, [r3, #8]
 8002494:	60da      	str	r2, [r3, #12]
 8002496:	611a      	str	r2, [r3, #16]

  if(hadc->Instance==ADC2)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a2f      	ldr	r2, [pc, #188]	@ (800255c <HAL_ADC_MspInit+0xdc>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d158      	bne.n	8002554 <HAL_ADC_MspInit+0xd4>
  {
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 80024a2:	2300      	movs	r3, #0
 80024a4:	613b      	str	r3, [r7, #16]
 80024a6:	4b2e      	ldr	r3, [pc, #184]	@ (8002560 <HAL_ADC_MspInit+0xe0>)
 80024a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024aa:	4a2d      	ldr	r2, [pc, #180]	@ (8002560 <HAL_ADC_MspInit+0xe0>)
 80024ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80024b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80024b2:	4b2b      	ldr	r3, [pc, #172]	@ (8002560 <HAL_ADC_MspInit+0xe0>)
 80024b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024ba:	613b      	str	r3, [r7, #16]
 80024bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	60fb      	str	r3, [r7, #12]
 80024c2:	4b27      	ldr	r3, [pc, #156]	@ (8002560 <HAL_ADC_MspInit+0xe0>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c6:	4a26      	ldr	r2, [pc, #152]	@ (8002560 <HAL_ADC_MspInit+0xe0>)
 80024c8:	f043 0304 	orr.w	r3, r3, #4
 80024cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80024ce:	4b24      	ldr	r3, [pc, #144]	@ (8002560 <HAL_ADC_MspInit+0xe0>)
 80024d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d2:	f003 0304 	and.w	r3, r3, #4
 80024d6:	60fb      	str	r3, [r7, #12]
 80024d8:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PC0     ------> ADC2_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80024da:	2301      	movs	r3, #1
 80024dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024de:	2303      	movs	r3, #3
 80024e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e2:	2300      	movs	r3, #0
 80024e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024e6:	f107 0314 	add.w	r3, r7, #20
 80024ea:	4619      	mov	r1, r3
 80024ec:	481d      	ldr	r0, [pc, #116]	@ (8002564 <HAL_ADC_MspInit+0xe4>)
 80024ee:	f001 fe0b 	bl	8004108 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 80024f2:	4b1d      	ldr	r3, [pc, #116]	@ (8002568 <HAL_ADC_MspInit+0xe8>)
 80024f4:	4a1d      	ldr	r2, [pc, #116]	@ (800256c <HAL_ADC_MspInit+0xec>)
 80024f6:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80024f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002568 <HAL_ADC_MspInit+0xe8>)
 80024fa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80024fe:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002500:	4b19      	ldr	r3, [pc, #100]	@ (8002568 <HAL_ADC_MspInit+0xe8>)
 8002502:	2200      	movs	r2, #0
 8002504:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002506:	4b18      	ldr	r3, [pc, #96]	@ (8002568 <HAL_ADC_MspInit+0xe8>)
 8002508:	2200      	movs	r2, #0
 800250a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800250c:	4b16      	ldr	r3, [pc, #88]	@ (8002568 <HAL_ADC_MspInit+0xe8>)
 800250e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002512:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002514:	4b14      	ldr	r3, [pc, #80]	@ (8002568 <HAL_ADC_MspInit+0xe8>)
 8002516:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800251a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800251c:	4b12      	ldr	r3, [pc, #72]	@ (8002568 <HAL_ADC_MspInit+0xe8>)
 800251e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002522:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8002524:	4b10      	ldr	r3, [pc, #64]	@ (8002568 <HAL_ADC_MspInit+0xe8>)
 8002526:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800252a:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800252c:	4b0e      	ldr	r3, [pc, #56]	@ (8002568 <HAL_ADC_MspInit+0xe8>)
 800252e:	2200      	movs	r2, #0
 8002530:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002532:	4b0d      	ldr	r3, [pc, #52]	@ (8002568 <HAL_ADC_MspInit+0xe8>)
 8002534:	2200      	movs	r2, #0
 8002536:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002538:	480b      	ldr	r0, [pc, #44]	@ (8002568 <HAL_ADC_MspInit+0xe8>)
 800253a:	f001 fa75 	bl	8003a28 <HAL_DMA_Init>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <HAL_ADC_MspInit+0xc8>
    {
      Sensor_Error_Handler();
 8002544:	f7ff fe70 	bl	8002228 <Sensor_Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a07      	ldr	r2, [pc, #28]	@ (8002568 <HAL_ADC_MspInit+0xe8>)
 800254c:	639a      	str	r2, [r3, #56]	@ 0x38
 800254e:	4a06      	ldr	r2, [pc, #24]	@ (8002568 <HAL_ADC_MspInit+0xe8>)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6393      	str	r3, [r2, #56]	@ 0x38
  }
}
 8002554:	bf00      	nop
 8002556:	3728      	adds	r7, #40	@ 0x28
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40012100 	.word	0x40012100
 8002560:	40023800 	.word	0x40023800
 8002564:	40020800 	.word	0x40020800
 8002568:	2000035c 	.word	0x2000035c
 800256c:	40026440 	.word	0x40026440

08002570 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void) {
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002574:	4802      	ldr	r0, [pc, #8]	@ (8002580 <DMA2_Stream2_IRQHandler+0x10>)
 8002576:	f001 fb5d 	bl	8003c34 <HAL_DMA_IRQHandler>
}
 800257a:	bf00      	nop
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	2000035c 	.word	0x2000035c

08002584 <IMU_init>:

double acc[3], gyro[3], angle[3];
double gyro_offset[3] = {0};


void IMU_init(void) {
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	60bb      	str	r3, [r7, #8]
 800258e:	4b2f      	ldr	r3, [pc, #188]	@ (800264c <IMU_init+0xc8>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002592:	4a2e      	ldr	r2, [pc, #184]	@ (800264c <IMU_init+0xc8>)
 8002594:	f043 0308 	orr.w	r3, r3, #8
 8002598:	6313      	str	r3, [r2, #48]	@ 0x30
 800259a:	4b2c      	ldr	r3, [pc, #176]	@ (800264c <IMU_init+0xc8>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800259e:	f003 0308 	and.w	r3, r3, #8
 80025a2:	60bb      	str	r3, [r7, #8]
 80025a4:	68bb      	ldr	r3, [r7, #8]

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80025a6:	2300      	movs	r3, #0
 80025a8:	607b      	str	r3, [r7, #4]
 80025aa:	4b28      	ldr	r3, [pc, #160]	@ (800264c <IMU_init+0xc8>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ae:	4a27      	ldr	r2, [pc, #156]	@ (800264c <IMU_init+0xc8>)
 80025b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80025b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80025b6:	4b25      	ldr	r3, [pc, #148]	@ (800264c <IMU_init+0xc8>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025be:	607b      	str	r3, [r7, #4]
 80025c0:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80025c2:	2200      	movs	r2, #0
 80025c4:	2100      	movs	r1, #0
 80025c6:	2010      	movs	r0, #16
 80025c8:	f001 f9f7 	bl	80039ba <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80025cc:	2010      	movs	r0, #16
 80025ce:	f001 fa10 	bl	80039f2 <HAL_NVIC_EnableIRQ>

	//HAL_DMA_IRQHandler(&hdma_usart2_rx);

	/* UART2 configuration */
	huart2.Instance = USART2;
 80025d2:	4b1f      	ldr	r3, [pc, #124]	@ (8002650 <IMU_init+0xcc>)
 80025d4:	4a1f      	ldr	r2, [pc, #124]	@ (8002654 <IMU_init+0xd0>)
 80025d6:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80025d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002650 <IMU_init+0xcc>)
 80025da:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80025de:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80025e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002650 <IMU_init+0xcc>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80025e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002650 <IMU_init+0xcc>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80025ec:	4b18      	ldr	r3, [pc, #96]	@ (8002650 <IMU_init+0xcc>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80025f2:	4b17      	ldr	r3, [pc, #92]	@ (8002650 <IMU_init+0xcc>)
 80025f4:	220c      	movs	r2, #12
 80025f6:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025f8:	4b15      	ldr	r3, [pc, #84]	@ (8002650 <IMU_init+0xcc>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80025fe:	4b14      	ldr	r3, [pc, #80]	@ (8002650 <IMU_init+0xcc>)
 8002600:	2200      	movs	r2, #0
 8002602:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8002604:	4812      	ldr	r0, [pc, #72]	@ (8002650 <IMU_init+0xcc>)
 8002606:	f003 fbed 	bl	8005de4 <HAL_UART_Init>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <IMU_init+0x90>
		Sensor_Error_Handler();
 8002610:	f7ff fe0a 	bl	8002228 <Sensor_Error_Handler>
	}

    // Send initial commands to IMU
    char gyro_reset[3] = {0xFF, 0xAA, 0x52}; // Angle initialization Z-axis to zero
 8002614:	4a10      	ldr	r2, [pc, #64]	@ (8002658 <IMU_init+0xd4>)
 8002616:	f107 030c 	add.w	r3, r7, #12
 800261a:	6812      	ldr	r2, [r2, #0]
 800261c:	4611      	mov	r1, r2
 800261e:	8019      	strh	r1, [r3, #0]
 8002620:	3302      	adds	r3, #2
 8002622:	0c12      	lsrs	r2, r2, #16
 8002624:	701a      	strb	r2, [r3, #0]

    HAL_UART_Transmit(&huart2, (uint8_t *)gyro_reset, sizeof(gyro_reset), HAL_MAX_DELAY);
 8002626:	f107 010c 	add.w	r1, r7, #12
 800262a:	f04f 33ff 	mov.w	r3, #4294967295
 800262e:	2203      	movs	r2, #3
 8002630:	4807      	ldr	r0, [pc, #28]	@ (8002650 <IMU_init+0xcc>)
 8002632:	f003 fc27 	bl	8005e84 <HAL_UART_Transmit>

    HAL_UART_Receive_DMA(&huart2, IMU_data_buffer, IMU_RECEIVE_DATA_LGTH);
 8002636:	22c8      	movs	r2, #200	@ 0xc8
 8002638:	4908      	ldr	r1, [pc, #32]	@ (800265c <IMU_init+0xd8>)
 800263a:	4805      	ldr	r0, [pc, #20]	@ (8002650 <IMU_init+0xcc>)
 800263c:	f003 fcad 	bl	8005f9a <HAL_UART_Receive_DMA>

    IMU_init_GyroOffset();
 8002640:	f000 fa8c 	bl	8002b5c <IMU_init_GyroOffset>
}
 8002644:	bf00      	nop
 8002646:	3710      	adds	r7, #16
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40023800 	.word	0x40023800
 8002650:	20000550 	.word	0x20000550
 8002654:	40004400 	.word	0x40004400
 8002658:	08009a3c 	.word	0x08009a3c
 800265c:	200005f8 	.word	0x200005f8

08002660 <IMU_Decode_Gyro_Data>:

uint8_t IMU_Decode_Gyro_Data(void) {
 8002660:	b490      	push	{r4, r7}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0

	uint8_t mean_counter = 0;
 8002666:	2300      	movs	r3, #0
 8002668:	73fb      	strb	r3, [r7, #15]

	for(int i = 0 ; i < IMU_RECEIVE_DATA_LGTH ; i++) {
 800266a:	2300      	movs	r3, #0
 800266c:	60bb      	str	r3, [r7, #8]
 800266e:	e030      	b.n	80026d2 <IMU_Decode_Gyro_Data+0x72>

		if(IMU_data_buffer[i] == 0x55 && IMU_data_buffer[i+1] == 0x52){
 8002670:	4a1d      	ldr	r2, [pc, #116]	@ (80026e8 <IMU_Decode_Gyro_Data+0x88>)
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	4413      	add	r3, r2
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	2b55      	cmp	r3, #85	@ 0x55
 800267a:	d127      	bne.n	80026cc <IMU_Decode_Gyro_Data+0x6c>
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	3301      	adds	r3, #1
 8002680:	4a19      	ldr	r2, [pc, #100]	@ (80026e8 <IMU_Decode_Gyro_Data+0x88>)
 8002682:	5cd3      	ldrb	r3, [r2, r3]
 8002684:	2b52      	cmp	r3, #82	@ 0x52
 8002686:	d121      	bne.n	80026cc <IMU_Decode_Gyro_Data+0x6c>

			if(mean_counter >= IMU_GYRO_MEAN_VALUE) break;
 8002688:	7bfb      	ldrb	r3, [r7, #15]
 800268a:	2b05      	cmp	r3, #5
 800268c:	d825      	bhi.n	80026da <IMU_Decode_Gyro_Data+0x7a>

			for (int j = 0 ; j < IMU_GYRO_DATA_LGTH ; j++) {
 800268e:	2300      	movs	r3, #0
 8002690:	607b      	str	r3, [r7, #4]
 8002692:	e012      	b.n	80026ba <IMU_Decode_Gyro_Data+0x5a>

				IMU_gyro_data[j][mean_counter] = IMU_data_buffer[i + j];
 8002694:	68ba      	ldr	r2, [r7, #8]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4413      	add	r3, r2
 800269a:	7bf9      	ldrb	r1, [r7, #15]
 800269c:	4a12      	ldr	r2, [pc, #72]	@ (80026e8 <IMU_Decode_Gyro_Data+0x88>)
 800269e:	5cd4      	ldrb	r4, [r2, r3]
 80026a0:	4812      	ldr	r0, [pc, #72]	@ (80026ec <IMU_Decode_Gyro_Data+0x8c>)
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	4613      	mov	r3, r2
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	4413      	add	r3, r2
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	4403      	add	r3, r0
 80026ae:	440b      	add	r3, r1
 80026b0:	4622      	mov	r2, r4
 80026b2:	701a      	strb	r2, [r3, #0]
			for (int j = 0 ; j < IMU_GYRO_DATA_LGTH ; j++) {
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	3301      	adds	r3, #1
 80026b8:	607b      	str	r3, [r7, #4]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2b07      	cmp	r3, #7
 80026be:	dde9      	ble.n	8002694 <IMU_Decode_Gyro_Data+0x34>
			}

			mean_counter++;
 80026c0:	7bfb      	ldrb	r3, [r7, #15]
 80026c2:	3301      	adds	r3, #1
 80026c4:	73fb      	strb	r3, [r7, #15]
			i = i + IMU_GYRO_DATA_LGTH - 1;
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	3307      	adds	r3, #7
 80026ca:	60bb      	str	r3, [r7, #8]
	for(int i = 0 ; i < IMU_RECEIVE_DATA_LGTH ; i++) {
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	3301      	adds	r3, #1
 80026d0:	60bb      	str	r3, [r7, #8]
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	2bc7      	cmp	r3, #199	@ 0xc7
 80026d6:	ddcb      	ble.n	8002670 <IMU_Decode_Gyro_Data+0x10>
 80026d8:	e000      	b.n	80026dc <IMU_Decode_Gyro_Data+0x7c>
			if(mean_counter >= IMU_GYRO_MEAN_VALUE) break;
 80026da:	bf00      	nop
		}
	}

	return mean_counter;
 80026dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bc90      	pop	{r4, r7}
 80026e6:	4770      	bx	lr
 80026e8:	200005f8 	.word	0x200005f8
 80026ec:	200006c0 	.word	0x200006c0

080026f0 <IMU_Calculate_Gyro>:

void IMU_Calculate_Gyro(void) {
 80026f0:	b5b0      	push	{r4, r5, r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0

	uint8_t mean_counter = IMU_Decode_Gyro_Data();
 80026f6:	f7ff ffb3 	bl	8002660 <IMU_Decode_Gyro_Data>
 80026fa:	4603      	mov	r3, r0
 80026fc:	70fb      	strb	r3, [r7, #3]
	double mean_gyro = 0;
 80026fe:	f04f 0200 	mov.w	r2, #0
 8002702:	f04f 0300 	mov.w	r3, #0
 8002706:	e9c7 2302 	strd	r2, r3, [r7, #8]

	for(int i = 0 ; i < mean_counter ; i++) {
 800270a:	2300      	movs	r3, #0
 800270c:	607b      	str	r3, [r7, #4]
 800270e:	e041      	b.n	8002794 <IMU_Calculate_Gyro+0xa4>
		if(IMU_gyro_data[0][i] == 0x55 && IMU_gyro_data[1][i] == 0x52) {
 8002710:	4a2c      	ldr	r2, [pc, #176]	@ (80027c4 <IMU_Calculate_Gyro+0xd4>)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4413      	add	r3, r2
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	2b55      	cmp	r3, #85	@ 0x55
 800271a:	d138      	bne.n	800278e <IMU_Calculate_Gyro+0x9e>
 800271c:	4a29      	ldr	r2, [pc, #164]	@ (80027c4 <IMU_Calculate_Gyro+0xd4>)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4413      	add	r3, r2
 8002722:	3306      	adds	r3, #6
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	2b52      	cmp	r3, #82	@ 0x52
 8002728:	d131      	bne.n	800278e <IMU_Calculate_Gyro+0x9e>

			int16_t temp_w = ((int16_t)IMU_gyro_data[5][0] << 8) | (int16_t)IMU_gyro_data[4][0];
 800272a:	4b26      	ldr	r3, [pc, #152]	@ (80027c4 <IMU_Calculate_Gyro+0xd4>)
 800272c:	7f9b      	ldrb	r3, [r3, #30]
 800272e:	021b      	lsls	r3, r3, #8
 8002730:	b21a      	sxth	r2, r3
 8002732:	4b24      	ldr	r3, [pc, #144]	@ (80027c4 <IMU_Calculate_Gyro+0xd4>)
 8002734:	7e1b      	ldrb	r3, [r3, #24]
 8002736:	b21b      	sxth	r3, r3
 8002738:	4313      	orrs	r3, r2
 800273a:	803b      	strh	r3, [r7, #0]
			mean_gyro += (-(((double)temp_w) * 2000.0 / 32768.0) - gyro_offset[1]);
 800273c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002740:	4618      	mov	r0, r3
 8002742:	f7fd feef 	bl	8000524 <__aeabi_i2d>
 8002746:	f04f 0200 	mov.w	r2, #0
 800274a:	4b1f      	ldr	r3, [pc, #124]	@ (80027c8 <IMU_Calculate_Gyro+0xd8>)
 800274c:	f7fd ff54 	bl	80005f8 <__aeabi_dmul>
 8002750:	4602      	mov	r2, r0
 8002752:	460b      	mov	r3, r1
 8002754:	4610      	mov	r0, r2
 8002756:	4619      	mov	r1, r3
 8002758:	f04f 0200 	mov.w	r2, #0
 800275c:	4b1b      	ldr	r3, [pc, #108]	@ (80027cc <IMU_Calculate_Gyro+0xdc>)
 800275e:	f7fe f875 	bl	800084c <__aeabi_ddiv>
 8002762:	4602      	mov	r2, r0
 8002764:	460b      	mov	r3, r1
 8002766:	4614      	mov	r4, r2
 8002768:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800276c:	4b18      	ldr	r3, [pc, #96]	@ (80027d0 <IMU_Calculate_Gyro+0xe0>)
 800276e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002772:	4620      	mov	r0, r4
 8002774:	4629      	mov	r1, r5
 8002776:	f7fd fd87 	bl	8000288 <__aeabi_dsub>
 800277a:	4602      	mov	r2, r0
 800277c:	460b      	mov	r3, r1
 800277e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002782:	f7fd fd83 	bl	800028c <__adddf3>
 8002786:	4602      	mov	r2, r0
 8002788:	460b      	mov	r3, r1
 800278a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	for(int i = 0 ; i < mean_counter ; i++) {
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	3301      	adds	r3, #1
 8002792:	607b      	str	r3, [r7, #4]
 8002794:	78fb      	ldrb	r3, [r7, #3]
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	429a      	cmp	r2, r3
 800279a:	dbb9      	blt.n	8002710 <IMU_Calculate_Gyro+0x20>
		}
	}
	gyro[1] = mean_gyro / mean_counter;
 800279c:	78fb      	ldrb	r3, [r7, #3]
 800279e:	4618      	mov	r0, r3
 80027a0:	f7fd fec0 	bl	8000524 <__aeabi_i2d>
 80027a4:	4602      	mov	r2, r0
 80027a6:	460b      	mov	r3, r1
 80027a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80027ac:	f7fe f84e 	bl	800084c <__aeabi_ddiv>
 80027b0:	4602      	mov	r2, r0
 80027b2:	460b      	mov	r3, r1
 80027b4:	4907      	ldr	r1, [pc, #28]	@ (80027d4 <IMU_Calculate_Gyro+0xe4>)
 80027b6:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 80027ba:	bf00      	nop
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bdb0      	pop	{r4, r5, r7, pc}
 80027c2:	bf00      	nop
 80027c4:	200006c0 	.word	0x200006c0
 80027c8:	409f4000 	.word	0x409f4000
 80027cc:	40e00000 	.word	0x40e00000
 80027d0:	20000738 	.word	0x20000738
 80027d4:	20000708 	.word	0x20000708

080027d8 <IMU_Calculate_All_Data>:

void IMU_Calculate_All_Data(uint8_t IMU_Raw_Data_Buffer[8]) {
 80027d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027dc:	b088      	sub	sp, #32
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
    if(IMU_Raw_Data_Buffer[0] == 0x55) {
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	2b55      	cmp	r3, #85	@ 0x55
 80027e8:	f040 81a0 	bne.w	8002b2c <IMU_Calculate_All_Data+0x354>
        int16_t temp_a[3] = {0, 0, 0};
 80027ec:	2300      	movs	r3, #0
 80027ee:	833b      	strh	r3, [r7, #24]
 80027f0:	2300      	movs	r3, #0
 80027f2:	837b      	strh	r3, [r7, #26]
 80027f4:	2300      	movs	r3, #0
 80027f6:	83bb      	strh	r3, [r7, #28]
        int16_t temp_w[3] = {0, 0, 0};
 80027f8:	2300      	movs	r3, #0
 80027fa:	823b      	strh	r3, [r7, #16]
 80027fc:	2300      	movs	r3, #0
 80027fe:	827b      	strh	r3, [r7, #18]
 8002800:	2300      	movs	r3, #0
 8002802:	82bb      	strh	r3, [r7, #20]
        int16_t temp_angle[3] = {0, 0, 0};
 8002804:	2300      	movs	r3, #0
 8002806:	813b      	strh	r3, [r7, #8]
 8002808:	2300      	movs	r3, #0
 800280a:	817b      	strh	r3, [r7, #10]
 800280c:	2300      	movs	r3, #0
 800280e:	81bb      	strh	r3, [r7, #12]

        switch(IMU_Raw_Data_Buffer[1]) {
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	3301      	adds	r3, #1
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	2b53      	cmp	r3, #83	@ 0x53
 8002818:	f000 8106 	beq.w	8002a28 <IMU_Calculate_All_Data+0x250>
 800281c:	2b53      	cmp	r3, #83	@ 0x53
 800281e:	f300 8185 	bgt.w	8002b2c <IMU_Calculate_All_Data+0x354>
 8002822:	2b51      	cmp	r3, #81	@ 0x51
 8002824:	d002      	beq.n	800282c <IMU_Calculate_All_Data+0x54>
 8002826:	2b52      	cmp	r3, #82	@ 0x52
 8002828:	d06d      	beq.n	8002906 <IMU_Calculate_All_Data+0x12e>
                angle[1] = -(((double)temp_angle[1]) * 180.0 / 32768.0) + 90.0;
                angle[2] = -(((double)temp_angle[2]) * 180.0 / 32768.0) + 90.0;
                break;
        }
    }
}
 800282a:	e17f      	b.n	8002b2c <IMU_Calculate_All_Data+0x354>
                temp_a[0] = ((int16_t)IMU_Raw_Data_Buffer[3] << 8) | (int16_t)IMU_Raw_Data_Buffer[2];
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	3303      	adds	r3, #3
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	021b      	lsls	r3, r3, #8
 8002834:	b21a      	sxth	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	3302      	adds	r3, #2
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	b21b      	sxth	r3, r3
 800283e:	4313      	orrs	r3, r2
 8002840:	b21b      	sxth	r3, r3
 8002842:	833b      	strh	r3, [r7, #24]
                temp_a[1] = ((int16_t)IMU_Raw_Data_Buffer[5] << 8) | (int16_t)IMU_Raw_Data_Buffer[4];
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	3305      	adds	r3, #5
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	021b      	lsls	r3, r3, #8
 800284c:	b21a      	sxth	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	3304      	adds	r3, #4
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	b21b      	sxth	r3, r3
 8002856:	4313      	orrs	r3, r2
 8002858:	b21b      	sxth	r3, r3
 800285a:	837b      	strh	r3, [r7, #26]
                temp_a[2] = ((int16_t)IMU_Raw_Data_Buffer[7] << 8) | (int16_t)IMU_Raw_Data_Buffer[6];
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	3307      	adds	r3, #7
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	021b      	lsls	r3, r3, #8
 8002864:	b21a      	sxth	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	3306      	adds	r3, #6
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	b21b      	sxth	r3, r3
 800286e:	4313      	orrs	r3, r2
 8002870:	b21b      	sxth	r3, r3
 8002872:	83bb      	strh	r3, [r7, #28]
                acc[0] = ((double)temp_a[0]) * 16 / 32768.0;
 8002874:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002878:	4618      	mov	r0, r3
 800287a:	f7fd fe53 	bl	8000524 <__aeabi_i2d>
 800287e:	f04f 0200 	mov.w	r2, #0
 8002882:	4bad      	ldr	r3, [pc, #692]	@ (8002b38 <IMU_Calculate_All_Data+0x360>)
 8002884:	f7fd feb8 	bl	80005f8 <__aeabi_dmul>
 8002888:	4602      	mov	r2, r0
 800288a:	460b      	mov	r3, r1
 800288c:	4610      	mov	r0, r2
 800288e:	4619      	mov	r1, r3
 8002890:	f04f 0200 	mov.w	r2, #0
 8002894:	4ba9      	ldr	r3, [pc, #676]	@ (8002b3c <IMU_Calculate_All_Data+0x364>)
 8002896:	f7fd ffd9 	bl	800084c <__aeabi_ddiv>
 800289a:	4602      	mov	r2, r0
 800289c:	460b      	mov	r3, r1
 800289e:	49a8      	ldr	r1, [pc, #672]	@ (8002b40 <IMU_Calculate_All_Data+0x368>)
 80028a0:	e9c1 2300 	strd	r2, r3, [r1]
                acc[1] = ((double)temp_a[1]) * 16 / 32768.0;
 80028a4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7fd fe3b 	bl	8000524 <__aeabi_i2d>
 80028ae:	f04f 0200 	mov.w	r2, #0
 80028b2:	4ba1      	ldr	r3, [pc, #644]	@ (8002b38 <IMU_Calculate_All_Data+0x360>)
 80028b4:	f7fd fea0 	bl	80005f8 <__aeabi_dmul>
 80028b8:	4602      	mov	r2, r0
 80028ba:	460b      	mov	r3, r1
 80028bc:	4610      	mov	r0, r2
 80028be:	4619      	mov	r1, r3
 80028c0:	f04f 0200 	mov.w	r2, #0
 80028c4:	4b9d      	ldr	r3, [pc, #628]	@ (8002b3c <IMU_Calculate_All_Data+0x364>)
 80028c6:	f7fd ffc1 	bl	800084c <__aeabi_ddiv>
 80028ca:	4602      	mov	r2, r0
 80028cc:	460b      	mov	r3, r1
 80028ce:	499c      	ldr	r1, [pc, #624]	@ (8002b40 <IMU_Calculate_All_Data+0x368>)
 80028d0:	e9c1 2302 	strd	r2, r3, [r1, #8]
                acc[2] = ((double)temp_a[2]) * 16 / 32768.0;
 80028d4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80028d8:	4618      	mov	r0, r3
 80028da:	f7fd fe23 	bl	8000524 <__aeabi_i2d>
 80028de:	f04f 0200 	mov.w	r2, #0
 80028e2:	4b95      	ldr	r3, [pc, #596]	@ (8002b38 <IMU_Calculate_All_Data+0x360>)
 80028e4:	f7fd fe88 	bl	80005f8 <__aeabi_dmul>
 80028e8:	4602      	mov	r2, r0
 80028ea:	460b      	mov	r3, r1
 80028ec:	4610      	mov	r0, r2
 80028ee:	4619      	mov	r1, r3
 80028f0:	f04f 0200 	mov.w	r2, #0
 80028f4:	4b91      	ldr	r3, [pc, #580]	@ (8002b3c <IMU_Calculate_All_Data+0x364>)
 80028f6:	f7fd ffa9 	bl	800084c <__aeabi_ddiv>
 80028fa:	4602      	mov	r2, r0
 80028fc:	460b      	mov	r3, r1
 80028fe:	4990      	ldr	r1, [pc, #576]	@ (8002b40 <IMU_Calculate_All_Data+0x368>)
 8002900:	e9c1 2304 	strd	r2, r3, [r1, #16]
                break;
 8002904:	e112      	b.n	8002b2c <IMU_Calculate_All_Data+0x354>
                temp_w[0] = ((int16_t)IMU_Raw_Data_Buffer[3] << 8) | (int16_t)IMU_Raw_Data_Buffer[2];
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	3303      	adds	r3, #3
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	021b      	lsls	r3, r3, #8
 800290e:	b21a      	sxth	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	3302      	adds	r3, #2
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	b21b      	sxth	r3, r3
 8002918:	4313      	orrs	r3, r2
 800291a:	b21b      	sxth	r3, r3
 800291c:	823b      	strh	r3, [r7, #16]
                temp_w[1] = ((int16_t)IMU_Raw_Data_Buffer[5] << 8) | (int16_t)IMU_Raw_Data_Buffer[4];
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	3305      	adds	r3, #5
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	021b      	lsls	r3, r3, #8
 8002926:	b21a      	sxth	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	3304      	adds	r3, #4
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	b21b      	sxth	r3, r3
 8002930:	4313      	orrs	r3, r2
 8002932:	b21b      	sxth	r3, r3
 8002934:	827b      	strh	r3, [r7, #18]
                temp_w[2] = ((int16_t)IMU_Raw_Data_Buffer[7] << 8) | (int16_t)IMU_Raw_Data_Buffer[6];
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	3307      	adds	r3, #7
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	021b      	lsls	r3, r3, #8
 800293e:	b21a      	sxth	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3306      	adds	r3, #6
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	b21b      	sxth	r3, r3
 8002948:	4313      	orrs	r3, r2
 800294a:	b21b      	sxth	r3, r3
 800294c:	82bb      	strh	r3, [r7, #20]
                gyro[0] = -(((double)temp_w[0]) * 2000.0 / 32768.0) - gyro_offset[0];
 800294e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002952:	4618      	mov	r0, r3
 8002954:	f7fd fde6 	bl	8000524 <__aeabi_i2d>
 8002958:	f04f 0200 	mov.w	r2, #0
 800295c:	4b79      	ldr	r3, [pc, #484]	@ (8002b44 <IMU_Calculate_All_Data+0x36c>)
 800295e:	f7fd fe4b 	bl	80005f8 <__aeabi_dmul>
 8002962:	4602      	mov	r2, r0
 8002964:	460b      	mov	r3, r1
 8002966:	4610      	mov	r0, r2
 8002968:	4619      	mov	r1, r3
 800296a:	f04f 0200 	mov.w	r2, #0
 800296e:	4b73      	ldr	r3, [pc, #460]	@ (8002b3c <IMU_Calculate_All_Data+0x364>)
 8002970:	f7fd ff6c 	bl	800084c <__aeabi_ddiv>
 8002974:	4602      	mov	r2, r0
 8002976:	460b      	mov	r3, r1
 8002978:	4692      	mov	sl, r2
 800297a:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
 800297e:	4b72      	ldr	r3, [pc, #456]	@ (8002b48 <IMU_Calculate_All_Data+0x370>)
 8002980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002984:	4650      	mov	r0, sl
 8002986:	4659      	mov	r1, fp
 8002988:	f7fd fc7e 	bl	8000288 <__aeabi_dsub>
 800298c:	4602      	mov	r2, r0
 800298e:	460b      	mov	r3, r1
 8002990:	496e      	ldr	r1, [pc, #440]	@ (8002b4c <IMU_Calculate_All_Data+0x374>)
 8002992:	e9c1 2300 	strd	r2, r3, [r1]
                gyro[1] = -(((double)temp_w[1]) * 2000.0 / 32768.0) - gyro_offset[1];
 8002996:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800299a:	4618      	mov	r0, r3
 800299c:	f7fd fdc2 	bl	8000524 <__aeabi_i2d>
 80029a0:	f04f 0200 	mov.w	r2, #0
 80029a4:	4b67      	ldr	r3, [pc, #412]	@ (8002b44 <IMU_Calculate_All_Data+0x36c>)
 80029a6:	f7fd fe27 	bl	80005f8 <__aeabi_dmul>
 80029aa:	4602      	mov	r2, r0
 80029ac:	460b      	mov	r3, r1
 80029ae:	4610      	mov	r0, r2
 80029b0:	4619      	mov	r1, r3
 80029b2:	f04f 0200 	mov.w	r2, #0
 80029b6:	4b61      	ldr	r3, [pc, #388]	@ (8002b3c <IMU_Calculate_All_Data+0x364>)
 80029b8:	f7fd ff48 	bl	800084c <__aeabi_ddiv>
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	4690      	mov	r8, r2
 80029c2:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 80029c6:	4b60      	ldr	r3, [pc, #384]	@ (8002b48 <IMU_Calculate_All_Data+0x370>)
 80029c8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80029cc:	4640      	mov	r0, r8
 80029ce:	4649      	mov	r1, r9
 80029d0:	f7fd fc5a 	bl	8000288 <__aeabi_dsub>
 80029d4:	4602      	mov	r2, r0
 80029d6:	460b      	mov	r3, r1
 80029d8:	495c      	ldr	r1, [pc, #368]	@ (8002b4c <IMU_Calculate_All_Data+0x374>)
 80029da:	e9c1 2302 	strd	r2, r3, [r1, #8]
                gyro[2] = -(((double)temp_w[2]) * 2000.0 / 32768.0) - gyro_offset[2];
 80029de:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7fd fd9e 	bl	8000524 <__aeabi_i2d>
 80029e8:	f04f 0200 	mov.w	r2, #0
 80029ec:	4b55      	ldr	r3, [pc, #340]	@ (8002b44 <IMU_Calculate_All_Data+0x36c>)
 80029ee:	f7fd fe03 	bl	80005f8 <__aeabi_dmul>
 80029f2:	4602      	mov	r2, r0
 80029f4:	460b      	mov	r3, r1
 80029f6:	4610      	mov	r0, r2
 80029f8:	4619      	mov	r1, r3
 80029fa:	f04f 0200 	mov.w	r2, #0
 80029fe:	4b4f      	ldr	r3, [pc, #316]	@ (8002b3c <IMU_Calculate_All_Data+0x364>)
 8002a00:	f7fd ff24 	bl	800084c <__aeabi_ddiv>
 8002a04:	4602      	mov	r2, r0
 8002a06:	460b      	mov	r3, r1
 8002a08:	4614      	mov	r4, r2
 8002a0a:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8002a0e:	4b4e      	ldr	r3, [pc, #312]	@ (8002b48 <IMU_Calculate_All_Data+0x370>)
 8002a10:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002a14:	4620      	mov	r0, r4
 8002a16:	4629      	mov	r1, r5
 8002a18:	f7fd fc36 	bl	8000288 <__aeabi_dsub>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	460b      	mov	r3, r1
 8002a20:	494a      	ldr	r1, [pc, #296]	@ (8002b4c <IMU_Calculate_All_Data+0x374>)
 8002a22:	e9c1 2304 	strd	r2, r3, [r1, #16]
                break;
 8002a26:	e081      	b.n	8002b2c <IMU_Calculate_All_Data+0x354>
                temp_angle[0] = ((int16_t)IMU_Raw_Data_Buffer[3] << 8) | (int16_t)IMU_Raw_Data_Buffer[2];
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	3303      	adds	r3, #3
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	021b      	lsls	r3, r3, #8
 8002a30:	b21a      	sxth	r2, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	3302      	adds	r3, #2
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	b21b      	sxth	r3, r3
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	b21b      	sxth	r3, r3
 8002a3e:	813b      	strh	r3, [r7, #8]
                temp_angle[1] = ((int16_t)IMU_Raw_Data_Buffer[5] << 8) | (int16_t)IMU_Raw_Data_Buffer[4];
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3305      	adds	r3, #5
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	021b      	lsls	r3, r3, #8
 8002a48:	b21a      	sxth	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	3304      	adds	r3, #4
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	b21b      	sxth	r3, r3
 8002a52:	4313      	orrs	r3, r2
 8002a54:	b21b      	sxth	r3, r3
 8002a56:	817b      	strh	r3, [r7, #10]
                temp_angle[2] = ((int16_t)IMU_Raw_Data_Buffer[7] << 8) | (int16_t)IMU_Raw_Data_Buffer[6];
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	3307      	adds	r3, #7
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	021b      	lsls	r3, r3, #8
 8002a60:	b21a      	sxth	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	3306      	adds	r3, #6
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	b21b      	sxth	r3, r3
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	b21b      	sxth	r3, r3
 8002a6e:	81bb      	strh	r3, [r7, #12]
                angle[0] = -(((double)temp_angle[0]) * 180.0 / 32768.0) + 90.0;
 8002a70:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7fd fd55 	bl	8000524 <__aeabi_i2d>
 8002a7a:	f04f 0200 	mov.w	r2, #0
 8002a7e:	4b34      	ldr	r3, [pc, #208]	@ (8002b50 <IMU_Calculate_All_Data+0x378>)
 8002a80:	f7fd fdba 	bl	80005f8 <__aeabi_dmul>
 8002a84:	4602      	mov	r2, r0
 8002a86:	460b      	mov	r3, r1
 8002a88:	4610      	mov	r0, r2
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	f04f 0200 	mov.w	r2, #0
 8002a90:	4b2a      	ldr	r3, [pc, #168]	@ (8002b3c <IMU_Calculate_All_Data+0x364>)
 8002a92:	f7fd fedb 	bl	800084c <__aeabi_ddiv>
 8002a96:	4602      	mov	r2, r0
 8002a98:	460b      	mov	r3, r1
 8002a9a:	f04f 0000 	mov.w	r0, #0
 8002a9e:	492d      	ldr	r1, [pc, #180]	@ (8002b54 <IMU_Calculate_All_Data+0x37c>)
 8002aa0:	f7fd fbf2 	bl	8000288 <__aeabi_dsub>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	492b      	ldr	r1, [pc, #172]	@ (8002b58 <IMU_Calculate_All_Data+0x380>)
 8002aaa:	e9c1 2300 	strd	r2, r3, [r1]
                angle[1] = -(((double)temp_angle[1]) * 180.0 / 32768.0) + 90.0;
 8002aae:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7fd fd36 	bl	8000524 <__aeabi_i2d>
 8002ab8:	f04f 0200 	mov.w	r2, #0
 8002abc:	4b24      	ldr	r3, [pc, #144]	@ (8002b50 <IMU_Calculate_All_Data+0x378>)
 8002abe:	f7fd fd9b 	bl	80005f8 <__aeabi_dmul>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	4610      	mov	r0, r2
 8002ac8:	4619      	mov	r1, r3
 8002aca:	f04f 0200 	mov.w	r2, #0
 8002ace:	4b1b      	ldr	r3, [pc, #108]	@ (8002b3c <IMU_Calculate_All_Data+0x364>)
 8002ad0:	f7fd febc 	bl	800084c <__aeabi_ddiv>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	f04f 0000 	mov.w	r0, #0
 8002adc:	491d      	ldr	r1, [pc, #116]	@ (8002b54 <IMU_Calculate_All_Data+0x37c>)
 8002ade:	f7fd fbd3 	bl	8000288 <__aeabi_dsub>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	491c      	ldr	r1, [pc, #112]	@ (8002b58 <IMU_Calculate_All_Data+0x380>)
 8002ae8:	e9c1 2302 	strd	r2, r3, [r1, #8]
                angle[2] = -(((double)temp_angle[2]) * 180.0 / 32768.0) + 90.0;
 8002aec:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7fd fd17 	bl	8000524 <__aeabi_i2d>
 8002af6:	f04f 0200 	mov.w	r2, #0
 8002afa:	4b15      	ldr	r3, [pc, #84]	@ (8002b50 <IMU_Calculate_All_Data+0x378>)
 8002afc:	f7fd fd7c 	bl	80005f8 <__aeabi_dmul>
 8002b00:	4602      	mov	r2, r0
 8002b02:	460b      	mov	r3, r1
 8002b04:	4610      	mov	r0, r2
 8002b06:	4619      	mov	r1, r3
 8002b08:	f04f 0200 	mov.w	r2, #0
 8002b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b3c <IMU_Calculate_All_Data+0x364>)
 8002b0e:	f7fd fe9d 	bl	800084c <__aeabi_ddiv>
 8002b12:	4602      	mov	r2, r0
 8002b14:	460b      	mov	r3, r1
 8002b16:	f04f 0000 	mov.w	r0, #0
 8002b1a:	490e      	ldr	r1, [pc, #56]	@ (8002b54 <IMU_Calculate_All_Data+0x37c>)
 8002b1c:	f7fd fbb4 	bl	8000288 <__aeabi_dsub>
 8002b20:	4602      	mov	r2, r0
 8002b22:	460b      	mov	r3, r1
 8002b24:	490c      	ldr	r1, [pc, #48]	@ (8002b58 <IMU_Calculate_All_Data+0x380>)
 8002b26:	e9c1 2304 	strd	r2, r3, [r1, #16]
                break;
 8002b2a:	bf00      	nop
}
 8002b2c:	bf00      	nop
 8002b2e:	3720      	adds	r7, #32
 8002b30:	46bd      	mov	sp, r7
 8002b32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b36:	bf00      	nop
 8002b38:	40300000 	.word	0x40300000
 8002b3c:	40e00000 	.word	0x40e00000
 8002b40:	200006f0 	.word	0x200006f0
 8002b44:	409f4000 	.word	0x409f4000
 8002b48:	20000738 	.word	0x20000738
 8002b4c:	20000708 	.word	0x20000708
 8002b50:	40668000 	.word	0x40668000
 8002b54:	40568000 	.word	0x40568000
 8002b58:	20000720 	.word	0x20000720

08002b5c <IMU_init_GyroOffset>:

void IMU_init_GyroOffset(void) {
 8002b5c:	b5b0      	push	{r4, r5, r7, lr}
 8002b5e:	b092      	sub	sp, #72	@ 0x48
 8002b60:	af00      	add	r7, sp, #0

	uint8_t flag = 1;
 8002b62:	2301      	movs	r3, #1
 8002b64:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

	while(flag == 1) {
 8002b68:	e10d      	b.n	8002d86 <IMU_init_GyroOffset+0x22a>

		uint8_t mean_counter = 120;
 8002b6a:	2378      	movs	r3, #120	@ 0x78
 8002b6c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		double gyro_mean[3] = {0.0};
 8002b70:	f107 0310 	add.w	r3, r7, #16
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	605a      	str	r2, [r3, #4]
 8002b7a:	609a      	str	r2, [r3, #8]
 8002b7c:	60da      	str	r2, [r3, #12]
 8002b7e:	611a      	str	r2, [r3, #16]
 8002b80:	615a      	str	r2, [r3, #20]

		mean_counter /= IMU_GYRO_MEAN_VALUE;
 8002b82:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002b86:	4a85      	ldr	r2, [pc, #532]	@ (8002d9c <IMU_init_GyroOffset+0x240>)
 8002b88:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8c:	089b      	lsrs	r3, r3, #2
 8002b8e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

		for (int i = 0 ; i < mean_counter ; i++) {
 8002b92:	2300      	movs	r3, #0
 8002b94:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b96:	e04f      	b.n	8002c38 <IMU_init_GyroOffset+0xdc>

			IMU_Decode_Gyro_Data();
 8002b98:	f7ff fd62 	bl	8002660 <IMU_Decode_Gyro_Data>

			for (int j = 0 ; j < IMU_GYRO_MEAN_VALUE ; j++) {
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ba0:	e041      	b.n	8002c26 <IMU_init_GyroOffset+0xca>

				uint8_t Temp_gyro_data[IMU_GYRO_DATA_LGTH];

				for (int k = 0 ; k < IMU_GYRO_DATA_LGTH ; k++) {
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ba6:	e012      	b.n	8002bce <IMU_init_GyroOffset+0x72>
					Temp_gyro_data[k] = IMU_gyro_data[k][j];
 8002ba8:	497d      	ldr	r1, [pc, #500]	@ (8002da0 <IMU_init_GyroOffset+0x244>)
 8002baa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002bac:	4613      	mov	r3, r2
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	4413      	add	r3, r2
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	18ca      	adds	r2, r1, r3
 8002bb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bb8:	4413      	add	r3, r2
 8002bba:	7819      	ldrb	r1, [r3, #0]
 8002bbc:	f107 0208 	add.w	r2, r7, #8
 8002bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bc2:	4413      	add	r3, r2
 8002bc4:	460a      	mov	r2, r1
 8002bc6:	701a      	strb	r2, [r3, #0]
				for (int k = 0 ; k < IMU_GYRO_DATA_LGTH ; k++) {
 8002bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bca:	3301      	adds	r3, #1
 8002bcc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bd0:	2b07      	cmp	r3, #7
 8002bd2:	dde9      	ble.n	8002ba8 <IMU_init_GyroOffset+0x4c>
				}

				IMU_Calculate_All_Data(Temp_gyro_data);
 8002bd4:	f107 0308 	add.w	r3, r7, #8
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7ff fdfd 	bl	80027d8 <IMU_Calculate_All_Data>

				gyro_mean[0] += gyro[0];
 8002bde:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002be2:	4b70      	ldr	r3, [pc, #448]	@ (8002da4 <IMU_init_GyroOffset+0x248>)
 8002be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be8:	f7fd fb50 	bl	800028c <__adddf3>
 8002bec:	4602      	mov	r2, r0
 8002bee:	460b      	mov	r3, r1
 8002bf0:	e9c7 2304 	strd	r2, r3, [r7, #16]
				gyro_mean[1] += gyro[1];
 8002bf4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002bf8:	4b6a      	ldr	r3, [pc, #424]	@ (8002da4 <IMU_init_GyroOffset+0x248>)
 8002bfa:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002bfe:	f7fd fb45 	bl	800028c <__adddf3>
 8002c02:	4602      	mov	r2, r0
 8002c04:	460b      	mov	r3, r1
 8002c06:	e9c7 2306 	strd	r2, r3, [r7, #24]
				gyro_mean[2] += gyro[2];
 8002c0a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002c0e:	4b65      	ldr	r3, [pc, #404]	@ (8002da4 <IMU_init_GyroOffset+0x248>)
 8002c10:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002c14:	f7fd fb3a 	bl	800028c <__adddf3>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	e9c7 2308 	strd	r2, r3, [r7, #32]
			for (int j = 0 ; j < IMU_GYRO_MEAN_VALUE ; j++) {
 8002c20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c22:	3301      	adds	r3, #1
 8002c24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c28:	2b05      	cmp	r3, #5
 8002c2a:	ddba      	ble.n	8002ba2 <IMU_init_GyroOffset+0x46>

			}

			HAL_Delay(5);
 8002c2c:	2005      	movs	r0, #5
 8002c2e:	f000 f9b3 	bl	8002f98 <HAL_Delay>
		for (int i = 0 ; i < mean_counter ; i++) {
 8002c32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c34:	3301      	adds	r3, #1
 8002c36:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c38:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002c3c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	dbaa      	blt.n	8002b98 <IMU_init_GyroOffset+0x3c>
		}

		gyro_offset[0] = gyro_mean[0] / (IMU_GYRO_MEAN_VALUE * mean_counter);
 8002c42:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002c46:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	4413      	add	r3, r2
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7fd fc66 	bl	8000524 <__aeabi_i2d>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	4620      	mov	r0, r4
 8002c5e:	4629      	mov	r1, r5
 8002c60:	f7fd fdf4 	bl	800084c <__aeabi_ddiv>
 8002c64:	4602      	mov	r2, r0
 8002c66:	460b      	mov	r3, r1
 8002c68:	494f      	ldr	r1, [pc, #316]	@ (8002da8 <IMU_init_GyroOffset+0x24c>)
 8002c6a:	e9c1 2300 	strd	r2, r3, [r1]
		gyro_offset[1] = gyro_mean[1] / (IMU_GYRO_MEAN_VALUE * mean_counter);
 8002c6e:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8002c72:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8002c76:	4613      	mov	r3, r2
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	4413      	add	r3, r2
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7fd fc50 	bl	8000524 <__aeabi_i2d>
 8002c84:	4602      	mov	r2, r0
 8002c86:	460b      	mov	r3, r1
 8002c88:	4620      	mov	r0, r4
 8002c8a:	4629      	mov	r1, r5
 8002c8c:	f7fd fdde 	bl	800084c <__aeabi_ddiv>
 8002c90:	4602      	mov	r2, r0
 8002c92:	460b      	mov	r3, r1
 8002c94:	4944      	ldr	r1, [pc, #272]	@ (8002da8 <IMU_init_GyroOffset+0x24c>)
 8002c96:	e9c1 2302 	strd	r2, r3, [r1, #8]
		gyro_offset[2] = gyro_mean[2] / (IMU_GYRO_MEAN_VALUE * mean_counter);
 8002c9a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002c9e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	4413      	add	r3, r2
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7fd fc3a 	bl	8000524 <__aeabi_i2d>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	4620      	mov	r0, r4
 8002cb6:	4629      	mov	r1, r5
 8002cb8:	f7fd fdc8 	bl	800084c <__aeabi_ddiv>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	4939      	ldr	r1, [pc, #228]	@ (8002da8 <IMU_init_GyroOffset+0x24c>)
 8002cc2:	e9c1 2304 	strd	r2, r3, [r1, #16]

		IMU_Decode_Gyro_Data();
 8002cc6:	f7ff fccb 	bl	8002660 <IMU_Decode_Gyro_Data>

		for (int j = 0 ; j < IMU_GYRO_MEAN_VALUE ; j++) {
 8002cca:	2300      	movs	r3, #0
 8002ccc:	637b      	str	r3, [r7, #52]	@ 0x34
 8002cce:	e057      	b.n	8002d80 <IMU_init_GyroOffset+0x224>

			uint8_t Temp_gyro_data[IMU_GYRO_DATA_LGTH];

			for (int k = 0 ; k < IMU_GYRO_DATA_LGTH ; k++) {
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	633b      	str	r3, [r7, #48]	@ 0x30
 8002cd4:	e011      	b.n	8002cfa <IMU_init_GyroOffset+0x19e>
				Temp_gyro_data[k] = IMU_gyro_data[k][j];
 8002cd6:	4932      	ldr	r1, [pc, #200]	@ (8002da0 <IMU_init_GyroOffset+0x244>)
 8002cd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cda:	4613      	mov	r3, r2
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	4413      	add	r3, r2
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	18ca      	adds	r2, r1, r3
 8002ce4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ce6:	4413      	add	r3, r2
 8002ce8:	7819      	ldrb	r1, [r3, #0]
 8002cea:	463a      	mov	r2, r7
 8002cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cee:	4413      	add	r3, r2
 8002cf0:	460a      	mov	r2, r1
 8002cf2:	701a      	strb	r2, [r3, #0]
			for (int k = 0 ; k < IMU_GYRO_DATA_LGTH ; k++) {
 8002cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cfc:	2b07      	cmp	r3, #7
 8002cfe:	ddea      	ble.n	8002cd6 <IMU_init_GyroOffset+0x17a>
			}

			IMU_Calculate_All_Data(Temp_gyro_data);
 8002d00:	463b      	mov	r3, r7
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7ff fd68 	bl	80027d8 <IMU_Calculate_All_Data>

			if      (abs(gyro[0]) > 1) { flag = 1; break; }
 8002d08:	4b26      	ldr	r3, [pc, #152]	@ (8002da4 <IMU_init_GyroOffset+0x248>)
 8002d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d0e:	4610      	mov	r0, r2
 8002d10:	4619      	mov	r1, r3
 8002d12:	f7fd ff21 	bl	8000b58 <__aeabi_d2iz>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	bfb8      	it	lt
 8002d1c:	425b      	neglt	r3, r3
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	dd03      	ble.n	8002d2a <IMU_init_GyroOffset+0x1ce>
 8002d22:	2301      	movs	r3, #1
 8002d24:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8002d28:	e02d      	b.n	8002d86 <IMU_init_GyroOffset+0x22a>
			else if (abs(gyro[1]) > 1) { flag = 1; break; }
 8002d2a:	4b1e      	ldr	r3, [pc, #120]	@ (8002da4 <IMU_init_GyroOffset+0x248>)
 8002d2c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002d30:	4610      	mov	r0, r2
 8002d32:	4619      	mov	r1, r3
 8002d34:	f7fd ff10 	bl	8000b58 <__aeabi_d2iz>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	bfb8      	it	lt
 8002d3e:	425b      	neglt	r3, r3
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	dd03      	ble.n	8002d4c <IMU_init_GyroOffset+0x1f0>
 8002d44:	2301      	movs	r3, #1
 8002d46:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8002d4a:	e01c      	b.n	8002d86 <IMU_init_GyroOffset+0x22a>
			else if (abs(gyro[2]) > 1) { flag = 1; break; }
 8002d4c:	4b15      	ldr	r3, [pc, #84]	@ (8002da4 <IMU_init_GyroOffset+0x248>)
 8002d4e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002d52:	4610      	mov	r0, r2
 8002d54:	4619      	mov	r1, r3
 8002d56:	f7fd feff 	bl	8000b58 <__aeabi_d2iz>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	bfb8      	it	lt
 8002d60:	425b      	neglt	r3, r3
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	dd03      	ble.n	8002d6e <IMU_init_GyroOffset+0x212>
 8002d66:	2301      	movs	r3, #1
 8002d68:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8002d6c:	e00b      	b.n	8002d86 <IMU_init_GyroOffset+0x22a>
			else                       { flag = 0; }
 8002d6e:	2300      	movs	r3, #0
 8002d70:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

			HAL_Delay(2);
 8002d74:	2002      	movs	r0, #2
 8002d76:	f000 f90f 	bl	8002f98 <HAL_Delay>
		for (int j = 0 ; j < IMU_GYRO_MEAN_VALUE ; j++) {
 8002d7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d82:	2b05      	cmp	r3, #5
 8002d84:	dda4      	ble.n	8002cd0 <IMU_init_GyroOffset+0x174>
	while(flag == 1) {
 8002d86:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	f43f aeed 	beq.w	8002b6a <IMU_init_GyroOffset+0xe>
		}
	}
}
 8002d90:	bf00      	nop
 8002d92:	bf00      	nop
 8002d94:	3748      	adds	r7, #72	@ 0x48
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bdb0      	pop	{r4, r5, r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	aaaaaaab 	.word	0xaaaaaaab
 8002da0:	200006c0 	.word	0x200006c0
 8002da4:	20000708 	.word	0x20000708
 8002da8:	20000738 	.word	0x20000738

08002dac <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b08a      	sub	sp, #40	@ 0x28
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002db4:	f107 0314 	add.w	r3, r7, #20
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	605a      	str	r2, [r3, #4]
 8002dbe:	609a      	str	r2, [r3, #8]
 8002dc0:	60da      	str	r2, [r3, #12]
 8002dc2:	611a      	str	r2, [r3, #16]

  if(huart->Instance==USART2) {
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a30      	ldr	r2, [pc, #192]	@ (8002e8c <HAL_UART_MspInit+0xe0>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d15a      	bne.n	8002e84 <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002dce:	2300      	movs	r3, #0
 8002dd0:	613b      	str	r3, [r7, #16]
 8002dd2:	4b2f      	ldr	r3, [pc, #188]	@ (8002e90 <HAL_UART_MspInit+0xe4>)
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd6:	4a2e      	ldr	r2, [pc, #184]	@ (8002e90 <HAL_UART_MspInit+0xe4>)
 8002dd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ddc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dde:	4b2c      	ldr	r3, [pc, #176]	@ (8002e90 <HAL_UART_MspInit+0xe4>)
 8002de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002de6:	613b      	str	r3, [r7, #16]
 8002de8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002dea:	2300      	movs	r3, #0
 8002dec:	60fb      	str	r3, [r7, #12]
 8002dee:	4b28      	ldr	r3, [pc, #160]	@ (8002e90 <HAL_UART_MspInit+0xe4>)
 8002df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df2:	4a27      	ldr	r2, [pc, #156]	@ (8002e90 <HAL_UART_MspInit+0xe4>)
 8002df4:	f043 0308 	orr.w	r3, r3, #8
 8002df8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dfa:	4b25      	ldr	r3, [pc, #148]	@ (8002e90 <HAL_UART_MspInit+0xe4>)
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dfe:	f003 0308 	and.w	r3, r3, #8
 8002e02:	60fb      	str	r3, [r7, #12]
 8002e04:	68fb      	ldr	r3, [r7, #12]

    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002e06:	2360      	movs	r3, #96	@ 0x60
 8002e08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e12:	2303      	movs	r3, #3
 8002e14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e16:	2307      	movs	r3, #7
 8002e18:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e1a:	f107 0314 	add.w	r3, r7, #20
 8002e1e:	4619      	mov	r1, r3
 8002e20:	481c      	ldr	r0, [pc, #112]	@ (8002e94 <HAL_UART_MspInit+0xe8>)
 8002e22:	f001 f971 	bl	8004108 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002e26:	4b1c      	ldr	r3, [pc, #112]	@ (8002e98 <HAL_UART_MspInit+0xec>)
 8002e28:	4a1c      	ldr	r2, [pc, #112]	@ (8002e9c <HAL_UART_MspInit+0xf0>)
 8002e2a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002e2c:	4b1a      	ldr	r3, [pc, #104]	@ (8002e98 <HAL_UART_MspInit+0xec>)
 8002e2e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002e32:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e34:	4b18      	ldr	r3, [pc, #96]	@ (8002e98 <HAL_UART_MspInit+0xec>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e3a:	4b17      	ldr	r3, [pc, #92]	@ (8002e98 <HAL_UART_MspInit+0xec>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e40:	4b15      	ldr	r3, [pc, #84]	@ (8002e98 <HAL_UART_MspInit+0xec>)
 8002e42:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e46:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e48:	4b13      	ldr	r3, [pc, #76]	@ (8002e98 <HAL_UART_MspInit+0xec>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e4e:	4b12      	ldr	r3, [pc, #72]	@ (8002e98 <HAL_UART_MspInit+0xec>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002e54:	4b10      	ldr	r3, [pc, #64]	@ (8002e98 <HAL_UART_MspInit+0xec>)
 8002e56:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e5a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002e5c:	4b0e      	ldr	r3, [pc, #56]	@ (8002e98 <HAL_UART_MspInit+0xec>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e62:	4b0d      	ldr	r3, [pc, #52]	@ (8002e98 <HAL_UART_MspInit+0xec>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002e68:	480b      	ldr	r0, [pc, #44]	@ (8002e98 <HAL_UART_MspInit+0xec>)
 8002e6a:	f000 fddd 	bl	8003a28 <HAL_DMA_Init>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <HAL_UART_MspInit+0xcc>
    {
    	Sensor_Error_Handler();
 8002e74:	f7ff f9d8 	bl	8002228 <Sensor_Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a07      	ldr	r2, [pc, #28]	@ (8002e98 <HAL_UART_MspInit+0xec>)
 8002e7c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002e7e:	4a06      	ldr	r2, [pc, #24]	@ (8002e98 <HAL_UART_MspInit+0xec>)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6393      	str	r3, [r2, #56]	@ 0x38
  }
}
 8002e84:	bf00      	nop
 8002e86:	3728      	adds	r7, #40	@ 0x28
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	40004400 	.word	0x40004400
 8002e90:	40023800 	.word	0x40023800
 8002e94:	40020c00 	.word	0x40020c00
 8002e98:	20000598 	.word	0x20000598
 8002e9c:	40026088 	.word	0x40026088

08002ea0 <DMA1_Stream5_IRQHandler>:

void DMA1_Stream5_IRQHandler(void) {
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002ea4:	4802      	ldr	r0, [pc, #8]	@ (8002eb0 <DMA1_Stream5_IRQHandler+0x10>)
 8002ea6:	f000 fec5 	bl	8003c34 <HAL_DMA_IRQHandler>
}
 8002eaa:	bf00      	nop
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	20000598 	.word	0x20000598

08002eb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002eb8:	4b0e      	ldr	r3, [pc, #56]	@ (8002ef4 <HAL_Init+0x40>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a0d      	ldr	r2, [pc, #52]	@ (8002ef4 <HAL_Init+0x40>)
 8002ebe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ec2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ef4 <HAL_Init+0x40>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a0a      	ldr	r2, [pc, #40]	@ (8002ef4 <HAL_Init+0x40>)
 8002eca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ece:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ed0:	4b08      	ldr	r3, [pc, #32]	@ (8002ef4 <HAL_Init+0x40>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a07      	ldr	r2, [pc, #28]	@ (8002ef4 <HAL_Init+0x40>)
 8002ed6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002eda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002edc:	2003      	movs	r0, #3
 8002ede:	f000 fd61 	bl	80039a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ee2:	200f      	movs	r0, #15
 8002ee4:	f000 f808 	bl	8002ef8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ee8:	f7fe fd7e 	bl	80019e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	40023c00 	.word	0x40023c00

08002ef8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f00:	4b12      	ldr	r3, [pc, #72]	@ (8002f4c <HAL_InitTick+0x54>)
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	4b12      	ldr	r3, [pc, #72]	@ (8002f50 <HAL_InitTick+0x58>)
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	4619      	mov	r1, r3
 8002f0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f16:	4618      	mov	r0, r3
 8002f18:	f000 fd79 	bl	8003a0e <HAL_SYSTICK_Config>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e00e      	b.n	8002f44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2b0f      	cmp	r3, #15
 8002f2a:	d80a      	bhi.n	8002f42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	6879      	ldr	r1, [r7, #4]
 8002f30:	f04f 30ff 	mov.w	r0, #4294967295
 8002f34:	f000 fd41 	bl	80039ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f38:	4a06      	ldr	r2, [pc, #24]	@ (8002f54 <HAL_InitTick+0x5c>)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	e000      	b.n	8002f44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3708      	adds	r7, #8
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	20000038 	.word	0x20000038
 8002f50:	20000058 	.word	0x20000058
 8002f54:	20000054 	.word	0x20000054

08002f58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f5c:	4b06      	ldr	r3, [pc, #24]	@ (8002f78 <HAL_IncTick+0x20>)
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	461a      	mov	r2, r3
 8002f62:	4b06      	ldr	r3, [pc, #24]	@ (8002f7c <HAL_IncTick+0x24>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4413      	add	r3, r2
 8002f68:	4a04      	ldr	r2, [pc, #16]	@ (8002f7c <HAL_IncTick+0x24>)
 8002f6a:	6013      	str	r3, [r2, #0]
}
 8002f6c:	bf00      	nop
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	20000058 	.word	0x20000058
 8002f7c:	20000750 	.word	0x20000750

08002f80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
  return uwTick;
 8002f84:	4b03      	ldr	r3, [pc, #12]	@ (8002f94 <HAL_GetTick+0x14>)
 8002f86:	681b      	ldr	r3, [r3, #0]
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	20000750 	.word	0x20000750

08002f98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fa0:	f7ff ffee 	bl	8002f80 <HAL_GetTick>
 8002fa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb0:	d005      	beq.n	8002fbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8002fdc <HAL_Delay+0x44>)
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	4413      	add	r3, r2
 8002fbc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002fbe:	bf00      	nop
 8002fc0:	f7ff ffde 	bl	8002f80 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d8f7      	bhi.n	8002fc0 <HAL_Delay+0x28>
  {
  }
}
 8002fd0:	bf00      	nop
 8002fd2:	bf00      	nop
 8002fd4:	3710      	adds	r7, #16
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	20000058 	.word	0x20000058

08002fe0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e033      	b.n	800305e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d109      	bne.n	8003012 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f7ff fa3e 	bl	8002480 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003016:	f003 0310 	and.w	r3, r3, #16
 800301a:	2b00      	cmp	r3, #0
 800301c:	d118      	bne.n	8003050 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003022:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003026:	f023 0302 	bic.w	r3, r3, #2
 800302a:	f043 0202 	orr.w	r2, r3, #2
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 fa68 	bl	8003508 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003042:	f023 0303 	bic.w	r3, r3, #3
 8003046:	f043 0201 	orr.w	r2, r3, #1
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	641a      	str	r2, [r3, #64]	@ 0x40
 800304e:	e001      	b.n	8003054 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800305c:	7bfb      	ldrb	r3, [r7, #15]
}
 800305e:	4618      	mov	r0, r3
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
	...

08003068 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003074:	2300      	movs	r3, #0
 8003076:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800307e:	2b01      	cmp	r3, #1
 8003080:	d101      	bne.n	8003086 <HAL_ADC_Start_DMA+0x1e>
 8003082:	2302      	movs	r3, #2
 8003084:	e0e9      	b.n	800325a <HAL_ADC_Start_DMA+0x1f2>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2201      	movs	r2, #1
 800308a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	2b01      	cmp	r3, #1
 800309a:	d018      	beq.n	80030ce <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	689a      	ldr	r2, [r3, #8]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f042 0201 	orr.w	r2, r2, #1
 80030aa:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80030ac:	4b6d      	ldr	r3, [pc, #436]	@ (8003264 <HAL_ADC_Start_DMA+0x1fc>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a6d      	ldr	r2, [pc, #436]	@ (8003268 <HAL_ADC_Start_DMA+0x200>)
 80030b2:	fba2 2303 	umull	r2, r3, r2, r3
 80030b6:	0c9a      	lsrs	r2, r3, #18
 80030b8:	4613      	mov	r3, r2
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	4413      	add	r3, r2
 80030be:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80030c0:	e002      	b.n	80030c8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	3b01      	subs	r3, #1
 80030c6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1f9      	bne.n	80030c2 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030dc:	d107      	bne.n	80030ee <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	689a      	ldr	r2, [r3, #8]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80030ec:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f003 0301 	and.w	r3, r3, #1
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	f040 80a1 	bne.w	8003240 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003102:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003106:	f023 0301 	bic.w	r3, r3, #1
 800310a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800311c:	2b00      	cmp	r3, #0
 800311e:	d007      	beq.n	8003130 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003124:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003128:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003134:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003138:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800313c:	d106      	bne.n	800314c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003142:	f023 0206 	bic.w	r2, r3, #6
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	645a      	str	r2, [r3, #68]	@ 0x44
 800314a:	e002      	b.n	8003152 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2200      	movs	r2, #0
 8003150:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800315a:	4b44      	ldr	r3, [pc, #272]	@ (800326c <HAL_ADC_Start_DMA+0x204>)
 800315c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003162:	4a43      	ldr	r2, [pc, #268]	@ (8003270 <HAL_ADC_Start_DMA+0x208>)
 8003164:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800316a:	4a42      	ldr	r2, [pc, #264]	@ (8003274 <HAL_ADC_Start_DMA+0x20c>)
 800316c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003172:	4a41      	ldr	r2, [pc, #260]	@ (8003278 <HAL_ADC_Start_DMA+0x210>)
 8003174:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800317e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800318e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689a      	ldr	r2, [r3, #8]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800319e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	334c      	adds	r3, #76	@ 0x4c
 80031aa:	4619      	mov	r1, r3
 80031ac:	68ba      	ldr	r2, [r7, #8]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f000 fce8 	bl	8003b84 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f003 031f 	and.w	r3, r3, #31
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d12a      	bne.n	8003216 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a2d      	ldr	r2, [pc, #180]	@ (800327c <HAL_ADC_Start_DMA+0x214>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d015      	beq.n	80031f6 <HAL_ADC_Start_DMA+0x18e>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a2c      	ldr	r2, [pc, #176]	@ (8003280 <HAL_ADC_Start_DMA+0x218>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d105      	bne.n	80031e0 <HAL_ADC_Start_DMA+0x178>
 80031d4:	4b25      	ldr	r3, [pc, #148]	@ (800326c <HAL_ADC_Start_DMA+0x204>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f003 031f 	and.w	r3, r3, #31
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00a      	beq.n	80031f6 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a27      	ldr	r2, [pc, #156]	@ (8003284 <HAL_ADC_Start_DMA+0x21c>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d136      	bne.n	8003258 <HAL_ADC_Start_DMA+0x1f0>
 80031ea:	4b20      	ldr	r3, [pc, #128]	@ (800326c <HAL_ADC_Start_DMA+0x204>)
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f003 0310 	and.w	r3, r3, #16
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d130      	bne.n	8003258 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d129      	bne.n	8003258 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689a      	ldr	r2, [r3, #8]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003212:	609a      	str	r2, [r3, #8]
 8003214:	e020      	b.n	8003258 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a18      	ldr	r2, [pc, #96]	@ (800327c <HAL_ADC_Start_DMA+0x214>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d11b      	bne.n	8003258 <HAL_ADC_Start_DMA+0x1f0>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d114      	bne.n	8003258 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800323c:	609a      	str	r2, [r3, #8]
 800323e:	e00b      	b.n	8003258 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003244:	f043 0210 	orr.w	r2, r3, #16
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003250:	f043 0201 	orr.w	r2, r3, #1
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3718      	adds	r7, #24
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	20000038 	.word	0x20000038
 8003268:	431bde83 	.word	0x431bde83
 800326c:	40012300 	.word	0x40012300
 8003270:	08003701 	.word	0x08003701
 8003274:	080037bb 	.word	0x080037bb
 8003278:	080037d7 	.word	0x080037d7
 800327c:	40012000 	.word	0x40012000
 8003280:	40012100 	.word	0x40012100
 8003284:	40012200 	.word	0x40012200

08003288 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80032a4:	bf00      	nop
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80032ce:	2300      	movs	r3, #0
 80032d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d101      	bne.n	80032e0 <HAL_ADC_ConfigChannel+0x1c>
 80032dc:	2302      	movs	r3, #2
 80032de:	e105      	b.n	80034ec <HAL_ADC_ConfigChannel+0x228>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2b09      	cmp	r3, #9
 80032ee:	d925      	bls.n	800333c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68d9      	ldr	r1, [r3, #12]
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	461a      	mov	r2, r3
 80032fe:	4613      	mov	r3, r2
 8003300:	005b      	lsls	r3, r3, #1
 8003302:	4413      	add	r3, r2
 8003304:	3b1e      	subs	r3, #30
 8003306:	2207      	movs	r2, #7
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	43da      	mvns	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	400a      	ands	r2, r1
 8003314:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68d9      	ldr	r1, [r3, #12]
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	b29b      	uxth	r3, r3
 8003326:	4618      	mov	r0, r3
 8003328:	4603      	mov	r3, r0
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	4403      	add	r3, r0
 800332e:	3b1e      	subs	r3, #30
 8003330:	409a      	lsls	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	430a      	orrs	r2, r1
 8003338:	60da      	str	r2, [r3, #12]
 800333a:	e022      	b.n	8003382 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6919      	ldr	r1, [r3, #16]
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	b29b      	uxth	r3, r3
 8003348:	461a      	mov	r2, r3
 800334a:	4613      	mov	r3, r2
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	4413      	add	r3, r2
 8003350:	2207      	movs	r2, #7
 8003352:	fa02 f303 	lsl.w	r3, r2, r3
 8003356:	43da      	mvns	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	400a      	ands	r2, r1
 800335e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6919      	ldr	r1, [r3, #16]
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	689a      	ldr	r2, [r3, #8]
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	b29b      	uxth	r3, r3
 8003370:	4618      	mov	r0, r3
 8003372:	4603      	mov	r3, r0
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	4403      	add	r3, r0
 8003378:	409a      	lsls	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	430a      	orrs	r2, r1
 8003380:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	2b06      	cmp	r3, #6
 8003388:	d824      	bhi.n	80033d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685a      	ldr	r2, [r3, #4]
 8003394:	4613      	mov	r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	4413      	add	r3, r2
 800339a:	3b05      	subs	r3, #5
 800339c:	221f      	movs	r2, #31
 800339e:	fa02 f303 	lsl.w	r3, r2, r3
 80033a2:	43da      	mvns	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	400a      	ands	r2, r1
 80033aa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	4618      	mov	r0, r3
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685a      	ldr	r2, [r3, #4]
 80033be:	4613      	mov	r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	4413      	add	r3, r2
 80033c4:	3b05      	subs	r3, #5
 80033c6:	fa00 f203 	lsl.w	r2, r0, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	430a      	orrs	r2, r1
 80033d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80033d2:	e04c      	b.n	800346e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	2b0c      	cmp	r3, #12
 80033da:	d824      	bhi.n	8003426 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685a      	ldr	r2, [r3, #4]
 80033e6:	4613      	mov	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	4413      	add	r3, r2
 80033ec:	3b23      	subs	r3, #35	@ 0x23
 80033ee:	221f      	movs	r2, #31
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	43da      	mvns	r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	400a      	ands	r2, r1
 80033fc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	b29b      	uxth	r3, r3
 800340a:	4618      	mov	r0, r3
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685a      	ldr	r2, [r3, #4]
 8003410:	4613      	mov	r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	4413      	add	r3, r2
 8003416:	3b23      	subs	r3, #35	@ 0x23
 8003418:	fa00 f203 	lsl.w	r2, r0, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	430a      	orrs	r2, r1
 8003422:	631a      	str	r2, [r3, #48]	@ 0x30
 8003424:	e023      	b.n	800346e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685a      	ldr	r2, [r3, #4]
 8003430:	4613      	mov	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4413      	add	r3, r2
 8003436:	3b41      	subs	r3, #65	@ 0x41
 8003438:	221f      	movs	r2, #31
 800343a:	fa02 f303 	lsl.w	r3, r2, r3
 800343e:	43da      	mvns	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	400a      	ands	r2, r1
 8003446:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	b29b      	uxth	r3, r3
 8003454:	4618      	mov	r0, r3
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685a      	ldr	r2, [r3, #4]
 800345a:	4613      	mov	r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	4413      	add	r3, r2
 8003460:	3b41      	subs	r3, #65	@ 0x41
 8003462:	fa00 f203 	lsl.w	r2, r0, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	430a      	orrs	r2, r1
 800346c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800346e:	4b22      	ldr	r3, [pc, #136]	@ (80034f8 <HAL_ADC_ConfigChannel+0x234>)
 8003470:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a21      	ldr	r2, [pc, #132]	@ (80034fc <HAL_ADC_ConfigChannel+0x238>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d109      	bne.n	8003490 <HAL_ADC_ConfigChannel+0x1cc>
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2b12      	cmp	r3, #18
 8003482:	d105      	bne.n	8003490 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a19      	ldr	r2, [pc, #100]	@ (80034fc <HAL_ADC_ConfigChannel+0x238>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d123      	bne.n	80034e2 <HAL_ADC_ConfigChannel+0x21e>
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2b10      	cmp	r3, #16
 80034a0:	d003      	beq.n	80034aa <HAL_ADC_ConfigChannel+0x1e6>
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2b11      	cmp	r3, #17
 80034a8:	d11b      	bne.n	80034e2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2b10      	cmp	r3, #16
 80034bc:	d111      	bne.n	80034e2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80034be:	4b10      	ldr	r3, [pc, #64]	@ (8003500 <HAL_ADC_ConfigChannel+0x23c>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a10      	ldr	r2, [pc, #64]	@ (8003504 <HAL_ADC_ConfigChannel+0x240>)
 80034c4:	fba2 2303 	umull	r2, r3, r2, r3
 80034c8:	0c9a      	lsrs	r2, r3, #18
 80034ca:	4613      	mov	r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	4413      	add	r3, r2
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80034d4:	e002      	b.n	80034dc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	3b01      	subs	r3, #1
 80034da:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1f9      	bne.n	80034d6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3714      	adds	r7, #20
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr
 80034f8:	40012300 	.word	0x40012300
 80034fc:	40012000 	.word	0x40012000
 8003500:	20000038 	.word	0x20000038
 8003504:	431bde83 	.word	0x431bde83

08003508 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003508:	b480      	push	{r7}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003510:	4b79      	ldr	r3, [pc, #484]	@ (80036f8 <ADC_Init+0x1f0>)
 8003512:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	685a      	ldr	r2, [r3, #4]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	431a      	orrs	r2, r3
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	685a      	ldr	r2, [r3, #4]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800353c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	6859      	ldr	r1, [r3, #4]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	021a      	lsls	r2, r3, #8
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	430a      	orrs	r2, r1
 8003550:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685a      	ldr	r2, [r3, #4]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003560:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	6859      	ldr	r1, [r3, #4]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689a      	ldr	r2, [r3, #8]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	430a      	orrs	r2, r1
 8003572:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	689a      	ldr	r2, [r3, #8]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003582:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6899      	ldr	r1, [r3, #8]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	68da      	ldr	r2, [r3, #12]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	430a      	orrs	r2, r1
 8003594:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800359a:	4a58      	ldr	r2, [pc, #352]	@ (80036fc <ADC_Init+0x1f4>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d022      	beq.n	80035e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	689a      	ldr	r2, [r3, #8]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80035ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6899      	ldr	r1, [r3, #8]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	689a      	ldr	r2, [r3, #8]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80035d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6899      	ldr	r1, [r3, #8]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	430a      	orrs	r2, r1
 80035e2:	609a      	str	r2, [r3, #8]
 80035e4:	e00f      	b.n	8003606 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80035f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	689a      	ldr	r2, [r3, #8]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003604:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	689a      	ldr	r2, [r3, #8]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 0202 	bic.w	r2, r2, #2
 8003614:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	6899      	ldr	r1, [r3, #8]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	7e1b      	ldrb	r3, [r3, #24]
 8003620:	005a      	lsls	r2, r3, #1
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	430a      	orrs	r2, r1
 8003628:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d01b      	beq.n	800366c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	685a      	ldr	r2, [r3, #4]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003642:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	685a      	ldr	r2, [r3, #4]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003652:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6859      	ldr	r1, [r3, #4]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800365e:	3b01      	subs	r3, #1
 8003660:	035a      	lsls	r2, r3, #13
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	430a      	orrs	r2, r1
 8003668:	605a      	str	r2, [r3, #4]
 800366a:	e007      	b.n	800367c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	685a      	ldr	r2, [r3, #4]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800367a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800368a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	69db      	ldr	r3, [r3, #28]
 8003696:	3b01      	subs	r3, #1
 8003698:	051a      	lsls	r2, r3, #20
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	430a      	orrs	r2, r1
 80036a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	689a      	ldr	r2, [r3, #8]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80036b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	6899      	ldr	r1, [r3, #8]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80036be:	025a      	lsls	r2, r3, #9
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	430a      	orrs	r2, r1
 80036c6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689a      	ldr	r2, [r3, #8]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6899      	ldr	r1, [r3, #8]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	029a      	lsls	r2, r3, #10
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	430a      	orrs	r2, r1
 80036ea:	609a      	str	r2, [r3, #8]
}
 80036ec:	bf00      	nop
 80036ee:	3714      	adds	r7, #20
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr
 80036f8:	40012300 	.word	0x40012300
 80036fc:	0f000001 	.word	0x0f000001

08003700 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800370c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003712:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003716:	2b00      	cmp	r3, #0
 8003718:	d13c      	bne.n	8003794 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d12b      	bne.n	800378c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003738:	2b00      	cmp	r3, #0
 800373a:	d127      	bne.n	800378c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003742:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003746:	2b00      	cmp	r3, #0
 8003748:	d006      	beq.n	8003758 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003754:	2b00      	cmp	r3, #0
 8003756:	d119      	bne.n	800378c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	685a      	ldr	r2, [r3, #4]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f022 0220 	bic.w	r2, r2, #32
 8003766:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800376c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003778:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d105      	bne.n	800378c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003784:	f043 0201 	orr.w	r2, r3, #1
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800378c:	68f8      	ldr	r0, [r7, #12]
 800378e:	f7ff fd7b 	bl	8003288 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003792:	e00e      	b.n	80037b2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003798:	f003 0310 	and.w	r3, r3, #16
 800379c:	2b00      	cmp	r3, #0
 800379e:	d003      	beq.n	80037a8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80037a0:	68f8      	ldr	r0, [r7, #12]
 80037a2:	f7ff fd85 	bl	80032b0 <HAL_ADC_ErrorCallback>
}
 80037a6:	e004      	b.n	80037b2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	4798      	blx	r3
}
 80037b2:	bf00      	nop
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b084      	sub	sp, #16
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037c6:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f7ff fd67 	bl	800329c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80037ce:	bf00      	nop
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b084      	sub	sp, #16
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037e2:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2240      	movs	r2, #64	@ 0x40
 80037e8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ee:	f043 0204 	orr.w	r2, r3, #4
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f7ff fd5a 	bl	80032b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80037fc:	bf00      	nop
 80037fe:	3710      	adds	r7, #16
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003804:	b480      	push	{r7}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f003 0307 	and.w	r3, r3, #7
 8003812:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003814:	4b0c      	ldr	r3, [pc, #48]	@ (8003848 <__NVIC_SetPriorityGrouping+0x44>)
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800381a:	68ba      	ldr	r2, [r7, #8]
 800381c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003820:	4013      	ands	r3, r2
 8003822:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800382c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003830:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003834:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003836:	4a04      	ldr	r2, [pc, #16]	@ (8003848 <__NVIC_SetPriorityGrouping+0x44>)
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	60d3      	str	r3, [r2, #12]
}
 800383c:	bf00      	nop
 800383e:	3714      	adds	r7, #20
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr
 8003848:	e000ed00 	.word	0xe000ed00

0800384c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003850:	4b04      	ldr	r3, [pc, #16]	@ (8003864 <__NVIC_GetPriorityGrouping+0x18>)
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	0a1b      	lsrs	r3, r3, #8
 8003856:	f003 0307 	and.w	r3, r3, #7
}
 800385a:	4618      	mov	r0, r3
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr
 8003864:	e000ed00 	.word	0xe000ed00

08003868 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	4603      	mov	r3, r0
 8003870:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003876:	2b00      	cmp	r3, #0
 8003878:	db0b      	blt.n	8003892 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800387a:	79fb      	ldrb	r3, [r7, #7]
 800387c:	f003 021f 	and.w	r2, r3, #31
 8003880:	4907      	ldr	r1, [pc, #28]	@ (80038a0 <__NVIC_EnableIRQ+0x38>)
 8003882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003886:	095b      	lsrs	r3, r3, #5
 8003888:	2001      	movs	r0, #1
 800388a:	fa00 f202 	lsl.w	r2, r0, r2
 800388e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003892:	bf00      	nop
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	e000e100 	.word	0xe000e100

080038a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	4603      	mov	r3, r0
 80038ac:	6039      	str	r1, [r7, #0]
 80038ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	db0a      	blt.n	80038ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	b2da      	uxtb	r2, r3
 80038bc:	490c      	ldr	r1, [pc, #48]	@ (80038f0 <__NVIC_SetPriority+0x4c>)
 80038be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c2:	0112      	lsls	r2, r2, #4
 80038c4:	b2d2      	uxtb	r2, r2
 80038c6:	440b      	add	r3, r1
 80038c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038cc:	e00a      	b.n	80038e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	b2da      	uxtb	r2, r3
 80038d2:	4908      	ldr	r1, [pc, #32]	@ (80038f4 <__NVIC_SetPriority+0x50>)
 80038d4:	79fb      	ldrb	r3, [r7, #7]
 80038d6:	f003 030f 	and.w	r3, r3, #15
 80038da:	3b04      	subs	r3, #4
 80038dc:	0112      	lsls	r2, r2, #4
 80038de:	b2d2      	uxtb	r2, r2
 80038e0:	440b      	add	r3, r1
 80038e2:	761a      	strb	r2, [r3, #24]
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr
 80038f0:	e000e100 	.word	0xe000e100
 80038f4:	e000ed00 	.word	0xe000ed00

080038f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b089      	sub	sp, #36	@ 0x24
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f003 0307 	and.w	r3, r3, #7
 800390a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	f1c3 0307 	rsb	r3, r3, #7
 8003912:	2b04      	cmp	r3, #4
 8003914:	bf28      	it	cs
 8003916:	2304      	movcs	r3, #4
 8003918:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	3304      	adds	r3, #4
 800391e:	2b06      	cmp	r3, #6
 8003920:	d902      	bls.n	8003928 <NVIC_EncodePriority+0x30>
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	3b03      	subs	r3, #3
 8003926:	e000      	b.n	800392a <NVIC_EncodePriority+0x32>
 8003928:	2300      	movs	r3, #0
 800392a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800392c:	f04f 32ff 	mov.w	r2, #4294967295
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	fa02 f303 	lsl.w	r3, r2, r3
 8003936:	43da      	mvns	r2, r3
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	401a      	ands	r2, r3
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003940:	f04f 31ff 	mov.w	r1, #4294967295
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	fa01 f303 	lsl.w	r3, r1, r3
 800394a:	43d9      	mvns	r1, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003950:	4313      	orrs	r3, r2
         );
}
 8003952:	4618      	mov	r0, r3
 8003954:	3724      	adds	r7, #36	@ 0x24
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
	...

08003960 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	3b01      	subs	r3, #1
 800396c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003970:	d301      	bcc.n	8003976 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003972:	2301      	movs	r3, #1
 8003974:	e00f      	b.n	8003996 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003976:	4a0a      	ldr	r2, [pc, #40]	@ (80039a0 <SysTick_Config+0x40>)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3b01      	subs	r3, #1
 800397c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800397e:	210f      	movs	r1, #15
 8003980:	f04f 30ff 	mov.w	r0, #4294967295
 8003984:	f7ff ff8e 	bl	80038a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003988:	4b05      	ldr	r3, [pc, #20]	@ (80039a0 <SysTick_Config+0x40>)
 800398a:	2200      	movs	r2, #0
 800398c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800398e:	4b04      	ldr	r3, [pc, #16]	@ (80039a0 <SysTick_Config+0x40>)
 8003990:	2207      	movs	r2, #7
 8003992:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3708      	adds	r7, #8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	e000e010 	.word	0xe000e010

080039a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f7ff ff29 	bl	8003804 <__NVIC_SetPriorityGrouping>
}
 80039b2:	bf00      	nop
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b086      	sub	sp, #24
 80039be:	af00      	add	r7, sp, #0
 80039c0:	4603      	mov	r3, r0
 80039c2:	60b9      	str	r1, [r7, #8]
 80039c4:	607a      	str	r2, [r7, #4]
 80039c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039c8:	2300      	movs	r3, #0
 80039ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039cc:	f7ff ff3e 	bl	800384c <__NVIC_GetPriorityGrouping>
 80039d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	68b9      	ldr	r1, [r7, #8]
 80039d6:	6978      	ldr	r0, [r7, #20]
 80039d8:	f7ff ff8e 	bl	80038f8 <NVIC_EncodePriority>
 80039dc:	4602      	mov	r2, r0
 80039de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039e2:	4611      	mov	r1, r2
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7ff ff5d 	bl	80038a4 <__NVIC_SetPriority>
}
 80039ea:	bf00      	nop
 80039ec:	3718      	adds	r7, #24
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b082      	sub	sp, #8
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	4603      	mov	r3, r0
 80039fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7ff ff31 	bl	8003868 <__NVIC_EnableIRQ>
}
 8003a06:	bf00      	nop
 8003a08:	3708      	adds	r7, #8
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b082      	sub	sp, #8
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f7ff ffa2 	bl	8003960 <SysTick_Config>
 8003a1c:	4603      	mov	r3, r0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3708      	adds	r7, #8
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
	...

08003a28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b086      	sub	sp, #24
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a30:	2300      	movs	r3, #0
 8003a32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003a34:	f7ff faa4 	bl	8002f80 <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d101      	bne.n	8003a44 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e099      	b.n	8003b78 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2202      	movs	r2, #2
 8003a48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f022 0201 	bic.w	r2, r2, #1
 8003a62:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a64:	e00f      	b.n	8003a86 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a66:	f7ff fa8b 	bl	8002f80 <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	2b05      	cmp	r3, #5
 8003a72:	d908      	bls.n	8003a86 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2220      	movs	r2, #32
 8003a78:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2203      	movs	r2, #3
 8003a7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e078      	b.n	8003b78 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0301 	and.w	r3, r3, #1
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1e8      	bne.n	8003a66 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a9c:	697a      	ldr	r2, [r7, #20]
 8003a9e:	4b38      	ldr	r3, [pc, #224]	@ (8003b80 <HAL_DMA_Init+0x158>)
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685a      	ldr	r2, [r3, #4]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ab2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003abe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	699b      	ldr	r3, [r3, #24]
 8003ac4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003aca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a1b      	ldr	r3, [r3, #32]
 8003ad0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003adc:	2b04      	cmp	r3, #4
 8003ade:	d107      	bne.n	8003af0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	697a      	ldr	r2, [r7, #20]
 8003af6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	f023 0307 	bic.w	r3, r3, #7
 8003b06:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0c:	697a      	ldr	r2, [r7, #20]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b16:	2b04      	cmp	r3, #4
 8003b18:	d117      	bne.n	8003b4a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b1e:	697a      	ldr	r2, [r7, #20]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00e      	beq.n	8003b4a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 fa6f 	bl	8004010 <DMA_CheckFifoParam>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d008      	beq.n	8003b4a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2240      	movs	r2, #64	@ 0x40
 8003b3c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003b46:	2301      	movs	r3, #1
 8003b48:	e016      	b.n	8003b78 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	697a      	ldr	r2, [r7, #20]
 8003b50:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 fa26 	bl	8003fa4 <DMA_CalcBaseAndBitshift>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b60:	223f      	movs	r2, #63	@ 0x3f
 8003b62:	409a      	lsls	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3718      	adds	r7, #24
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	f010803f 	.word	0xf010803f

08003b84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b086      	sub	sp, #24
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	607a      	str	r2, [r7, #4]
 8003b90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b92:	2300      	movs	r3, #0
 8003b94:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b9a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d101      	bne.n	8003baa <HAL_DMA_Start_IT+0x26>
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	e040      	b.n	8003c2c <HAL_DMA_Start_IT+0xa8>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d12f      	bne.n	8003c1e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2202      	movs	r2, #2
 8003bc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	68b9      	ldr	r1, [r7, #8]
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	f000 f9b8 	bl	8003f48 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bdc:	223f      	movs	r2, #63	@ 0x3f
 8003bde:	409a      	lsls	r2, r3
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f042 0216 	orr.w	r2, r2, #22
 8003bf2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d007      	beq.n	8003c0c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f042 0208 	orr.w	r2, r2, #8
 8003c0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f042 0201 	orr.w	r2, r2, #1
 8003c1a:	601a      	str	r2, [r3, #0]
 8003c1c:	e005      	b.n	8003c2a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003c26:	2302      	movs	r3, #2
 8003c28:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003c2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3718      	adds	r7, #24
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b086      	sub	sp, #24
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c40:	4b8e      	ldr	r3, [pc, #568]	@ (8003e7c <HAL_DMA_IRQHandler+0x248>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a8e      	ldr	r2, [pc, #568]	@ (8003e80 <HAL_DMA_IRQHandler+0x24c>)
 8003c46:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4a:	0a9b      	lsrs	r3, r3, #10
 8003c4c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c52:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c5e:	2208      	movs	r2, #8
 8003c60:	409a      	lsls	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	4013      	ands	r3, r2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d01a      	beq.n	8003ca0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0304 	and.w	r3, r3, #4
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d013      	beq.n	8003ca0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f022 0204 	bic.w	r2, r2, #4
 8003c86:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c8c:	2208      	movs	r2, #8
 8003c8e:	409a      	lsls	r2, r3
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c98:	f043 0201 	orr.w	r2, r3, #1
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	409a      	lsls	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	4013      	ands	r3, r2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d012      	beq.n	8003cd6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00b      	beq.n	8003cd6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	409a      	lsls	r2, r3
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cce:	f043 0202 	orr.w	r2, r3, #2
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cda:	2204      	movs	r2, #4
 8003cdc:	409a      	lsls	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d012      	beq.n	8003d0c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0302 	and.w	r3, r3, #2
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00b      	beq.n	8003d0c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cf8:	2204      	movs	r2, #4
 8003cfa:	409a      	lsls	r2, r3
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d04:	f043 0204 	orr.w	r2, r3, #4
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d10:	2210      	movs	r2, #16
 8003d12:	409a      	lsls	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	4013      	ands	r3, r2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d043      	beq.n	8003da4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0308 	and.w	r3, r3, #8
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d03c      	beq.n	8003da4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d2e:	2210      	movs	r2, #16
 8003d30:	409a      	lsls	r2, r3
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d018      	beq.n	8003d76 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d108      	bne.n	8003d64 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d024      	beq.n	8003da4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	4798      	blx	r3
 8003d62:	e01f      	b.n	8003da4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d01b      	beq.n	8003da4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	4798      	blx	r3
 8003d74:	e016      	b.n	8003da4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d107      	bne.n	8003d94 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f022 0208 	bic.w	r2, r2, #8
 8003d92:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d003      	beq.n	8003da4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003da8:	2220      	movs	r2, #32
 8003daa:	409a      	lsls	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	4013      	ands	r3, r2
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f000 808f 	beq.w	8003ed4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0310 	and.w	r3, r3, #16
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f000 8087 	beq.w	8003ed4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dca:	2220      	movs	r2, #32
 8003dcc:	409a      	lsls	r2, r3
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b05      	cmp	r3, #5
 8003ddc:	d136      	bne.n	8003e4c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f022 0216 	bic.w	r2, r2, #22
 8003dec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	695a      	ldr	r2, [r3, #20]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003dfc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d103      	bne.n	8003e0e <HAL_DMA_IRQHandler+0x1da>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d007      	beq.n	8003e1e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f022 0208 	bic.w	r2, r2, #8
 8003e1c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e22:	223f      	movs	r2, #63	@ 0x3f
 8003e24:	409a      	lsls	r2, r3
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d07e      	beq.n	8003f40 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	4798      	blx	r3
        }
        return;
 8003e4a:	e079      	b.n	8003f40 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d01d      	beq.n	8003e96 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d10d      	bne.n	8003e84 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d031      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	4798      	blx	r3
 8003e78:	e02c      	b.n	8003ed4 <HAL_DMA_IRQHandler+0x2a0>
 8003e7a:	bf00      	nop
 8003e7c:	20000038 	.word	0x20000038
 8003e80:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d023      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	4798      	blx	r3
 8003e94:	e01e      	b.n	8003ed4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d10f      	bne.n	8003ec4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f022 0210 	bic.w	r2, r2, #16
 8003eb2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d003      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d032      	beq.n	8003f42 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ee0:	f003 0301 	and.w	r3, r3, #1
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d022      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2205      	movs	r2, #5
 8003eec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f022 0201 	bic.w	r2, r2, #1
 8003efe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	3301      	adds	r3, #1
 8003f04:	60bb      	str	r3, [r7, #8]
 8003f06:	697a      	ldr	r2, [r7, #20]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d307      	bcc.n	8003f1c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1f2      	bne.n	8003f00 <HAL_DMA_IRQHandler+0x2cc>
 8003f1a:	e000      	b.n	8003f1e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003f1c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2201      	movs	r2, #1
 8003f22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d005      	beq.n	8003f42 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	4798      	blx	r3
 8003f3e:	e000      	b.n	8003f42 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003f40:	bf00      	nop
    }
  }
}
 8003f42:	3718      	adds	r7, #24
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]
 8003f54:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003f64:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	2b40      	cmp	r3, #64	@ 0x40
 8003f74:	d108      	bne.n	8003f88 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68ba      	ldr	r2, [r7, #8]
 8003f84:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003f86:	e007      	b.n	8003f98 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68ba      	ldr	r2, [r7, #8]
 8003f8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	60da      	str	r2, [r3, #12]
}
 8003f98:	bf00      	nop
 8003f9a:	3714      	adds	r7, #20
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	3b10      	subs	r3, #16
 8003fb4:	4a14      	ldr	r2, [pc, #80]	@ (8004008 <DMA_CalcBaseAndBitshift+0x64>)
 8003fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fba:	091b      	lsrs	r3, r3, #4
 8003fbc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003fbe:	4a13      	ldr	r2, [pc, #76]	@ (800400c <DMA_CalcBaseAndBitshift+0x68>)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2b03      	cmp	r3, #3
 8003fd0:	d909      	bls.n	8003fe6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003fda:	f023 0303 	bic.w	r3, r3, #3
 8003fde:	1d1a      	adds	r2, r3, #4
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	659a      	str	r2, [r3, #88]	@ 0x58
 8003fe4:	e007      	b.n	8003ff6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003fee:	f023 0303 	bic.w	r3, r3, #3
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3714      	adds	r7, #20
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	aaaaaaab 	.word	0xaaaaaaab
 800400c:	08009a5c 	.word	0x08009a5c

08004010 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004010:	b480      	push	{r7}
 8004012:	b085      	sub	sp, #20
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004018:	2300      	movs	r3, #0
 800401a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004020:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d11f      	bne.n	800406a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	2b03      	cmp	r3, #3
 800402e:	d856      	bhi.n	80040de <DMA_CheckFifoParam+0xce>
 8004030:	a201      	add	r2, pc, #4	@ (adr r2, 8004038 <DMA_CheckFifoParam+0x28>)
 8004032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004036:	bf00      	nop
 8004038:	08004049 	.word	0x08004049
 800403c:	0800405b 	.word	0x0800405b
 8004040:	08004049 	.word	0x08004049
 8004044:	080040df 	.word	0x080040df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800404c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d046      	beq.n	80040e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004058:	e043      	b.n	80040e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800405e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004062:	d140      	bne.n	80040e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004068:	e03d      	b.n	80040e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004072:	d121      	bne.n	80040b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	2b03      	cmp	r3, #3
 8004078:	d837      	bhi.n	80040ea <DMA_CheckFifoParam+0xda>
 800407a:	a201      	add	r2, pc, #4	@ (adr r2, 8004080 <DMA_CheckFifoParam+0x70>)
 800407c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004080:	08004091 	.word	0x08004091
 8004084:	08004097 	.word	0x08004097
 8004088:	08004091 	.word	0x08004091
 800408c:	080040a9 	.word	0x080040a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	73fb      	strb	r3, [r7, #15]
      break;
 8004094:	e030      	b.n	80040f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800409a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d025      	beq.n	80040ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040a6:	e022      	b.n	80040ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ac:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80040b0:	d11f      	bne.n	80040f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80040b6:	e01c      	b.n	80040f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d903      	bls.n	80040c6 <DMA_CheckFifoParam+0xb6>
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	2b03      	cmp	r3, #3
 80040c2:	d003      	beq.n	80040cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80040c4:	e018      	b.n	80040f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	73fb      	strb	r3, [r7, #15]
      break;
 80040ca:	e015      	b.n	80040f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00e      	beq.n	80040f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	73fb      	strb	r3, [r7, #15]
      break;
 80040dc:	e00b      	b.n	80040f6 <DMA_CheckFifoParam+0xe6>
      break;
 80040de:	bf00      	nop
 80040e0:	e00a      	b.n	80040f8 <DMA_CheckFifoParam+0xe8>
      break;
 80040e2:	bf00      	nop
 80040e4:	e008      	b.n	80040f8 <DMA_CheckFifoParam+0xe8>
      break;
 80040e6:	bf00      	nop
 80040e8:	e006      	b.n	80040f8 <DMA_CheckFifoParam+0xe8>
      break;
 80040ea:	bf00      	nop
 80040ec:	e004      	b.n	80040f8 <DMA_CheckFifoParam+0xe8>
      break;
 80040ee:	bf00      	nop
 80040f0:	e002      	b.n	80040f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80040f2:	bf00      	nop
 80040f4:	e000      	b.n	80040f8 <DMA_CheckFifoParam+0xe8>
      break;
 80040f6:	bf00      	nop
    }
  } 
  
  return status; 
 80040f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3714      	adds	r7, #20
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop

08004108 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004108:	b480      	push	{r7}
 800410a:	b089      	sub	sp, #36	@ 0x24
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004112:	2300      	movs	r3, #0
 8004114:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004116:	2300      	movs	r3, #0
 8004118:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800411a:	2300      	movs	r3, #0
 800411c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800411e:	2300      	movs	r3, #0
 8004120:	61fb      	str	r3, [r7, #28]
 8004122:	e16b      	b.n	80043fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004124:	2201      	movs	r2, #1
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	fa02 f303 	lsl.w	r3, r2, r3
 800412c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	4013      	ands	r3, r2
 8004136:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004138:	693a      	ldr	r2, [r7, #16]
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	429a      	cmp	r2, r3
 800413e:	f040 815a 	bne.w	80043f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f003 0303 	and.w	r3, r3, #3
 800414a:	2b01      	cmp	r3, #1
 800414c:	d005      	beq.n	800415a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004156:	2b02      	cmp	r3, #2
 8004158:	d130      	bne.n	80041bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	005b      	lsls	r3, r3, #1
 8004164:	2203      	movs	r2, #3
 8004166:	fa02 f303 	lsl.w	r3, r2, r3
 800416a:	43db      	mvns	r3, r3
 800416c:	69ba      	ldr	r2, [r7, #24]
 800416e:	4013      	ands	r3, r2
 8004170:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	68da      	ldr	r2, [r3, #12]
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	005b      	lsls	r3, r3, #1
 800417a:	fa02 f303 	lsl.w	r3, r2, r3
 800417e:	69ba      	ldr	r2, [r7, #24]
 8004180:	4313      	orrs	r3, r2
 8004182:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	69ba      	ldr	r2, [r7, #24]
 8004188:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004190:	2201      	movs	r2, #1
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	fa02 f303 	lsl.w	r3, r2, r3
 8004198:	43db      	mvns	r3, r3
 800419a:	69ba      	ldr	r2, [r7, #24]
 800419c:	4013      	ands	r3, r2
 800419e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	091b      	lsrs	r3, r3, #4
 80041a6:	f003 0201 	and.w	r2, r3, #1
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	fa02 f303 	lsl.w	r3, r2, r3
 80041b0:	69ba      	ldr	r2, [r7, #24]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f003 0303 	and.w	r3, r3, #3
 80041c4:	2b03      	cmp	r3, #3
 80041c6:	d017      	beq.n	80041f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	005b      	lsls	r3, r3, #1
 80041d2:	2203      	movs	r2, #3
 80041d4:	fa02 f303 	lsl.w	r3, r2, r3
 80041d8:	43db      	mvns	r3, r3
 80041da:	69ba      	ldr	r2, [r7, #24]
 80041dc:	4013      	ands	r3, r2
 80041de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	689a      	ldr	r2, [r3, #8]
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	005b      	lsls	r3, r3, #1
 80041e8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ec:	69ba      	ldr	r2, [r7, #24]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	69ba      	ldr	r2, [r7, #24]
 80041f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f003 0303 	and.w	r3, r3, #3
 8004200:	2b02      	cmp	r3, #2
 8004202:	d123      	bne.n	800424c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	08da      	lsrs	r2, r3, #3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	3208      	adds	r2, #8
 800420c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004210:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	f003 0307 	and.w	r3, r3, #7
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	220f      	movs	r2, #15
 800421c:	fa02 f303 	lsl.w	r3, r2, r3
 8004220:	43db      	mvns	r3, r3
 8004222:	69ba      	ldr	r2, [r7, #24]
 8004224:	4013      	ands	r3, r2
 8004226:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	691a      	ldr	r2, [r3, #16]
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	f003 0307 	and.w	r3, r3, #7
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	fa02 f303 	lsl.w	r3, r2, r3
 8004238:	69ba      	ldr	r2, [r7, #24]
 800423a:	4313      	orrs	r3, r2
 800423c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	08da      	lsrs	r2, r3, #3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	3208      	adds	r2, #8
 8004246:	69b9      	ldr	r1, [r7, #24]
 8004248:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	005b      	lsls	r3, r3, #1
 8004256:	2203      	movs	r2, #3
 8004258:	fa02 f303 	lsl.w	r3, r2, r3
 800425c:	43db      	mvns	r3, r3
 800425e:	69ba      	ldr	r2, [r7, #24]
 8004260:	4013      	ands	r3, r2
 8004262:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f003 0203 	and.w	r2, r3, #3
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	005b      	lsls	r3, r3, #1
 8004270:	fa02 f303 	lsl.w	r3, r2, r3
 8004274:	69ba      	ldr	r2, [r7, #24]
 8004276:	4313      	orrs	r3, r2
 8004278:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004288:	2b00      	cmp	r3, #0
 800428a:	f000 80b4 	beq.w	80043f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800428e:	2300      	movs	r3, #0
 8004290:	60fb      	str	r3, [r7, #12]
 8004292:	4b60      	ldr	r3, [pc, #384]	@ (8004414 <HAL_GPIO_Init+0x30c>)
 8004294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004296:	4a5f      	ldr	r2, [pc, #380]	@ (8004414 <HAL_GPIO_Init+0x30c>)
 8004298:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800429c:	6453      	str	r3, [r2, #68]	@ 0x44
 800429e:	4b5d      	ldr	r3, [pc, #372]	@ (8004414 <HAL_GPIO_Init+0x30c>)
 80042a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042a6:	60fb      	str	r3, [r7, #12]
 80042a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80042aa:	4a5b      	ldr	r2, [pc, #364]	@ (8004418 <HAL_GPIO_Init+0x310>)
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	089b      	lsrs	r3, r3, #2
 80042b0:	3302      	adds	r3, #2
 80042b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	f003 0303 	and.w	r3, r3, #3
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	220f      	movs	r2, #15
 80042c2:	fa02 f303 	lsl.w	r3, r2, r3
 80042c6:	43db      	mvns	r3, r3
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	4013      	ands	r3, r2
 80042cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a52      	ldr	r2, [pc, #328]	@ (800441c <HAL_GPIO_Init+0x314>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d02b      	beq.n	800432e <HAL_GPIO_Init+0x226>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a51      	ldr	r2, [pc, #324]	@ (8004420 <HAL_GPIO_Init+0x318>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d025      	beq.n	800432a <HAL_GPIO_Init+0x222>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a50      	ldr	r2, [pc, #320]	@ (8004424 <HAL_GPIO_Init+0x31c>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d01f      	beq.n	8004326 <HAL_GPIO_Init+0x21e>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a4f      	ldr	r2, [pc, #316]	@ (8004428 <HAL_GPIO_Init+0x320>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d019      	beq.n	8004322 <HAL_GPIO_Init+0x21a>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a4e      	ldr	r2, [pc, #312]	@ (800442c <HAL_GPIO_Init+0x324>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d013      	beq.n	800431e <HAL_GPIO_Init+0x216>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a4d      	ldr	r2, [pc, #308]	@ (8004430 <HAL_GPIO_Init+0x328>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d00d      	beq.n	800431a <HAL_GPIO_Init+0x212>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a4c      	ldr	r2, [pc, #304]	@ (8004434 <HAL_GPIO_Init+0x32c>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d007      	beq.n	8004316 <HAL_GPIO_Init+0x20e>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a4b      	ldr	r2, [pc, #300]	@ (8004438 <HAL_GPIO_Init+0x330>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d101      	bne.n	8004312 <HAL_GPIO_Init+0x20a>
 800430e:	2307      	movs	r3, #7
 8004310:	e00e      	b.n	8004330 <HAL_GPIO_Init+0x228>
 8004312:	2308      	movs	r3, #8
 8004314:	e00c      	b.n	8004330 <HAL_GPIO_Init+0x228>
 8004316:	2306      	movs	r3, #6
 8004318:	e00a      	b.n	8004330 <HAL_GPIO_Init+0x228>
 800431a:	2305      	movs	r3, #5
 800431c:	e008      	b.n	8004330 <HAL_GPIO_Init+0x228>
 800431e:	2304      	movs	r3, #4
 8004320:	e006      	b.n	8004330 <HAL_GPIO_Init+0x228>
 8004322:	2303      	movs	r3, #3
 8004324:	e004      	b.n	8004330 <HAL_GPIO_Init+0x228>
 8004326:	2302      	movs	r3, #2
 8004328:	e002      	b.n	8004330 <HAL_GPIO_Init+0x228>
 800432a:	2301      	movs	r3, #1
 800432c:	e000      	b.n	8004330 <HAL_GPIO_Init+0x228>
 800432e:	2300      	movs	r3, #0
 8004330:	69fa      	ldr	r2, [r7, #28]
 8004332:	f002 0203 	and.w	r2, r2, #3
 8004336:	0092      	lsls	r2, r2, #2
 8004338:	4093      	lsls	r3, r2
 800433a:	69ba      	ldr	r2, [r7, #24]
 800433c:	4313      	orrs	r3, r2
 800433e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004340:	4935      	ldr	r1, [pc, #212]	@ (8004418 <HAL_GPIO_Init+0x310>)
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	089b      	lsrs	r3, r3, #2
 8004346:	3302      	adds	r3, #2
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800434e:	4b3b      	ldr	r3, [pc, #236]	@ (800443c <HAL_GPIO_Init+0x334>)
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	43db      	mvns	r3, r3
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	4013      	ands	r3, r2
 800435c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d003      	beq.n	8004372 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800436a:	69ba      	ldr	r2, [r7, #24]
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	4313      	orrs	r3, r2
 8004370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004372:	4a32      	ldr	r2, [pc, #200]	@ (800443c <HAL_GPIO_Init+0x334>)
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004378:	4b30      	ldr	r3, [pc, #192]	@ (800443c <HAL_GPIO_Init+0x334>)
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	43db      	mvns	r3, r3
 8004382:	69ba      	ldr	r2, [r7, #24]
 8004384:	4013      	ands	r3, r2
 8004386:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d003      	beq.n	800439c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004394:	69ba      	ldr	r2, [r7, #24]
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	4313      	orrs	r3, r2
 800439a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800439c:	4a27      	ldr	r2, [pc, #156]	@ (800443c <HAL_GPIO_Init+0x334>)
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80043a2:	4b26      	ldr	r3, [pc, #152]	@ (800443c <HAL_GPIO_Init+0x334>)
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	43db      	mvns	r3, r3
 80043ac:	69ba      	ldr	r2, [r7, #24]
 80043ae:	4013      	ands	r3, r2
 80043b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d003      	beq.n	80043c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80043be:	69ba      	ldr	r2, [r7, #24]
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80043c6:	4a1d      	ldr	r2, [pc, #116]	@ (800443c <HAL_GPIO_Init+0x334>)
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80043cc:	4b1b      	ldr	r3, [pc, #108]	@ (800443c <HAL_GPIO_Init+0x334>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	43db      	mvns	r3, r3
 80043d6:	69ba      	ldr	r2, [r7, #24]
 80043d8:	4013      	ands	r3, r2
 80043da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d003      	beq.n	80043f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80043e8:	69ba      	ldr	r2, [r7, #24]
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80043f0:	4a12      	ldr	r2, [pc, #72]	@ (800443c <HAL_GPIO_Init+0x334>)
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	3301      	adds	r3, #1
 80043fa:	61fb      	str	r3, [r7, #28]
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	2b0f      	cmp	r3, #15
 8004400:	f67f ae90 	bls.w	8004124 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004404:	bf00      	nop
 8004406:	bf00      	nop
 8004408:	3724      	adds	r7, #36	@ 0x24
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	40023800 	.word	0x40023800
 8004418:	40013800 	.word	0x40013800
 800441c:	40020000 	.word	0x40020000
 8004420:	40020400 	.word	0x40020400
 8004424:	40020800 	.word	0x40020800
 8004428:	40020c00 	.word	0x40020c00
 800442c:	40021000 	.word	0x40021000
 8004430:	40021400 	.word	0x40021400
 8004434:	40021800 	.word	0x40021800
 8004438:	40021c00 	.word	0x40021c00
 800443c:	40013c00 	.word	0x40013c00

08004440 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	460b      	mov	r3, r1
 800444a:	807b      	strh	r3, [r7, #2]
 800444c:	4613      	mov	r3, r2
 800444e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004450:	787b      	ldrb	r3, [r7, #1]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d003      	beq.n	800445e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004456:	887a      	ldrh	r2, [r7, #2]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800445c:	e003      	b.n	8004466 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800445e:	887b      	ldrh	r3, [r7, #2]
 8004460:	041a      	lsls	r2, r3, #16
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	619a      	str	r2, [r3, #24]
}
 8004466:	bf00      	nop
 8004468:	370c      	adds	r7, #12
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
	...

08004474 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b086      	sub	sp, #24
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e267      	b.n	8004956 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	2b00      	cmp	r3, #0
 8004490:	d075      	beq.n	800457e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004492:	4b88      	ldr	r3, [pc, #544]	@ (80046b4 <HAL_RCC_OscConfig+0x240>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f003 030c 	and.w	r3, r3, #12
 800449a:	2b04      	cmp	r3, #4
 800449c:	d00c      	beq.n	80044b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800449e:	4b85      	ldr	r3, [pc, #532]	@ (80046b4 <HAL_RCC_OscConfig+0x240>)
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044a6:	2b08      	cmp	r3, #8
 80044a8:	d112      	bne.n	80044d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044aa:	4b82      	ldr	r3, [pc, #520]	@ (80046b4 <HAL_RCC_OscConfig+0x240>)
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044b6:	d10b      	bne.n	80044d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044b8:	4b7e      	ldr	r3, [pc, #504]	@ (80046b4 <HAL_RCC_OscConfig+0x240>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d05b      	beq.n	800457c <HAL_RCC_OscConfig+0x108>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d157      	bne.n	800457c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e242      	b.n	8004956 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044d8:	d106      	bne.n	80044e8 <HAL_RCC_OscConfig+0x74>
 80044da:	4b76      	ldr	r3, [pc, #472]	@ (80046b4 <HAL_RCC_OscConfig+0x240>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a75      	ldr	r2, [pc, #468]	@ (80046b4 <HAL_RCC_OscConfig+0x240>)
 80044e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044e4:	6013      	str	r3, [r2, #0]
 80044e6:	e01d      	b.n	8004524 <HAL_RCC_OscConfig+0xb0>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044f0:	d10c      	bne.n	800450c <HAL_RCC_OscConfig+0x98>
 80044f2:	4b70      	ldr	r3, [pc, #448]	@ (80046b4 <HAL_RCC_OscConfig+0x240>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a6f      	ldr	r2, [pc, #444]	@ (80046b4 <HAL_RCC_OscConfig+0x240>)
 80044f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044fc:	6013      	str	r3, [r2, #0]
 80044fe:	4b6d      	ldr	r3, [pc, #436]	@ (80046b4 <HAL_RCC_OscConfig+0x240>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a6c      	ldr	r2, [pc, #432]	@ (80046b4 <HAL_RCC_OscConfig+0x240>)
 8004504:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004508:	6013      	str	r3, [r2, #0]
 800450a:	e00b      	b.n	8004524 <HAL_RCC_OscConfig+0xb0>
 800450c:	4b69      	ldr	r3, [pc, #420]	@ (80046b4 <HAL_RCC_OscConfig+0x240>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a68      	ldr	r2, [pc, #416]	@ (80046b4 <HAL_RCC_OscConfig+0x240>)
 8004512:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004516:	6013      	str	r3, [r2, #0]
 8004518:	4b66      	ldr	r3, [pc, #408]	@ (80046b4 <HAL_RCC_OscConfig+0x240>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a65      	ldr	r2, [pc, #404]	@ (80046b4 <HAL_RCC_OscConfig+0x240>)
 800451e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004522:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d013      	beq.n	8004554 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800452c:	f7fe fd28 	bl	8002f80 <HAL_GetTick>
 8004530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004532:	e008      	b.n	8004546 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004534:	f7fe fd24 	bl	8002f80 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b64      	cmp	r3, #100	@ 0x64
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e207      	b.n	8004956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004546:	4b5b      	ldr	r3, [pc, #364]	@ (80046b4 <HAL_RCC_OscConfig+0x240>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d0f0      	beq.n	8004534 <HAL_RCC_OscConfig+0xc0>
 8004552:	e014      	b.n	800457e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004554:	f7fe fd14 	bl	8002f80 <HAL_GetTick>
 8004558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800455a:	e008      	b.n	800456e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800455c:	f7fe fd10 	bl	8002f80 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b64      	cmp	r3, #100	@ 0x64
 8004568:	d901      	bls.n	800456e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e1f3      	b.n	8004956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800456e:	4b51      	ldr	r3, [pc, #324]	@ (80046b4 <HAL_RCC_OscConfig+0x240>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1f0      	bne.n	800455c <HAL_RCC_OscConfig+0xe8>
 800457a:	e000      	b.n	800457e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800457c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	2b00      	cmp	r3, #0
 8004588:	d063      	beq.n	8004652 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800458a:	4b4a      	ldr	r3, [pc, #296]	@ (80046b4 <HAL_RCC_OscConfig+0x240>)
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f003 030c 	and.w	r3, r3, #12
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00b      	beq.n	80045ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004596:	4b47      	ldr	r3, [pc, #284]	@ (80046b4 <HAL_RCC_OscConfig+0x240>)
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800459e:	2b08      	cmp	r3, #8
 80045a0:	d11c      	bne.n	80045dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045a2:	4b44      	ldr	r3, [pc, #272]	@ (80046b4 <HAL_RCC_OscConfig+0x240>)
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d116      	bne.n	80045dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045ae:	4b41      	ldr	r3, [pc, #260]	@ (80046b4 <HAL_RCC_OscConfig+0x240>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0302 	and.w	r3, r3, #2
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d005      	beq.n	80045c6 <HAL_RCC_OscConfig+0x152>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d001      	beq.n	80045c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e1c7      	b.n	8004956 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045c6:	4b3b      	ldr	r3, [pc, #236]	@ (80046b4 <HAL_RCC_OscConfig+0x240>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	00db      	lsls	r3, r3, #3
 80045d4:	4937      	ldr	r1, [pc, #220]	@ (80046b4 <HAL_RCC_OscConfig+0x240>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045da:	e03a      	b.n	8004652 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d020      	beq.n	8004626 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045e4:	4b34      	ldr	r3, [pc, #208]	@ (80046b8 <HAL_RCC_OscConfig+0x244>)
 80045e6:	2201      	movs	r2, #1
 80045e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ea:	f7fe fcc9 	bl	8002f80 <HAL_GetTick>
 80045ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045f0:	e008      	b.n	8004604 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045f2:	f7fe fcc5 	bl	8002f80 <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d901      	bls.n	8004604 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e1a8      	b.n	8004956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004604:	4b2b      	ldr	r3, [pc, #172]	@ (80046b4 <HAL_RCC_OscConfig+0x240>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0302 	and.w	r3, r3, #2
 800460c:	2b00      	cmp	r3, #0
 800460e:	d0f0      	beq.n	80045f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004610:	4b28      	ldr	r3, [pc, #160]	@ (80046b4 <HAL_RCC_OscConfig+0x240>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	00db      	lsls	r3, r3, #3
 800461e:	4925      	ldr	r1, [pc, #148]	@ (80046b4 <HAL_RCC_OscConfig+0x240>)
 8004620:	4313      	orrs	r3, r2
 8004622:	600b      	str	r3, [r1, #0]
 8004624:	e015      	b.n	8004652 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004626:	4b24      	ldr	r3, [pc, #144]	@ (80046b8 <HAL_RCC_OscConfig+0x244>)
 8004628:	2200      	movs	r2, #0
 800462a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800462c:	f7fe fca8 	bl	8002f80 <HAL_GetTick>
 8004630:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004632:	e008      	b.n	8004646 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004634:	f7fe fca4 	bl	8002f80 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b02      	cmp	r3, #2
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e187      	b.n	8004956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004646:	4b1b      	ldr	r3, [pc, #108]	@ (80046b4 <HAL_RCC_OscConfig+0x240>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1f0      	bne.n	8004634 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0308 	and.w	r3, r3, #8
 800465a:	2b00      	cmp	r3, #0
 800465c:	d036      	beq.n	80046cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d016      	beq.n	8004694 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004666:	4b15      	ldr	r3, [pc, #84]	@ (80046bc <HAL_RCC_OscConfig+0x248>)
 8004668:	2201      	movs	r2, #1
 800466a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800466c:	f7fe fc88 	bl	8002f80 <HAL_GetTick>
 8004670:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004672:	e008      	b.n	8004686 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004674:	f7fe fc84 	bl	8002f80 <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	2b02      	cmp	r3, #2
 8004680:	d901      	bls.n	8004686 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e167      	b.n	8004956 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004686:	4b0b      	ldr	r3, [pc, #44]	@ (80046b4 <HAL_RCC_OscConfig+0x240>)
 8004688:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800468a:	f003 0302 	and.w	r3, r3, #2
 800468e:	2b00      	cmp	r3, #0
 8004690:	d0f0      	beq.n	8004674 <HAL_RCC_OscConfig+0x200>
 8004692:	e01b      	b.n	80046cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004694:	4b09      	ldr	r3, [pc, #36]	@ (80046bc <HAL_RCC_OscConfig+0x248>)
 8004696:	2200      	movs	r2, #0
 8004698:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800469a:	f7fe fc71 	bl	8002f80 <HAL_GetTick>
 800469e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046a0:	e00e      	b.n	80046c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046a2:	f7fe fc6d 	bl	8002f80 <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d907      	bls.n	80046c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e150      	b.n	8004956 <HAL_RCC_OscConfig+0x4e2>
 80046b4:	40023800 	.word	0x40023800
 80046b8:	42470000 	.word	0x42470000
 80046bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046c0:	4b88      	ldr	r3, [pc, #544]	@ (80048e4 <HAL_RCC_OscConfig+0x470>)
 80046c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d1ea      	bne.n	80046a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0304 	and.w	r3, r3, #4
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	f000 8097 	beq.w	8004808 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046da:	2300      	movs	r3, #0
 80046dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046de:	4b81      	ldr	r3, [pc, #516]	@ (80048e4 <HAL_RCC_OscConfig+0x470>)
 80046e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d10f      	bne.n	800470a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046ea:	2300      	movs	r3, #0
 80046ec:	60bb      	str	r3, [r7, #8]
 80046ee:	4b7d      	ldr	r3, [pc, #500]	@ (80048e4 <HAL_RCC_OscConfig+0x470>)
 80046f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f2:	4a7c      	ldr	r2, [pc, #496]	@ (80048e4 <HAL_RCC_OscConfig+0x470>)
 80046f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80046fa:	4b7a      	ldr	r3, [pc, #488]	@ (80048e4 <HAL_RCC_OscConfig+0x470>)
 80046fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004702:	60bb      	str	r3, [r7, #8]
 8004704:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004706:	2301      	movs	r3, #1
 8004708:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800470a:	4b77      	ldr	r3, [pc, #476]	@ (80048e8 <HAL_RCC_OscConfig+0x474>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004712:	2b00      	cmp	r3, #0
 8004714:	d118      	bne.n	8004748 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004716:	4b74      	ldr	r3, [pc, #464]	@ (80048e8 <HAL_RCC_OscConfig+0x474>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a73      	ldr	r2, [pc, #460]	@ (80048e8 <HAL_RCC_OscConfig+0x474>)
 800471c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004720:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004722:	f7fe fc2d 	bl	8002f80 <HAL_GetTick>
 8004726:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004728:	e008      	b.n	800473c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800472a:	f7fe fc29 	bl	8002f80 <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	2b02      	cmp	r3, #2
 8004736:	d901      	bls.n	800473c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e10c      	b.n	8004956 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800473c:	4b6a      	ldr	r3, [pc, #424]	@ (80048e8 <HAL_RCC_OscConfig+0x474>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004744:	2b00      	cmp	r3, #0
 8004746:	d0f0      	beq.n	800472a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d106      	bne.n	800475e <HAL_RCC_OscConfig+0x2ea>
 8004750:	4b64      	ldr	r3, [pc, #400]	@ (80048e4 <HAL_RCC_OscConfig+0x470>)
 8004752:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004754:	4a63      	ldr	r2, [pc, #396]	@ (80048e4 <HAL_RCC_OscConfig+0x470>)
 8004756:	f043 0301 	orr.w	r3, r3, #1
 800475a:	6713      	str	r3, [r2, #112]	@ 0x70
 800475c:	e01c      	b.n	8004798 <HAL_RCC_OscConfig+0x324>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	2b05      	cmp	r3, #5
 8004764:	d10c      	bne.n	8004780 <HAL_RCC_OscConfig+0x30c>
 8004766:	4b5f      	ldr	r3, [pc, #380]	@ (80048e4 <HAL_RCC_OscConfig+0x470>)
 8004768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800476a:	4a5e      	ldr	r2, [pc, #376]	@ (80048e4 <HAL_RCC_OscConfig+0x470>)
 800476c:	f043 0304 	orr.w	r3, r3, #4
 8004770:	6713      	str	r3, [r2, #112]	@ 0x70
 8004772:	4b5c      	ldr	r3, [pc, #368]	@ (80048e4 <HAL_RCC_OscConfig+0x470>)
 8004774:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004776:	4a5b      	ldr	r2, [pc, #364]	@ (80048e4 <HAL_RCC_OscConfig+0x470>)
 8004778:	f043 0301 	orr.w	r3, r3, #1
 800477c:	6713      	str	r3, [r2, #112]	@ 0x70
 800477e:	e00b      	b.n	8004798 <HAL_RCC_OscConfig+0x324>
 8004780:	4b58      	ldr	r3, [pc, #352]	@ (80048e4 <HAL_RCC_OscConfig+0x470>)
 8004782:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004784:	4a57      	ldr	r2, [pc, #348]	@ (80048e4 <HAL_RCC_OscConfig+0x470>)
 8004786:	f023 0301 	bic.w	r3, r3, #1
 800478a:	6713      	str	r3, [r2, #112]	@ 0x70
 800478c:	4b55      	ldr	r3, [pc, #340]	@ (80048e4 <HAL_RCC_OscConfig+0x470>)
 800478e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004790:	4a54      	ldr	r2, [pc, #336]	@ (80048e4 <HAL_RCC_OscConfig+0x470>)
 8004792:	f023 0304 	bic.w	r3, r3, #4
 8004796:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d015      	beq.n	80047cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047a0:	f7fe fbee 	bl	8002f80 <HAL_GetTick>
 80047a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047a6:	e00a      	b.n	80047be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047a8:	f7fe fbea 	bl	8002f80 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d901      	bls.n	80047be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e0cb      	b.n	8004956 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047be:	4b49      	ldr	r3, [pc, #292]	@ (80048e4 <HAL_RCC_OscConfig+0x470>)
 80047c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d0ee      	beq.n	80047a8 <HAL_RCC_OscConfig+0x334>
 80047ca:	e014      	b.n	80047f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047cc:	f7fe fbd8 	bl	8002f80 <HAL_GetTick>
 80047d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047d2:	e00a      	b.n	80047ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047d4:	f7fe fbd4 	bl	8002f80 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d901      	bls.n	80047ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e0b5      	b.n	8004956 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047ea:	4b3e      	ldr	r3, [pc, #248]	@ (80048e4 <HAL_RCC_OscConfig+0x470>)
 80047ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1ee      	bne.n	80047d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047f6:	7dfb      	ldrb	r3, [r7, #23]
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d105      	bne.n	8004808 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047fc:	4b39      	ldr	r3, [pc, #228]	@ (80048e4 <HAL_RCC_OscConfig+0x470>)
 80047fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004800:	4a38      	ldr	r2, [pc, #224]	@ (80048e4 <HAL_RCC_OscConfig+0x470>)
 8004802:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004806:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	2b00      	cmp	r3, #0
 800480e:	f000 80a1 	beq.w	8004954 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004812:	4b34      	ldr	r3, [pc, #208]	@ (80048e4 <HAL_RCC_OscConfig+0x470>)
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f003 030c 	and.w	r3, r3, #12
 800481a:	2b08      	cmp	r3, #8
 800481c:	d05c      	beq.n	80048d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	2b02      	cmp	r3, #2
 8004824:	d141      	bne.n	80048aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004826:	4b31      	ldr	r3, [pc, #196]	@ (80048ec <HAL_RCC_OscConfig+0x478>)
 8004828:	2200      	movs	r2, #0
 800482a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800482c:	f7fe fba8 	bl	8002f80 <HAL_GetTick>
 8004830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004832:	e008      	b.n	8004846 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004834:	f7fe fba4 	bl	8002f80 <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	2b02      	cmp	r3, #2
 8004840:	d901      	bls.n	8004846 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e087      	b.n	8004956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004846:	4b27      	ldr	r3, [pc, #156]	@ (80048e4 <HAL_RCC_OscConfig+0x470>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1f0      	bne.n	8004834 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	69da      	ldr	r2, [r3, #28]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	431a      	orrs	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004860:	019b      	lsls	r3, r3, #6
 8004862:	431a      	orrs	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004868:	085b      	lsrs	r3, r3, #1
 800486a:	3b01      	subs	r3, #1
 800486c:	041b      	lsls	r3, r3, #16
 800486e:	431a      	orrs	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004874:	061b      	lsls	r3, r3, #24
 8004876:	491b      	ldr	r1, [pc, #108]	@ (80048e4 <HAL_RCC_OscConfig+0x470>)
 8004878:	4313      	orrs	r3, r2
 800487a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800487c:	4b1b      	ldr	r3, [pc, #108]	@ (80048ec <HAL_RCC_OscConfig+0x478>)
 800487e:	2201      	movs	r2, #1
 8004880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004882:	f7fe fb7d 	bl	8002f80 <HAL_GetTick>
 8004886:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004888:	e008      	b.n	800489c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800488a:	f7fe fb79 	bl	8002f80 <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	2b02      	cmp	r3, #2
 8004896:	d901      	bls.n	800489c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e05c      	b.n	8004956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800489c:	4b11      	ldr	r3, [pc, #68]	@ (80048e4 <HAL_RCC_OscConfig+0x470>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d0f0      	beq.n	800488a <HAL_RCC_OscConfig+0x416>
 80048a8:	e054      	b.n	8004954 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048aa:	4b10      	ldr	r3, [pc, #64]	@ (80048ec <HAL_RCC_OscConfig+0x478>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048b0:	f7fe fb66 	bl	8002f80 <HAL_GetTick>
 80048b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048b6:	e008      	b.n	80048ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048b8:	f7fe fb62 	bl	8002f80 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d901      	bls.n	80048ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e045      	b.n	8004956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ca:	4b06      	ldr	r3, [pc, #24]	@ (80048e4 <HAL_RCC_OscConfig+0x470>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1f0      	bne.n	80048b8 <HAL_RCC_OscConfig+0x444>
 80048d6:	e03d      	b.n	8004954 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	699b      	ldr	r3, [r3, #24]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d107      	bne.n	80048f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e038      	b.n	8004956 <HAL_RCC_OscConfig+0x4e2>
 80048e4:	40023800 	.word	0x40023800
 80048e8:	40007000 	.word	0x40007000
 80048ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80048f0:	4b1b      	ldr	r3, [pc, #108]	@ (8004960 <HAL_RCC_OscConfig+0x4ec>)
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d028      	beq.n	8004950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004908:	429a      	cmp	r2, r3
 800490a:	d121      	bne.n	8004950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004916:	429a      	cmp	r2, r3
 8004918:	d11a      	bne.n	8004950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004920:	4013      	ands	r3, r2
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004926:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004928:	4293      	cmp	r3, r2
 800492a:	d111      	bne.n	8004950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004936:	085b      	lsrs	r3, r3, #1
 8004938:	3b01      	subs	r3, #1
 800493a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800493c:	429a      	cmp	r2, r3
 800493e:	d107      	bne.n	8004950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800494a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800494c:	429a      	cmp	r2, r3
 800494e:	d001      	beq.n	8004954 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e000      	b.n	8004956 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3718      	adds	r7, #24
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	40023800 	.word	0x40023800

08004964 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d101      	bne.n	8004978 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e0cc      	b.n	8004b12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004978:	4b68      	ldr	r3, [pc, #416]	@ (8004b1c <HAL_RCC_ClockConfig+0x1b8>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0307 	and.w	r3, r3, #7
 8004980:	683a      	ldr	r2, [r7, #0]
 8004982:	429a      	cmp	r2, r3
 8004984:	d90c      	bls.n	80049a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004986:	4b65      	ldr	r3, [pc, #404]	@ (8004b1c <HAL_RCC_ClockConfig+0x1b8>)
 8004988:	683a      	ldr	r2, [r7, #0]
 800498a:	b2d2      	uxtb	r2, r2
 800498c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800498e:	4b63      	ldr	r3, [pc, #396]	@ (8004b1c <HAL_RCC_ClockConfig+0x1b8>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0307 	and.w	r3, r3, #7
 8004996:	683a      	ldr	r2, [r7, #0]
 8004998:	429a      	cmp	r2, r3
 800499a:	d001      	beq.n	80049a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e0b8      	b.n	8004b12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0302 	and.w	r3, r3, #2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d020      	beq.n	80049ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0304 	and.w	r3, r3, #4
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d005      	beq.n	80049c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049b8:	4b59      	ldr	r3, [pc, #356]	@ (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	4a58      	ldr	r2, [pc, #352]	@ (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 80049be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80049c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0308 	and.w	r3, r3, #8
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d005      	beq.n	80049dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049d0:	4b53      	ldr	r3, [pc, #332]	@ (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	4a52      	ldr	r2, [pc, #328]	@ (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 80049d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80049da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049dc:	4b50      	ldr	r3, [pc, #320]	@ (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	494d      	ldr	r1, [pc, #308]	@ (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0301 	and.w	r3, r3, #1
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d044      	beq.n	8004a84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d107      	bne.n	8004a12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a02:	4b47      	ldr	r3, [pc, #284]	@ (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d119      	bne.n	8004a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e07f      	b.n	8004b12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d003      	beq.n	8004a22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a1e:	2b03      	cmp	r3, #3
 8004a20:	d107      	bne.n	8004a32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a22:	4b3f      	ldr	r3, [pc, #252]	@ (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d109      	bne.n	8004a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e06f      	b.n	8004b12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a32:	4b3b      	ldr	r3, [pc, #236]	@ (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d101      	bne.n	8004a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e067      	b.n	8004b12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a42:	4b37      	ldr	r3, [pc, #220]	@ (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f023 0203 	bic.w	r2, r3, #3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	4934      	ldr	r1, [pc, #208]	@ (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a54:	f7fe fa94 	bl	8002f80 <HAL_GetTick>
 8004a58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a5a:	e00a      	b.n	8004a72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a5c:	f7fe fa90 	bl	8002f80 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d901      	bls.n	8004a72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e04f      	b.n	8004b12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a72:	4b2b      	ldr	r3, [pc, #172]	@ (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f003 020c 	and.w	r2, r3, #12
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d1eb      	bne.n	8004a5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a84:	4b25      	ldr	r3, [pc, #148]	@ (8004b1c <HAL_RCC_ClockConfig+0x1b8>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0307 	and.w	r3, r3, #7
 8004a8c:	683a      	ldr	r2, [r7, #0]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d20c      	bcs.n	8004aac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a92:	4b22      	ldr	r3, [pc, #136]	@ (8004b1c <HAL_RCC_ClockConfig+0x1b8>)
 8004a94:	683a      	ldr	r2, [r7, #0]
 8004a96:	b2d2      	uxtb	r2, r2
 8004a98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a9a:	4b20      	ldr	r3, [pc, #128]	@ (8004b1c <HAL_RCC_ClockConfig+0x1b8>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0307 	and.w	r3, r3, #7
 8004aa2:	683a      	ldr	r2, [r7, #0]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d001      	beq.n	8004aac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e032      	b.n	8004b12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 0304 	and.w	r3, r3, #4
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d008      	beq.n	8004aca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ab8:	4b19      	ldr	r3, [pc, #100]	@ (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	4916      	ldr	r1, [pc, #88]	@ (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0308 	and.w	r3, r3, #8
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d009      	beq.n	8004aea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ad6:	4b12      	ldr	r3, [pc, #72]	@ (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	00db      	lsls	r3, r3, #3
 8004ae4:	490e      	ldr	r1, [pc, #56]	@ (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004aea:	f000 f821 	bl	8004b30 <HAL_RCC_GetSysClockFreq>
 8004aee:	4602      	mov	r2, r0
 8004af0:	4b0b      	ldr	r3, [pc, #44]	@ (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	091b      	lsrs	r3, r3, #4
 8004af6:	f003 030f 	and.w	r3, r3, #15
 8004afa:	490a      	ldr	r1, [pc, #40]	@ (8004b24 <HAL_RCC_ClockConfig+0x1c0>)
 8004afc:	5ccb      	ldrb	r3, [r1, r3]
 8004afe:	fa22 f303 	lsr.w	r3, r2, r3
 8004b02:	4a09      	ldr	r2, [pc, #36]	@ (8004b28 <HAL_RCC_ClockConfig+0x1c4>)
 8004b04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b06:	4b09      	ldr	r3, [pc, #36]	@ (8004b2c <HAL_RCC_ClockConfig+0x1c8>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f7fe f9f4 	bl	8002ef8 <HAL_InitTick>

  return HAL_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3710      	adds	r7, #16
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	40023c00 	.word	0x40023c00
 8004b20:	40023800 	.word	0x40023800
 8004b24:	08009a40 	.word	0x08009a40
 8004b28:	20000038 	.word	0x20000038
 8004b2c:	20000054 	.word	0x20000054

08004b30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b34:	b094      	sub	sp, #80	@ 0x50
 8004b36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b40:	2300      	movs	r3, #0
 8004b42:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004b44:	2300      	movs	r3, #0
 8004b46:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b48:	4b79      	ldr	r3, [pc, #484]	@ (8004d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f003 030c 	and.w	r3, r3, #12
 8004b50:	2b08      	cmp	r3, #8
 8004b52:	d00d      	beq.n	8004b70 <HAL_RCC_GetSysClockFreq+0x40>
 8004b54:	2b08      	cmp	r3, #8
 8004b56:	f200 80e1 	bhi.w	8004d1c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d002      	beq.n	8004b64 <HAL_RCC_GetSysClockFreq+0x34>
 8004b5e:	2b04      	cmp	r3, #4
 8004b60:	d003      	beq.n	8004b6a <HAL_RCC_GetSysClockFreq+0x3a>
 8004b62:	e0db      	b.n	8004d1c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b64:	4b73      	ldr	r3, [pc, #460]	@ (8004d34 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b66:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004b68:	e0db      	b.n	8004d22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b6a:	4b73      	ldr	r3, [pc, #460]	@ (8004d38 <HAL_RCC_GetSysClockFreq+0x208>)
 8004b6c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b6e:	e0d8      	b.n	8004d22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b70:	4b6f      	ldr	r3, [pc, #444]	@ (8004d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b78:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b7a:	4b6d      	ldr	r3, [pc, #436]	@ (8004d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d063      	beq.n	8004c4e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b86:	4b6a      	ldr	r3, [pc, #424]	@ (8004d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	099b      	lsrs	r3, r3, #6
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b90:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b98:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004ba2:	4622      	mov	r2, r4
 8004ba4:	462b      	mov	r3, r5
 8004ba6:	f04f 0000 	mov.w	r0, #0
 8004baa:	f04f 0100 	mov.w	r1, #0
 8004bae:	0159      	lsls	r1, r3, #5
 8004bb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bb4:	0150      	lsls	r0, r2, #5
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	460b      	mov	r3, r1
 8004bba:	4621      	mov	r1, r4
 8004bbc:	1a51      	subs	r1, r2, r1
 8004bbe:	6139      	str	r1, [r7, #16]
 8004bc0:	4629      	mov	r1, r5
 8004bc2:	eb63 0301 	sbc.w	r3, r3, r1
 8004bc6:	617b      	str	r3, [r7, #20]
 8004bc8:	f04f 0200 	mov.w	r2, #0
 8004bcc:	f04f 0300 	mov.w	r3, #0
 8004bd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004bd4:	4659      	mov	r1, fp
 8004bd6:	018b      	lsls	r3, r1, #6
 8004bd8:	4651      	mov	r1, sl
 8004bda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004bde:	4651      	mov	r1, sl
 8004be0:	018a      	lsls	r2, r1, #6
 8004be2:	4651      	mov	r1, sl
 8004be4:	ebb2 0801 	subs.w	r8, r2, r1
 8004be8:	4659      	mov	r1, fp
 8004bea:	eb63 0901 	sbc.w	r9, r3, r1
 8004bee:	f04f 0200 	mov.w	r2, #0
 8004bf2:	f04f 0300 	mov.w	r3, #0
 8004bf6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004bfa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004bfe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c02:	4690      	mov	r8, r2
 8004c04:	4699      	mov	r9, r3
 8004c06:	4623      	mov	r3, r4
 8004c08:	eb18 0303 	adds.w	r3, r8, r3
 8004c0c:	60bb      	str	r3, [r7, #8]
 8004c0e:	462b      	mov	r3, r5
 8004c10:	eb49 0303 	adc.w	r3, r9, r3
 8004c14:	60fb      	str	r3, [r7, #12]
 8004c16:	f04f 0200 	mov.w	r2, #0
 8004c1a:	f04f 0300 	mov.w	r3, #0
 8004c1e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c22:	4629      	mov	r1, r5
 8004c24:	024b      	lsls	r3, r1, #9
 8004c26:	4621      	mov	r1, r4
 8004c28:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c2c:	4621      	mov	r1, r4
 8004c2e:	024a      	lsls	r2, r1, #9
 8004c30:	4610      	mov	r0, r2
 8004c32:	4619      	mov	r1, r3
 8004c34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c36:	2200      	movs	r2, #0
 8004c38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c40:	f7fc f822 	bl	8000c88 <__aeabi_uldivmod>
 8004c44:	4602      	mov	r2, r0
 8004c46:	460b      	mov	r3, r1
 8004c48:	4613      	mov	r3, r2
 8004c4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c4c:	e058      	b.n	8004d00 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c4e:	4b38      	ldr	r3, [pc, #224]	@ (8004d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	099b      	lsrs	r3, r3, #6
 8004c54:	2200      	movs	r2, #0
 8004c56:	4618      	mov	r0, r3
 8004c58:	4611      	mov	r1, r2
 8004c5a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004c5e:	623b      	str	r3, [r7, #32]
 8004c60:	2300      	movs	r3, #0
 8004c62:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c64:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004c68:	4642      	mov	r2, r8
 8004c6a:	464b      	mov	r3, r9
 8004c6c:	f04f 0000 	mov.w	r0, #0
 8004c70:	f04f 0100 	mov.w	r1, #0
 8004c74:	0159      	lsls	r1, r3, #5
 8004c76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c7a:	0150      	lsls	r0, r2, #5
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	460b      	mov	r3, r1
 8004c80:	4641      	mov	r1, r8
 8004c82:	ebb2 0a01 	subs.w	sl, r2, r1
 8004c86:	4649      	mov	r1, r9
 8004c88:	eb63 0b01 	sbc.w	fp, r3, r1
 8004c8c:	f04f 0200 	mov.w	r2, #0
 8004c90:	f04f 0300 	mov.w	r3, #0
 8004c94:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004c98:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004c9c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ca0:	ebb2 040a 	subs.w	r4, r2, sl
 8004ca4:	eb63 050b 	sbc.w	r5, r3, fp
 8004ca8:	f04f 0200 	mov.w	r2, #0
 8004cac:	f04f 0300 	mov.w	r3, #0
 8004cb0:	00eb      	lsls	r3, r5, #3
 8004cb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cb6:	00e2      	lsls	r2, r4, #3
 8004cb8:	4614      	mov	r4, r2
 8004cba:	461d      	mov	r5, r3
 8004cbc:	4643      	mov	r3, r8
 8004cbe:	18e3      	adds	r3, r4, r3
 8004cc0:	603b      	str	r3, [r7, #0]
 8004cc2:	464b      	mov	r3, r9
 8004cc4:	eb45 0303 	adc.w	r3, r5, r3
 8004cc8:	607b      	str	r3, [r7, #4]
 8004cca:	f04f 0200 	mov.w	r2, #0
 8004cce:	f04f 0300 	mov.w	r3, #0
 8004cd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004cd6:	4629      	mov	r1, r5
 8004cd8:	028b      	lsls	r3, r1, #10
 8004cda:	4621      	mov	r1, r4
 8004cdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ce0:	4621      	mov	r1, r4
 8004ce2:	028a      	lsls	r2, r1, #10
 8004ce4:	4610      	mov	r0, r2
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cea:	2200      	movs	r2, #0
 8004cec:	61bb      	str	r3, [r7, #24]
 8004cee:	61fa      	str	r2, [r7, #28]
 8004cf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cf4:	f7fb ffc8 	bl	8000c88 <__aeabi_uldivmod>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d00:	4b0b      	ldr	r3, [pc, #44]	@ (8004d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	0c1b      	lsrs	r3, r3, #16
 8004d06:	f003 0303 	and.w	r3, r3, #3
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	005b      	lsls	r3, r3, #1
 8004d0e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004d10:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d18:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d1a:	e002      	b.n	8004d22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d1c:	4b05      	ldr	r3, [pc, #20]	@ (8004d34 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d1e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3750      	adds	r7, #80	@ 0x50
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d2e:	bf00      	nop
 8004d30:	40023800 	.word	0x40023800
 8004d34:	00f42400 	.word	0x00f42400
 8004d38:	007a1200 	.word	0x007a1200

08004d3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d40:	4b03      	ldr	r3, [pc, #12]	@ (8004d50 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d42:	681b      	ldr	r3, [r3, #0]
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop
 8004d50:	20000038 	.word	0x20000038

08004d54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004d58:	f7ff fff0 	bl	8004d3c <HAL_RCC_GetHCLKFreq>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	4b05      	ldr	r3, [pc, #20]	@ (8004d74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	0a9b      	lsrs	r3, r3, #10
 8004d64:	f003 0307 	and.w	r3, r3, #7
 8004d68:	4903      	ldr	r1, [pc, #12]	@ (8004d78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d6a:	5ccb      	ldrb	r3, [r1, r3]
 8004d6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	40023800 	.word	0x40023800
 8004d78:	08009a50 	.word	0x08009a50

08004d7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004d80:	f7ff ffdc 	bl	8004d3c <HAL_RCC_GetHCLKFreq>
 8004d84:	4602      	mov	r2, r0
 8004d86:	4b05      	ldr	r3, [pc, #20]	@ (8004d9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	0b5b      	lsrs	r3, r3, #13
 8004d8c:	f003 0307 	and.w	r3, r3, #7
 8004d90:	4903      	ldr	r1, [pc, #12]	@ (8004da0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d92:	5ccb      	ldrb	r3, [r1, r3]
 8004d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	40023800 	.word	0x40023800
 8004da0:	08009a50 	.word	0x08009a50

08004da4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d101      	bne.n	8004db6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e041      	b.n	8004e3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d106      	bne.n	8004dd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 f839 	bl	8004e42 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2202      	movs	r2, #2
 8004dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	3304      	adds	r3, #4
 8004de0:	4619      	mov	r1, r3
 8004de2:	4610      	mov	r0, r2
 8004de4:	f000 fc52 	bl	800568c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3708      	adds	r7, #8
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}

08004e42 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004e42:	b480      	push	{r7}
 8004e44:	b083      	sub	sp, #12
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004e4a:	bf00      	nop
 8004e4c:	370c      	adds	r7, #12
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr

08004e56 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b082      	sub	sp, #8
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d101      	bne.n	8004e68 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e041      	b.n	8004eec <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d106      	bne.n	8004e82 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 f839 	bl	8004ef4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2202      	movs	r2, #2
 8004e86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	3304      	adds	r3, #4
 8004e92:	4619      	mov	r1, r3
 8004e94:	4610      	mov	r0, r2
 8004e96:	f000 fbf9 	bl	800568c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2201      	movs	r2, #1
 8004eae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3708      	adds	r7, #8
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004efc:	bf00      	nop
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f12:	2300      	movs	r3, #0
 8004f14:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d109      	bne.n	8004f30 <HAL_TIM_PWM_Start_IT+0x28>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	bf14      	ite	ne
 8004f28:	2301      	movne	r3, #1
 8004f2a:	2300      	moveq	r3, #0
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	e022      	b.n	8004f76 <HAL_TIM_PWM_Start_IT+0x6e>
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	2b04      	cmp	r3, #4
 8004f34:	d109      	bne.n	8004f4a <HAL_TIM_PWM_Start_IT+0x42>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	bf14      	ite	ne
 8004f42:	2301      	movne	r3, #1
 8004f44:	2300      	moveq	r3, #0
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	e015      	b.n	8004f76 <HAL_TIM_PWM_Start_IT+0x6e>
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	2b08      	cmp	r3, #8
 8004f4e:	d109      	bne.n	8004f64 <HAL_TIM_PWM_Start_IT+0x5c>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	bf14      	ite	ne
 8004f5c:	2301      	movne	r3, #1
 8004f5e:	2300      	moveq	r3, #0
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	e008      	b.n	8004f76 <HAL_TIM_PWM_Start_IT+0x6e>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	bf14      	ite	ne
 8004f70:	2301      	movne	r3, #1
 8004f72:	2300      	moveq	r3, #0
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d001      	beq.n	8004f7e <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e0c7      	b.n	800510e <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d104      	bne.n	8004f8e <HAL_TIM_PWM_Start_IT+0x86>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2202      	movs	r2, #2
 8004f88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f8c:	e013      	b.n	8004fb6 <HAL_TIM_PWM_Start_IT+0xae>
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	2b04      	cmp	r3, #4
 8004f92:	d104      	bne.n	8004f9e <HAL_TIM_PWM_Start_IT+0x96>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2202      	movs	r2, #2
 8004f98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f9c:	e00b      	b.n	8004fb6 <HAL_TIM_PWM_Start_IT+0xae>
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	2b08      	cmp	r3, #8
 8004fa2:	d104      	bne.n	8004fae <HAL_TIM_PWM_Start_IT+0xa6>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2202      	movs	r2, #2
 8004fa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fac:	e003      	b.n	8004fb6 <HAL_TIM_PWM_Start_IT+0xae>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2202      	movs	r2, #2
 8004fb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	2b0c      	cmp	r3, #12
 8004fba:	d841      	bhi.n	8005040 <HAL_TIM_PWM_Start_IT+0x138>
 8004fbc:	a201      	add	r2, pc, #4	@ (adr r2, 8004fc4 <HAL_TIM_PWM_Start_IT+0xbc>)
 8004fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc2:	bf00      	nop
 8004fc4:	08004ff9 	.word	0x08004ff9
 8004fc8:	08005041 	.word	0x08005041
 8004fcc:	08005041 	.word	0x08005041
 8004fd0:	08005041 	.word	0x08005041
 8004fd4:	0800500b 	.word	0x0800500b
 8004fd8:	08005041 	.word	0x08005041
 8004fdc:	08005041 	.word	0x08005041
 8004fe0:	08005041 	.word	0x08005041
 8004fe4:	0800501d 	.word	0x0800501d
 8004fe8:	08005041 	.word	0x08005041
 8004fec:	08005041 	.word	0x08005041
 8004ff0:	08005041 	.word	0x08005041
 8004ff4:	0800502f 	.word	0x0800502f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68da      	ldr	r2, [r3, #12]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f042 0202 	orr.w	r2, r2, #2
 8005006:	60da      	str	r2, [r3, #12]
      break;
 8005008:	e01d      	b.n	8005046 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68da      	ldr	r2, [r3, #12]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f042 0204 	orr.w	r2, r2, #4
 8005018:	60da      	str	r2, [r3, #12]
      break;
 800501a:	e014      	b.n	8005046 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68da      	ldr	r2, [r3, #12]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f042 0208 	orr.w	r2, r2, #8
 800502a:	60da      	str	r2, [r3, #12]
      break;
 800502c:	e00b      	b.n	8005046 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68da      	ldr	r2, [r3, #12]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f042 0210 	orr.w	r2, r2, #16
 800503c:	60da      	str	r2, [r3, #12]
      break;
 800503e:	e002      	b.n	8005046 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	73fb      	strb	r3, [r7, #15]
      break;
 8005044:	bf00      	nop
  }

  if (status == HAL_OK)
 8005046:	7bfb      	ldrb	r3, [r7, #15]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d15f      	bne.n	800510c <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2201      	movs	r2, #1
 8005052:	6839      	ldr	r1, [r7, #0]
 8005054:	4618      	mov	r0, r3
 8005056:	f000 fe0f 	bl	8005c78 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a2e      	ldr	r2, [pc, #184]	@ (8005118 <HAL_TIM_PWM_Start_IT+0x210>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d004      	beq.n	800506e <HAL_TIM_PWM_Start_IT+0x166>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a2c      	ldr	r2, [pc, #176]	@ (800511c <HAL_TIM_PWM_Start_IT+0x214>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d101      	bne.n	8005072 <HAL_TIM_PWM_Start_IT+0x16a>
 800506e:	2301      	movs	r3, #1
 8005070:	e000      	b.n	8005074 <HAL_TIM_PWM_Start_IT+0x16c>
 8005072:	2300      	movs	r3, #0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d007      	beq.n	8005088 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005086:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a22      	ldr	r2, [pc, #136]	@ (8005118 <HAL_TIM_PWM_Start_IT+0x210>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d022      	beq.n	80050d8 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800509a:	d01d      	beq.n	80050d8 <HAL_TIM_PWM_Start_IT+0x1d0>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a1f      	ldr	r2, [pc, #124]	@ (8005120 <HAL_TIM_PWM_Start_IT+0x218>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d018      	beq.n	80050d8 <HAL_TIM_PWM_Start_IT+0x1d0>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a1e      	ldr	r2, [pc, #120]	@ (8005124 <HAL_TIM_PWM_Start_IT+0x21c>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d013      	beq.n	80050d8 <HAL_TIM_PWM_Start_IT+0x1d0>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a1c      	ldr	r2, [pc, #112]	@ (8005128 <HAL_TIM_PWM_Start_IT+0x220>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d00e      	beq.n	80050d8 <HAL_TIM_PWM_Start_IT+0x1d0>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a17      	ldr	r2, [pc, #92]	@ (800511c <HAL_TIM_PWM_Start_IT+0x214>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d009      	beq.n	80050d8 <HAL_TIM_PWM_Start_IT+0x1d0>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a18      	ldr	r2, [pc, #96]	@ (800512c <HAL_TIM_PWM_Start_IT+0x224>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d004      	beq.n	80050d8 <HAL_TIM_PWM_Start_IT+0x1d0>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a17      	ldr	r2, [pc, #92]	@ (8005130 <HAL_TIM_PWM_Start_IT+0x228>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d111      	bne.n	80050fc <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f003 0307 	and.w	r3, r3, #7
 80050e2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	2b06      	cmp	r3, #6
 80050e8:	d010      	beq.n	800510c <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f042 0201 	orr.w	r2, r2, #1
 80050f8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050fa:	e007      	b.n	800510c <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f042 0201 	orr.w	r2, r2, #1
 800510a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800510c:	7bfb      	ldrb	r3, [r7, #15]
}
 800510e:	4618      	mov	r0, r3
 8005110:	3710      	adds	r7, #16
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	40010000 	.word	0x40010000
 800511c:	40010400 	.word	0x40010400
 8005120:	40000400 	.word	0x40000400
 8005124:	40000800 	.word	0x40000800
 8005128:	40000c00 	.word	0x40000c00
 800512c:	40014000 	.word	0x40014000
 8005130:	40001800 	.word	0x40001800

08005134 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	f003 0302 	and.w	r3, r3, #2
 8005152:	2b00      	cmp	r3, #0
 8005154:	d020      	beq.n	8005198 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f003 0302 	and.w	r3, r3, #2
 800515c:	2b00      	cmp	r3, #0
 800515e:	d01b      	beq.n	8005198 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f06f 0202 	mvn.w	r2, #2
 8005168:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2201      	movs	r2, #1
 800516e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	699b      	ldr	r3, [r3, #24]
 8005176:	f003 0303 	and.w	r3, r3, #3
 800517a:	2b00      	cmp	r3, #0
 800517c:	d003      	beq.n	8005186 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 fa65 	bl	800564e <HAL_TIM_IC_CaptureCallback>
 8005184:	e005      	b.n	8005192 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 fa57 	bl	800563a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f000 fa68 	bl	8005662 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	f003 0304 	and.w	r3, r3, #4
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d020      	beq.n	80051e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f003 0304 	and.w	r3, r3, #4
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d01b      	beq.n	80051e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f06f 0204 	mvn.w	r2, #4
 80051b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2202      	movs	r2, #2
 80051ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d003      	beq.n	80051d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 fa3f 	bl	800564e <HAL_TIM_IC_CaptureCallback>
 80051d0:	e005      	b.n	80051de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 fa31 	bl	800563a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 fa42 	bl	8005662 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	f003 0308 	and.w	r3, r3, #8
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d020      	beq.n	8005230 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f003 0308 	and.w	r3, r3, #8
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d01b      	beq.n	8005230 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f06f 0208 	mvn.w	r2, #8
 8005200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2204      	movs	r2, #4
 8005206:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	69db      	ldr	r3, [r3, #28]
 800520e:	f003 0303 	and.w	r3, r3, #3
 8005212:	2b00      	cmp	r3, #0
 8005214:	d003      	beq.n	800521e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 fa19 	bl	800564e <HAL_TIM_IC_CaptureCallback>
 800521c:	e005      	b.n	800522a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 fa0b 	bl	800563a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 fa1c 	bl	8005662 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	f003 0310 	and.w	r3, r3, #16
 8005236:	2b00      	cmp	r3, #0
 8005238:	d020      	beq.n	800527c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f003 0310 	and.w	r3, r3, #16
 8005240:	2b00      	cmp	r3, #0
 8005242:	d01b      	beq.n	800527c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f06f 0210 	mvn.w	r2, #16
 800524c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2208      	movs	r2, #8
 8005252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	69db      	ldr	r3, [r3, #28]
 800525a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800525e:	2b00      	cmp	r3, #0
 8005260:	d003      	beq.n	800526a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 f9f3 	bl	800564e <HAL_TIM_IC_CaptureCallback>
 8005268:	e005      	b.n	8005276 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 f9e5 	bl	800563a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 f9f6 	bl	8005662 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	f003 0301 	and.w	r3, r3, #1
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00c      	beq.n	80052a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f003 0301 	and.w	r3, r3, #1
 800528c:	2b00      	cmp	r3, #0
 800528e:	d007      	beq.n	80052a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f06f 0201 	mvn.w	r2, #1
 8005298:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 f9c3 	bl	8005626 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00c      	beq.n	80052c4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d007      	beq.n	80052c4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80052bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 fd86 	bl	8005dd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00c      	beq.n	80052e8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d007      	beq.n	80052e8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80052e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 f9c7 	bl	8005676 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	f003 0320 	and.w	r3, r3, #32
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00c      	beq.n	800530c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f003 0320 	and.w	r3, r3, #32
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d007      	beq.n	800530c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f06f 0220 	mvn.w	r2, #32
 8005304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 fd58 	bl	8005dbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800530c:	bf00      	nop
 800530e:	3710      	adds	r7, #16
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b086      	sub	sp, #24
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005320:	2300      	movs	r3, #0
 8005322:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800532a:	2b01      	cmp	r3, #1
 800532c:	d101      	bne.n	8005332 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800532e:	2302      	movs	r3, #2
 8005330:	e0ae      	b.n	8005490 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2201      	movs	r2, #1
 8005336:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2b0c      	cmp	r3, #12
 800533e:	f200 809f 	bhi.w	8005480 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005342:	a201      	add	r2, pc, #4	@ (adr r2, 8005348 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005348:	0800537d 	.word	0x0800537d
 800534c:	08005481 	.word	0x08005481
 8005350:	08005481 	.word	0x08005481
 8005354:	08005481 	.word	0x08005481
 8005358:	080053bd 	.word	0x080053bd
 800535c:	08005481 	.word	0x08005481
 8005360:	08005481 	.word	0x08005481
 8005364:	08005481 	.word	0x08005481
 8005368:	080053ff 	.word	0x080053ff
 800536c:	08005481 	.word	0x08005481
 8005370:	08005481 	.word	0x08005481
 8005374:	08005481 	.word	0x08005481
 8005378:	0800543f 	.word	0x0800543f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68b9      	ldr	r1, [r7, #8]
 8005382:	4618      	mov	r0, r3
 8005384:	f000 fa2e 	bl	80057e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	699a      	ldr	r2, [r3, #24]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f042 0208 	orr.w	r2, r2, #8
 8005396:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	699a      	ldr	r2, [r3, #24]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f022 0204 	bic.w	r2, r2, #4
 80053a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	6999      	ldr	r1, [r3, #24]
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	691a      	ldr	r2, [r3, #16]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	430a      	orrs	r2, r1
 80053b8:	619a      	str	r2, [r3, #24]
      break;
 80053ba:	e064      	b.n	8005486 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68b9      	ldr	r1, [r7, #8]
 80053c2:	4618      	mov	r0, r3
 80053c4:	f000 fa7e 	bl	80058c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	699a      	ldr	r2, [r3, #24]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80053d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	699a      	ldr	r2, [r3, #24]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	6999      	ldr	r1, [r3, #24]
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	021a      	lsls	r2, r3, #8
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	430a      	orrs	r2, r1
 80053fa:	619a      	str	r2, [r3, #24]
      break;
 80053fc:	e043      	b.n	8005486 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68b9      	ldr	r1, [r7, #8]
 8005404:	4618      	mov	r0, r3
 8005406:	f000 fad3 	bl	80059b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	69da      	ldr	r2, [r3, #28]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f042 0208 	orr.w	r2, r2, #8
 8005418:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	69da      	ldr	r2, [r3, #28]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f022 0204 	bic.w	r2, r2, #4
 8005428:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	69d9      	ldr	r1, [r3, #28]
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	691a      	ldr	r2, [r3, #16]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	430a      	orrs	r2, r1
 800543a:	61da      	str	r2, [r3, #28]
      break;
 800543c:	e023      	b.n	8005486 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	68b9      	ldr	r1, [r7, #8]
 8005444:	4618      	mov	r0, r3
 8005446:	f000 fb27 	bl	8005a98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	69da      	ldr	r2, [r3, #28]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005458:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	69da      	ldr	r2, [r3, #28]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005468:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	69d9      	ldr	r1, [r3, #28]
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	021a      	lsls	r2, r3, #8
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	430a      	orrs	r2, r1
 800547c:	61da      	str	r2, [r3, #28]
      break;
 800547e:	e002      	b.n	8005486 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	75fb      	strb	r3, [r7, #23]
      break;
 8005484:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800548e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005490:	4618      	mov	r0, r3
 8005492:	3718      	adds	r7, #24
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054a2:	2300      	movs	r3, #0
 80054a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d101      	bne.n	80054b4 <HAL_TIM_ConfigClockSource+0x1c>
 80054b0:	2302      	movs	r3, #2
 80054b2:	e0b4      	b.n	800561e <HAL_TIM_ConfigClockSource+0x186>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2202      	movs	r2, #2
 80054c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80054d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80054da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	68ba      	ldr	r2, [r7, #8]
 80054e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054ec:	d03e      	beq.n	800556c <HAL_TIM_ConfigClockSource+0xd4>
 80054ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054f2:	f200 8087 	bhi.w	8005604 <HAL_TIM_ConfigClockSource+0x16c>
 80054f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054fa:	f000 8086 	beq.w	800560a <HAL_TIM_ConfigClockSource+0x172>
 80054fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005502:	d87f      	bhi.n	8005604 <HAL_TIM_ConfigClockSource+0x16c>
 8005504:	2b70      	cmp	r3, #112	@ 0x70
 8005506:	d01a      	beq.n	800553e <HAL_TIM_ConfigClockSource+0xa6>
 8005508:	2b70      	cmp	r3, #112	@ 0x70
 800550a:	d87b      	bhi.n	8005604 <HAL_TIM_ConfigClockSource+0x16c>
 800550c:	2b60      	cmp	r3, #96	@ 0x60
 800550e:	d050      	beq.n	80055b2 <HAL_TIM_ConfigClockSource+0x11a>
 8005510:	2b60      	cmp	r3, #96	@ 0x60
 8005512:	d877      	bhi.n	8005604 <HAL_TIM_ConfigClockSource+0x16c>
 8005514:	2b50      	cmp	r3, #80	@ 0x50
 8005516:	d03c      	beq.n	8005592 <HAL_TIM_ConfigClockSource+0xfa>
 8005518:	2b50      	cmp	r3, #80	@ 0x50
 800551a:	d873      	bhi.n	8005604 <HAL_TIM_ConfigClockSource+0x16c>
 800551c:	2b40      	cmp	r3, #64	@ 0x40
 800551e:	d058      	beq.n	80055d2 <HAL_TIM_ConfigClockSource+0x13a>
 8005520:	2b40      	cmp	r3, #64	@ 0x40
 8005522:	d86f      	bhi.n	8005604 <HAL_TIM_ConfigClockSource+0x16c>
 8005524:	2b30      	cmp	r3, #48	@ 0x30
 8005526:	d064      	beq.n	80055f2 <HAL_TIM_ConfigClockSource+0x15a>
 8005528:	2b30      	cmp	r3, #48	@ 0x30
 800552a:	d86b      	bhi.n	8005604 <HAL_TIM_ConfigClockSource+0x16c>
 800552c:	2b20      	cmp	r3, #32
 800552e:	d060      	beq.n	80055f2 <HAL_TIM_ConfigClockSource+0x15a>
 8005530:	2b20      	cmp	r3, #32
 8005532:	d867      	bhi.n	8005604 <HAL_TIM_ConfigClockSource+0x16c>
 8005534:	2b00      	cmp	r3, #0
 8005536:	d05c      	beq.n	80055f2 <HAL_TIM_ConfigClockSource+0x15a>
 8005538:	2b10      	cmp	r3, #16
 800553a:	d05a      	beq.n	80055f2 <HAL_TIM_ConfigClockSource+0x15a>
 800553c:	e062      	b.n	8005604 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800554e:	f000 fb73 	bl	8005c38 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005560:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68ba      	ldr	r2, [r7, #8]
 8005568:	609a      	str	r2, [r3, #8]
      break;
 800556a:	e04f      	b.n	800560c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800557c:	f000 fb5c 	bl	8005c38 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	689a      	ldr	r2, [r3, #8]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800558e:	609a      	str	r2, [r3, #8]
      break;
 8005590:	e03c      	b.n	800560c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800559e:	461a      	mov	r2, r3
 80055a0:	f000 fad0 	bl	8005b44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2150      	movs	r1, #80	@ 0x50
 80055aa:	4618      	mov	r0, r3
 80055ac:	f000 fb29 	bl	8005c02 <TIM_ITRx_SetConfig>
      break;
 80055b0:	e02c      	b.n	800560c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80055be:	461a      	mov	r2, r3
 80055c0:	f000 faef 	bl	8005ba2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2160      	movs	r1, #96	@ 0x60
 80055ca:	4618      	mov	r0, r3
 80055cc:	f000 fb19 	bl	8005c02 <TIM_ITRx_SetConfig>
      break;
 80055d0:	e01c      	b.n	800560c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055de:	461a      	mov	r2, r3
 80055e0:	f000 fab0 	bl	8005b44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2140      	movs	r1, #64	@ 0x40
 80055ea:	4618      	mov	r0, r3
 80055ec:	f000 fb09 	bl	8005c02 <TIM_ITRx_SetConfig>
      break;
 80055f0:	e00c      	b.n	800560c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4619      	mov	r1, r3
 80055fc:	4610      	mov	r0, r2
 80055fe:	f000 fb00 	bl	8005c02 <TIM_ITRx_SetConfig>
      break;
 8005602:	e003      	b.n	800560c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	73fb      	strb	r3, [r7, #15]
      break;
 8005608:	e000      	b.n	800560c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800560a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800561c:	7bfb      	ldrb	r3, [r7, #15]
}
 800561e:	4618      	mov	r0, r3
 8005620:	3710      	adds	r7, #16
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}

08005626 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005626:	b480      	push	{r7}
 8005628:	b083      	sub	sp, #12
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800562e:	bf00      	nop
 8005630:	370c      	adds	r7, #12
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr

0800563a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800563a:	b480      	push	{r7}
 800563c:	b083      	sub	sp, #12
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005642:	bf00      	nop
 8005644:	370c      	adds	r7, #12
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr

0800564e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800564e:	b480      	push	{r7}
 8005650:	b083      	sub	sp, #12
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005656:	bf00      	nop
 8005658:	370c      	adds	r7, #12
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr

08005662 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005662:	b480      	push	{r7}
 8005664:	b083      	sub	sp, #12
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800566a:	bf00      	nop
 800566c:	370c      	adds	r7, #12
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr

08005676 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005676:	b480      	push	{r7}
 8005678:	b083      	sub	sp, #12
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800567e:	bf00      	nop
 8005680:	370c      	adds	r7, #12
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr
	...

0800568c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800568c:	b480      	push	{r7}
 800568e:	b085      	sub	sp, #20
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a46      	ldr	r2, [pc, #280]	@ (80057b8 <TIM_Base_SetConfig+0x12c>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d013      	beq.n	80056cc <TIM_Base_SetConfig+0x40>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056aa:	d00f      	beq.n	80056cc <TIM_Base_SetConfig+0x40>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a43      	ldr	r2, [pc, #268]	@ (80057bc <TIM_Base_SetConfig+0x130>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d00b      	beq.n	80056cc <TIM_Base_SetConfig+0x40>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a42      	ldr	r2, [pc, #264]	@ (80057c0 <TIM_Base_SetConfig+0x134>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d007      	beq.n	80056cc <TIM_Base_SetConfig+0x40>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a41      	ldr	r2, [pc, #260]	@ (80057c4 <TIM_Base_SetConfig+0x138>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d003      	beq.n	80056cc <TIM_Base_SetConfig+0x40>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a40      	ldr	r2, [pc, #256]	@ (80057c8 <TIM_Base_SetConfig+0x13c>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d108      	bne.n	80056de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	4313      	orrs	r3, r2
 80056dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a35      	ldr	r2, [pc, #212]	@ (80057b8 <TIM_Base_SetConfig+0x12c>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d02b      	beq.n	800573e <TIM_Base_SetConfig+0xb2>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056ec:	d027      	beq.n	800573e <TIM_Base_SetConfig+0xb2>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a32      	ldr	r2, [pc, #200]	@ (80057bc <TIM_Base_SetConfig+0x130>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d023      	beq.n	800573e <TIM_Base_SetConfig+0xb2>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a31      	ldr	r2, [pc, #196]	@ (80057c0 <TIM_Base_SetConfig+0x134>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d01f      	beq.n	800573e <TIM_Base_SetConfig+0xb2>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a30      	ldr	r2, [pc, #192]	@ (80057c4 <TIM_Base_SetConfig+0x138>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d01b      	beq.n	800573e <TIM_Base_SetConfig+0xb2>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a2f      	ldr	r2, [pc, #188]	@ (80057c8 <TIM_Base_SetConfig+0x13c>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d017      	beq.n	800573e <TIM_Base_SetConfig+0xb2>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a2e      	ldr	r2, [pc, #184]	@ (80057cc <TIM_Base_SetConfig+0x140>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d013      	beq.n	800573e <TIM_Base_SetConfig+0xb2>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a2d      	ldr	r2, [pc, #180]	@ (80057d0 <TIM_Base_SetConfig+0x144>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d00f      	beq.n	800573e <TIM_Base_SetConfig+0xb2>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a2c      	ldr	r2, [pc, #176]	@ (80057d4 <TIM_Base_SetConfig+0x148>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d00b      	beq.n	800573e <TIM_Base_SetConfig+0xb2>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a2b      	ldr	r2, [pc, #172]	@ (80057d8 <TIM_Base_SetConfig+0x14c>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d007      	beq.n	800573e <TIM_Base_SetConfig+0xb2>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a2a      	ldr	r2, [pc, #168]	@ (80057dc <TIM_Base_SetConfig+0x150>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d003      	beq.n	800573e <TIM_Base_SetConfig+0xb2>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a29      	ldr	r2, [pc, #164]	@ (80057e0 <TIM_Base_SetConfig+0x154>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d108      	bne.n	8005750 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005744:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	4313      	orrs	r3, r2
 800574e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	695b      	ldr	r3, [r3, #20]
 800575a:	4313      	orrs	r3, r2
 800575c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	689a      	ldr	r2, [r3, #8]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a10      	ldr	r2, [pc, #64]	@ (80057b8 <TIM_Base_SetConfig+0x12c>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d003      	beq.n	8005784 <TIM_Base_SetConfig+0xf8>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4a12      	ldr	r2, [pc, #72]	@ (80057c8 <TIM_Base_SetConfig+0x13c>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d103      	bne.n	800578c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	691a      	ldr	r2, [r3, #16]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	f003 0301 	and.w	r3, r3, #1
 800579a:	2b01      	cmp	r3, #1
 800579c:	d105      	bne.n	80057aa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	f023 0201 	bic.w	r2, r3, #1
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	611a      	str	r2, [r3, #16]
  }
}
 80057aa:	bf00      	nop
 80057ac:	3714      	adds	r7, #20
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	40010000 	.word	0x40010000
 80057bc:	40000400 	.word	0x40000400
 80057c0:	40000800 	.word	0x40000800
 80057c4:	40000c00 	.word	0x40000c00
 80057c8:	40010400 	.word	0x40010400
 80057cc:	40014000 	.word	0x40014000
 80057d0:	40014400 	.word	0x40014400
 80057d4:	40014800 	.word	0x40014800
 80057d8:	40001800 	.word	0x40001800
 80057dc:	40001c00 	.word	0x40001c00
 80057e0:	40002000 	.word	0x40002000

080057e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b087      	sub	sp, #28
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a1b      	ldr	r3, [r3, #32]
 80057f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6a1b      	ldr	r3, [r3, #32]
 80057f8:	f023 0201 	bic.w	r2, r3, #1
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	699b      	ldr	r3, [r3, #24]
 800580a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005812:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f023 0303 	bic.w	r3, r3, #3
 800581a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	4313      	orrs	r3, r2
 8005824:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	f023 0302 	bic.w	r3, r3, #2
 800582c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	697a      	ldr	r2, [r7, #20]
 8005834:	4313      	orrs	r3, r2
 8005836:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a20      	ldr	r2, [pc, #128]	@ (80058bc <TIM_OC1_SetConfig+0xd8>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d003      	beq.n	8005848 <TIM_OC1_SetConfig+0x64>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a1f      	ldr	r2, [pc, #124]	@ (80058c0 <TIM_OC1_SetConfig+0xdc>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d10c      	bne.n	8005862 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	f023 0308 	bic.w	r3, r3, #8
 800584e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	697a      	ldr	r2, [r7, #20]
 8005856:	4313      	orrs	r3, r2
 8005858:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	f023 0304 	bic.w	r3, r3, #4
 8005860:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a15      	ldr	r2, [pc, #84]	@ (80058bc <TIM_OC1_SetConfig+0xd8>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d003      	beq.n	8005872 <TIM_OC1_SetConfig+0x8e>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a14      	ldr	r2, [pc, #80]	@ (80058c0 <TIM_OC1_SetConfig+0xdc>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d111      	bne.n	8005896 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005878:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005880:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	695b      	ldr	r3, [r3, #20]
 8005886:	693a      	ldr	r2, [r7, #16]
 8005888:	4313      	orrs	r3, r2
 800588a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	699b      	ldr	r3, [r3, #24]
 8005890:	693a      	ldr	r2, [r7, #16]
 8005892:	4313      	orrs	r3, r2
 8005894:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	693a      	ldr	r2, [r7, #16]
 800589a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	68fa      	ldr	r2, [r7, #12]
 80058a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	685a      	ldr	r2, [r3, #4]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	697a      	ldr	r2, [r7, #20]
 80058ae:	621a      	str	r2, [r3, #32]
}
 80058b0:	bf00      	nop
 80058b2:	371c      	adds	r7, #28
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr
 80058bc:	40010000 	.word	0x40010000
 80058c0:	40010400 	.word	0x40010400

080058c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b087      	sub	sp, #28
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a1b      	ldr	r3, [r3, #32]
 80058d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6a1b      	ldr	r3, [r3, #32]
 80058d8:	f023 0210 	bic.w	r2, r3, #16
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	699b      	ldr	r3, [r3, #24]
 80058ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	021b      	lsls	r3, r3, #8
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	4313      	orrs	r3, r2
 8005906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	f023 0320 	bic.w	r3, r3, #32
 800590e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	011b      	lsls	r3, r3, #4
 8005916:	697a      	ldr	r2, [r7, #20]
 8005918:	4313      	orrs	r3, r2
 800591a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a22      	ldr	r2, [pc, #136]	@ (80059a8 <TIM_OC2_SetConfig+0xe4>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d003      	beq.n	800592c <TIM_OC2_SetConfig+0x68>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a21      	ldr	r2, [pc, #132]	@ (80059ac <TIM_OC2_SetConfig+0xe8>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d10d      	bne.n	8005948 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005932:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	011b      	lsls	r3, r3, #4
 800593a:	697a      	ldr	r2, [r7, #20]
 800593c:	4313      	orrs	r3, r2
 800593e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005946:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a17      	ldr	r2, [pc, #92]	@ (80059a8 <TIM_OC2_SetConfig+0xe4>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d003      	beq.n	8005958 <TIM_OC2_SetConfig+0x94>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a16      	ldr	r2, [pc, #88]	@ (80059ac <TIM_OC2_SetConfig+0xe8>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d113      	bne.n	8005980 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800595e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005966:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	695b      	ldr	r3, [r3, #20]
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	693a      	ldr	r2, [r7, #16]
 8005970:	4313      	orrs	r3, r2
 8005972:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	699b      	ldr	r3, [r3, #24]
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	693a      	ldr	r2, [r7, #16]
 800597c:	4313      	orrs	r3, r2
 800597e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	693a      	ldr	r2, [r7, #16]
 8005984:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	68fa      	ldr	r2, [r7, #12]
 800598a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	685a      	ldr	r2, [r3, #4]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	697a      	ldr	r2, [r7, #20]
 8005998:	621a      	str	r2, [r3, #32]
}
 800599a:	bf00      	nop
 800599c:	371c      	adds	r7, #28
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr
 80059a6:	bf00      	nop
 80059a8:	40010000 	.word	0x40010000
 80059ac:	40010400 	.word	0x40010400

080059b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b087      	sub	sp, #28
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a1b      	ldr	r3, [r3, #32]
 80059be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6a1b      	ldr	r3, [r3, #32]
 80059c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	69db      	ldr	r3, [r3, #28]
 80059d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f023 0303 	bic.w	r3, r3, #3
 80059e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80059f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	021b      	lsls	r3, r3, #8
 8005a00:	697a      	ldr	r2, [r7, #20]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a21      	ldr	r2, [pc, #132]	@ (8005a90 <TIM_OC3_SetConfig+0xe0>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d003      	beq.n	8005a16 <TIM_OC3_SetConfig+0x66>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a20      	ldr	r2, [pc, #128]	@ (8005a94 <TIM_OC3_SetConfig+0xe4>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d10d      	bne.n	8005a32 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005a1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	021b      	lsls	r3, r3, #8
 8005a24:	697a      	ldr	r2, [r7, #20]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005a30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a16      	ldr	r2, [pc, #88]	@ (8005a90 <TIM_OC3_SetConfig+0xe0>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d003      	beq.n	8005a42 <TIM_OC3_SetConfig+0x92>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a15      	ldr	r2, [pc, #84]	@ (8005a94 <TIM_OC3_SetConfig+0xe4>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d113      	bne.n	8005a6a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005a50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	695b      	ldr	r3, [r3, #20]
 8005a56:	011b      	lsls	r3, r3, #4
 8005a58:	693a      	ldr	r2, [r7, #16]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	011b      	lsls	r3, r3, #4
 8005a64:	693a      	ldr	r2, [r7, #16]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	693a      	ldr	r2, [r7, #16]
 8005a6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	685a      	ldr	r2, [r3, #4]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	697a      	ldr	r2, [r7, #20]
 8005a82:	621a      	str	r2, [r3, #32]
}
 8005a84:	bf00      	nop
 8005a86:	371c      	adds	r7, #28
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr
 8005a90:	40010000 	.word	0x40010000
 8005a94:	40010400 	.word	0x40010400

08005a98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b087      	sub	sp, #28
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a1b      	ldr	r3, [r3, #32]
 8005aa6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a1b      	ldr	r3, [r3, #32]
 8005aac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	69db      	ldr	r3, [r3, #28]
 8005abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ace:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	021b      	lsls	r3, r3, #8
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005ae2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	031b      	lsls	r3, r3, #12
 8005aea:	693a      	ldr	r2, [r7, #16]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a12      	ldr	r2, [pc, #72]	@ (8005b3c <TIM_OC4_SetConfig+0xa4>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d003      	beq.n	8005b00 <TIM_OC4_SetConfig+0x68>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a11      	ldr	r2, [pc, #68]	@ (8005b40 <TIM_OC4_SetConfig+0xa8>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d109      	bne.n	8005b14 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	695b      	ldr	r3, [r3, #20]
 8005b0c:	019b      	lsls	r3, r3, #6
 8005b0e:	697a      	ldr	r2, [r7, #20]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	697a      	ldr	r2, [r7, #20]
 8005b18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	685a      	ldr	r2, [r3, #4]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	693a      	ldr	r2, [r7, #16]
 8005b2c:	621a      	str	r2, [r3, #32]
}
 8005b2e:	bf00      	nop
 8005b30:	371c      	adds	r7, #28
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	40010000 	.word	0x40010000
 8005b40:	40010400 	.word	0x40010400

08005b44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b087      	sub	sp, #28
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6a1b      	ldr	r3, [r3, #32]
 8005b54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6a1b      	ldr	r3, [r3, #32]
 8005b5a:	f023 0201 	bic.w	r2, r3, #1
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	699b      	ldr	r3, [r3, #24]
 8005b66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	011b      	lsls	r3, r3, #4
 8005b74:	693a      	ldr	r2, [r7, #16]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	f023 030a 	bic.w	r3, r3, #10
 8005b80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b82:	697a      	ldr	r2, [r7, #20]
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	693a      	ldr	r2, [r7, #16]
 8005b8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	697a      	ldr	r2, [r7, #20]
 8005b94:	621a      	str	r2, [r3, #32]
}
 8005b96:	bf00      	nop
 8005b98:	371c      	adds	r7, #28
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr

08005ba2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ba2:	b480      	push	{r7}
 8005ba4:	b087      	sub	sp, #28
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	60f8      	str	r0, [r7, #12]
 8005baa:	60b9      	str	r1, [r7, #8]
 8005bac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6a1b      	ldr	r3, [r3, #32]
 8005bb2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6a1b      	ldr	r3, [r3, #32]
 8005bb8:	f023 0210 	bic.w	r2, r3, #16
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	699b      	ldr	r3, [r3, #24]
 8005bc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005bcc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	031b      	lsls	r3, r3, #12
 8005bd2:	693a      	ldr	r2, [r7, #16]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005bde:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	011b      	lsls	r3, r3, #4
 8005be4:	697a      	ldr	r2, [r7, #20]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	693a      	ldr	r2, [r7, #16]
 8005bee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	621a      	str	r2, [r3, #32]
}
 8005bf6:	bf00      	nop
 8005bf8:	371c      	adds	r7, #28
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr

08005c02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c02:	b480      	push	{r7}
 8005c04:	b085      	sub	sp, #20
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
 8005c0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c1a:	683a      	ldr	r2, [r7, #0]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	f043 0307 	orr.w	r3, r3, #7
 8005c24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	609a      	str	r2, [r3, #8]
}
 8005c2c:	bf00      	nop
 8005c2e:	3714      	adds	r7, #20
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b087      	sub	sp, #28
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	607a      	str	r2, [r7, #4]
 8005c44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	021a      	lsls	r2, r3, #8
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	431a      	orrs	r2, r3
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	697a      	ldr	r2, [r7, #20]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	697a      	ldr	r2, [r7, #20]
 8005c6a:	609a      	str	r2, [r3, #8]
}
 8005c6c:	bf00      	nop
 8005c6e:	371c      	adds	r7, #28
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b087      	sub	sp, #28
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	f003 031f 	and.w	r3, r3, #31
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6a1a      	ldr	r2, [r3, #32]
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	43db      	mvns	r3, r3
 8005c9a:	401a      	ands	r2, r3
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6a1a      	ldr	r2, [r3, #32]
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	f003 031f 	and.w	r3, r3, #31
 8005caa:	6879      	ldr	r1, [r7, #4]
 8005cac:	fa01 f303 	lsl.w	r3, r1, r3
 8005cb0:	431a      	orrs	r2, r3
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	621a      	str	r2, [r3, #32]
}
 8005cb6:	bf00      	nop
 8005cb8:	371c      	adds	r7, #28
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr
	...

08005cc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b085      	sub	sp, #20
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d101      	bne.n	8005cdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cd8:	2302      	movs	r3, #2
 8005cda:	e05a      	b.n	8005d92 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a21      	ldr	r2, [pc, #132]	@ (8005da0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d022      	beq.n	8005d66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d28:	d01d      	beq.n	8005d66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a1d      	ldr	r2, [pc, #116]	@ (8005da4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d018      	beq.n	8005d66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a1b      	ldr	r2, [pc, #108]	@ (8005da8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d013      	beq.n	8005d66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a1a      	ldr	r2, [pc, #104]	@ (8005dac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d00e      	beq.n	8005d66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a18      	ldr	r2, [pc, #96]	@ (8005db0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d009      	beq.n	8005d66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a17      	ldr	r2, [pc, #92]	@ (8005db4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d004      	beq.n	8005d66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a15      	ldr	r2, [pc, #84]	@ (8005db8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d10c      	bne.n	8005d80 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	68ba      	ldr	r2, [r7, #8]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68ba      	ldr	r2, [r7, #8]
 8005d7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3714      	adds	r7, #20
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	40010000 	.word	0x40010000
 8005da4:	40000400 	.word	0x40000400
 8005da8:	40000800 	.word	0x40000800
 8005dac:	40000c00 	.word	0x40000c00
 8005db0:	40010400 	.word	0x40010400
 8005db4:	40014000 	.word	0x40014000
 8005db8:	40001800 	.word	0x40001800

08005dbc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005dc4:	bf00      	nop
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005dd8:	bf00      	nop
 8005dda:	370c      	adds	r7, #12
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d101      	bne.n	8005df6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e042      	b.n	8005e7c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d106      	bne.n	8005e10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f7fc ffce 	bl	8002dac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2224      	movs	r2, #36	@ 0x24
 8005e14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68da      	ldr	r2, [r3, #12]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005e26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f000 fb83 	bl	8006534 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	691a      	ldr	r2, [r3, #16]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005e3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	695a      	ldr	r2, [r3, #20]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005e4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	68da      	ldr	r2, [r3, #12]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005e5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2220      	movs	r2, #32
 8005e68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2220      	movs	r2, #32
 8005e70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005e7a:	2300      	movs	r3, #0
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3708      	adds	r7, #8
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}

08005e84 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b08a      	sub	sp, #40	@ 0x28
 8005e88:	af02      	add	r7, sp, #8
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	603b      	str	r3, [r7, #0]
 8005e90:	4613      	mov	r3, r2
 8005e92:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005e94:	2300      	movs	r3, #0
 8005e96:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	2b20      	cmp	r3, #32
 8005ea2:	d175      	bne.n	8005f90 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d002      	beq.n	8005eb0 <HAL_UART_Transmit+0x2c>
 8005eaa:	88fb      	ldrh	r3, [r7, #6]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d101      	bne.n	8005eb4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e06e      	b.n	8005f92 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2221      	movs	r2, #33	@ 0x21
 8005ebe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ec2:	f7fd f85d 	bl	8002f80 <HAL_GetTick>
 8005ec6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	88fa      	ldrh	r2, [r7, #6]
 8005ecc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	88fa      	ldrh	r2, [r7, #6]
 8005ed2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005edc:	d108      	bne.n	8005ef0 <HAL_UART_Transmit+0x6c>
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d104      	bne.n	8005ef0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	61bb      	str	r3, [r7, #24]
 8005eee:	e003      	b.n	8005ef8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ef8:	e02e      	b.n	8005f58 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	9300      	str	r3, [sp, #0]
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	2200      	movs	r2, #0
 8005f02:	2180      	movs	r1, #128	@ 0x80
 8005f04:	68f8      	ldr	r0, [r7, #12]
 8005f06:	f000 f995 	bl	8006234 <UART_WaitOnFlagUntilTimeout>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d005      	beq.n	8005f1c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2220      	movs	r2, #32
 8005f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005f18:	2303      	movs	r3, #3
 8005f1a:	e03a      	b.n	8005f92 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d10b      	bne.n	8005f3a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f22:	69bb      	ldr	r3, [r7, #24]
 8005f24:	881b      	ldrh	r3, [r3, #0]
 8005f26:	461a      	mov	r2, r3
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f30:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	3302      	adds	r3, #2
 8005f36:	61bb      	str	r3, [r7, #24]
 8005f38:	e007      	b.n	8005f4a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	781a      	ldrb	r2, [r3, #0]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	3301      	adds	r3, #1
 8005f48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	3b01      	subs	r3, #1
 8005f52:	b29a      	uxth	r2, r3
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d1cb      	bne.n	8005efa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	9300      	str	r3, [sp, #0]
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	2140      	movs	r1, #64	@ 0x40
 8005f6c:	68f8      	ldr	r0, [r7, #12]
 8005f6e:	f000 f961 	bl	8006234 <UART_WaitOnFlagUntilTimeout>
 8005f72:	4603      	mov	r3, r0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d005      	beq.n	8005f84 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2220      	movs	r2, #32
 8005f7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005f80:	2303      	movs	r3, #3
 8005f82:	e006      	b.n	8005f92 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2220      	movs	r2, #32
 8005f88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	e000      	b.n	8005f92 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005f90:	2302      	movs	r3, #2
  }
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3720      	adds	r7, #32
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}

08005f9a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f9a:	b580      	push	{r7, lr}
 8005f9c:	b084      	sub	sp, #16
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	60f8      	str	r0, [r7, #12]
 8005fa2:	60b9      	str	r1, [r7, #8]
 8005fa4:	4613      	mov	r3, r2
 8005fa6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	2b20      	cmp	r3, #32
 8005fb2:	d112      	bne.n	8005fda <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d002      	beq.n	8005fc0 <HAL_UART_Receive_DMA+0x26>
 8005fba:	88fb      	ldrh	r3, [r7, #6]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d101      	bne.n	8005fc4 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e00b      	b.n	8005fdc <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005fca:	88fb      	ldrh	r3, [r7, #6]
 8005fcc:	461a      	mov	r2, r3
 8005fce:	68b9      	ldr	r1, [r7, #8]
 8005fd0:	68f8      	ldr	r0, [r7, #12]
 8005fd2:	f000 f989 	bl	80062e8 <UART_Start_Receive_DMA>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	e000      	b.n	8005fdc <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005fda:	2302      	movs	r3, #2
  }
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3710      	adds	r7, #16
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005fec:	bf00      	nop
 8005fee:	370c      	adds	r7, #12
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006000:	bf00      	nop
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006014:	bf00      	nop
 8006016:	370c      	adds	r7, #12
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	460b      	mov	r3, r1
 800602a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800602c:	bf00      	nop
 800602e:	370c      	adds	r7, #12
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b09c      	sub	sp, #112	@ 0x70
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006044:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006050:	2b00      	cmp	r3, #0
 8006052:	d172      	bne.n	800613a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006054:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006056:	2200      	movs	r2, #0
 8006058:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800605a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	330c      	adds	r3, #12
 8006060:	64fb      	str	r3, [r7, #76]	@ 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006062:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006064:	e853 3f00 	ldrex	r3, [r3]
 8006068:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800606a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800606c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006070:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006072:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	330c      	adds	r3, #12
 8006078:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800607a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800607c:	657b      	str	r3, [r7, #84]	@ 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006080:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006082:	e841 2300 	strex	r3, r2, [r1]
 8006086:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006088:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800608a:	2b00      	cmp	r3, #0
 800608c:	d1e5      	bne.n	800605a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800608e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	3314      	adds	r3, #20
 8006094:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006098:	e853 3f00 	ldrex	r3, [r3]
 800609c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800609e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060a0:	f023 0301 	bic.w	r3, r3, #1
 80060a4:	667b      	str	r3, [r7, #100]	@ 0x64
 80060a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	3314      	adds	r3, #20
 80060ac:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80060ae:	647a      	str	r2, [r7, #68]	@ 0x44
 80060b0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80060b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80060b6:	e841 2300 	strex	r3, r2, [r1]
 80060ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80060bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d1e5      	bne.n	800608e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	3314      	adds	r3, #20
 80060c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060cc:	e853 3f00 	ldrex	r3, [r3]
 80060d0:	623b      	str	r3, [r7, #32]
   return(result);
 80060d2:	6a3b      	ldr	r3, [r7, #32]
 80060d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80060da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	3314      	adds	r3, #20
 80060e0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80060e2:	633a      	str	r2, [r7, #48]	@ 0x30
 80060e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80060e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060ea:	e841 2300 	strex	r3, r2, [r1]
 80060ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80060f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1e5      	bne.n	80060c2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80060f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060f8:	2220      	movs	r2, #32
 80060fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006102:	2b01      	cmp	r3, #1
 8006104:	d119      	bne.n	800613a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006106:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	330c      	adds	r3, #12
 800610c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	e853 3f00 	ldrex	r3, [r3]
 8006114:	60fb      	str	r3, [r7, #12]
   return(result);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f023 0310 	bic.w	r3, r3, #16
 800611c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800611e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	330c      	adds	r3, #12
 8006124:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006126:	61fa      	str	r2, [r7, #28]
 8006128:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800612a:	69b9      	ldr	r1, [r7, #24]
 800612c:	69fa      	ldr	r2, [r7, #28]
 800612e:	e841 2300 	strex	r3, r2, [r1]
 8006132:	617b      	str	r3, [r7, #20]
   return(result);
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d1e5      	bne.n	8006106 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800613a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800613c:	2200      	movs	r2, #0
 800613e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006140:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006144:	2b01      	cmp	r3, #1
 8006146:	d106      	bne.n	8006156 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006148:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800614a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800614c:	4619      	mov	r1, r3
 800614e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006150:	f7ff ff66 	bl	8006020 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006154:	e002      	b.n	800615c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006156:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006158:	f7ff ff44 	bl	8005fe4 <HAL_UART_RxCpltCallback>
}
 800615c:	bf00      	nop
 800615e:	3770      	adds	r7, #112	@ 0x70
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}

08006164 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b084      	sub	sp, #16
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006170:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2201      	movs	r2, #1
 8006176:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800617c:	2b01      	cmp	r3, #1
 800617e:	d108      	bne.n	8006192 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006184:	085b      	lsrs	r3, r3, #1
 8006186:	b29b      	uxth	r3, r3
 8006188:	4619      	mov	r1, r3
 800618a:	68f8      	ldr	r0, [r7, #12]
 800618c:	f7ff ff48 	bl	8006020 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006190:	e002      	b.n	8006198 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006192:	68f8      	ldr	r0, [r7, #12]
 8006194:	f7ff ff30 	bl	8005ff8 <HAL_UART_RxHalfCpltCallback>
}
 8006198:	bf00      	nop
 800619a:	3710      	adds	r7, #16
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80061a8:	2300      	movs	r3, #0
 80061aa:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061b0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	695b      	ldr	r3, [r3, #20]
 80061b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061bc:	2b80      	cmp	r3, #128	@ 0x80
 80061be:	bf0c      	ite	eq
 80061c0:	2301      	moveq	r3, #1
 80061c2:	2300      	movne	r3, #0
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	2b21      	cmp	r3, #33	@ 0x21
 80061d2:	d108      	bne.n	80061e6 <UART_DMAError+0x46>
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d005      	beq.n	80061e6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	2200      	movs	r2, #0
 80061de:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80061e0:	68b8      	ldr	r0, [r7, #8]
 80061e2:	f000 f91b 	bl	800641c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	695b      	ldr	r3, [r3, #20]
 80061ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061f0:	2b40      	cmp	r3, #64	@ 0x40
 80061f2:	bf0c      	ite	eq
 80061f4:	2301      	moveq	r3, #1
 80061f6:	2300      	movne	r3, #0
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006202:	b2db      	uxtb	r3, r3
 8006204:	2b22      	cmp	r3, #34	@ 0x22
 8006206:	d108      	bne.n	800621a <UART_DMAError+0x7a>
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d005      	beq.n	800621a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	2200      	movs	r2, #0
 8006212:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006214:	68b8      	ldr	r0, [r7, #8]
 8006216:	f000 f929 	bl	800646c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800621e:	f043 0210 	orr.w	r2, r3, #16
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006226:	68b8      	ldr	r0, [r7, #8]
 8006228:	f7ff fef0 	bl	800600c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800622c:	bf00      	nop
 800622e:	3710      	adds	r7, #16
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b086      	sub	sp, #24
 8006238:	af00      	add	r7, sp, #0
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	603b      	str	r3, [r7, #0]
 8006240:	4613      	mov	r3, r2
 8006242:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006244:	e03b      	b.n	80062be <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006246:	6a3b      	ldr	r3, [r7, #32]
 8006248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800624c:	d037      	beq.n	80062be <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800624e:	f7fc fe97 	bl	8002f80 <HAL_GetTick>
 8006252:	4602      	mov	r2, r0
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	1ad3      	subs	r3, r2, r3
 8006258:	6a3a      	ldr	r2, [r7, #32]
 800625a:	429a      	cmp	r2, r3
 800625c:	d302      	bcc.n	8006264 <UART_WaitOnFlagUntilTimeout+0x30>
 800625e:	6a3b      	ldr	r3, [r7, #32]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d101      	bne.n	8006268 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006264:	2303      	movs	r3, #3
 8006266:	e03a      	b.n	80062de <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	f003 0304 	and.w	r3, r3, #4
 8006272:	2b00      	cmp	r3, #0
 8006274:	d023      	beq.n	80062be <UART_WaitOnFlagUntilTimeout+0x8a>
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	2b80      	cmp	r3, #128	@ 0x80
 800627a:	d020      	beq.n	80062be <UART_WaitOnFlagUntilTimeout+0x8a>
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	2b40      	cmp	r3, #64	@ 0x40
 8006280:	d01d      	beq.n	80062be <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 0308 	and.w	r3, r3, #8
 800628c:	2b08      	cmp	r3, #8
 800628e:	d116      	bne.n	80062be <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006290:	2300      	movs	r3, #0
 8006292:	617b      	str	r3, [r7, #20]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	617b      	str	r3, [r7, #20]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	617b      	str	r3, [r7, #20]
 80062a4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80062a6:	68f8      	ldr	r0, [r7, #12]
 80062a8:	f000 f8e0 	bl	800646c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2208      	movs	r2, #8
 80062b0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e00f      	b.n	80062de <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	4013      	ands	r3, r2
 80062c8:	68ba      	ldr	r2, [r7, #8]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	bf0c      	ite	eq
 80062ce:	2301      	moveq	r3, #1
 80062d0:	2300      	movne	r3, #0
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	461a      	mov	r2, r3
 80062d6:	79fb      	ldrb	r3, [r7, #7]
 80062d8:	429a      	cmp	r2, r3
 80062da:	d0b4      	beq.n	8006246 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062dc:	2300      	movs	r3, #0
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3718      	adds	r7, #24
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
	...

080062e8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b098      	sub	sp, #96	@ 0x60
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	60b9      	str	r1, [r7, #8]
 80062f2:	4613      	mov	r3, r2
 80062f4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80062f6:	68ba      	ldr	r2, [r7, #8]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	88fa      	ldrh	r2, [r7, #6]
 8006300:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2200      	movs	r2, #0
 8006306:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2222      	movs	r2, #34	@ 0x22
 800630c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006314:	4a3e      	ldr	r2, [pc, #248]	@ (8006410 <UART_Start_Receive_DMA+0x128>)
 8006316:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800631c:	4a3d      	ldr	r2, [pc, #244]	@ (8006414 <UART_Start_Receive_DMA+0x12c>)
 800631e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006324:	4a3c      	ldr	r2, [pc, #240]	@ (8006418 <UART_Start_Receive_DMA+0x130>)
 8006326:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800632c:	2200      	movs	r2, #0
 800632e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006330:	f107 0308 	add.w	r3, r7, #8
 8006334:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	3304      	adds	r3, #4
 8006340:	4619      	mov	r1, r3
 8006342:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	88fb      	ldrh	r3, [r7, #6]
 8006348:	f7fd fc1c 	bl	8003b84 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800634c:	2300      	movs	r3, #0
 800634e:	613b      	str	r3, [r7, #16]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	613b      	str	r3, [r7, #16]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	613b      	str	r3, [r7, #16]
 8006360:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d019      	beq.n	800639e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	330c      	adds	r3, #12
 8006370:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006372:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006374:	e853 3f00 	ldrex	r3, [r3]
 8006378:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800637a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800637c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006380:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	330c      	adds	r3, #12
 8006388:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800638a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800638c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800638e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006390:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006392:	e841 2300 	strex	r3, r2, [r1]
 8006396:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006398:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800639a:	2b00      	cmp	r3, #0
 800639c:	d1e5      	bne.n	800636a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	3314      	adds	r3, #20
 80063a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063a8:	e853 3f00 	ldrex	r3, [r3]
 80063ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80063ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063b0:	f043 0301 	orr.w	r3, r3, #1
 80063b4:	657b      	str	r3, [r7, #84]	@ 0x54
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	3314      	adds	r3, #20
 80063bc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80063be:	63ba      	str	r2, [r7, #56]	@ 0x38
 80063c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80063c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80063c6:	e841 2300 	strex	r3, r2, [r1]
 80063ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80063cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d1e5      	bne.n	800639e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	3314      	adds	r3, #20
 80063d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	e853 3f00 	ldrex	r3, [r3]
 80063e0:	617b      	str	r3, [r7, #20]
   return(result);
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063e8:	653b      	str	r3, [r7, #80]	@ 0x50
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	3314      	adds	r3, #20
 80063f0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80063f2:	627a      	str	r2, [r7, #36]	@ 0x24
 80063f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f6:	6a39      	ldr	r1, [r7, #32]
 80063f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063fa:	e841 2300 	strex	r3, r2, [r1]
 80063fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d1e5      	bne.n	80063d2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006406:	2300      	movs	r3, #0
}
 8006408:	4618      	mov	r0, r3
 800640a:	3760      	adds	r7, #96	@ 0x60
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}
 8006410:	08006039 	.word	0x08006039
 8006414:	08006165 	.word	0x08006165
 8006418:	080061a1 	.word	0x080061a1

0800641c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800641c:	b480      	push	{r7}
 800641e:	b089      	sub	sp, #36	@ 0x24
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	330c      	adds	r3, #12
 800642a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	e853 3f00 	ldrex	r3, [r3]
 8006432:	60bb      	str	r3, [r7, #8]
   return(result);
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800643a:	61fb      	str	r3, [r7, #28]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	330c      	adds	r3, #12
 8006442:	69fa      	ldr	r2, [r7, #28]
 8006444:	61ba      	str	r2, [r7, #24]
 8006446:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006448:	6979      	ldr	r1, [r7, #20]
 800644a:	69ba      	ldr	r2, [r7, #24]
 800644c:	e841 2300 	strex	r3, r2, [r1]
 8006450:	613b      	str	r3, [r7, #16]
   return(result);
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d1e5      	bne.n	8006424 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2220      	movs	r2, #32
 800645c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006460:	bf00      	nop
 8006462:	3724      	adds	r7, #36	@ 0x24
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800646c:	b480      	push	{r7}
 800646e:	b095      	sub	sp, #84	@ 0x54
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	330c      	adds	r3, #12
 800647a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800647c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800647e:	e853 3f00 	ldrex	r3, [r3]
 8006482:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006486:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800648a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	330c      	adds	r3, #12
 8006492:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006494:	643a      	str	r2, [r7, #64]	@ 0x40
 8006496:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006498:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800649a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800649c:	e841 2300 	strex	r3, r2, [r1]
 80064a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80064a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d1e5      	bne.n	8006474 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	3314      	adds	r3, #20
 80064ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b0:	6a3b      	ldr	r3, [r7, #32]
 80064b2:	e853 3f00 	ldrex	r3, [r3]
 80064b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	f023 0301 	bic.w	r3, r3, #1
 80064be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	3314      	adds	r3, #20
 80064c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80064c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80064ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80064ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80064d0:	e841 2300 	strex	r3, r2, [r1]
 80064d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80064d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d1e5      	bne.n	80064a8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d119      	bne.n	8006518 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	330c      	adds	r3, #12
 80064ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	e853 3f00 	ldrex	r3, [r3]
 80064f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	f023 0310 	bic.w	r3, r3, #16
 80064fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	330c      	adds	r3, #12
 8006502:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006504:	61ba      	str	r2, [r7, #24]
 8006506:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006508:	6979      	ldr	r1, [r7, #20]
 800650a:	69ba      	ldr	r2, [r7, #24]
 800650c:	e841 2300 	strex	r3, r2, [r1]
 8006510:	613b      	str	r3, [r7, #16]
   return(result);
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d1e5      	bne.n	80064e4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2220      	movs	r2, #32
 800651c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006526:	bf00      	nop
 8006528:	3754      	adds	r7, #84	@ 0x54
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr
	...

08006534 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006534:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006538:	b0c0      	sub	sp, #256	@ 0x100
 800653a:	af00      	add	r7, sp, #0
 800653c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	691b      	ldr	r3, [r3, #16]
 8006548:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800654c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006550:	68d9      	ldr	r1, [r3, #12]
 8006552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	ea40 0301 	orr.w	r3, r0, r1
 800655c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800655e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006562:	689a      	ldr	r2, [r3, #8]
 8006564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006568:	691b      	ldr	r3, [r3, #16]
 800656a:	431a      	orrs	r2, r3
 800656c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006570:	695b      	ldr	r3, [r3, #20]
 8006572:	431a      	orrs	r2, r3
 8006574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006578:	69db      	ldr	r3, [r3, #28]
 800657a:	4313      	orrs	r3, r2
 800657c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800658c:	f021 010c 	bic.w	r1, r1, #12
 8006590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800659a:	430b      	orrs	r3, r1
 800659c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800659e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	695b      	ldr	r3, [r3, #20]
 80065a6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80065aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065ae:	6999      	ldr	r1, [r3, #24]
 80065b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	ea40 0301 	orr.w	r3, r0, r1
 80065ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80065bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	4b8f      	ldr	r3, [pc, #572]	@ (8006800 <UART_SetConfig+0x2cc>)
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d005      	beq.n	80065d4 <UART_SetConfig+0xa0>
 80065c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	4b8d      	ldr	r3, [pc, #564]	@ (8006804 <UART_SetConfig+0x2d0>)
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d104      	bne.n	80065de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80065d4:	f7fe fbd2 	bl	8004d7c <HAL_RCC_GetPCLK2Freq>
 80065d8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80065dc:	e003      	b.n	80065e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80065de:	f7fe fbb9 	bl	8004d54 <HAL_RCC_GetPCLK1Freq>
 80065e2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065ea:	69db      	ldr	r3, [r3, #28]
 80065ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065f0:	f040 810c 	bne.w	800680c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80065f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065f8:	2200      	movs	r2, #0
 80065fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80065fe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006602:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006606:	4622      	mov	r2, r4
 8006608:	462b      	mov	r3, r5
 800660a:	1891      	adds	r1, r2, r2
 800660c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800660e:	415b      	adcs	r3, r3
 8006610:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006612:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006616:	4621      	mov	r1, r4
 8006618:	eb12 0801 	adds.w	r8, r2, r1
 800661c:	4629      	mov	r1, r5
 800661e:	eb43 0901 	adc.w	r9, r3, r1
 8006622:	f04f 0200 	mov.w	r2, #0
 8006626:	f04f 0300 	mov.w	r3, #0
 800662a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800662e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006632:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006636:	4690      	mov	r8, r2
 8006638:	4699      	mov	r9, r3
 800663a:	4623      	mov	r3, r4
 800663c:	eb18 0303 	adds.w	r3, r8, r3
 8006640:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006644:	462b      	mov	r3, r5
 8006646:	eb49 0303 	adc.w	r3, r9, r3
 800664a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800664e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800665a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800665e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006662:	460b      	mov	r3, r1
 8006664:	18db      	adds	r3, r3, r3
 8006666:	653b      	str	r3, [r7, #80]	@ 0x50
 8006668:	4613      	mov	r3, r2
 800666a:	eb42 0303 	adc.w	r3, r2, r3
 800666e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006670:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006674:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006678:	f7fa fb06 	bl	8000c88 <__aeabi_uldivmod>
 800667c:	4602      	mov	r2, r0
 800667e:	460b      	mov	r3, r1
 8006680:	4b61      	ldr	r3, [pc, #388]	@ (8006808 <UART_SetConfig+0x2d4>)
 8006682:	fba3 2302 	umull	r2, r3, r3, r2
 8006686:	095b      	lsrs	r3, r3, #5
 8006688:	011c      	lsls	r4, r3, #4
 800668a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800668e:	2200      	movs	r2, #0
 8006690:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006694:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006698:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800669c:	4642      	mov	r2, r8
 800669e:	464b      	mov	r3, r9
 80066a0:	1891      	adds	r1, r2, r2
 80066a2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80066a4:	415b      	adcs	r3, r3
 80066a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80066ac:	4641      	mov	r1, r8
 80066ae:	eb12 0a01 	adds.w	sl, r2, r1
 80066b2:	4649      	mov	r1, r9
 80066b4:	eb43 0b01 	adc.w	fp, r3, r1
 80066b8:	f04f 0200 	mov.w	r2, #0
 80066bc:	f04f 0300 	mov.w	r3, #0
 80066c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80066c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80066c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066cc:	4692      	mov	sl, r2
 80066ce:	469b      	mov	fp, r3
 80066d0:	4643      	mov	r3, r8
 80066d2:	eb1a 0303 	adds.w	r3, sl, r3
 80066d6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80066da:	464b      	mov	r3, r9
 80066dc:	eb4b 0303 	adc.w	r3, fp, r3
 80066e0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80066e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80066f0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80066f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80066f8:	460b      	mov	r3, r1
 80066fa:	18db      	adds	r3, r3, r3
 80066fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80066fe:	4613      	mov	r3, r2
 8006700:	eb42 0303 	adc.w	r3, r2, r3
 8006704:	647b      	str	r3, [r7, #68]	@ 0x44
 8006706:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800670a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800670e:	f7fa fabb 	bl	8000c88 <__aeabi_uldivmod>
 8006712:	4602      	mov	r2, r0
 8006714:	460b      	mov	r3, r1
 8006716:	4611      	mov	r1, r2
 8006718:	4b3b      	ldr	r3, [pc, #236]	@ (8006808 <UART_SetConfig+0x2d4>)
 800671a:	fba3 2301 	umull	r2, r3, r3, r1
 800671e:	095b      	lsrs	r3, r3, #5
 8006720:	2264      	movs	r2, #100	@ 0x64
 8006722:	fb02 f303 	mul.w	r3, r2, r3
 8006726:	1acb      	subs	r3, r1, r3
 8006728:	00db      	lsls	r3, r3, #3
 800672a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800672e:	4b36      	ldr	r3, [pc, #216]	@ (8006808 <UART_SetConfig+0x2d4>)
 8006730:	fba3 2302 	umull	r2, r3, r3, r2
 8006734:	095b      	lsrs	r3, r3, #5
 8006736:	005b      	lsls	r3, r3, #1
 8006738:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800673c:	441c      	add	r4, r3
 800673e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006742:	2200      	movs	r2, #0
 8006744:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006748:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800674c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006750:	4642      	mov	r2, r8
 8006752:	464b      	mov	r3, r9
 8006754:	1891      	adds	r1, r2, r2
 8006756:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006758:	415b      	adcs	r3, r3
 800675a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800675c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006760:	4641      	mov	r1, r8
 8006762:	1851      	adds	r1, r2, r1
 8006764:	6339      	str	r1, [r7, #48]	@ 0x30
 8006766:	4649      	mov	r1, r9
 8006768:	414b      	adcs	r3, r1
 800676a:	637b      	str	r3, [r7, #52]	@ 0x34
 800676c:	f04f 0200 	mov.w	r2, #0
 8006770:	f04f 0300 	mov.w	r3, #0
 8006774:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006778:	4659      	mov	r1, fp
 800677a:	00cb      	lsls	r3, r1, #3
 800677c:	4651      	mov	r1, sl
 800677e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006782:	4651      	mov	r1, sl
 8006784:	00ca      	lsls	r2, r1, #3
 8006786:	4610      	mov	r0, r2
 8006788:	4619      	mov	r1, r3
 800678a:	4603      	mov	r3, r0
 800678c:	4642      	mov	r2, r8
 800678e:	189b      	adds	r3, r3, r2
 8006790:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006794:	464b      	mov	r3, r9
 8006796:	460a      	mov	r2, r1
 8006798:	eb42 0303 	adc.w	r3, r2, r3
 800679c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80067a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80067ac:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80067b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80067b4:	460b      	mov	r3, r1
 80067b6:	18db      	adds	r3, r3, r3
 80067b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067ba:	4613      	mov	r3, r2
 80067bc:	eb42 0303 	adc.w	r3, r2, r3
 80067c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80067c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80067c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80067ca:	f7fa fa5d 	bl	8000c88 <__aeabi_uldivmod>
 80067ce:	4602      	mov	r2, r0
 80067d0:	460b      	mov	r3, r1
 80067d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006808 <UART_SetConfig+0x2d4>)
 80067d4:	fba3 1302 	umull	r1, r3, r3, r2
 80067d8:	095b      	lsrs	r3, r3, #5
 80067da:	2164      	movs	r1, #100	@ 0x64
 80067dc:	fb01 f303 	mul.w	r3, r1, r3
 80067e0:	1ad3      	subs	r3, r2, r3
 80067e2:	00db      	lsls	r3, r3, #3
 80067e4:	3332      	adds	r3, #50	@ 0x32
 80067e6:	4a08      	ldr	r2, [pc, #32]	@ (8006808 <UART_SetConfig+0x2d4>)
 80067e8:	fba2 2303 	umull	r2, r3, r2, r3
 80067ec:	095b      	lsrs	r3, r3, #5
 80067ee:	f003 0207 	and.w	r2, r3, #7
 80067f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4422      	add	r2, r4
 80067fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80067fc:	e106      	b.n	8006a0c <UART_SetConfig+0x4d8>
 80067fe:	bf00      	nop
 8006800:	40011000 	.word	0x40011000
 8006804:	40011400 	.word	0x40011400
 8006808:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800680c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006810:	2200      	movs	r2, #0
 8006812:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006816:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800681a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800681e:	4642      	mov	r2, r8
 8006820:	464b      	mov	r3, r9
 8006822:	1891      	adds	r1, r2, r2
 8006824:	6239      	str	r1, [r7, #32]
 8006826:	415b      	adcs	r3, r3
 8006828:	627b      	str	r3, [r7, #36]	@ 0x24
 800682a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800682e:	4641      	mov	r1, r8
 8006830:	1854      	adds	r4, r2, r1
 8006832:	4649      	mov	r1, r9
 8006834:	eb43 0501 	adc.w	r5, r3, r1
 8006838:	f04f 0200 	mov.w	r2, #0
 800683c:	f04f 0300 	mov.w	r3, #0
 8006840:	00eb      	lsls	r3, r5, #3
 8006842:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006846:	00e2      	lsls	r2, r4, #3
 8006848:	4614      	mov	r4, r2
 800684a:	461d      	mov	r5, r3
 800684c:	4643      	mov	r3, r8
 800684e:	18e3      	adds	r3, r4, r3
 8006850:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006854:	464b      	mov	r3, r9
 8006856:	eb45 0303 	adc.w	r3, r5, r3
 800685a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800685e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800686a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800686e:	f04f 0200 	mov.w	r2, #0
 8006872:	f04f 0300 	mov.w	r3, #0
 8006876:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800687a:	4629      	mov	r1, r5
 800687c:	008b      	lsls	r3, r1, #2
 800687e:	4621      	mov	r1, r4
 8006880:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006884:	4621      	mov	r1, r4
 8006886:	008a      	lsls	r2, r1, #2
 8006888:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800688c:	f7fa f9fc 	bl	8000c88 <__aeabi_uldivmod>
 8006890:	4602      	mov	r2, r0
 8006892:	460b      	mov	r3, r1
 8006894:	4b60      	ldr	r3, [pc, #384]	@ (8006a18 <UART_SetConfig+0x4e4>)
 8006896:	fba3 2302 	umull	r2, r3, r3, r2
 800689a:	095b      	lsrs	r3, r3, #5
 800689c:	011c      	lsls	r4, r3, #4
 800689e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068a2:	2200      	movs	r2, #0
 80068a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80068a8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80068ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80068b0:	4642      	mov	r2, r8
 80068b2:	464b      	mov	r3, r9
 80068b4:	1891      	adds	r1, r2, r2
 80068b6:	61b9      	str	r1, [r7, #24]
 80068b8:	415b      	adcs	r3, r3
 80068ba:	61fb      	str	r3, [r7, #28]
 80068bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80068c0:	4641      	mov	r1, r8
 80068c2:	1851      	adds	r1, r2, r1
 80068c4:	6139      	str	r1, [r7, #16]
 80068c6:	4649      	mov	r1, r9
 80068c8:	414b      	adcs	r3, r1
 80068ca:	617b      	str	r3, [r7, #20]
 80068cc:	f04f 0200 	mov.w	r2, #0
 80068d0:	f04f 0300 	mov.w	r3, #0
 80068d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80068d8:	4659      	mov	r1, fp
 80068da:	00cb      	lsls	r3, r1, #3
 80068dc:	4651      	mov	r1, sl
 80068de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068e2:	4651      	mov	r1, sl
 80068e4:	00ca      	lsls	r2, r1, #3
 80068e6:	4610      	mov	r0, r2
 80068e8:	4619      	mov	r1, r3
 80068ea:	4603      	mov	r3, r0
 80068ec:	4642      	mov	r2, r8
 80068ee:	189b      	adds	r3, r3, r2
 80068f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80068f4:	464b      	mov	r3, r9
 80068f6:	460a      	mov	r2, r1
 80068f8:	eb42 0303 	adc.w	r3, r2, r3
 80068fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	67bb      	str	r3, [r7, #120]	@ 0x78
 800690a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800690c:	f04f 0200 	mov.w	r2, #0
 8006910:	f04f 0300 	mov.w	r3, #0
 8006914:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006918:	4649      	mov	r1, r9
 800691a:	008b      	lsls	r3, r1, #2
 800691c:	4641      	mov	r1, r8
 800691e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006922:	4641      	mov	r1, r8
 8006924:	008a      	lsls	r2, r1, #2
 8006926:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800692a:	f7fa f9ad 	bl	8000c88 <__aeabi_uldivmod>
 800692e:	4602      	mov	r2, r0
 8006930:	460b      	mov	r3, r1
 8006932:	4611      	mov	r1, r2
 8006934:	4b38      	ldr	r3, [pc, #224]	@ (8006a18 <UART_SetConfig+0x4e4>)
 8006936:	fba3 2301 	umull	r2, r3, r3, r1
 800693a:	095b      	lsrs	r3, r3, #5
 800693c:	2264      	movs	r2, #100	@ 0x64
 800693e:	fb02 f303 	mul.w	r3, r2, r3
 8006942:	1acb      	subs	r3, r1, r3
 8006944:	011b      	lsls	r3, r3, #4
 8006946:	3332      	adds	r3, #50	@ 0x32
 8006948:	4a33      	ldr	r2, [pc, #204]	@ (8006a18 <UART_SetConfig+0x4e4>)
 800694a:	fba2 2303 	umull	r2, r3, r2, r3
 800694e:	095b      	lsrs	r3, r3, #5
 8006950:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006954:	441c      	add	r4, r3
 8006956:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800695a:	2200      	movs	r2, #0
 800695c:	673b      	str	r3, [r7, #112]	@ 0x70
 800695e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006960:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006964:	4642      	mov	r2, r8
 8006966:	464b      	mov	r3, r9
 8006968:	1891      	adds	r1, r2, r2
 800696a:	60b9      	str	r1, [r7, #8]
 800696c:	415b      	adcs	r3, r3
 800696e:	60fb      	str	r3, [r7, #12]
 8006970:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006974:	4641      	mov	r1, r8
 8006976:	1851      	adds	r1, r2, r1
 8006978:	6039      	str	r1, [r7, #0]
 800697a:	4649      	mov	r1, r9
 800697c:	414b      	adcs	r3, r1
 800697e:	607b      	str	r3, [r7, #4]
 8006980:	f04f 0200 	mov.w	r2, #0
 8006984:	f04f 0300 	mov.w	r3, #0
 8006988:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800698c:	4659      	mov	r1, fp
 800698e:	00cb      	lsls	r3, r1, #3
 8006990:	4651      	mov	r1, sl
 8006992:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006996:	4651      	mov	r1, sl
 8006998:	00ca      	lsls	r2, r1, #3
 800699a:	4610      	mov	r0, r2
 800699c:	4619      	mov	r1, r3
 800699e:	4603      	mov	r3, r0
 80069a0:	4642      	mov	r2, r8
 80069a2:	189b      	adds	r3, r3, r2
 80069a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80069a6:	464b      	mov	r3, r9
 80069a8:	460a      	mov	r2, r1
 80069aa:	eb42 0303 	adc.w	r3, r2, r3
 80069ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80069b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80069ba:	667a      	str	r2, [r7, #100]	@ 0x64
 80069bc:	f04f 0200 	mov.w	r2, #0
 80069c0:	f04f 0300 	mov.w	r3, #0
 80069c4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80069c8:	4649      	mov	r1, r9
 80069ca:	008b      	lsls	r3, r1, #2
 80069cc:	4641      	mov	r1, r8
 80069ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069d2:	4641      	mov	r1, r8
 80069d4:	008a      	lsls	r2, r1, #2
 80069d6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80069da:	f7fa f955 	bl	8000c88 <__aeabi_uldivmod>
 80069de:	4602      	mov	r2, r0
 80069e0:	460b      	mov	r3, r1
 80069e2:	4b0d      	ldr	r3, [pc, #52]	@ (8006a18 <UART_SetConfig+0x4e4>)
 80069e4:	fba3 1302 	umull	r1, r3, r3, r2
 80069e8:	095b      	lsrs	r3, r3, #5
 80069ea:	2164      	movs	r1, #100	@ 0x64
 80069ec:	fb01 f303 	mul.w	r3, r1, r3
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	011b      	lsls	r3, r3, #4
 80069f4:	3332      	adds	r3, #50	@ 0x32
 80069f6:	4a08      	ldr	r2, [pc, #32]	@ (8006a18 <UART_SetConfig+0x4e4>)
 80069f8:	fba2 2303 	umull	r2, r3, r2, r3
 80069fc:	095b      	lsrs	r3, r3, #5
 80069fe:	f003 020f 	and.w	r2, r3, #15
 8006a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4422      	add	r2, r4
 8006a0a:	609a      	str	r2, [r3, #8]
}
 8006a0c:	bf00      	nop
 8006a0e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006a12:	46bd      	mov	sp, r7
 8006a14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a18:	51eb851f 	.word	0x51eb851f

08006a1c <arm_mat_trans_f32>:
 8006a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a20:	8803      	ldrh	r3, [r0, #0]
 8006a22:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8006a26:	6844      	ldr	r4, [r0, #4]
 8006a28:	8842      	ldrh	r2, [r0, #2]
 8006a2a:	684f      	ldr	r7, [r1, #4]
 8006a2c:	4599      	cmp	r9, r3
 8006a2e:	b083      	sub	sp, #12
 8006a30:	f040 809a 	bne.w	8006b68 <arm_mat_trans_f32+0x14c>
 8006a34:	f8b1 c000 	ldrh.w	ip, [r1]
 8006a38:	4594      	cmp	ip, r2
 8006a3a:	f040 8095 	bne.w	8006b68 <arm_mat_trans_f32+0x14c>
 8006a3e:	f1b9 0f01 	cmp.w	r9, #1
 8006a42:	ea4f 089c 	mov.w	r8, ip, lsr #2
 8006a46:	ea4f 0389 	mov.w	r3, r9, lsl #2
 8006a4a:	f00c 0c03 	and.w	ip, ip, #3
 8006a4e:	d142      	bne.n	8006ad6 <arm_mat_trans_f32+0xba>
 8006a50:	fb08 fe03 	mul.w	lr, r8, r3
 8006a54:	463e      	mov	r6, r7
 8006a56:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8006a5a:	4647      	mov	r7, r8
 8006a5c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8006a60:	ea4f 098c 	mov.w	r9, ip, lsl #2
 8006a64:	46b0      	mov	r8, r6
 8006a66:	4632      	mov	r2, r6
 8006a68:	b31f      	cbz	r7, 8006ab2 <arm_mat_trans_f32+0x96>
 8006a6a:	f104 0110 	add.w	r1, r4, #16
 8006a6e:	f106 0008 	add.w	r0, r6, #8
 8006a72:	463d      	mov	r5, r7
 8006a74:	f851 bc10 	ldr.w	fp, [r1, #-16]
 8006a78:	f8c2 b000 	str.w	fp, [r2]
 8006a7c:	ed51 7a03 	vldr	s15, [r1, #-12]
 8006a80:	eb02 0b03 	add.w	fp, r2, r3
 8006a84:	edcb 7a00 	vstr	s15, [fp]
 8006a88:	f851 bc08 	ldr.w	fp, [r1, #-8]
 8006a8c:	f8c0 b000 	str.w	fp, [r0]
 8006a90:	ed51 7a01 	vldr	s15, [r1, #-4]
 8006a94:	eb00 0b03 	add.w	fp, r0, r3
 8006a98:	3d01      	subs	r5, #1
 8006a9a:	f102 0210 	add.w	r2, r2, #16
 8006a9e:	f101 0110 	add.w	r1, r1, #16
 8006aa2:	edcb 7a00 	vstr	s15, [fp]
 8006aa6:	f100 0010 	add.w	r0, r0, #16
 8006aaa:	d1e3      	bne.n	8006a74 <arm_mat_trans_f32+0x58>
 8006aac:	4454      	add	r4, sl
 8006aae:	eb0e 0206 	add.w	r2, lr, r6
 8006ab2:	f1bc 0f00 	cmp.w	ip, #0
 8006ab6:	d008      	beq.n	8006aca <arm_mat_trans_f32+0xae>
 8006ab8:	4661      	mov	r1, ip
 8006aba:	4620      	mov	r0, r4
 8006abc:	f850 5b04 	ldr.w	r5, [r0], #4
 8006ac0:	6015      	str	r5, [r2, #0]
 8006ac2:	3901      	subs	r1, #1
 8006ac4:	441a      	add	r2, r3
 8006ac6:	d1f9      	bne.n	8006abc <arm_mat_trans_f32+0xa0>
 8006ac8:	444c      	add	r4, r9
 8006aca:	4546      	cmp	r6, r8
 8006acc:	f106 0204 	add.w	r2, r6, #4
 8006ad0:	d046      	beq.n	8006b60 <arm_mat_trans_f32+0x144>
 8006ad2:	4616      	mov	r6, r2
 8006ad4:	e7c7      	b.n	8006a66 <arm_mat_trans_f32+0x4a>
 8006ad6:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8006ada:	fb08 fa03 	mul.w	sl, r8, r3
 8006ade:	9200      	str	r2, [sp, #0]
 8006ae0:	ea4f 028c 	mov.w	r2, ip, lsl #2
 8006ae4:	ea4f 1609 	mov.w	r6, r9, lsl #4
 8006ae8:	46be      	mov	lr, r7
 8006aea:	eb07 0b03 	add.w	fp, r7, r3
 8006aee:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8006af2:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8006af6:	9201      	str	r2, [sp, #4]
 8006af8:	4672      	mov	r2, lr
 8006afa:	f1b8 0f00 	cmp.w	r8, #0
 8006afe:	d01e      	beq.n	8006b3e <arm_mat_trans_f32+0x122>
 8006b00:	f104 0110 	add.w	r1, r4, #16
 8006b04:	eb09 000e 	add.w	r0, r9, lr
 8006b08:	4645      	mov	r5, r8
 8006b0a:	f851 7c10 	ldr.w	r7, [r1, #-16]
 8006b0e:	6017      	str	r7, [r2, #0]
 8006b10:	ed51 7a03 	vldr	s15, [r1, #-12]
 8006b14:	18d7      	adds	r7, r2, r3
 8006b16:	edc7 7a00 	vstr	s15, [r7]
 8006b1a:	f851 7c08 	ldr.w	r7, [r1, #-8]
 8006b1e:	6007      	str	r7, [r0, #0]
 8006b20:	ed51 7a01 	vldr	s15, [r1, #-4]
 8006b24:	18c7      	adds	r7, r0, r3
 8006b26:	3d01      	subs	r5, #1
 8006b28:	4432      	add	r2, r6
 8006b2a:	f101 0110 	add.w	r1, r1, #16
 8006b2e:	edc7 7a00 	vstr	s15, [r7]
 8006b32:	4430      	add	r0, r6
 8006b34:	d1e9      	bne.n	8006b0a <arm_mat_trans_f32+0xee>
 8006b36:	9a00      	ldr	r2, [sp, #0]
 8006b38:	4414      	add	r4, r2
 8006b3a:	eb0a 020e 	add.w	r2, sl, lr
 8006b3e:	f1bc 0f00 	cmp.w	ip, #0
 8006b42:	d009      	beq.n	8006b58 <arm_mat_trans_f32+0x13c>
 8006b44:	4661      	mov	r1, ip
 8006b46:	4620      	mov	r0, r4
 8006b48:	f850 5b04 	ldr.w	r5, [r0], #4
 8006b4c:	6015      	str	r5, [r2, #0]
 8006b4e:	3901      	subs	r1, #1
 8006b50:	441a      	add	r2, r3
 8006b52:	d1f9      	bne.n	8006b48 <arm_mat_trans_f32+0x12c>
 8006b54:	9a01      	ldr	r2, [sp, #4]
 8006b56:	4414      	add	r4, r2
 8006b58:	f10e 0e04 	add.w	lr, lr, #4
 8006b5c:	45de      	cmp	lr, fp
 8006b5e:	d1cb      	bne.n	8006af8 <arm_mat_trans_f32+0xdc>
 8006b60:	2000      	movs	r0, #0
 8006b62:	b003      	add	sp, #12
 8006b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b68:	f06f 0002 	mvn.w	r0, #2
 8006b6c:	e7f9      	b.n	8006b62 <arm_mat_trans_f32+0x146>
 8006b6e:	bf00      	nop

08006b70 <arm_mat_sub_f32>:
 8006b70:	b4f0      	push	{r4, r5, r6, r7}
 8006b72:	e9d1 4600 	ldrd	r4, r6, [r1]
 8006b76:	6803      	ldr	r3, [r0, #0]
 8006b78:	6847      	ldr	r7, [r0, #4]
 8006b7a:	6855      	ldr	r5, [r2, #4]
 8006b7c:	42a3      	cmp	r3, r4
 8006b7e:	d160      	bne.n	8006c42 <arm_mat_sub_f32+0xd2>
 8006b80:	6812      	ldr	r2, [r2, #0]
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d15d      	bne.n	8006c42 <arm_mat_sub_f32+0xd2>
 8006b86:	8803      	ldrh	r3, [r0, #0]
 8006b88:	8844      	ldrh	r4, [r0, #2]
 8006b8a:	fb04 f403 	mul.w	r4, r4, r3
 8006b8e:	ea5f 0c94 	movs.w	ip, r4, lsr #2
 8006b92:	d034      	beq.n	8006bfe <arm_mat_sub_f32+0x8e>
 8006b94:	f107 0110 	add.w	r1, r7, #16
 8006b98:	f106 0210 	add.w	r2, r6, #16
 8006b9c:	f105 0310 	add.w	r3, r5, #16
 8006ba0:	4660      	mov	r0, ip
 8006ba2:	ed12 7a04 	vldr	s14, [r2, #-16]
 8006ba6:	ed51 7a04 	vldr	s15, [r1, #-16]
 8006baa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006bae:	3801      	subs	r0, #1
 8006bb0:	ed43 7a04 	vstr	s15, [r3, #-16]
 8006bb4:	ed12 7a03 	vldr	s14, [r2, #-12]
 8006bb8:	ed51 7a03 	vldr	s15, [r1, #-12]
 8006bbc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006bc0:	f101 0110 	add.w	r1, r1, #16
 8006bc4:	ed43 7a03 	vstr	s15, [r3, #-12]
 8006bc8:	ed12 7a02 	vldr	s14, [r2, #-8]
 8006bcc:	ed51 7a06 	vldr	s15, [r1, #-24]	@ 0xffffffe8
 8006bd0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006bd4:	f102 0210 	add.w	r2, r2, #16
 8006bd8:	ed43 7a02 	vstr	s15, [r3, #-8]
 8006bdc:	ed51 7a05 	vldr	s15, [r1, #-20]	@ 0xffffffec
 8006be0:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 8006be4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006be8:	f103 0310 	add.w	r3, r3, #16
 8006bec:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 8006bf0:	d1d7      	bne.n	8006ba2 <arm_mat_sub_f32+0x32>
 8006bf2:	eb07 170c 	add.w	r7, r7, ip, lsl #4
 8006bf6:	eb06 160c 	add.w	r6, r6, ip, lsl #4
 8006bfa:	eb05 150c 	add.w	r5, r5, ip, lsl #4
 8006bfe:	f014 0403 	ands.w	r4, r4, #3
 8006c02:	d01b      	beq.n	8006c3c <arm_mat_sub_f32+0xcc>
 8006c04:	edd7 7a00 	vldr	s15, [r7]
 8006c08:	ed96 7a00 	vldr	s14, [r6]
 8006c0c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006c10:	3c01      	subs	r4, #1
 8006c12:	edc5 7a00 	vstr	s15, [r5]
 8006c16:	d011      	beq.n	8006c3c <arm_mat_sub_f32+0xcc>
 8006c18:	edd7 7a01 	vldr	s15, [r7, #4]
 8006c1c:	ed96 7a01 	vldr	s14, [r6, #4]
 8006c20:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006c24:	2c01      	cmp	r4, #1
 8006c26:	edc5 7a01 	vstr	s15, [r5, #4]
 8006c2a:	d007      	beq.n	8006c3c <arm_mat_sub_f32+0xcc>
 8006c2c:	edd7 7a02 	vldr	s15, [r7, #8]
 8006c30:	ed96 7a02 	vldr	s14, [r6, #8]
 8006c34:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006c38:	edc5 7a02 	vstr	s15, [r5, #8]
 8006c3c:	2000      	movs	r0, #0
 8006c3e:	bcf0      	pop	{r4, r5, r6, r7}
 8006c40:	4770      	bx	lr
 8006c42:	f06f 0002 	mvn.w	r0, #2
 8006c46:	e7fa      	b.n	8006c3e <arm_mat_sub_f32+0xce>

08006c48 <arm_mat_mult_f32>:
 8006c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c4c:	460c      	mov	r4, r1
 8006c4e:	b08b      	sub	sp, #44	@ 0x2c
 8006c50:	8825      	ldrh	r5, [r4, #0]
 8006c52:	9107      	str	r1, [sp, #28]
 8006c54:	8841      	ldrh	r1, [r0, #2]
 8006c56:	8806      	ldrh	r6, [r0, #0]
 8006c58:	6843      	ldr	r3, [r0, #4]
 8006c5a:	6857      	ldr	r7, [r2, #4]
 8006c5c:	6860      	ldr	r0, [r4, #4]
 8006c5e:	9602      	str	r6, [sp, #8]
 8006c60:	428d      	cmp	r5, r1
 8006c62:	8864      	ldrh	r4, [r4, #2]
 8006c64:	f040 80f9 	bne.w	8006e5a <arm_mat_mult_f32+0x212>
 8006c68:	8811      	ldrh	r1, [r2, #0]
 8006c6a:	42b1      	cmp	r1, r6
 8006c6c:	f040 80f5 	bne.w	8006e5a <arm_mat_mult_f32+0x212>
 8006c70:	8851      	ldrh	r1, [r2, #2]
 8006c72:	42a1      	cmp	r1, r4
 8006c74:	f040 80f1 	bne.w	8006e5a <arm_mat_mult_f32+0x212>
 8006c78:	00aa      	lsls	r2, r5, #2
 8006c7a:	2901      	cmp	r1, #1
 8006c7c:	ea4f 0c95 	mov.w	ip, r5, lsr #2
 8006c80:	ea4f 0481 	mov.w	r4, r1, lsl #2
 8006c84:	f005 0e03 	and.w	lr, r5, #3
 8006c88:	9206      	str	r2, [sp, #24]
 8006c8a:	d170      	bne.n	8006d6e <arm_mat_mult_f32+0x126>
 8006c8c:	1d01      	adds	r1, r0, #4
 8006c8e:	9105      	str	r1, [sp, #20]
 8006c90:	ea4f 110c 	mov.w	r1, ip, lsl #4
 8006c94:	4602      	mov	r2, r0
 8006c96:	f107 0904 	add.w	r9, r7, #4
 8006c9a:	9101      	str	r1, [sp, #4]
 8006c9c:	eb03 1b0c 	add.w	fp, r3, ip, lsl #4
 8006ca0:	f103 0a10 	add.w	sl, r3, #16
 8006ca4:	f1aa 0310 	sub.w	r3, sl, #16
 8006ca8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8006cac:	9303      	str	r3, [sp, #12]
 8006cae:	f1a9 0704 	sub.w	r7, r9, #4
 8006cb2:	eddf 7a6c 	vldr	s15, [pc, #432]	@ 8006e64 <arm_mat_mult_f32+0x21c>
 8006cb6:	f1bc 0f00 	cmp.w	ip, #0
 8006cba:	d052      	beq.n	8006d62 <arm_mat_mult_f32+0x11a>
 8006cbc:	f102 0008 	add.w	r0, r2, #8
 8006cc0:	4653      	mov	r3, sl
 8006cc2:	4665      	mov	r5, ip
 8006cc4:	4611      	mov	r1, r2
 8006cc6:	ed13 6a04 	vldr	s12, [r3, #-16]
 8006cca:	ed91 7a00 	vldr	s14, [r1]
 8006cce:	ed53 4a03 	vldr	s9, [r3, #-12]
 8006cd2:	edd0 6a00 	vldr	s13, [r0]
 8006cd6:	ed13 5a02 	vldr	s10, [r3, #-8]
 8006cda:	ed53 5a01 	vldr	s11, [r3, #-4]
 8006cde:	190e      	adds	r6, r1, r4
 8006ce0:	ee27 7a06 	vmul.f32	s14, s14, s12
 8006ce4:	ed96 6a00 	vldr	s12, [r6]
 8006ce8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006cec:	ee26 6a24 	vmul.f32	s12, s12, s9
 8006cf0:	1906      	adds	r6, r0, r4
 8006cf2:	ee36 6a27 	vadd.f32	s12, s12, s15
 8006cf6:	ee26 7a85 	vmul.f32	s14, s13, s10
 8006cfa:	edd6 7a00 	vldr	s15, [r6]
 8006cfe:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006d02:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006d06:	3d01      	subs	r5, #1
 8006d08:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006d0c:	f101 0110 	add.w	r1, r1, #16
 8006d10:	f100 0010 	add.w	r0, r0, #16
 8006d14:	f103 0310 	add.w	r3, r3, #16
 8006d18:	d1d5      	bne.n	8006cc6 <arm_mat_mult_f32+0x7e>
 8006d1a:	9b01      	ldr	r3, [sp, #4]
 8006d1c:	4659      	mov	r1, fp
 8006d1e:	441a      	add	r2, r3
 8006d20:	f1be 0f00 	cmp.w	lr, #0
 8006d24:	d00b      	beq.n	8006d3e <arm_mat_mult_f32+0xf6>
 8006d26:	4673      	mov	r3, lr
 8006d28:	ed92 7a00 	vldr	s14, [r2]
 8006d2c:	ecf1 6a01 	vldmia	r1!, {s13}
 8006d30:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006d34:	3b01      	subs	r3, #1
 8006d36:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006d3a:	4422      	add	r2, r4
 8006d3c:	d1f4      	bne.n	8006d28 <arm_mat_mult_f32+0xe0>
 8006d3e:	ece7 7a01 	vstmia	r7!, {s15}
 8006d42:	454f      	cmp	r7, r9
 8006d44:	4642      	mov	r2, r8
 8006d46:	f108 0804 	add.w	r8, r8, #4
 8006d4a:	d1b2      	bne.n	8006cb2 <arm_mat_mult_f32+0x6a>
 8006d4c:	9b06      	ldr	r3, [sp, #24]
 8006d4e:	449b      	add	fp, r3
 8006d50:	449a      	add	sl, r3
 8006d52:	9b02      	ldr	r3, [sp, #8]
 8006d54:	3b01      	subs	r3, #1
 8006d56:	44a1      	add	r9, r4
 8006d58:	9302      	str	r3, [sp, #8]
 8006d5a:	d004      	beq.n	8006d66 <arm_mat_mult_f32+0x11e>
 8006d5c:	9b07      	ldr	r3, [sp, #28]
 8006d5e:	685a      	ldr	r2, [r3, #4]
 8006d60:	e7a0      	b.n	8006ca4 <arm_mat_mult_f32+0x5c>
 8006d62:	9903      	ldr	r1, [sp, #12]
 8006d64:	e7dc      	b.n	8006d20 <arm_mat_mult_f32+0xd8>
 8006d66:	4618      	mov	r0, r3
 8006d68:	b00b      	add	sp, #44	@ 0x2c
 8006d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d6e:	ebc1 7281 	rsb	r2, r1, r1, lsl #30
 8006d72:	0092      	lsls	r2, r2, #2
 8006d74:	010e      	lsls	r6, r1, #4
 8006d76:	9209      	str	r2, [sp, #36]	@ 0x24
 8006d78:	00ca      	lsls	r2, r1, #3
 8006d7a:	9204      	str	r2, [sp, #16]
 8006d7c:	fb06 f20c 	mul.w	r2, r6, ip
 8006d80:	1d05      	adds	r5, r0, #4
 8006d82:	9203      	str	r2, [sp, #12]
 8006d84:	eb03 120c 	add.w	r2, r3, ip, lsl #4
 8006d88:	eb07 0b04 	add.w	fp, r7, r4
 8006d8c:	9505      	str	r5, [sp, #20]
 8006d8e:	9201      	str	r2, [sp, #4]
 8006d90:	f103 0a10 	add.w	sl, r3, #16
 8006d94:	f1aa 0310 	sub.w	r3, sl, #16
 8006d98:	9308      	str	r3, [sp, #32]
 8006d9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d9c:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006da0:	eb0b 0803 	add.w	r8, fp, r3
 8006da4:	eddf 7a2f 	vldr	s15, [pc, #188]	@ 8006e64 <arm_mat_mult_f32+0x21c>
 8006da8:	f1bc 0f00 	cmp.w	ip, #0
 8006dac:	d053      	beq.n	8006e56 <arm_mat_mult_f32+0x20e>
 8006dae:	9b04      	ldr	r3, [sp, #16]
 8006db0:	4665      	mov	r5, ip
 8006db2:	18c1      	adds	r1, r0, r3
 8006db4:	4602      	mov	r2, r0
 8006db6:	4653      	mov	r3, sl
 8006db8:	ed92 6a00 	vldr	s12, [r2]
 8006dbc:	ed13 7a04 	vldr	s14, [r3, #-16]
 8006dc0:	ed53 4a03 	vldr	s9, [r3, #-12]
 8006dc4:	ed53 6a02 	vldr	s13, [r3, #-8]
 8006dc8:	ed91 5a00 	vldr	s10, [r1]
 8006dcc:	ed53 5a01 	vldr	s11, [r3, #-4]
 8006dd0:	1917      	adds	r7, r2, r4
 8006dd2:	ee27 7a06 	vmul.f32	s14, s14, s12
 8006dd6:	ed97 6a00 	vldr	s12, [r7]
 8006dda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006dde:	ee26 6a24 	vmul.f32	s12, s12, s9
 8006de2:	190f      	adds	r7, r1, r4
 8006de4:	ee36 6a27 	vadd.f32	s12, s12, s15
 8006de8:	ee26 7a85 	vmul.f32	s14, s13, s10
 8006dec:	edd7 7a00 	vldr	s15, [r7]
 8006df0:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006df4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006df8:	3d01      	subs	r5, #1
 8006dfa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006dfe:	4432      	add	r2, r6
 8006e00:	4431      	add	r1, r6
 8006e02:	f103 0310 	add.w	r3, r3, #16
 8006e06:	d1d7      	bne.n	8006db8 <arm_mat_mult_f32+0x170>
 8006e08:	9b03      	ldr	r3, [sp, #12]
 8006e0a:	9a01      	ldr	r2, [sp, #4]
 8006e0c:	4418      	add	r0, r3
 8006e0e:	f1be 0f00 	cmp.w	lr, #0
 8006e12:	d00b      	beq.n	8006e2c <arm_mat_mult_f32+0x1e4>
 8006e14:	4673      	mov	r3, lr
 8006e16:	edd0 6a00 	vldr	s13, [r0]
 8006e1a:	ecb2 7a01 	vldmia	r2!, {s14}
 8006e1e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006e22:	3b01      	subs	r3, #1
 8006e24:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006e28:	4420      	add	r0, r4
 8006e2a:	d1f4      	bne.n	8006e16 <arm_mat_mult_f32+0x1ce>
 8006e2c:	ece8 7a01 	vstmia	r8!, {s15}
 8006e30:	45d8      	cmp	r8, fp
 8006e32:	4648      	mov	r0, r9
 8006e34:	f109 0904 	add.w	r9, r9, #4
 8006e38:	d1b4      	bne.n	8006da4 <arm_mat_mult_f32+0x15c>
 8006e3a:	9a01      	ldr	r2, [sp, #4]
 8006e3c:	9b06      	ldr	r3, [sp, #24]
 8006e3e:	4611      	mov	r1, r2
 8006e40:	4419      	add	r1, r3
 8006e42:	449a      	add	sl, r3
 8006e44:	9b02      	ldr	r3, [sp, #8]
 8006e46:	9101      	str	r1, [sp, #4]
 8006e48:	3b01      	subs	r3, #1
 8006e4a:	44a3      	add	fp, r4
 8006e4c:	9302      	str	r3, [sp, #8]
 8006e4e:	d08a      	beq.n	8006d66 <arm_mat_mult_f32+0x11e>
 8006e50:	9b07      	ldr	r3, [sp, #28]
 8006e52:	6858      	ldr	r0, [r3, #4]
 8006e54:	e79e      	b.n	8006d94 <arm_mat_mult_f32+0x14c>
 8006e56:	9a08      	ldr	r2, [sp, #32]
 8006e58:	e7d9      	b.n	8006e0e <arm_mat_mult_f32+0x1c6>
 8006e5a:	f06f 0002 	mvn.w	r0, #2
 8006e5e:	b00b      	add	sp, #44	@ 0x2c
 8006e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e64:	00000000 	.word	0x00000000

08006e68 <arm_mat_inverse_f32>:
 8006e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e6c:	ed2d 8b02 	vpush	{d8}
 8006e70:	8806      	ldrh	r6, [r0, #0]
 8006e72:	8847      	ldrh	r7, [r0, #2]
 8006e74:	684d      	ldr	r5, [r1, #4]
 8006e76:	f8d0 a004 	ldr.w	sl, [r0, #4]
 8006e7a:	b08b      	sub	sp, #44	@ 0x2c
 8006e7c:	42be      	cmp	r6, r7
 8006e7e:	9009      	str	r0, [sp, #36]	@ 0x24
 8006e80:	9508      	str	r5, [sp, #32]
 8006e82:	f040 810d 	bne.w	80070a0 <arm_mat_inverse_f32+0x238>
 8006e86:	880a      	ldrh	r2, [r1, #0]
 8006e88:	884b      	ldrh	r3, [r1, #2]
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	f040 8108 	bne.w	80070a0 <arm_mat_inverse_f32+0x238>
 8006e90:	429e      	cmp	r6, r3
 8006e92:	f040 8105 	bne.w	80070a0 <arm_mat_inverse_f32+0x238>
 8006e96:	b326      	cbz	r6, 8006ee2 <arm_mat_inverse_f32+0x7a>
 8006e98:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 8006e9c:	f1b6 0801 	subs.w	r8, r6, #1
 8006ea0:	eca5 8a01 	vstmia	r5!, {s16}
 8006ea4:	d01d      	beq.n	8006ee2 <arm_mat_inverse_f32+0x7a>
 8006ea6:	f04f 0901 	mov.w	r9, #1
 8006eaa:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8006eae:	eb05 0b02 	add.w	fp, r5, r2
 8006eb2:	ea4f 0489 	mov.w	r4, r9, lsl #2
 8006eb6:	4628      	mov	r0, r5
 8006eb8:	2100      	movs	r1, #0
 8006eba:	f000 f991 	bl	80071e0 <memset>
 8006ebe:	eb0b 0504 	add.w	r5, fp, r4
 8006ec2:	4622      	mov	r2, r4
 8006ec4:	2100      	movs	r1, #0
 8006ec6:	4658      	mov	r0, fp
 8006ec8:	f1b9 0f00 	cmp.w	r9, #0
 8006ecc:	f000 80ef 	beq.w	80070ae <arm_mat_inverse_f32+0x246>
 8006ed0:	f000 f986 	bl	80071e0 <memset>
 8006ed4:	f1b8 0801 	subs.w	r8, r8, #1
 8006ed8:	f109 0901 	add.w	r9, r9, #1
 8006edc:	eca5 8a01 	vstmia	r5!, {s16}
 8006ee0:	d1e3      	bne.n	8006eaa <arm_mat_inverse_f32+0x42>
 8006ee2:	2f00      	cmp	r7, #0
 8006ee4:	f000 80bf 	beq.w	8007066 <arm_mat_inverse_f32+0x1fe>
 8006ee8:	ea4f 0c87 	mov.w	ip, r7, lsl #2
 8006eec:	eb0a 030c 	add.w	r3, sl, ip
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	9302      	str	r3, [sp, #8]
 8006ef4:	00fb      	lsls	r3, r7, #3
 8006ef6:	3304      	adds	r3, #4
 8006ef8:	2500      	movs	r5, #0
 8006efa:	e9cd 5305 	strd	r5, r3, [sp, #20]
 8006efe:	9204      	str	r2, [sp, #16]
 8006f00:	9b08      	ldr	r3, [sp, #32]
 8006f02:	9301      	str	r3, [sp, #4]
 8006f04:	f10c 0204 	add.w	r2, ip, #4
 8006f08:	9207      	str	r2, [sp, #28]
 8006f0a:	46e0      	mov	r8, ip
 8006f0c:	46b9      	mov	r9, r7
 8006f0e:	edda 6a00 	vldr	s13, [sl]
 8006f12:	9b04      	ldr	r3, [sp, #16]
 8006f14:	eef5 6a40 	vcmp.f32	s13, #0.0
 8006f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f1c:	eba3 0008 	sub.w	r0, r3, r8
 8006f20:	d066      	beq.n	8006ff0 <arm_mat_inverse_f32+0x188>
 8006f22:	1c6b      	adds	r3, r5, #1
 8006f24:	eba9 0705 	sub.w	r7, r9, r5
 8006f28:	9303      	str	r3, [sp, #12]
 8006f2a:	b14f      	cbz	r7, 8006f40 <arm_mat_inverse_f32+0xd8>
 8006f2c:	463a      	mov	r2, r7
 8006f2e:	4653      	mov	r3, sl
 8006f30:	ed93 7a00 	vldr	s14, [r3]
 8006f34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006f38:	3a01      	subs	r2, #1
 8006f3a:	ece3 7a01 	vstmia	r3!, {s15}
 8006f3e:	d1f7      	bne.n	8006f30 <arm_mat_inverse_f32+0xc8>
 8006f40:	9b01      	ldr	r3, [sp, #4]
 8006f42:	4649      	mov	r1, r9
 8006f44:	ed93 7a00 	vldr	s14, [r3]
 8006f48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006f4c:	3901      	subs	r1, #1
 8006f4e:	ece3 7a01 	vstmia	r3!, {s15}
 8006f52:	d1f7      	bne.n	8006f44 <arm_mat_inverse_f32+0xdc>
 8006f54:	b366      	cbz	r6, 8006fb0 <arm_mat_inverse_f32+0x148>
 8006f56:	9c08      	ldr	r4, [sp, #32]
 8006f58:	ea4f 0e85 	mov.w	lr, r5, lsl #2
 8006f5c:	428d      	cmp	r5, r1
 8006f5e:	d044      	beq.n	8006fea <arm_mat_inverse_f32+0x182>
 8006f60:	edd0 6a00 	vldr	s13, [r0]
 8006f64:	b17f      	cbz	r7, 8006f86 <arm_mat_inverse_f32+0x11e>
 8006f66:	4602      	mov	r2, r0
 8006f68:	463b      	mov	r3, r7
 8006f6a:	46d3      	mov	fp, sl
 8006f6c:	ecbb 7a01 	vldmia	fp!, {s14}
 8006f70:	edd2 7a00 	vldr	s15, [r2]
 8006f74:	ee26 7a87 	vmul.f32	s14, s13, s14
 8006f78:	3b01      	subs	r3, #1
 8006f7a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006f7e:	ece2 7a01 	vstmia	r2!, {s15}
 8006f82:	d1f3      	bne.n	8006f6c <arm_mat_inverse_f32+0x104>
 8006f84:	4440      	add	r0, r8
 8006f86:	f8dd b004 	ldr.w	fp, [sp, #4]
 8006f8a:	4622      	mov	r2, r4
 8006f8c:	464b      	mov	r3, r9
 8006f8e:	ecbb 7a01 	vldmia	fp!, {s14}
 8006f92:	edd2 7a00 	vldr	s15, [r2]
 8006f96:	ee26 7a87 	vmul.f32	s14, s13, s14
 8006f9a:	3b01      	subs	r3, #1
 8006f9c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006fa0:	ece2 7a01 	vstmia	r2!, {s15}
 8006fa4:	d1f3      	bne.n	8006f8e <arm_mat_inverse_f32+0x126>
 8006fa6:	4464      	add	r4, ip
 8006fa8:	3101      	adds	r1, #1
 8006faa:	428e      	cmp	r6, r1
 8006fac:	4470      	add	r0, lr
 8006fae:	d1d5      	bne.n	8006f5c <arm_mat_inverse_f32+0xf4>
 8006fb0:	9b07      	ldr	r3, [sp, #28]
 8006fb2:	9a06      	ldr	r2, [sp, #24]
 8006fb4:	449a      	add	sl, r3
 8006fb6:	9b01      	ldr	r3, [sp, #4]
 8006fb8:	4463      	add	r3, ip
 8006fba:	9301      	str	r3, [sp, #4]
 8006fbc:	9b02      	ldr	r3, [sp, #8]
 8006fbe:	4413      	add	r3, r2
 8006fc0:	9302      	str	r3, [sp, #8]
 8006fc2:	9b03      	ldr	r3, [sp, #12]
 8006fc4:	454b      	cmp	r3, r9
 8006fc6:	f1a8 0804 	sub.w	r8, r8, #4
 8006fca:	461d      	mov	r5, r3
 8006fcc:	d19f      	bne.n	8006f0e <arm_mat_inverse_f32+0xa6>
 8006fce:	9b05      	ldr	r3, [sp, #20]
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d004      	beq.n	8006fde <arm_mat_inverse_f32+0x176>
 8006fd4:	eef5 6a40 	vcmp.f32	s13, #0.0
 8006fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fdc:	d04a      	beq.n	8007074 <arm_mat_inverse_f32+0x20c>
 8006fde:	2000      	movs	r0, #0
 8006fe0:	b00b      	add	sp, #44	@ 0x2c
 8006fe2:	ecbd 8b02 	vpop	{d8}
 8006fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fea:	4440      	add	r0, r8
 8006fec:	4464      	add	r4, ip
 8006fee:	e7db      	b.n	8006fa8 <arm_mat_inverse_f32+0x140>
 8006ff0:	1c6b      	adds	r3, r5, #1
 8006ff2:	429e      	cmp	r6, r3
 8006ff4:	9303      	str	r3, [sp, #12]
 8006ff6:	d930      	bls.n	800705a <arm_mat_inverse_f32+0x1f2>
 8006ff8:	9902      	ldr	r1, [sp, #8]
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e003      	b.n	8007006 <arm_mat_inverse_f32+0x19e>
 8006ffe:	3301      	adds	r3, #1
 8007000:	18ea      	adds	r2, r5, r3
 8007002:	42b2      	cmp	r2, r6
 8007004:	d229      	bcs.n	800705a <arm_mat_inverse_f32+0x1f2>
 8007006:	edd1 7a00 	vldr	s15, [r1]
 800700a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800700e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007012:	460a      	mov	r2, r1
 8007014:	4461      	add	r1, ip
 8007016:	d0f2      	beq.n	8006ffe <arm_mat_inverse_f32+0x196>
 8007018:	ebb9 0705 	subs.w	r7, r9, r5
 800701c:	d00b      	beq.n	8007036 <arm_mat_inverse_f32+0x1ce>
 800701e:	463c      	mov	r4, r7
 8007020:	4651      	mov	r1, sl
 8007022:	f8d2 e000 	ldr.w	lr, [r2]
 8007026:	f8d1 b000 	ldr.w	fp, [r1]
 800702a:	f842 bb04 	str.w	fp, [r2], #4
 800702e:	3c01      	subs	r4, #1
 8007030:	f841 eb04 	str.w	lr, [r1], #4
 8007034:	d1f5      	bne.n	8007022 <arm_mat_inverse_f32+0x1ba>
 8007036:	9a01      	ldr	r2, [sp, #4]
 8007038:	4649      	mov	r1, r9
 800703a:	fb03 230c 	mla	r3, r3, ip, r2
 800703e:	681c      	ldr	r4, [r3, #0]
 8007040:	f8d2 e000 	ldr.w	lr, [r2]
 8007044:	f843 eb04 	str.w	lr, [r3], #4
 8007048:	3901      	subs	r1, #1
 800704a:	f842 4b04 	str.w	r4, [r2], #4
 800704e:	d1f6      	bne.n	800703e <arm_mat_inverse_f32+0x1d6>
 8007050:	2301      	movs	r3, #1
 8007052:	edda 6a00 	vldr	s13, [sl]
 8007056:	9305      	str	r3, [sp, #20]
 8007058:	e767      	b.n	8006f2a <arm_mat_inverse_f32+0xc2>
 800705a:	9b05      	ldr	r3, [sp, #20]
 800705c:	2b01      	cmp	r3, #1
 800705e:	d102      	bne.n	8007066 <arm_mat_inverse_f32+0x1fe>
 8007060:	eba9 0705 	sub.w	r7, r9, r5
 8007064:	e761      	b.n	8006f2a <arm_mat_inverse_f32+0xc2>
 8007066:	f06f 0004 	mvn.w	r0, #4
 800706a:	b00b      	add	sp, #44	@ 0x2c
 800706c:	ecbd 8b02 	vpop	{d8}
 8007070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007074:	9b03      	ldr	r3, [sp, #12]
 8007076:	fb03 f306 	mul.w	r3, r3, r6
 800707a:	461e      	mov	r6, r3
 800707c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	2e00      	cmp	r6, #0
 8007082:	d0f0      	beq.n	8007066 <arm_mat_inverse_f32+0x1fe>
 8007084:	9a05      	ldr	r2, [sp, #20]
 8007086:	e001      	b.n	800708c <arm_mat_inverse_f32+0x224>
 8007088:	42b2      	cmp	r2, r6
 800708a:	d0ec      	beq.n	8007066 <arm_mat_inverse_f32+0x1fe>
 800708c:	ecf3 7a01 	vldmia	r3!, {s15}
 8007090:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007098:	f102 0201 	add.w	r2, r2, #1
 800709c:	d0f4      	beq.n	8007088 <arm_mat_inverse_f32+0x220>
 800709e:	e79e      	b.n	8006fde <arm_mat_inverse_f32+0x176>
 80070a0:	f06f 0002 	mvn.w	r0, #2
 80070a4:	b00b      	add	sp, #44	@ 0x2c
 80070a6:	ecbd 8b02 	vpop	{d8}
 80070aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ae:	465d      	mov	r5, fp
 80070b0:	f1b8 0801 	subs.w	r8, r8, #1
 80070b4:	eca5 8a01 	vstmia	r5!, {s16}
 80070b8:	f47f aef5 	bne.w	8006ea6 <arm_mat_inverse_f32+0x3e>
 80070bc:	e711      	b.n	8006ee2 <arm_mat_inverse_f32+0x7a>
 80070be:	bf00      	nop

080070c0 <arm_mat_init_f32>:
 80070c0:	8001      	strh	r1, [r0, #0]
 80070c2:	8042      	strh	r2, [r0, #2]
 80070c4:	6043      	str	r3, [r0, #4]
 80070c6:	4770      	bx	lr

080070c8 <arm_mat_add_f32>:
 80070c8:	b4f0      	push	{r4, r5, r6, r7}
 80070ca:	e9d1 4600 	ldrd	r4, r6, [r1]
 80070ce:	6803      	ldr	r3, [r0, #0]
 80070d0:	6847      	ldr	r7, [r0, #4]
 80070d2:	6855      	ldr	r5, [r2, #4]
 80070d4:	42a3      	cmp	r3, r4
 80070d6:	d160      	bne.n	800719a <arm_mat_add_f32+0xd2>
 80070d8:	6812      	ldr	r2, [r2, #0]
 80070da:	4293      	cmp	r3, r2
 80070dc:	d15d      	bne.n	800719a <arm_mat_add_f32+0xd2>
 80070de:	8803      	ldrh	r3, [r0, #0]
 80070e0:	8844      	ldrh	r4, [r0, #2]
 80070e2:	fb04 f403 	mul.w	r4, r4, r3
 80070e6:	ea5f 0c94 	movs.w	ip, r4, lsr #2
 80070ea:	d034      	beq.n	8007156 <arm_mat_add_f32+0x8e>
 80070ec:	f107 0110 	add.w	r1, r7, #16
 80070f0:	f106 0210 	add.w	r2, r6, #16
 80070f4:	f105 0310 	add.w	r3, r5, #16
 80070f8:	4660      	mov	r0, ip
 80070fa:	ed12 7a04 	vldr	s14, [r2, #-16]
 80070fe:	ed51 7a04 	vldr	s15, [r1, #-16]
 8007102:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007106:	3801      	subs	r0, #1
 8007108:	ed43 7a04 	vstr	s15, [r3, #-16]
 800710c:	ed12 7a03 	vldr	s14, [r2, #-12]
 8007110:	ed51 7a03 	vldr	s15, [r1, #-12]
 8007114:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007118:	f101 0110 	add.w	r1, r1, #16
 800711c:	ed43 7a03 	vstr	s15, [r3, #-12]
 8007120:	ed12 7a02 	vldr	s14, [r2, #-8]
 8007124:	ed51 7a06 	vldr	s15, [r1, #-24]	@ 0xffffffe8
 8007128:	ee77 7a87 	vadd.f32	s15, s15, s14
 800712c:	f102 0210 	add.w	r2, r2, #16
 8007130:	ed43 7a02 	vstr	s15, [r3, #-8]
 8007134:	ed51 7a05 	vldr	s15, [r1, #-20]	@ 0xffffffec
 8007138:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 800713c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007140:	f103 0310 	add.w	r3, r3, #16
 8007144:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 8007148:	d1d7      	bne.n	80070fa <arm_mat_add_f32+0x32>
 800714a:	eb07 170c 	add.w	r7, r7, ip, lsl #4
 800714e:	eb06 160c 	add.w	r6, r6, ip, lsl #4
 8007152:	eb05 150c 	add.w	r5, r5, ip, lsl #4
 8007156:	f014 0403 	ands.w	r4, r4, #3
 800715a:	d01b      	beq.n	8007194 <arm_mat_add_f32+0xcc>
 800715c:	edd6 7a00 	vldr	s15, [r6]
 8007160:	ed97 7a00 	vldr	s14, [r7]
 8007164:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007168:	3c01      	subs	r4, #1
 800716a:	edc5 7a00 	vstr	s15, [r5]
 800716e:	d011      	beq.n	8007194 <arm_mat_add_f32+0xcc>
 8007170:	edd7 7a01 	vldr	s15, [r7, #4]
 8007174:	ed96 7a01 	vldr	s14, [r6, #4]
 8007178:	ee77 7a87 	vadd.f32	s15, s15, s14
 800717c:	2c01      	cmp	r4, #1
 800717e:	edc5 7a01 	vstr	s15, [r5, #4]
 8007182:	d007      	beq.n	8007194 <arm_mat_add_f32+0xcc>
 8007184:	edd7 7a02 	vldr	s15, [r7, #8]
 8007188:	ed96 7a02 	vldr	s14, [r6, #8]
 800718c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007190:	edc5 7a02 	vstr	s15, [r5, #8]
 8007194:	2000      	movs	r0, #0
 8007196:	bcf0      	pop	{r4, r5, r6, r7}
 8007198:	4770      	bx	lr
 800719a:	f06f 0002 	mvn.w	r0, #2
 800719e:	e7fa      	b.n	8007196 <arm_mat_add_f32+0xce>

080071a0 <siprintf>:
 80071a0:	b40e      	push	{r1, r2, r3}
 80071a2:	b500      	push	{lr}
 80071a4:	b09c      	sub	sp, #112	@ 0x70
 80071a6:	ab1d      	add	r3, sp, #116	@ 0x74
 80071a8:	9002      	str	r0, [sp, #8]
 80071aa:	9006      	str	r0, [sp, #24]
 80071ac:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80071b0:	4809      	ldr	r0, [pc, #36]	@ (80071d8 <siprintf+0x38>)
 80071b2:	9107      	str	r1, [sp, #28]
 80071b4:	9104      	str	r1, [sp, #16]
 80071b6:	4909      	ldr	r1, [pc, #36]	@ (80071dc <siprintf+0x3c>)
 80071b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80071bc:	9105      	str	r1, [sp, #20]
 80071be:	6800      	ldr	r0, [r0, #0]
 80071c0:	9301      	str	r3, [sp, #4]
 80071c2:	a902      	add	r1, sp, #8
 80071c4:	f000 f994 	bl	80074f0 <_svfiprintf_r>
 80071c8:	9b02      	ldr	r3, [sp, #8]
 80071ca:	2200      	movs	r2, #0
 80071cc:	701a      	strb	r2, [r3, #0]
 80071ce:	b01c      	add	sp, #112	@ 0x70
 80071d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80071d4:	b003      	add	sp, #12
 80071d6:	4770      	bx	lr
 80071d8:	2000005c 	.word	0x2000005c
 80071dc:	ffff0208 	.word	0xffff0208

080071e0 <memset>:
 80071e0:	4402      	add	r2, r0
 80071e2:	4603      	mov	r3, r0
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d100      	bne.n	80071ea <memset+0xa>
 80071e8:	4770      	bx	lr
 80071ea:	f803 1b01 	strb.w	r1, [r3], #1
 80071ee:	e7f9      	b.n	80071e4 <memset+0x4>

080071f0 <__errno>:
 80071f0:	4b01      	ldr	r3, [pc, #4]	@ (80071f8 <__errno+0x8>)
 80071f2:	6818      	ldr	r0, [r3, #0]
 80071f4:	4770      	bx	lr
 80071f6:	bf00      	nop
 80071f8:	2000005c 	.word	0x2000005c

080071fc <__libc_init_array>:
 80071fc:	b570      	push	{r4, r5, r6, lr}
 80071fe:	4d0d      	ldr	r5, [pc, #52]	@ (8007234 <__libc_init_array+0x38>)
 8007200:	4c0d      	ldr	r4, [pc, #52]	@ (8007238 <__libc_init_array+0x3c>)
 8007202:	1b64      	subs	r4, r4, r5
 8007204:	10a4      	asrs	r4, r4, #2
 8007206:	2600      	movs	r6, #0
 8007208:	42a6      	cmp	r6, r4
 800720a:	d109      	bne.n	8007220 <__libc_init_array+0x24>
 800720c:	4d0b      	ldr	r5, [pc, #44]	@ (800723c <__libc_init_array+0x40>)
 800720e:	4c0c      	ldr	r4, [pc, #48]	@ (8007240 <__libc_init_array+0x44>)
 8007210:	f002 fbee 	bl	80099f0 <_init>
 8007214:	1b64      	subs	r4, r4, r5
 8007216:	10a4      	asrs	r4, r4, #2
 8007218:	2600      	movs	r6, #0
 800721a:	42a6      	cmp	r6, r4
 800721c:	d105      	bne.n	800722a <__libc_init_array+0x2e>
 800721e:	bd70      	pop	{r4, r5, r6, pc}
 8007220:	f855 3b04 	ldr.w	r3, [r5], #4
 8007224:	4798      	blx	r3
 8007226:	3601      	adds	r6, #1
 8007228:	e7ee      	b.n	8007208 <__libc_init_array+0xc>
 800722a:	f855 3b04 	ldr.w	r3, [r5], #4
 800722e:	4798      	blx	r3
 8007230:	3601      	adds	r6, #1
 8007232:	e7f2      	b.n	800721a <__libc_init_array+0x1e>
 8007234:	08009ca8 	.word	0x08009ca8
 8007238:	08009ca8 	.word	0x08009ca8
 800723c:	08009ca8 	.word	0x08009ca8
 8007240:	08009cac 	.word	0x08009cac

08007244 <__retarget_lock_acquire_recursive>:
 8007244:	4770      	bx	lr

08007246 <__retarget_lock_release_recursive>:
 8007246:	4770      	bx	lr

08007248 <_free_r>:
 8007248:	b538      	push	{r3, r4, r5, lr}
 800724a:	4605      	mov	r5, r0
 800724c:	2900      	cmp	r1, #0
 800724e:	d041      	beq.n	80072d4 <_free_r+0x8c>
 8007250:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007254:	1f0c      	subs	r4, r1, #4
 8007256:	2b00      	cmp	r3, #0
 8007258:	bfb8      	it	lt
 800725a:	18e4      	addlt	r4, r4, r3
 800725c:	f000 f8e0 	bl	8007420 <__malloc_lock>
 8007260:	4a1d      	ldr	r2, [pc, #116]	@ (80072d8 <_free_r+0x90>)
 8007262:	6813      	ldr	r3, [r2, #0]
 8007264:	b933      	cbnz	r3, 8007274 <_free_r+0x2c>
 8007266:	6063      	str	r3, [r4, #4]
 8007268:	6014      	str	r4, [r2, #0]
 800726a:	4628      	mov	r0, r5
 800726c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007270:	f000 b8dc 	b.w	800742c <__malloc_unlock>
 8007274:	42a3      	cmp	r3, r4
 8007276:	d908      	bls.n	800728a <_free_r+0x42>
 8007278:	6820      	ldr	r0, [r4, #0]
 800727a:	1821      	adds	r1, r4, r0
 800727c:	428b      	cmp	r3, r1
 800727e:	bf01      	itttt	eq
 8007280:	6819      	ldreq	r1, [r3, #0]
 8007282:	685b      	ldreq	r3, [r3, #4]
 8007284:	1809      	addeq	r1, r1, r0
 8007286:	6021      	streq	r1, [r4, #0]
 8007288:	e7ed      	b.n	8007266 <_free_r+0x1e>
 800728a:	461a      	mov	r2, r3
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	b10b      	cbz	r3, 8007294 <_free_r+0x4c>
 8007290:	42a3      	cmp	r3, r4
 8007292:	d9fa      	bls.n	800728a <_free_r+0x42>
 8007294:	6811      	ldr	r1, [r2, #0]
 8007296:	1850      	adds	r0, r2, r1
 8007298:	42a0      	cmp	r0, r4
 800729a:	d10b      	bne.n	80072b4 <_free_r+0x6c>
 800729c:	6820      	ldr	r0, [r4, #0]
 800729e:	4401      	add	r1, r0
 80072a0:	1850      	adds	r0, r2, r1
 80072a2:	4283      	cmp	r3, r0
 80072a4:	6011      	str	r1, [r2, #0]
 80072a6:	d1e0      	bne.n	800726a <_free_r+0x22>
 80072a8:	6818      	ldr	r0, [r3, #0]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	6053      	str	r3, [r2, #4]
 80072ae:	4408      	add	r0, r1
 80072b0:	6010      	str	r0, [r2, #0]
 80072b2:	e7da      	b.n	800726a <_free_r+0x22>
 80072b4:	d902      	bls.n	80072bc <_free_r+0x74>
 80072b6:	230c      	movs	r3, #12
 80072b8:	602b      	str	r3, [r5, #0]
 80072ba:	e7d6      	b.n	800726a <_free_r+0x22>
 80072bc:	6820      	ldr	r0, [r4, #0]
 80072be:	1821      	adds	r1, r4, r0
 80072c0:	428b      	cmp	r3, r1
 80072c2:	bf04      	itt	eq
 80072c4:	6819      	ldreq	r1, [r3, #0]
 80072c6:	685b      	ldreq	r3, [r3, #4]
 80072c8:	6063      	str	r3, [r4, #4]
 80072ca:	bf04      	itt	eq
 80072cc:	1809      	addeq	r1, r1, r0
 80072ce:	6021      	streq	r1, [r4, #0]
 80072d0:	6054      	str	r4, [r2, #4]
 80072d2:	e7ca      	b.n	800726a <_free_r+0x22>
 80072d4:	bd38      	pop	{r3, r4, r5, pc}
 80072d6:	bf00      	nop
 80072d8:	20000898 	.word	0x20000898

080072dc <sbrk_aligned>:
 80072dc:	b570      	push	{r4, r5, r6, lr}
 80072de:	4e0f      	ldr	r6, [pc, #60]	@ (800731c <sbrk_aligned+0x40>)
 80072e0:	460c      	mov	r4, r1
 80072e2:	6831      	ldr	r1, [r6, #0]
 80072e4:	4605      	mov	r5, r0
 80072e6:	b911      	cbnz	r1, 80072ee <sbrk_aligned+0x12>
 80072e8:	f000 fba6 	bl	8007a38 <_sbrk_r>
 80072ec:	6030      	str	r0, [r6, #0]
 80072ee:	4621      	mov	r1, r4
 80072f0:	4628      	mov	r0, r5
 80072f2:	f000 fba1 	bl	8007a38 <_sbrk_r>
 80072f6:	1c43      	adds	r3, r0, #1
 80072f8:	d103      	bne.n	8007302 <sbrk_aligned+0x26>
 80072fa:	f04f 34ff 	mov.w	r4, #4294967295
 80072fe:	4620      	mov	r0, r4
 8007300:	bd70      	pop	{r4, r5, r6, pc}
 8007302:	1cc4      	adds	r4, r0, #3
 8007304:	f024 0403 	bic.w	r4, r4, #3
 8007308:	42a0      	cmp	r0, r4
 800730a:	d0f8      	beq.n	80072fe <sbrk_aligned+0x22>
 800730c:	1a21      	subs	r1, r4, r0
 800730e:	4628      	mov	r0, r5
 8007310:	f000 fb92 	bl	8007a38 <_sbrk_r>
 8007314:	3001      	adds	r0, #1
 8007316:	d1f2      	bne.n	80072fe <sbrk_aligned+0x22>
 8007318:	e7ef      	b.n	80072fa <sbrk_aligned+0x1e>
 800731a:	bf00      	nop
 800731c:	20000894 	.word	0x20000894

08007320 <_malloc_r>:
 8007320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007324:	1ccd      	adds	r5, r1, #3
 8007326:	f025 0503 	bic.w	r5, r5, #3
 800732a:	3508      	adds	r5, #8
 800732c:	2d0c      	cmp	r5, #12
 800732e:	bf38      	it	cc
 8007330:	250c      	movcc	r5, #12
 8007332:	2d00      	cmp	r5, #0
 8007334:	4606      	mov	r6, r0
 8007336:	db01      	blt.n	800733c <_malloc_r+0x1c>
 8007338:	42a9      	cmp	r1, r5
 800733a:	d904      	bls.n	8007346 <_malloc_r+0x26>
 800733c:	230c      	movs	r3, #12
 800733e:	6033      	str	r3, [r6, #0]
 8007340:	2000      	movs	r0, #0
 8007342:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007346:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800741c <_malloc_r+0xfc>
 800734a:	f000 f869 	bl	8007420 <__malloc_lock>
 800734e:	f8d8 3000 	ldr.w	r3, [r8]
 8007352:	461c      	mov	r4, r3
 8007354:	bb44      	cbnz	r4, 80073a8 <_malloc_r+0x88>
 8007356:	4629      	mov	r1, r5
 8007358:	4630      	mov	r0, r6
 800735a:	f7ff ffbf 	bl	80072dc <sbrk_aligned>
 800735e:	1c43      	adds	r3, r0, #1
 8007360:	4604      	mov	r4, r0
 8007362:	d158      	bne.n	8007416 <_malloc_r+0xf6>
 8007364:	f8d8 4000 	ldr.w	r4, [r8]
 8007368:	4627      	mov	r7, r4
 800736a:	2f00      	cmp	r7, #0
 800736c:	d143      	bne.n	80073f6 <_malloc_r+0xd6>
 800736e:	2c00      	cmp	r4, #0
 8007370:	d04b      	beq.n	800740a <_malloc_r+0xea>
 8007372:	6823      	ldr	r3, [r4, #0]
 8007374:	4639      	mov	r1, r7
 8007376:	4630      	mov	r0, r6
 8007378:	eb04 0903 	add.w	r9, r4, r3
 800737c:	f000 fb5c 	bl	8007a38 <_sbrk_r>
 8007380:	4581      	cmp	r9, r0
 8007382:	d142      	bne.n	800740a <_malloc_r+0xea>
 8007384:	6821      	ldr	r1, [r4, #0]
 8007386:	1a6d      	subs	r5, r5, r1
 8007388:	4629      	mov	r1, r5
 800738a:	4630      	mov	r0, r6
 800738c:	f7ff ffa6 	bl	80072dc <sbrk_aligned>
 8007390:	3001      	adds	r0, #1
 8007392:	d03a      	beq.n	800740a <_malloc_r+0xea>
 8007394:	6823      	ldr	r3, [r4, #0]
 8007396:	442b      	add	r3, r5
 8007398:	6023      	str	r3, [r4, #0]
 800739a:	f8d8 3000 	ldr.w	r3, [r8]
 800739e:	685a      	ldr	r2, [r3, #4]
 80073a0:	bb62      	cbnz	r2, 80073fc <_malloc_r+0xdc>
 80073a2:	f8c8 7000 	str.w	r7, [r8]
 80073a6:	e00f      	b.n	80073c8 <_malloc_r+0xa8>
 80073a8:	6822      	ldr	r2, [r4, #0]
 80073aa:	1b52      	subs	r2, r2, r5
 80073ac:	d420      	bmi.n	80073f0 <_malloc_r+0xd0>
 80073ae:	2a0b      	cmp	r2, #11
 80073b0:	d917      	bls.n	80073e2 <_malloc_r+0xc2>
 80073b2:	1961      	adds	r1, r4, r5
 80073b4:	42a3      	cmp	r3, r4
 80073b6:	6025      	str	r5, [r4, #0]
 80073b8:	bf18      	it	ne
 80073ba:	6059      	strne	r1, [r3, #4]
 80073bc:	6863      	ldr	r3, [r4, #4]
 80073be:	bf08      	it	eq
 80073c0:	f8c8 1000 	streq.w	r1, [r8]
 80073c4:	5162      	str	r2, [r4, r5]
 80073c6:	604b      	str	r3, [r1, #4]
 80073c8:	4630      	mov	r0, r6
 80073ca:	f000 f82f 	bl	800742c <__malloc_unlock>
 80073ce:	f104 000b 	add.w	r0, r4, #11
 80073d2:	1d23      	adds	r3, r4, #4
 80073d4:	f020 0007 	bic.w	r0, r0, #7
 80073d8:	1ac2      	subs	r2, r0, r3
 80073da:	bf1c      	itt	ne
 80073dc:	1a1b      	subne	r3, r3, r0
 80073de:	50a3      	strne	r3, [r4, r2]
 80073e0:	e7af      	b.n	8007342 <_malloc_r+0x22>
 80073e2:	6862      	ldr	r2, [r4, #4]
 80073e4:	42a3      	cmp	r3, r4
 80073e6:	bf0c      	ite	eq
 80073e8:	f8c8 2000 	streq.w	r2, [r8]
 80073ec:	605a      	strne	r2, [r3, #4]
 80073ee:	e7eb      	b.n	80073c8 <_malloc_r+0xa8>
 80073f0:	4623      	mov	r3, r4
 80073f2:	6864      	ldr	r4, [r4, #4]
 80073f4:	e7ae      	b.n	8007354 <_malloc_r+0x34>
 80073f6:	463c      	mov	r4, r7
 80073f8:	687f      	ldr	r7, [r7, #4]
 80073fa:	e7b6      	b.n	800736a <_malloc_r+0x4a>
 80073fc:	461a      	mov	r2, r3
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	42a3      	cmp	r3, r4
 8007402:	d1fb      	bne.n	80073fc <_malloc_r+0xdc>
 8007404:	2300      	movs	r3, #0
 8007406:	6053      	str	r3, [r2, #4]
 8007408:	e7de      	b.n	80073c8 <_malloc_r+0xa8>
 800740a:	230c      	movs	r3, #12
 800740c:	6033      	str	r3, [r6, #0]
 800740e:	4630      	mov	r0, r6
 8007410:	f000 f80c 	bl	800742c <__malloc_unlock>
 8007414:	e794      	b.n	8007340 <_malloc_r+0x20>
 8007416:	6005      	str	r5, [r0, #0]
 8007418:	e7d6      	b.n	80073c8 <_malloc_r+0xa8>
 800741a:	bf00      	nop
 800741c:	20000898 	.word	0x20000898

08007420 <__malloc_lock>:
 8007420:	4801      	ldr	r0, [pc, #4]	@ (8007428 <__malloc_lock+0x8>)
 8007422:	f7ff bf0f 	b.w	8007244 <__retarget_lock_acquire_recursive>
 8007426:	bf00      	nop
 8007428:	20000890 	.word	0x20000890

0800742c <__malloc_unlock>:
 800742c:	4801      	ldr	r0, [pc, #4]	@ (8007434 <__malloc_unlock+0x8>)
 800742e:	f7ff bf0a 	b.w	8007246 <__retarget_lock_release_recursive>
 8007432:	bf00      	nop
 8007434:	20000890 	.word	0x20000890

08007438 <__ssputs_r>:
 8007438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800743c:	688e      	ldr	r6, [r1, #8]
 800743e:	461f      	mov	r7, r3
 8007440:	42be      	cmp	r6, r7
 8007442:	680b      	ldr	r3, [r1, #0]
 8007444:	4682      	mov	sl, r0
 8007446:	460c      	mov	r4, r1
 8007448:	4690      	mov	r8, r2
 800744a:	d82d      	bhi.n	80074a8 <__ssputs_r+0x70>
 800744c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007450:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007454:	d026      	beq.n	80074a4 <__ssputs_r+0x6c>
 8007456:	6965      	ldr	r5, [r4, #20]
 8007458:	6909      	ldr	r1, [r1, #16]
 800745a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800745e:	eba3 0901 	sub.w	r9, r3, r1
 8007462:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007466:	1c7b      	adds	r3, r7, #1
 8007468:	444b      	add	r3, r9
 800746a:	106d      	asrs	r5, r5, #1
 800746c:	429d      	cmp	r5, r3
 800746e:	bf38      	it	cc
 8007470:	461d      	movcc	r5, r3
 8007472:	0553      	lsls	r3, r2, #21
 8007474:	d527      	bpl.n	80074c6 <__ssputs_r+0x8e>
 8007476:	4629      	mov	r1, r5
 8007478:	f7ff ff52 	bl	8007320 <_malloc_r>
 800747c:	4606      	mov	r6, r0
 800747e:	b360      	cbz	r0, 80074da <__ssputs_r+0xa2>
 8007480:	6921      	ldr	r1, [r4, #16]
 8007482:	464a      	mov	r2, r9
 8007484:	f000 fae8 	bl	8007a58 <memcpy>
 8007488:	89a3      	ldrh	r3, [r4, #12]
 800748a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800748e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007492:	81a3      	strh	r3, [r4, #12]
 8007494:	6126      	str	r6, [r4, #16]
 8007496:	6165      	str	r5, [r4, #20]
 8007498:	444e      	add	r6, r9
 800749a:	eba5 0509 	sub.w	r5, r5, r9
 800749e:	6026      	str	r6, [r4, #0]
 80074a0:	60a5      	str	r5, [r4, #8]
 80074a2:	463e      	mov	r6, r7
 80074a4:	42be      	cmp	r6, r7
 80074a6:	d900      	bls.n	80074aa <__ssputs_r+0x72>
 80074a8:	463e      	mov	r6, r7
 80074aa:	6820      	ldr	r0, [r4, #0]
 80074ac:	4632      	mov	r2, r6
 80074ae:	4641      	mov	r1, r8
 80074b0:	f000 faa8 	bl	8007a04 <memmove>
 80074b4:	68a3      	ldr	r3, [r4, #8]
 80074b6:	1b9b      	subs	r3, r3, r6
 80074b8:	60a3      	str	r3, [r4, #8]
 80074ba:	6823      	ldr	r3, [r4, #0]
 80074bc:	4433      	add	r3, r6
 80074be:	6023      	str	r3, [r4, #0]
 80074c0:	2000      	movs	r0, #0
 80074c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074c6:	462a      	mov	r2, r5
 80074c8:	f000 fad4 	bl	8007a74 <_realloc_r>
 80074cc:	4606      	mov	r6, r0
 80074ce:	2800      	cmp	r0, #0
 80074d0:	d1e0      	bne.n	8007494 <__ssputs_r+0x5c>
 80074d2:	6921      	ldr	r1, [r4, #16]
 80074d4:	4650      	mov	r0, sl
 80074d6:	f7ff feb7 	bl	8007248 <_free_r>
 80074da:	230c      	movs	r3, #12
 80074dc:	f8ca 3000 	str.w	r3, [sl]
 80074e0:	89a3      	ldrh	r3, [r4, #12]
 80074e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074e6:	81a3      	strh	r3, [r4, #12]
 80074e8:	f04f 30ff 	mov.w	r0, #4294967295
 80074ec:	e7e9      	b.n	80074c2 <__ssputs_r+0x8a>
	...

080074f0 <_svfiprintf_r>:
 80074f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074f4:	4698      	mov	r8, r3
 80074f6:	898b      	ldrh	r3, [r1, #12]
 80074f8:	061b      	lsls	r3, r3, #24
 80074fa:	b09d      	sub	sp, #116	@ 0x74
 80074fc:	4607      	mov	r7, r0
 80074fe:	460d      	mov	r5, r1
 8007500:	4614      	mov	r4, r2
 8007502:	d510      	bpl.n	8007526 <_svfiprintf_r+0x36>
 8007504:	690b      	ldr	r3, [r1, #16]
 8007506:	b973      	cbnz	r3, 8007526 <_svfiprintf_r+0x36>
 8007508:	2140      	movs	r1, #64	@ 0x40
 800750a:	f7ff ff09 	bl	8007320 <_malloc_r>
 800750e:	6028      	str	r0, [r5, #0]
 8007510:	6128      	str	r0, [r5, #16]
 8007512:	b930      	cbnz	r0, 8007522 <_svfiprintf_r+0x32>
 8007514:	230c      	movs	r3, #12
 8007516:	603b      	str	r3, [r7, #0]
 8007518:	f04f 30ff 	mov.w	r0, #4294967295
 800751c:	b01d      	add	sp, #116	@ 0x74
 800751e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007522:	2340      	movs	r3, #64	@ 0x40
 8007524:	616b      	str	r3, [r5, #20]
 8007526:	2300      	movs	r3, #0
 8007528:	9309      	str	r3, [sp, #36]	@ 0x24
 800752a:	2320      	movs	r3, #32
 800752c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007530:	f8cd 800c 	str.w	r8, [sp, #12]
 8007534:	2330      	movs	r3, #48	@ 0x30
 8007536:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80076d4 <_svfiprintf_r+0x1e4>
 800753a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800753e:	f04f 0901 	mov.w	r9, #1
 8007542:	4623      	mov	r3, r4
 8007544:	469a      	mov	sl, r3
 8007546:	f813 2b01 	ldrb.w	r2, [r3], #1
 800754a:	b10a      	cbz	r2, 8007550 <_svfiprintf_r+0x60>
 800754c:	2a25      	cmp	r2, #37	@ 0x25
 800754e:	d1f9      	bne.n	8007544 <_svfiprintf_r+0x54>
 8007550:	ebba 0b04 	subs.w	fp, sl, r4
 8007554:	d00b      	beq.n	800756e <_svfiprintf_r+0x7e>
 8007556:	465b      	mov	r3, fp
 8007558:	4622      	mov	r2, r4
 800755a:	4629      	mov	r1, r5
 800755c:	4638      	mov	r0, r7
 800755e:	f7ff ff6b 	bl	8007438 <__ssputs_r>
 8007562:	3001      	adds	r0, #1
 8007564:	f000 80a7 	beq.w	80076b6 <_svfiprintf_r+0x1c6>
 8007568:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800756a:	445a      	add	r2, fp
 800756c:	9209      	str	r2, [sp, #36]	@ 0x24
 800756e:	f89a 3000 	ldrb.w	r3, [sl]
 8007572:	2b00      	cmp	r3, #0
 8007574:	f000 809f 	beq.w	80076b6 <_svfiprintf_r+0x1c6>
 8007578:	2300      	movs	r3, #0
 800757a:	f04f 32ff 	mov.w	r2, #4294967295
 800757e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007582:	f10a 0a01 	add.w	sl, sl, #1
 8007586:	9304      	str	r3, [sp, #16]
 8007588:	9307      	str	r3, [sp, #28]
 800758a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800758e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007590:	4654      	mov	r4, sl
 8007592:	2205      	movs	r2, #5
 8007594:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007598:	484e      	ldr	r0, [pc, #312]	@ (80076d4 <_svfiprintf_r+0x1e4>)
 800759a:	f7f8 fe21 	bl	80001e0 <memchr>
 800759e:	9a04      	ldr	r2, [sp, #16]
 80075a0:	b9d8      	cbnz	r0, 80075da <_svfiprintf_r+0xea>
 80075a2:	06d0      	lsls	r0, r2, #27
 80075a4:	bf44      	itt	mi
 80075a6:	2320      	movmi	r3, #32
 80075a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80075ac:	0711      	lsls	r1, r2, #28
 80075ae:	bf44      	itt	mi
 80075b0:	232b      	movmi	r3, #43	@ 0x2b
 80075b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80075b6:	f89a 3000 	ldrb.w	r3, [sl]
 80075ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80075bc:	d015      	beq.n	80075ea <_svfiprintf_r+0xfa>
 80075be:	9a07      	ldr	r2, [sp, #28]
 80075c0:	4654      	mov	r4, sl
 80075c2:	2000      	movs	r0, #0
 80075c4:	f04f 0c0a 	mov.w	ip, #10
 80075c8:	4621      	mov	r1, r4
 80075ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075ce:	3b30      	subs	r3, #48	@ 0x30
 80075d0:	2b09      	cmp	r3, #9
 80075d2:	d94b      	bls.n	800766c <_svfiprintf_r+0x17c>
 80075d4:	b1b0      	cbz	r0, 8007604 <_svfiprintf_r+0x114>
 80075d6:	9207      	str	r2, [sp, #28]
 80075d8:	e014      	b.n	8007604 <_svfiprintf_r+0x114>
 80075da:	eba0 0308 	sub.w	r3, r0, r8
 80075de:	fa09 f303 	lsl.w	r3, r9, r3
 80075e2:	4313      	orrs	r3, r2
 80075e4:	9304      	str	r3, [sp, #16]
 80075e6:	46a2      	mov	sl, r4
 80075e8:	e7d2      	b.n	8007590 <_svfiprintf_r+0xa0>
 80075ea:	9b03      	ldr	r3, [sp, #12]
 80075ec:	1d19      	adds	r1, r3, #4
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	9103      	str	r1, [sp, #12]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	bfbb      	ittet	lt
 80075f6:	425b      	neglt	r3, r3
 80075f8:	f042 0202 	orrlt.w	r2, r2, #2
 80075fc:	9307      	strge	r3, [sp, #28]
 80075fe:	9307      	strlt	r3, [sp, #28]
 8007600:	bfb8      	it	lt
 8007602:	9204      	strlt	r2, [sp, #16]
 8007604:	7823      	ldrb	r3, [r4, #0]
 8007606:	2b2e      	cmp	r3, #46	@ 0x2e
 8007608:	d10a      	bne.n	8007620 <_svfiprintf_r+0x130>
 800760a:	7863      	ldrb	r3, [r4, #1]
 800760c:	2b2a      	cmp	r3, #42	@ 0x2a
 800760e:	d132      	bne.n	8007676 <_svfiprintf_r+0x186>
 8007610:	9b03      	ldr	r3, [sp, #12]
 8007612:	1d1a      	adds	r2, r3, #4
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	9203      	str	r2, [sp, #12]
 8007618:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800761c:	3402      	adds	r4, #2
 800761e:	9305      	str	r3, [sp, #20]
 8007620:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80076e4 <_svfiprintf_r+0x1f4>
 8007624:	7821      	ldrb	r1, [r4, #0]
 8007626:	2203      	movs	r2, #3
 8007628:	4650      	mov	r0, sl
 800762a:	f7f8 fdd9 	bl	80001e0 <memchr>
 800762e:	b138      	cbz	r0, 8007640 <_svfiprintf_r+0x150>
 8007630:	9b04      	ldr	r3, [sp, #16]
 8007632:	eba0 000a 	sub.w	r0, r0, sl
 8007636:	2240      	movs	r2, #64	@ 0x40
 8007638:	4082      	lsls	r2, r0
 800763a:	4313      	orrs	r3, r2
 800763c:	3401      	adds	r4, #1
 800763e:	9304      	str	r3, [sp, #16]
 8007640:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007644:	4824      	ldr	r0, [pc, #144]	@ (80076d8 <_svfiprintf_r+0x1e8>)
 8007646:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800764a:	2206      	movs	r2, #6
 800764c:	f7f8 fdc8 	bl	80001e0 <memchr>
 8007650:	2800      	cmp	r0, #0
 8007652:	d036      	beq.n	80076c2 <_svfiprintf_r+0x1d2>
 8007654:	4b21      	ldr	r3, [pc, #132]	@ (80076dc <_svfiprintf_r+0x1ec>)
 8007656:	bb1b      	cbnz	r3, 80076a0 <_svfiprintf_r+0x1b0>
 8007658:	9b03      	ldr	r3, [sp, #12]
 800765a:	3307      	adds	r3, #7
 800765c:	f023 0307 	bic.w	r3, r3, #7
 8007660:	3308      	adds	r3, #8
 8007662:	9303      	str	r3, [sp, #12]
 8007664:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007666:	4433      	add	r3, r6
 8007668:	9309      	str	r3, [sp, #36]	@ 0x24
 800766a:	e76a      	b.n	8007542 <_svfiprintf_r+0x52>
 800766c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007670:	460c      	mov	r4, r1
 8007672:	2001      	movs	r0, #1
 8007674:	e7a8      	b.n	80075c8 <_svfiprintf_r+0xd8>
 8007676:	2300      	movs	r3, #0
 8007678:	3401      	adds	r4, #1
 800767a:	9305      	str	r3, [sp, #20]
 800767c:	4619      	mov	r1, r3
 800767e:	f04f 0c0a 	mov.w	ip, #10
 8007682:	4620      	mov	r0, r4
 8007684:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007688:	3a30      	subs	r2, #48	@ 0x30
 800768a:	2a09      	cmp	r2, #9
 800768c:	d903      	bls.n	8007696 <_svfiprintf_r+0x1a6>
 800768e:	2b00      	cmp	r3, #0
 8007690:	d0c6      	beq.n	8007620 <_svfiprintf_r+0x130>
 8007692:	9105      	str	r1, [sp, #20]
 8007694:	e7c4      	b.n	8007620 <_svfiprintf_r+0x130>
 8007696:	fb0c 2101 	mla	r1, ip, r1, r2
 800769a:	4604      	mov	r4, r0
 800769c:	2301      	movs	r3, #1
 800769e:	e7f0      	b.n	8007682 <_svfiprintf_r+0x192>
 80076a0:	ab03      	add	r3, sp, #12
 80076a2:	9300      	str	r3, [sp, #0]
 80076a4:	462a      	mov	r2, r5
 80076a6:	4b0e      	ldr	r3, [pc, #56]	@ (80076e0 <_svfiprintf_r+0x1f0>)
 80076a8:	a904      	add	r1, sp, #16
 80076aa:	4638      	mov	r0, r7
 80076ac:	f3af 8000 	nop.w
 80076b0:	1c42      	adds	r2, r0, #1
 80076b2:	4606      	mov	r6, r0
 80076b4:	d1d6      	bne.n	8007664 <_svfiprintf_r+0x174>
 80076b6:	89ab      	ldrh	r3, [r5, #12]
 80076b8:	065b      	lsls	r3, r3, #25
 80076ba:	f53f af2d 	bmi.w	8007518 <_svfiprintf_r+0x28>
 80076be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80076c0:	e72c      	b.n	800751c <_svfiprintf_r+0x2c>
 80076c2:	ab03      	add	r3, sp, #12
 80076c4:	9300      	str	r3, [sp, #0]
 80076c6:	462a      	mov	r2, r5
 80076c8:	4b05      	ldr	r3, [pc, #20]	@ (80076e0 <_svfiprintf_r+0x1f0>)
 80076ca:	a904      	add	r1, sp, #16
 80076cc:	4638      	mov	r0, r7
 80076ce:	f000 f879 	bl	80077c4 <_printf_i>
 80076d2:	e7ed      	b.n	80076b0 <_svfiprintf_r+0x1c0>
 80076d4:	08009a64 	.word	0x08009a64
 80076d8:	08009a6e 	.word	0x08009a6e
 80076dc:	00000000 	.word	0x00000000
 80076e0:	08007439 	.word	0x08007439
 80076e4:	08009a6a 	.word	0x08009a6a

080076e8 <_printf_common>:
 80076e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076ec:	4616      	mov	r6, r2
 80076ee:	4698      	mov	r8, r3
 80076f0:	688a      	ldr	r2, [r1, #8]
 80076f2:	690b      	ldr	r3, [r1, #16]
 80076f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80076f8:	4293      	cmp	r3, r2
 80076fa:	bfb8      	it	lt
 80076fc:	4613      	movlt	r3, r2
 80076fe:	6033      	str	r3, [r6, #0]
 8007700:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007704:	4607      	mov	r7, r0
 8007706:	460c      	mov	r4, r1
 8007708:	b10a      	cbz	r2, 800770e <_printf_common+0x26>
 800770a:	3301      	adds	r3, #1
 800770c:	6033      	str	r3, [r6, #0]
 800770e:	6823      	ldr	r3, [r4, #0]
 8007710:	0699      	lsls	r1, r3, #26
 8007712:	bf42      	ittt	mi
 8007714:	6833      	ldrmi	r3, [r6, #0]
 8007716:	3302      	addmi	r3, #2
 8007718:	6033      	strmi	r3, [r6, #0]
 800771a:	6825      	ldr	r5, [r4, #0]
 800771c:	f015 0506 	ands.w	r5, r5, #6
 8007720:	d106      	bne.n	8007730 <_printf_common+0x48>
 8007722:	f104 0a19 	add.w	sl, r4, #25
 8007726:	68e3      	ldr	r3, [r4, #12]
 8007728:	6832      	ldr	r2, [r6, #0]
 800772a:	1a9b      	subs	r3, r3, r2
 800772c:	42ab      	cmp	r3, r5
 800772e:	dc26      	bgt.n	800777e <_printf_common+0x96>
 8007730:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007734:	6822      	ldr	r2, [r4, #0]
 8007736:	3b00      	subs	r3, #0
 8007738:	bf18      	it	ne
 800773a:	2301      	movne	r3, #1
 800773c:	0692      	lsls	r2, r2, #26
 800773e:	d42b      	bmi.n	8007798 <_printf_common+0xb0>
 8007740:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007744:	4641      	mov	r1, r8
 8007746:	4638      	mov	r0, r7
 8007748:	47c8      	blx	r9
 800774a:	3001      	adds	r0, #1
 800774c:	d01e      	beq.n	800778c <_printf_common+0xa4>
 800774e:	6823      	ldr	r3, [r4, #0]
 8007750:	6922      	ldr	r2, [r4, #16]
 8007752:	f003 0306 	and.w	r3, r3, #6
 8007756:	2b04      	cmp	r3, #4
 8007758:	bf02      	ittt	eq
 800775a:	68e5      	ldreq	r5, [r4, #12]
 800775c:	6833      	ldreq	r3, [r6, #0]
 800775e:	1aed      	subeq	r5, r5, r3
 8007760:	68a3      	ldr	r3, [r4, #8]
 8007762:	bf0c      	ite	eq
 8007764:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007768:	2500      	movne	r5, #0
 800776a:	4293      	cmp	r3, r2
 800776c:	bfc4      	itt	gt
 800776e:	1a9b      	subgt	r3, r3, r2
 8007770:	18ed      	addgt	r5, r5, r3
 8007772:	2600      	movs	r6, #0
 8007774:	341a      	adds	r4, #26
 8007776:	42b5      	cmp	r5, r6
 8007778:	d11a      	bne.n	80077b0 <_printf_common+0xc8>
 800777a:	2000      	movs	r0, #0
 800777c:	e008      	b.n	8007790 <_printf_common+0xa8>
 800777e:	2301      	movs	r3, #1
 8007780:	4652      	mov	r2, sl
 8007782:	4641      	mov	r1, r8
 8007784:	4638      	mov	r0, r7
 8007786:	47c8      	blx	r9
 8007788:	3001      	adds	r0, #1
 800778a:	d103      	bne.n	8007794 <_printf_common+0xac>
 800778c:	f04f 30ff 	mov.w	r0, #4294967295
 8007790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007794:	3501      	adds	r5, #1
 8007796:	e7c6      	b.n	8007726 <_printf_common+0x3e>
 8007798:	18e1      	adds	r1, r4, r3
 800779a:	1c5a      	adds	r2, r3, #1
 800779c:	2030      	movs	r0, #48	@ 0x30
 800779e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80077a2:	4422      	add	r2, r4
 80077a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80077a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80077ac:	3302      	adds	r3, #2
 80077ae:	e7c7      	b.n	8007740 <_printf_common+0x58>
 80077b0:	2301      	movs	r3, #1
 80077b2:	4622      	mov	r2, r4
 80077b4:	4641      	mov	r1, r8
 80077b6:	4638      	mov	r0, r7
 80077b8:	47c8      	blx	r9
 80077ba:	3001      	adds	r0, #1
 80077bc:	d0e6      	beq.n	800778c <_printf_common+0xa4>
 80077be:	3601      	adds	r6, #1
 80077c0:	e7d9      	b.n	8007776 <_printf_common+0x8e>
	...

080077c4 <_printf_i>:
 80077c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077c8:	7e0f      	ldrb	r7, [r1, #24]
 80077ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80077cc:	2f78      	cmp	r7, #120	@ 0x78
 80077ce:	4691      	mov	r9, r2
 80077d0:	4680      	mov	r8, r0
 80077d2:	460c      	mov	r4, r1
 80077d4:	469a      	mov	sl, r3
 80077d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80077da:	d807      	bhi.n	80077ec <_printf_i+0x28>
 80077dc:	2f62      	cmp	r7, #98	@ 0x62
 80077de:	d80a      	bhi.n	80077f6 <_printf_i+0x32>
 80077e0:	2f00      	cmp	r7, #0
 80077e2:	f000 80d2 	beq.w	800798a <_printf_i+0x1c6>
 80077e6:	2f58      	cmp	r7, #88	@ 0x58
 80077e8:	f000 80b9 	beq.w	800795e <_printf_i+0x19a>
 80077ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80077f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80077f4:	e03a      	b.n	800786c <_printf_i+0xa8>
 80077f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80077fa:	2b15      	cmp	r3, #21
 80077fc:	d8f6      	bhi.n	80077ec <_printf_i+0x28>
 80077fe:	a101      	add	r1, pc, #4	@ (adr r1, 8007804 <_printf_i+0x40>)
 8007800:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007804:	0800785d 	.word	0x0800785d
 8007808:	08007871 	.word	0x08007871
 800780c:	080077ed 	.word	0x080077ed
 8007810:	080077ed 	.word	0x080077ed
 8007814:	080077ed 	.word	0x080077ed
 8007818:	080077ed 	.word	0x080077ed
 800781c:	08007871 	.word	0x08007871
 8007820:	080077ed 	.word	0x080077ed
 8007824:	080077ed 	.word	0x080077ed
 8007828:	080077ed 	.word	0x080077ed
 800782c:	080077ed 	.word	0x080077ed
 8007830:	08007971 	.word	0x08007971
 8007834:	0800789b 	.word	0x0800789b
 8007838:	0800792b 	.word	0x0800792b
 800783c:	080077ed 	.word	0x080077ed
 8007840:	080077ed 	.word	0x080077ed
 8007844:	08007993 	.word	0x08007993
 8007848:	080077ed 	.word	0x080077ed
 800784c:	0800789b 	.word	0x0800789b
 8007850:	080077ed 	.word	0x080077ed
 8007854:	080077ed 	.word	0x080077ed
 8007858:	08007933 	.word	0x08007933
 800785c:	6833      	ldr	r3, [r6, #0]
 800785e:	1d1a      	adds	r2, r3, #4
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	6032      	str	r2, [r6, #0]
 8007864:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007868:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800786c:	2301      	movs	r3, #1
 800786e:	e09d      	b.n	80079ac <_printf_i+0x1e8>
 8007870:	6833      	ldr	r3, [r6, #0]
 8007872:	6820      	ldr	r0, [r4, #0]
 8007874:	1d19      	adds	r1, r3, #4
 8007876:	6031      	str	r1, [r6, #0]
 8007878:	0606      	lsls	r6, r0, #24
 800787a:	d501      	bpl.n	8007880 <_printf_i+0xbc>
 800787c:	681d      	ldr	r5, [r3, #0]
 800787e:	e003      	b.n	8007888 <_printf_i+0xc4>
 8007880:	0645      	lsls	r5, r0, #25
 8007882:	d5fb      	bpl.n	800787c <_printf_i+0xb8>
 8007884:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007888:	2d00      	cmp	r5, #0
 800788a:	da03      	bge.n	8007894 <_printf_i+0xd0>
 800788c:	232d      	movs	r3, #45	@ 0x2d
 800788e:	426d      	negs	r5, r5
 8007890:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007894:	4859      	ldr	r0, [pc, #356]	@ (80079fc <_printf_i+0x238>)
 8007896:	230a      	movs	r3, #10
 8007898:	e011      	b.n	80078be <_printf_i+0xfa>
 800789a:	6821      	ldr	r1, [r4, #0]
 800789c:	6833      	ldr	r3, [r6, #0]
 800789e:	0608      	lsls	r0, r1, #24
 80078a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80078a4:	d402      	bmi.n	80078ac <_printf_i+0xe8>
 80078a6:	0649      	lsls	r1, r1, #25
 80078a8:	bf48      	it	mi
 80078aa:	b2ad      	uxthmi	r5, r5
 80078ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80078ae:	4853      	ldr	r0, [pc, #332]	@ (80079fc <_printf_i+0x238>)
 80078b0:	6033      	str	r3, [r6, #0]
 80078b2:	bf14      	ite	ne
 80078b4:	230a      	movne	r3, #10
 80078b6:	2308      	moveq	r3, #8
 80078b8:	2100      	movs	r1, #0
 80078ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80078be:	6866      	ldr	r6, [r4, #4]
 80078c0:	60a6      	str	r6, [r4, #8]
 80078c2:	2e00      	cmp	r6, #0
 80078c4:	bfa2      	ittt	ge
 80078c6:	6821      	ldrge	r1, [r4, #0]
 80078c8:	f021 0104 	bicge.w	r1, r1, #4
 80078cc:	6021      	strge	r1, [r4, #0]
 80078ce:	b90d      	cbnz	r5, 80078d4 <_printf_i+0x110>
 80078d0:	2e00      	cmp	r6, #0
 80078d2:	d04b      	beq.n	800796c <_printf_i+0x1a8>
 80078d4:	4616      	mov	r6, r2
 80078d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80078da:	fb03 5711 	mls	r7, r3, r1, r5
 80078de:	5dc7      	ldrb	r7, [r0, r7]
 80078e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80078e4:	462f      	mov	r7, r5
 80078e6:	42bb      	cmp	r3, r7
 80078e8:	460d      	mov	r5, r1
 80078ea:	d9f4      	bls.n	80078d6 <_printf_i+0x112>
 80078ec:	2b08      	cmp	r3, #8
 80078ee:	d10b      	bne.n	8007908 <_printf_i+0x144>
 80078f0:	6823      	ldr	r3, [r4, #0]
 80078f2:	07df      	lsls	r7, r3, #31
 80078f4:	d508      	bpl.n	8007908 <_printf_i+0x144>
 80078f6:	6923      	ldr	r3, [r4, #16]
 80078f8:	6861      	ldr	r1, [r4, #4]
 80078fa:	4299      	cmp	r1, r3
 80078fc:	bfde      	ittt	le
 80078fe:	2330      	movle	r3, #48	@ 0x30
 8007900:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007904:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007908:	1b92      	subs	r2, r2, r6
 800790a:	6122      	str	r2, [r4, #16]
 800790c:	f8cd a000 	str.w	sl, [sp]
 8007910:	464b      	mov	r3, r9
 8007912:	aa03      	add	r2, sp, #12
 8007914:	4621      	mov	r1, r4
 8007916:	4640      	mov	r0, r8
 8007918:	f7ff fee6 	bl	80076e8 <_printf_common>
 800791c:	3001      	adds	r0, #1
 800791e:	d14a      	bne.n	80079b6 <_printf_i+0x1f2>
 8007920:	f04f 30ff 	mov.w	r0, #4294967295
 8007924:	b004      	add	sp, #16
 8007926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800792a:	6823      	ldr	r3, [r4, #0]
 800792c:	f043 0320 	orr.w	r3, r3, #32
 8007930:	6023      	str	r3, [r4, #0]
 8007932:	4833      	ldr	r0, [pc, #204]	@ (8007a00 <_printf_i+0x23c>)
 8007934:	2778      	movs	r7, #120	@ 0x78
 8007936:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800793a:	6823      	ldr	r3, [r4, #0]
 800793c:	6831      	ldr	r1, [r6, #0]
 800793e:	061f      	lsls	r7, r3, #24
 8007940:	f851 5b04 	ldr.w	r5, [r1], #4
 8007944:	d402      	bmi.n	800794c <_printf_i+0x188>
 8007946:	065f      	lsls	r7, r3, #25
 8007948:	bf48      	it	mi
 800794a:	b2ad      	uxthmi	r5, r5
 800794c:	6031      	str	r1, [r6, #0]
 800794e:	07d9      	lsls	r1, r3, #31
 8007950:	bf44      	itt	mi
 8007952:	f043 0320 	orrmi.w	r3, r3, #32
 8007956:	6023      	strmi	r3, [r4, #0]
 8007958:	b11d      	cbz	r5, 8007962 <_printf_i+0x19e>
 800795a:	2310      	movs	r3, #16
 800795c:	e7ac      	b.n	80078b8 <_printf_i+0xf4>
 800795e:	4827      	ldr	r0, [pc, #156]	@ (80079fc <_printf_i+0x238>)
 8007960:	e7e9      	b.n	8007936 <_printf_i+0x172>
 8007962:	6823      	ldr	r3, [r4, #0]
 8007964:	f023 0320 	bic.w	r3, r3, #32
 8007968:	6023      	str	r3, [r4, #0]
 800796a:	e7f6      	b.n	800795a <_printf_i+0x196>
 800796c:	4616      	mov	r6, r2
 800796e:	e7bd      	b.n	80078ec <_printf_i+0x128>
 8007970:	6833      	ldr	r3, [r6, #0]
 8007972:	6825      	ldr	r5, [r4, #0]
 8007974:	6961      	ldr	r1, [r4, #20]
 8007976:	1d18      	adds	r0, r3, #4
 8007978:	6030      	str	r0, [r6, #0]
 800797a:	062e      	lsls	r6, r5, #24
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	d501      	bpl.n	8007984 <_printf_i+0x1c0>
 8007980:	6019      	str	r1, [r3, #0]
 8007982:	e002      	b.n	800798a <_printf_i+0x1c6>
 8007984:	0668      	lsls	r0, r5, #25
 8007986:	d5fb      	bpl.n	8007980 <_printf_i+0x1bc>
 8007988:	8019      	strh	r1, [r3, #0]
 800798a:	2300      	movs	r3, #0
 800798c:	6123      	str	r3, [r4, #16]
 800798e:	4616      	mov	r6, r2
 8007990:	e7bc      	b.n	800790c <_printf_i+0x148>
 8007992:	6833      	ldr	r3, [r6, #0]
 8007994:	1d1a      	adds	r2, r3, #4
 8007996:	6032      	str	r2, [r6, #0]
 8007998:	681e      	ldr	r6, [r3, #0]
 800799a:	6862      	ldr	r2, [r4, #4]
 800799c:	2100      	movs	r1, #0
 800799e:	4630      	mov	r0, r6
 80079a0:	f7f8 fc1e 	bl	80001e0 <memchr>
 80079a4:	b108      	cbz	r0, 80079aa <_printf_i+0x1e6>
 80079a6:	1b80      	subs	r0, r0, r6
 80079a8:	6060      	str	r0, [r4, #4]
 80079aa:	6863      	ldr	r3, [r4, #4]
 80079ac:	6123      	str	r3, [r4, #16]
 80079ae:	2300      	movs	r3, #0
 80079b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079b4:	e7aa      	b.n	800790c <_printf_i+0x148>
 80079b6:	6923      	ldr	r3, [r4, #16]
 80079b8:	4632      	mov	r2, r6
 80079ba:	4649      	mov	r1, r9
 80079bc:	4640      	mov	r0, r8
 80079be:	47d0      	blx	sl
 80079c0:	3001      	adds	r0, #1
 80079c2:	d0ad      	beq.n	8007920 <_printf_i+0x15c>
 80079c4:	6823      	ldr	r3, [r4, #0]
 80079c6:	079b      	lsls	r3, r3, #30
 80079c8:	d413      	bmi.n	80079f2 <_printf_i+0x22e>
 80079ca:	68e0      	ldr	r0, [r4, #12]
 80079cc:	9b03      	ldr	r3, [sp, #12]
 80079ce:	4298      	cmp	r0, r3
 80079d0:	bfb8      	it	lt
 80079d2:	4618      	movlt	r0, r3
 80079d4:	e7a6      	b.n	8007924 <_printf_i+0x160>
 80079d6:	2301      	movs	r3, #1
 80079d8:	4632      	mov	r2, r6
 80079da:	4649      	mov	r1, r9
 80079dc:	4640      	mov	r0, r8
 80079de:	47d0      	blx	sl
 80079e0:	3001      	adds	r0, #1
 80079e2:	d09d      	beq.n	8007920 <_printf_i+0x15c>
 80079e4:	3501      	adds	r5, #1
 80079e6:	68e3      	ldr	r3, [r4, #12]
 80079e8:	9903      	ldr	r1, [sp, #12]
 80079ea:	1a5b      	subs	r3, r3, r1
 80079ec:	42ab      	cmp	r3, r5
 80079ee:	dcf2      	bgt.n	80079d6 <_printf_i+0x212>
 80079f0:	e7eb      	b.n	80079ca <_printf_i+0x206>
 80079f2:	2500      	movs	r5, #0
 80079f4:	f104 0619 	add.w	r6, r4, #25
 80079f8:	e7f5      	b.n	80079e6 <_printf_i+0x222>
 80079fa:	bf00      	nop
 80079fc:	08009a75 	.word	0x08009a75
 8007a00:	08009a86 	.word	0x08009a86

08007a04 <memmove>:
 8007a04:	4288      	cmp	r0, r1
 8007a06:	b510      	push	{r4, lr}
 8007a08:	eb01 0402 	add.w	r4, r1, r2
 8007a0c:	d902      	bls.n	8007a14 <memmove+0x10>
 8007a0e:	4284      	cmp	r4, r0
 8007a10:	4623      	mov	r3, r4
 8007a12:	d807      	bhi.n	8007a24 <memmove+0x20>
 8007a14:	1e43      	subs	r3, r0, #1
 8007a16:	42a1      	cmp	r1, r4
 8007a18:	d008      	beq.n	8007a2c <memmove+0x28>
 8007a1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a22:	e7f8      	b.n	8007a16 <memmove+0x12>
 8007a24:	4402      	add	r2, r0
 8007a26:	4601      	mov	r1, r0
 8007a28:	428a      	cmp	r2, r1
 8007a2a:	d100      	bne.n	8007a2e <memmove+0x2a>
 8007a2c:	bd10      	pop	{r4, pc}
 8007a2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007a36:	e7f7      	b.n	8007a28 <memmove+0x24>

08007a38 <_sbrk_r>:
 8007a38:	b538      	push	{r3, r4, r5, lr}
 8007a3a:	4d06      	ldr	r5, [pc, #24]	@ (8007a54 <_sbrk_r+0x1c>)
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	4604      	mov	r4, r0
 8007a40:	4608      	mov	r0, r1
 8007a42:	602b      	str	r3, [r5, #0]
 8007a44:	f7fa f828 	bl	8001a98 <_sbrk>
 8007a48:	1c43      	adds	r3, r0, #1
 8007a4a:	d102      	bne.n	8007a52 <_sbrk_r+0x1a>
 8007a4c:	682b      	ldr	r3, [r5, #0]
 8007a4e:	b103      	cbz	r3, 8007a52 <_sbrk_r+0x1a>
 8007a50:	6023      	str	r3, [r4, #0]
 8007a52:	bd38      	pop	{r3, r4, r5, pc}
 8007a54:	2000088c 	.word	0x2000088c

08007a58 <memcpy>:
 8007a58:	440a      	add	r2, r1
 8007a5a:	4291      	cmp	r1, r2
 8007a5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a60:	d100      	bne.n	8007a64 <memcpy+0xc>
 8007a62:	4770      	bx	lr
 8007a64:	b510      	push	{r4, lr}
 8007a66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a6e:	4291      	cmp	r1, r2
 8007a70:	d1f9      	bne.n	8007a66 <memcpy+0xe>
 8007a72:	bd10      	pop	{r4, pc}

08007a74 <_realloc_r>:
 8007a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a78:	4680      	mov	r8, r0
 8007a7a:	4615      	mov	r5, r2
 8007a7c:	460c      	mov	r4, r1
 8007a7e:	b921      	cbnz	r1, 8007a8a <_realloc_r+0x16>
 8007a80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a84:	4611      	mov	r1, r2
 8007a86:	f7ff bc4b 	b.w	8007320 <_malloc_r>
 8007a8a:	b92a      	cbnz	r2, 8007a98 <_realloc_r+0x24>
 8007a8c:	f7ff fbdc 	bl	8007248 <_free_r>
 8007a90:	2400      	movs	r4, #0
 8007a92:	4620      	mov	r0, r4
 8007a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a98:	f000 f81a 	bl	8007ad0 <_malloc_usable_size_r>
 8007a9c:	4285      	cmp	r5, r0
 8007a9e:	4606      	mov	r6, r0
 8007aa0:	d802      	bhi.n	8007aa8 <_realloc_r+0x34>
 8007aa2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007aa6:	d8f4      	bhi.n	8007a92 <_realloc_r+0x1e>
 8007aa8:	4629      	mov	r1, r5
 8007aaa:	4640      	mov	r0, r8
 8007aac:	f7ff fc38 	bl	8007320 <_malloc_r>
 8007ab0:	4607      	mov	r7, r0
 8007ab2:	2800      	cmp	r0, #0
 8007ab4:	d0ec      	beq.n	8007a90 <_realloc_r+0x1c>
 8007ab6:	42b5      	cmp	r5, r6
 8007ab8:	462a      	mov	r2, r5
 8007aba:	4621      	mov	r1, r4
 8007abc:	bf28      	it	cs
 8007abe:	4632      	movcs	r2, r6
 8007ac0:	f7ff ffca 	bl	8007a58 <memcpy>
 8007ac4:	4621      	mov	r1, r4
 8007ac6:	4640      	mov	r0, r8
 8007ac8:	f7ff fbbe 	bl	8007248 <_free_r>
 8007acc:	463c      	mov	r4, r7
 8007ace:	e7e0      	b.n	8007a92 <_realloc_r+0x1e>

08007ad0 <_malloc_usable_size_r>:
 8007ad0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ad4:	1f18      	subs	r0, r3, #4
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	bfbc      	itt	lt
 8007ada:	580b      	ldrlt	r3, [r1, r0]
 8007adc:	18c0      	addlt	r0, r0, r3
 8007ade:	4770      	bx	lr

08007ae0 <pow>:
 8007ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ae2:	ed2d 8b02 	vpush	{d8}
 8007ae6:	eeb0 8a40 	vmov.f32	s16, s0
 8007aea:	eef0 8a60 	vmov.f32	s17, s1
 8007aee:	ec55 4b11 	vmov	r4, r5, d1
 8007af2:	f000 fba5 	bl	8008240 <__ieee754_pow>
 8007af6:	4622      	mov	r2, r4
 8007af8:	462b      	mov	r3, r5
 8007afa:	4620      	mov	r0, r4
 8007afc:	4629      	mov	r1, r5
 8007afe:	ec57 6b10 	vmov	r6, r7, d0
 8007b02:	f7f9 f813 	bl	8000b2c <__aeabi_dcmpun>
 8007b06:	2800      	cmp	r0, #0
 8007b08:	d13b      	bne.n	8007b82 <pow+0xa2>
 8007b0a:	ec51 0b18 	vmov	r0, r1, d8
 8007b0e:	2200      	movs	r2, #0
 8007b10:	2300      	movs	r3, #0
 8007b12:	f7f8 ffd9 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b16:	b1b8      	cbz	r0, 8007b48 <pow+0x68>
 8007b18:	2200      	movs	r2, #0
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	4620      	mov	r0, r4
 8007b1e:	4629      	mov	r1, r5
 8007b20:	f7f8 ffd2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b24:	2800      	cmp	r0, #0
 8007b26:	d146      	bne.n	8007bb6 <pow+0xd6>
 8007b28:	ec45 4b10 	vmov	d0, r4, r5
 8007b2c:	f000 f91c 	bl	8007d68 <finite>
 8007b30:	b338      	cbz	r0, 8007b82 <pow+0xa2>
 8007b32:	2200      	movs	r2, #0
 8007b34:	2300      	movs	r3, #0
 8007b36:	4620      	mov	r0, r4
 8007b38:	4629      	mov	r1, r5
 8007b3a:	f7f8 ffcf 	bl	8000adc <__aeabi_dcmplt>
 8007b3e:	b300      	cbz	r0, 8007b82 <pow+0xa2>
 8007b40:	f7ff fb56 	bl	80071f0 <__errno>
 8007b44:	2322      	movs	r3, #34	@ 0x22
 8007b46:	e01b      	b.n	8007b80 <pow+0xa0>
 8007b48:	ec47 6b10 	vmov	d0, r6, r7
 8007b4c:	f000 f90c 	bl	8007d68 <finite>
 8007b50:	b9e0      	cbnz	r0, 8007b8c <pow+0xac>
 8007b52:	eeb0 0a48 	vmov.f32	s0, s16
 8007b56:	eef0 0a68 	vmov.f32	s1, s17
 8007b5a:	f000 f905 	bl	8007d68 <finite>
 8007b5e:	b1a8      	cbz	r0, 8007b8c <pow+0xac>
 8007b60:	ec45 4b10 	vmov	d0, r4, r5
 8007b64:	f000 f900 	bl	8007d68 <finite>
 8007b68:	b180      	cbz	r0, 8007b8c <pow+0xac>
 8007b6a:	4632      	mov	r2, r6
 8007b6c:	463b      	mov	r3, r7
 8007b6e:	4630      	mov	r0, r6
 8007b70:	4639      	mov	r1, r7
 8007b72:	f7f8 ffdb 	bl	8000b2c <__aeabi_dcmpun>
 8007b76:	2800      	cmp	r0, #0
 8007b78:	d0e2      	beq.n	8007b40 <pow+0x60>
 8007b7a:	f7ff fb39 	bl	80071f0 <__errno>
 8007b7e:	2321      	movs	r3, #33	@ 0x21
 8007b80:	6003      	str	r3, [r0, #0]
 8007b82:	ecbd 8b02 	vpop	{d8}
 8007b86:	ec47 6b10 	vmov	d0, r6, r7
 8007b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	2300      	movs	r3, #0
 8007b90:	4630      	mov	r0, r6
 8007b92:	4639      	mov	r1, r7
 8007b94:	f7f8 ff98 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b98:	2800      	cmp	r0, #0
 8007b9a:	d0f2      	beq.n	8007b82 <pow+0xa2>
 8007b9c:	eeb0 0a48 	vmov.f32	s0, s16
 8007ba0:	eef0 0a68 	vmov.f32	s1, s17
 8007ba4:	f000 f8e0 	bl	8007d68 <finite>
 8007ba8:	2800      	cmp	r0, #0
 8007baa:	d0ea      	beq.n	8007b82 <pow+0xa2>
 8007bac:	ec45 4b10 	vmov	d0, r4, r5
 8007bb0:	f000 f8da 	bl	8007d68 <finite>
 8007bb4:	e7c3      	b.n	8007b3e <pow+0x5e>
 8007bb6:	4f01      	ldr	r7, [pc, #4]	@ (8007bbc <pow+0xdc>)
 8007bb8:	2600      	movs	r6, #0
 8007bba:	e7e2      	b.n	8007b82 <pow+0xa2>
 8007bbc:	3ff00000 	.word	0x3ff00000

08007bc0 <sqrt>:
 8007bc0:	b538      	push	{r3, r4, r5, lr}
 8007bc2:	ed2d 8b02 	vpush	{d8}
 8007bc6:	ec55 4b10 	vmov	r4, r5, d0
 8007bca:	f000 f8d9 	bl	8007d80 <__ieee754_sqrt>
 8007bce:	4622      	mov	r2, r4
 8007bd0:	462b      	mov	r3, r5
 8007bd2:	4620      	mov	r0, r4
 8007bd4:	4629      	mov	r1, r5
 8007bd6:	eeb0 8a40 	vmov.f32	s16, s0
 8007bda:	eef0 8a60 	vmov.f32	s17, s1
 8007bde:	f7f8 ffa5 	bl	8000b2c <__aeabi_dcmpun>
 8007be2:	b990      	cbnz	r0, 8007c0a <sqrt+0x4a>
 8007be4:	2200      	movs	r2, #0
 8007be6:	2300      	movs	r3, #0
 8007be8:	4620      	mov	r0, r4
 8007bea:	4629      	mov	r1, r5
 8007bec:	f7f8 ff76 	bl	8000adc <__aeabi_dcmplt>
 8007bf0:	b158      	cbz	r0, 8007c0a <sqrt+0x4a>
 8007bf2:	f7ff fafd 	bl	80071f0 <__errno>
 8007bf6:	2321      	movs	r3, #33	@ 0x21
 8007bf8:	6003      	str	r3, [r0, #0]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	4610      	mov	r0, r2
 8007c00:	4619      	mov	r1, r3
 8007c02:	f7f8 fe23 	bl	800084c <__aeabi_ddiv>
 8007c06:	ec41 0b18 	vmov	d8, r0, r1
 8007c0a:	eeb0 0a48 	vmov.f32	s0, s16
 8007c0e:	eef0 0a68 	vmov.f32	s1, s17
 8007c12:	ecbd 8b02 	vpop	{d8}
 8007c16:	bd38      	pop	{r3, r4, r5, pc}

08007c18 <cos>:
 8007c18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007c1a:	ec53 2b10 	vmov	r2, r3, d0
 8007c1e:	4826      	ldr	r0, [pc, #152]	@ (8007cb8 <cos+0xa0>)
 8007c20:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007c24:	4281      	cmp	r1, r0
 8007c26:	d806      	bhi.n	8007c36 <cos+0x1e>
 8007c28:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8007cb0 <cos+0x98>
 8007c2c:	b005      	add	sp, #20
 8007c2e:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c32:	f000 b981 	b.w	8007f38 <__kernel_cos>
 8007c36:	4821      	ldr	r0, [pc, #132]	@ (8007cbc <cos+0xa4>)
 8007c38:	4281      	cmp	r1, r0
 8007c3a:	d908      	bls.n	8007c4e <cos+0x36>
 8007c3c:	4610      	mov	r0, r2
 8007c3e:	4619      	mov	r1, r3
 8007c40:	f7f8 fb22 	bl	8000288 <__aeabi_dsub>
 8007c44:	ec41 0b10 	vmov	d0, r0, r1
 8007c48:	b005      	add	sp, #20
 8007c4a:	f85d fb04 	ldr.w	pc, [sp], #4
 8007c4e:	4668      	mov	r0, sp
 8007c50:	f001 f83a 	bl	8008cc8 <__ieee754_rem_pio2>
 8007c54:	f000 0003 	and.w	r0, r0, #3
 8007c58:	2801      	cmp	r0, #1
 8007c5a:	d00b      	beq.n	8007c74 <cos+0x5c>
 8007c5c:	2802      	cmp	r0, #2
 8007c5e:	d015      	beq.n	8007c8c <cos+0x74>
 8007c60:	b9d8      	cbnz	r0, 8007c9a <cos+0x82>
 8007c62:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007c66:	ed9d 0b00 	vldr	d0, [sp]
 8007c6a:	f000 f965 	bl	8007f38 <__kernel_cos>
 8007c6e:	ec51 0b10 	vmov	r0, r1, d0
 8007c72:	e7e7      	b.n	8007c44 <cos+0x2c>
 8007c74:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007c78:	ed9d 0b00 	vldr	d0, [sp]
 8007c7c:	f000 fa24 	bl	80080c8 <__kernel_sin>
 8007c80:	ec53 2b10 	vmov	r2, r3, d0
 8007c84:	4610      	mov	r0, r2
 8007c86:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8007c8a:	e7db      	b.n	8007c44 <cos+0x2c>
 8007c8c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007c90:	ed9d 0b00 	vldr	d0, [sp]
 8007c94:	f000 f950 	bl	8007f38 <__kernel_cos>
 8007c98:	e7f2      	b.n	8007c80 <cos+0x68>
 8007c9a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007c9e:	ed9d 0b00 	vldr	d0, [sp]
 8007ca2:	2001      	movs	r0, #1
 8007ca4:	f000 fa10 	bl	80080c8 <__kernel_sin>
 8007ca8:	e7e1      	b.n	8007c6e <cos+0x56>
 8007caa:	bf00      	nop
 8007cac:	f3af 8000 	nop.w
	...
 8007cb8:	3fe921fb 	.word	0x3fe921fb
 8007cbc:	7fefffff 	.word	0x7fefffff

08007cc0 <sin>:
 8007cc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007cc2:	ec53 2b10 	vmov	r2, r3, d0
 8007cc6:	4826      	ldr	r0, [pc, #152]	@ (8007d60 <sin+0xa0>)
 8007cc8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007ccc:	4281      	cmp	r1, r0
 8007cce:	d807      	bhi.n	8007ce0 <sin+0x20>
 8007cd0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8007d58 <sin+0x98>
 8007cd4:	2000      	movs	r0, #0
 8007cd6:	b005      	add	sp, #20
 8007cd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007cdc:	f000 b9f4 	b.w	80080c8 <__kernel_sin>
 8007ce0:	4820      	ldr	r0, [pc, #128]	@ (8007d64 <sin+0xa4>)
 8007ce2:	4281      	cmp	r1, r0
 8007ce4:	d908      	bls.n	8007cf8 <sin+0x38>
 8007ce6:	4610      	mov	r0, r2
 8007ce8:	4619      	mov	r1, r3
 8007cea:	f7f8 facd 	bl	8000288 <__aeabi_dsub>
 8007cee:	ec41 0b10 	vmov	d0, r0, r1
 8007cf2:	b005      	add	sp, #20
 8007cf4:	f85d fb04 	ldr.w	pc, [sp], #4
 8007cf8:	4668      	mov	r0, sp
 8007cfa:	f000 ffe5 	bl	8008cc8 <__ieee754_rem_pio2>
 8007cfe:	f000 0003 	and.w	r0, r0, #3
 8007d02:	2801      	cmp	r0, #1
 8007d04:	d00c      	beq.n	8007d20 <sin+0x60>
 8007d06:	2802      	cmp	r0, #2
 8007d08:	d011      	beq.n	8007d2e <sin+0x6e>
 8007d0a:	b9e8      	cbnz	r0, 8007d48 <sin+0x88>
 8007d0c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007d10:	ed9d 0b00 	vldr	d0, [sp]
 8007d14:	2001      	movs	r0, #1
 8007d16:	f000 f9d7 	bl	80080c8 <__kernel_sin>
 8007d1a:	ec51 0b10 	vmov	r0, r1, d0
 8007d1e:	e7e6      	b.n	8007cee <sin+0x2e>
 8007d20:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007d24:	ed9d 0b00 	vldr	d0, [sp]
 8007d28:	f000 f906 	bl	8007f38 <__kernel_cos>
 8007d2c:	e7f5      	b.n	8007d1a <sin+0x5a>
 8007d2e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007d32:	ed9d 0b00 	vldr	d0, [sp]
 8007d36:	2001      	movs	r0, #1
 8007d38:	f000 f9c6 	bl	80080c8 <__kernel_sin>
 8007d3c:	ec53 2b10 	vmov	r2, r3, d0
 8007d40:	4610      	mov	r0, r2
 8007d42:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8007d46:	e7d2      	b.n	8007cee <sin+0x2e>
 8007d48:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007d4c:	ed9d 0b00 	vldr	d0, [sp]
 8007d50:	f000 f8f2 	bl	8007f38 <__kernel_cos>
 8007d54:	e7f2      	b.n	8007d3c <sin+0x7c>
 8007d56:	bf00      	nop
	...
 8007d60:	3fe921fb 	.word	0x3fe921fb
 8007d64:	7fefffff 	.word	0x7fefffff

08007d68 <finite>:
 8007d68:	b082      	sub	sp, #8
 8007d6a:	ed8d 0b00 	vstr	d0, [sp]
 8007d6e:	9801      	ldr	r0, [sp, #4]
 8007d70:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8007d74:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8007d78:	0fc0      	lsrs	r0, r0, #31
 8007d7a:	b002      	add	sp, #8
 8007d7c:	4770      	bx	lr
	...

08007d80 <__ieee754_sqrt>:
 8007d80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d84:	4a68      	ldr	r2, [pc, #416]	@ (8007f28 <__ieee754_sqrt+0x1a8>)
 8007d86:	ec55 4b10 	vmov	r4, r5, d0
 8007d8a:	43aa      	bics	r2, r5
 8007d8c:	462b      	mov	r3, r5
 8007d8e:	4621      	mov	r1, r4
 8007d90:	d110      	bne.n	8007db4 <__ieee754_sqrt+0x34>
 8007d92:	4622      	mov	r2, r4
 8007d94:	4620      	mov	r0, r4
 8007d96:	4629      	mov	r1, r5
 8007d98:	f7f8 fc2e 	bl	80005f8 <__aeabi_dmul>
 8007d9c:	4602      	mov	r2, r0
 8007d9e:	460b      	mov	r3, r1
 8007da0:	4620      	mov	r0, r4
 8007da2:	4629      	mov	r1, r5
 8007da4:	f7f8 fa72 	bl	800028c <__adddf3>
 8007da8:	4604      	mov	r4, r0
 8007daa:	460d      	mov	r5, r1
 8007dac:	ec45 4b10 	vmov	d0, r4, r5
 8007db0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007db4:	2d00      	cmp	r5, #0
 8007db6:	dc0e      	bgt.n	8007dd6 <__ieee754_sqrt+0x56>
 8007db8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8007dbc:	4322      	orrs	r2, r4
 8007dbe:	d0f5      	beq.n	8007dac <__ieee754_sqrt+0x2c>
 8007dc0:	b19d      	cbz	r5, 8007dea <__ieee754_sqrt+0x6a>
 8007dc2:	4622      	mov	r2, r4
 8007dc4:	4620      	mov	r0, r4
 8007dc6:	4629      	mov	r1, r5
 8007dc8:	f7f8 fa5e 	bl	8000288 <__aeabi_dsub>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	460b      	mov	r3, r1
 8007dd0:	f7f8 fd3c 	bl	800084c <__aeabi_ddiv>
 8007dd4:	e7e8      	b.n	8007da8 <__ieee754_sqrt+0x28>
 8007dd6:	152a      	asrs	r2, r5, #20
 8007dd8:	d115      	bne.n	8007e06 <__ieee754_sqrt+0x86>
 8007dda:	2000      	movs	r0, #0
 8007ddc:	e009      	b.n	8007df2 <__ieee754_sqrt+0x72>
 8007dde:	0acb      	lsrs	r3, r1, #11
 8007de0:	3a15      	subs	r2, #21
 8007de2:	0549      	lsls	r1, r1, #21
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d0fa      	beq.n	8007dde <__ieee754_sqrt+0x5e>
 8007de8:	e7f7      	b.n	8007dda <__ieee754_sqrt+0x5a>
 8007dea:	462a      	mov	r2, r5
 8007dec:	e7fa      	b.n	8007de4 <__ieee754_sqrt+0x64>
 8007dee:	005b      	lsls	r3, r3, #1
 8007df0:	3001      	adds	r0, #1
 8007df2:	02dc      	lsls	r4, r3, #11
 8007df4:	d5fb      	bpl.n	8007dee <__ieee754_sqrt+0x6e>
 8007df6:	1e44      	subs	r4, r0, #1
 8007df8:	1b12      	subs	r2, r2, r4
 8007dfa:	f1c0 0420 	rsb	r4, r0, #32
 8007dfe:	fa21 f404 	lsr.w	r4, r1, r4
 8007e02:	4323      	orrs	r3, r4
 8007e04:	4081      	lsls	r1, r0
 8007e06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e0a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8007e0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007e12:	07d2      	lsls	r2, r2, #31
 8007e14:	bf5c      	itt	pl
 8007e16:	005b      	lslpl	r3, r3, #1
 8007e18:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8007e1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007e20:	bf58      	it	pl
 8007e22:	0049      	lslpl	r1, r1, #1
 8007e24:	2600      	movs	r6, #0
 8007e26:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8007e2a:	106d      	asrs	r5, r5, #1
 8007e2c:	0049      	lsls	r1, r1, #1
 8007e2e:	2016      	movs	r0, #22
 8007e30:	4632      	mov	r2, r6
 8007e32:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8007e36:	1917      	adds	r7, r2, r4
 8007e38:	429f      	cmp	r7, r3
 8007e3a:	bfde      	ittt	le
 8007e3c:	193a      	addle	r2, r7, r4
 8007e3e:	1bdb      	suble	r3, r3, r7
 8007e40:	1936      	addle	r6, r6, r4
 8007e42:	0fcf      	lsrs	r7, r1, #31
 8007e44:	3801      	subs	r0, #1
 8007e46:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8007e4a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007e4e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007e52:	d1f0      	bne.n	8007e36 <__ieee754_sqrt+0xb6>
 8007e54:	4604      	mov	r4, r0
 8007e56:	2720      	movs	r7, #32
 8007e58:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	eb00 0e0c 	add.w	lr, r0, ip
 8007e62:	db02      	blt.n	8007e6a <__ieee754_sqrt+0xea>
 8007e64:	d113      	bne.n	8007e8e <__ieee754_sqrt+0x10e>
 8007e66:	458e      	cmp	lr, r1
 8007e68:	d811      	bhi.n	8007e8e <__ieee754_sqrt+0x10e>
 8007e6a:	f1be 0f00 	cmp.w	lr, #0
 8007e6e:	eb0e 000c 	add.w	r0, lr, ip
 8007e72:	da42      	bge.n	8007efa <__ieee754_sqrt+0x17a>
 8007e74:	2800      	cmp	r0, #0
 8007e76:	db40      	blt.n	8007efa <__ieee754_sqrt+0x17a>
 8007e78:	f102 0801 	add.w	r8, r2, #1
 8007e7c:	1a9b      	subs	r3, r3, r2
 8007e7e:	458e      	cmp	lr, r1
 8007e80:	bf88      	it	hi
 8007e82:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8007e86:	eba1 010e 	sub.w	r1, r1, lr
 8007e8a:	4464      	add	r4, ip
 8007e8c:	4642      	mov	r2, r8
 8007e8e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8007e92:	3f01      	subs	r7, #1
 8007e94:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8007e98:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007e9c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8007ea0:	d1dc      	bne.n	8007e5c <__ieee754_sqrt+0xdc>
 8007ea2:	4319      	orrs	r1, r3
 8007ea4:	d01b      	beq.n	8007ede <__ieee754_sqrt+0x15e>
 8007ea6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8007f2c <__ieee754_sqrt+0x1ac>
 8007eaa:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8007f30 <__ieee754_sqrt+0x1b0>
 8007eae:	e9da 0100 	ldrd	r0, r1, [sl]
 8007eb2:	e9db 2300 	ldrd	r2, r3, [fp]
 8007eb6:	f7f8 f9e7 	bl	8000288 <__aeabi_dsub>
 8007eba:	e9da 8900 	ldrd	r8, r9, [sl]
 8007ebe:	4602      	mov	r2, r0
 8007ec0:	460b      	mov	r3, r1
 8007ec2:	4640      	mov	r0, r8
 8007ec4:	4649      	mov	r1, r9
 8007ec6:	f7f8 fe13 	bl	8000af0 <__aeabi_dcmple>
 8007eca:	b140      	cbz	r0, 8007ede <__ieee754_sqrt+0x15e>
 8007ecc:	f1b4 3fff 	cmp.w	r4, #4294967295
 8007ed0:	e9da 0100 	ldrd	r0, r1, [sl]
 8007ed4:	e9db 2300 	ldrd	r2, r3, [fp]
 8007ed8:	d111      	bne.n	8007efe <__ieee754_sqrt+0x17e>
 8007eda:	3601      	adds	r6, #1
 8007edc:	463c      	mov	r4, r7
 8007ede:	1072      	asrs	r2, r6, #1
 8007ee0:	0863      	lsrs	r3, r4, #1
 8007ee2:	07f1      	lsls	r1, r6, #31
 8007ee4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8007ee8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8007eec:	bf48      	it	mi
 8007eee:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8007ef2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	e756      	b.n	8007da8 <__ieee754_sqrt+0x28>
 8007efa:	4690      	mov	r8, r2
 8007efc:	e7be      	b.n	8007e7c <__ieee754_sqrt+0xfc>
 8007efe:	f7f8 f9c5 	bl	800028c <__adddf3>
 8007f02:	e9da 8900 	ldrd	r8, r9, [sl]
 8007f06:	4602      	mov	r2, r0
 8007f08:	460b      	mov	r3, r1
 8007f0a:	4640      	mov	r0, r8
 8007f0c:	4649      	mov	r1, r9
 8007f0e:	f7f8 fde5 	bl	8000adc <__aeabi_dcmplt>
 8007f12:	b120      	cbz	r0, 8007f1e <__ieee754_sqrt+0x19e>
 8007f14:	1ca0      	adds	r0, r4, #2
 8007f16:	bf08      	it	eq
 8007f18:	3601      	addeq	r6, #1
 8007f1a:	3402      	adds	r4, #2
 8007f1c:	e7df      	b.n	8007ede <__ieee754_sqrt+0x15e>
 8007f1e:	1c63      	adds	r3, r4, #1
 8007f20:	f023 0401 	bic.w	r4, r3, #1
 8007f24:	e7db      	b.n	8007ede <__ieee754_sqrt+0x15e>
 8007f26:	bf00      	nop
 8007f28:	7ff00000 	.word	0x7ff00000
 8007f2c:	200000b8 	.word	0x200000b8
 8007f30:	200000b0 	.word	0x200000b0
 8007f34:	00000000 	.word	0x00000000

08007f38 <__kernel_cos>:
 8007f38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f3c:	ec57 6b10 	vmov	r6, r7, d0
 8007f40:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8007f44:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8007f48:	ed8d 1b00 	vstr	d1, [sp]
 8007f4c:	d206      	bcs.n	8007f5c <__kernel_cos+0x24>
 8007f4e:	4630      	mov	r0, r6
 8007f50:	4639      	mov	r1, r7
 8007f52:	f7f8 fe01 	bl	8000b58 <__aeabi_d2iz>
 8007f56:	2800      	cmp	r0, #0
 8007f58:	f000 8088 	beq.w	800806c <__kernel_cos+0x134>
 8007f5c:	4632      	mov	r2, r6
 8007f5e:	463b      	mov	r3, r7
 8007f60:	4630      	mov	r0, r6
 8007f62:	4639      	mov	r1, r7
 8007f64:	f7f8 fb48 	bl	80005f8 <__aeabi_dmul>
 8007f68:	4b51      	ldr	r3, [pc, #324]	@ (80080b0 <__kernel_cos+0x178>)
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	4604      	mov	r4, r0
 8007f6e:	460d      	mov	r5, r1
 8007f70:	f7f8 fb42 	bl	80005f8 <__aeabi_dmul>
 8007f74:	a340      	add	r3, pc, #256	@ (adr r3, 8008078 <__kernel_cos+0x140>)
 8007f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f7a:	4682      	mov	sl, r0
 8007f7c:	468b      	mov	fp, r1
 8007f7e:	4620      	mov	r0, r4
 8007f80:	4629      	mov	r1, r5
 8007f82:	f7f8 fb39 	bl	80005f8 <__aeabi_dmul>
 8007f86:	a33e      	add	r3, pc, #248	@ (adr r3, 8008080 <__kernel_cos+0x148>)
 8007f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f8c:	f7f8 f97e 	bl	800028c <__adddf3>
 8007f90:	4622      	mov	r2, r4
 8007f92:	462b      	mov	r3, r5
 8007f94:	f7f8 fb30 	bl	80005f8 <__aeabi_dmul>
 8007f98:	a33b      	add	r3, pc, #236	@ (adr r3, 8008088 <__kernel_cos+0x150>)
 8007f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9e:	f7f8 f973 	bl	8000288 <__aeabi_dsub>
 8007fa2:	4622      	mov	r2, r4
 8007fa4:	462b      	mov	r3, r5
 8007fa6:	f7f8 fb27 	bl	80005f8 <__aeabi_dmul>
 8007faa:	a339      	add	r3, pc, #228	@ (adr r3, 8008090 <__kernel_cos+0x158>)
 8007fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb0:	f7f8 f96c 	bl	800028c <__adddf3>
 8007fb4:	4622      	mov	r2, r4
 8007fb6:	462b      	mov	r3, r5
 8007fb8:	f7f8 fb1e 	bl	80005f8 <__aeabi_dmul>
 8007fbc:	a336      	add	r3, pc, #216	@ (adr r3, 8008098 <__kernel_cos+0x160>)
 8007fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc2:	f7f8 f961 	bl	8000288 <__aeabi_dsub>
 8007fc6:	4622      	mov	r2, r4
 8007fc8:	462b      	mov	r3, r5
 8007fca:	f7f8 fb15 	bl	80005f8 <__aeabi_dmul>
 8007fce:	a334      	add	r3, pc, #208	@ (adr r3, 80080a0 <__kernel_cos+0x168>)
 8007fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd4:	f7f8 f95a 	bl	800028c <__adddf3>
 8007fd8:	4622      	mov	r2, r4
 8007fda:	462b      	mov	r3, r5
 8007fdc:	f7f8 fb0c 	bl	80005f8 <__aeabi_dmul>
 8007fe0:	4622      	mov	r2, r4
 8007fe2:	462b      	mov	r3, r5
 8007fe4:	f7f8 fb08 	bl	80005f8 <__aeabi_dmul>
 8007fe8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007fec:	4604      	mov	r4, r0
 8007fee:	460d      	mov	r5, r1
 8007ff0:	4630      	mov	r0, r6
 8007ff2:	4639      	mov	r1, r7
 8007ff4:	f7f8 fb00 	bl	80005f8 <__aeabi_dmul>
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	4602      	mov	r2, r0
 8007ffc:	4629      	mov	r1, r5
 8007ffe:	4620      	mov	r0, r4
 8008000:	f7f8 f942 	bl	8000288 <__aeabi_dsub>
 8008004:	4b2b      	ldr	r3, [pc, #172]	@ (80080b4 <__kernel_cos+0x17c>)
 8008006:	4598      	cmp	r8, r3
 8008008:	4606      	mov	r6, r0
 800800a:	460f      	mov	r7, r1
 800800c:	d810      	bhi.n	8008030 <__kernel_cos+0xf8>
 800800e:	4602      	mov	r2, r0
 8008010:	460b      	mov	r3, r1
 8008012:	4650      	mov	r0, sl
 8008014:	4659      	mov	r1, fp
 8008016:	f7f8 f937 	bl	8000288 <__aeabi_dsub>
 800801a:	460b      	mov	r3, r1
 800801c:	4926      	ldr	r1, [pc, #152]	@ (80080b8 <__kernel_cos+0x180>)
 800801e:	4602      	mov	r2, r0
 8008020:	2000      	movs	r0, #0
 8008022:	f7f8 f931 	bl	8000288 <__aeabi_dsub>
 8008026:	ec41 0b10 	vmov	d0, r0, r1
 800802a:	b003      	add	sp, #12
 800802c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008030:	4b22      	ldr	r3, [pc, #136]	@ (80080bc <__kernel_cos+0x184>)
 8008032:	4921      	ldr	r1, [pc, #132]	@ (80080b8 <__kernel_cos+0x180>)
 8008034:	4598      	cmp	r8, r3
 8008036:	bf8c      	ite	hi
 8008038:	4d21      	ldrhi	r5, [pc, #132]	@ (80080c0 <__kernel_cos+0x188>)
 800803a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800803e:	2400      	movs	r4, #0
 8008040:	4622      	mov	r2, r4
 8008042:	462b      	mov	r3, r5
 8008044:	2000      	movs	r0, #0
 8008046:	f7f8 f91f 	bl	8000288 <__aeabi_dsub>
 800804a:	4622      	mov	r2, r4
 800804c:	4680      	mov	r8, r0
 800804e:	4689      	mov	r9, r1
 8008050:	462b      	mov	r3, r5
 8008052:	4650      	mov	r0, sl
 8008054:	4659      	mov	r1, fp
 8008056:	f7f8 f917 	bl	8000288 <__aeabi_dsub>
 800805a:	4632      	mov	r2, r6
 800805c:	463b      	mov	r3, r7
 800805e:	f7f8 f913 	bl	8000288 <__aeabi_dsub>
 8008062:	4602      	mov	r2, r0
 8008064:	460b      	mov	r3, r1
 8008066:	4640      	mov	r0, r8
 8008068:	4649      	mov	r1, r9
 800806a:	e7da      	b.n	8008022 <__kernel_cos+0xea>
 800806c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 80080a8 <__kernel_cos+0x170>
 8008070:	e7db      	b.n	800802a <__kernel_cos+0xf2>
 8008072:	bf00      	nop
 8008074:	f3af 8000 	nop.w
 8008078:	be8838d4 	.word	0xbe8838d4
 800807c:	bda8fae9 	.word	0xbda8fae9
 8008080:	bdb4b1c4 	.word	0xbdb4b1c4
 8008084:	3e21ee9e 	.word	0x3e21ee9e
 8008088:	809c52ad 	.word	0x809c52ad
 800808c:	3e927e4f 	.word	0x3e927e4f
 8008090:	19cb1590 	.word	0x19cb1590
 8008094:	3efa01a0 	.word	0x3efa01a0
 8008098:	16c15177 	.word	0x16c15177
 800809c:	3f56c16c 	.word	0x3f56c16c
 80080a0:	5555554c 	.word	0x5555554c
 80080a4:	3fa55555 	.word	0x3fa55555
 80080a8:	00000000 	.word	0x00000000
 80080ac:	3ff00000 	.word	0x3ff00000
 80080b0:	3fe00000 	.word	0x3fe00000
 80080b4:	3fd33332 	.word	0x3fd33332
 80080b8:	3ff00000 	.word	0x3ff00000
 80080bc:	3fe90000 	.word	0x3fe90000
 80080c0:	3fd20000 	.word	0x3fd20000
 80080c4:	00000000 	.word	0x00000000

080080c8 <__kernel_sin>:
 80080c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080cc:	ec55 4b10 	vmov	r4, r5, d0
 80080d0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80080d4:	b085      	sub	sp, #20
 80080d6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 80080da:	ed8d 1b02 	vstr	d1, [sp, #8]
 80080de:	4680      	mov	r8, r0
 80080e0:	d205      	bcs.n	80080ee <__kernel_sin+0x26>
 80080e2:	4620      	mov	r0, r4
 80080e4:	4629      	mov	r1, r5
 80080e6:	f7f8 fd37 	bl	8000b58 <__aeabi_d2iz>
 80080ea:	2800      	cmp	r0, #0
 80080ec:	d052      	beq.n	8008194 <__kernel_sin+0xcc>
 80080ee:	4622      	mov	r2, r4
 80080f0:	462b      	mov	r3, r5
 80080f2:	4620      	mov	r0, r4
 80080f4:	4629      	mov	r1, r5
 80080f6:	f7f8 fa7f 	bl	80005f8 <__aeabi_dmul>
 80080fa:	4682      	mov	sl, r0
 80080fc:	468b      	mov	fp, r1
 80080fe:	4602      	mov	r2, r0
 8008100:	460b      	mov	r3, r1
 8008102:	4620      	mov	r0, r4
 8008104:	4629      	mov	r1, r5
 8008106:	f7f8 fa77 	bl	80005f8 <__aeabi_dmul>
 800810a:	a342      	add	r3, pc, #264	@ (adr r3, 8008214 <__kernel_sin+0x14c>)
 800810c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008110:	e9cd 0100 	strd	r0, r1, [sp]
 8008114:	4650      	mov	r0, sl
 8008116:	4659      	mov	r1, fp
 8008118:	f7f8 fa6e 	bl	80005f8 <__aeabi_dmul>
 800811c:	a33f      	add	r3, pc, #252	@ (adr r3, 800821c <__kernel_sin+0x154>)
 800811e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008122:	f7f8 f8b1 	bl	8000288 <__aeabi_dsub>
 8008126:	4652      	mov	r2, sl
 8008128:	465b      	mov	r3, fp
 800812a:	f7f8 fa65 	bl	80005f8 <__aeabi_dmul>
 800812e:	a33d      	add	r3, pc, #244	@ (adr r3, 8008224 <__kernel_sin+0x15c>)
 8008130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008134:	f7f8 f8aa 	bl	800028c <__adddf3>
 8008138:	4652      	mov	r2, sl
 800813a:	465b      	mov	r3, fp
 800813c:	f7f8 fa5c 	bl	80005f8 <__aeabi_dmul>
 8008140:	a33a      	add	r3, pc, #232	@ (adr r3, 800822c <__kernel_sin+0x164>)
 8008142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008146:	f7f8 f89f 	bl	8000288 <__aeabi_dsub>
 800814a:	4652      	mov	r2, sl
 800814c:	465b      	mov	r3, fp
 800814e:	f7f8 fa53 	bl	80005f8 <__aeabi_dmul>
 8008152:	a338      	add	r3, pc, #224	@ (adr r3, 8008234 <__kernel_sin+0x16c>)
 8008154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008158:	f7f8 f898 	bl	800028c <__adddf3>
 800815c:	4606      	mov	r6, r0
 800815e:	460f      	mov	r7, r1
 8008160:	f1b8 0f00 	cmp.w	r8, #0
 8008164:	d11b      	bne.n	800819e <__kernel_sin+0xd6>
 8008166:	4602      	mov	r2, r0
 8008168:	460b      	mov	r3, r1
 800816a:	4650      	mov	r0, sl
 800816c:	4659      	mov	r1, fp
 800816e:	f7f8 fa43 	bl	80005f8 <__aeabi_dmul>
 8008172:	a325      	add	r3, pc, #148	@ (adr r3, 8008208 <__kernel_sin+0x140>)
 8008174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008178:	f7f8 f886 	bl	8000288 <__aeabi_dsub>
 800817c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008180:	f7f8 fa3a 	bl	80005f8 <__aeabi_dmul>
 8008184:	4602      	mov	r2, r0
 8008186:	460b      	mov	r3, r1
 8008188:	4620      	mov	r0, r4
 800818a:	4629      	mov	r1, r5
 800818c:	f7f8 f87e 	bl	800028c <__adddf3>
 8008190:	4604      	mov	r4, r0
 8008192:	460d      	mov	r5, r1
 8008194:	ec45 4b10 	vmov	d0, r4, r5
 8008198:	b005      	add	sp, #20
 800819a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800819e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081a2:	4b1b      	ldr	r3, [pc, #108]	@ (8008210 <__kernel_sin+0x148>)
 80081a4:	2200      	movs	r2, #0
 80081a6:	f7f8 fa27 	bl	80005f8 <__aeabi_dmul>
 80081aa:	4632      	mov	r2, r6
 80081ac:	4680      	mov	r8, r0
 80081ae:	4689      	mov	r9, r1
 80081b0:	463b      	mov	r3, r7
 80081b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80081b6:	f7f8 fa1f 	bl	80005f8 <__aeabi_dmul>
 80081ba:	4602      	mov	r2, r0
 80081bc:	460b      	mov	r3, r1
 80081be:	4640      	mov	r0, r8
 80081c0:	4649      	mov	r1, r9
 80081c2:	f7f8 f861 	bl	8000288 <__aeabi_dsub>
 80081c6:	4652      	mov	r2, sl
 80081c8:	465b      	mov	r3, fp
 80081ca:	f7f8 fa15 	bl	80005f8 <__aeabi_dmul>
 80081ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80081d2:	f7f8 f859 	bl	8000288 <__aeabi_dsub>
 80081d6:	a30c      	add	r3, pc, #48	@ (adr r3, 8008208 <__kernel_sin+0x140>)
 80081d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081dc:	4606      	mov	r6, r0
 80081de:	460f      	mov	r7, r1
 80081e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80081e4:	f7f8 fa08 	bl	80005f8 <__aeabi_dmul>
 80081e8:	4602      	mov	r2, r0
 80081ea:	460b      	mov	r3, r1
 80081ec:	4630      	mov	r0, r6
 80081ee:	4639      	mov	r1, r7
 80081f0:	f7f8 f84c 	bl	800028c <__adddf3>
 80081f4:	4602      	mov	r2, r0
 80081f6:	460b      	mov	r3, r1
 80081f8:	4620      	mov	r0, r4
 80081fa:	4629      	mov	r1, r5
 80081fc:	f7f8 f844 	bl	8000288 <__aeabi_dsub>
 8008200:	e7c6      	b.n	8008190 <__kernel_sin+0xc8>
 8008202:	bf00      	nop
 8008204:	f3af 8000 	nop.w
 8008208:	55555549 	.word	0x55555549
 800820c:	3fc55555 	.word	0x3fc55555
 8008210:	3fe00000 	.word	0x3fe00000
 8008214:	5acfd57c 	.word	0x5acfd57c
 8008218:	3de5d93a 	.word	0x3de5d93a
 800821c:	8a2b9ceb 	.word	0x8a2b9ceb
 8008220:	3e5ae5e6 	.word	0x3e5ae5e6
 8008224:	57b1fe7d 	.word	0x57b1fe7d
 8008228:	3ec71de3 	.word	0x3ec71de3
 800822c:	19c161d5 	.word	0x19c161d5
 8008230:	3f2a01a0 	.word	0x3f2a01a0
 8008234:	1110f8a6 	.word	0x1110f8a6
 8008238:	3f811111 	.word	0x3f811111
 800823c:	00000000 	.word	0x00000000

08008240 <__ieee754_pow>:
 8008240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008244:	b091      	sub	sp, #68	@ 0x44
 8008246:	ed8d 1b00 	vstr	d1, [sp]
 800824a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800824e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8008252:	ea5a 0001 	orrs.w	r0, sl, r1
 8008256:	ec57 6b10 	vmov	r6, r7, d0
 800825a:	d113      	bne.n	8008284 <__ieee754_pow+0x44>
 800825c:	19b3      	adds	r3, r6, r6
 800825e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8008262:	4152      	adcs	r2, r2
 8008264:	4298      	cmp	r0, r3
 8008266:	4b98      	ldr	r3, [pc, #608]	@ (80084c8 <__ieee754_pow+0x288>)
 8008268:	4193      	sbcs	r3, r2
 800826a:	f080 84ea 	bcs.w	8008c42 <__ieee754_pow+0xa02>
 800826e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008272:	4630      	mov	r0, r6
 8008274:	4639      	mov	r1, r7
 8008276:	f7f8 f809 	bl	800028c <__adddf3>
 800827a:	ec41 0b10 	vmov	d0, r0, r1
 800827e:	b011      	add	sp, #68	@ 0x44
 8008280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008284:	4a91      	ldr	r2, [pc, #580]	@ (80084cc <__ieee754_pow+0x28c>)
 8008286:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800828a:	4590      	cmp	r8, r2
 800828c:	463d      	mov	r5, r7
 800828e:	4633      	mov	r3, r6
 8008290:	d806      	bhi.n	80082a0 <__ieee754_pow+0x60>
 8008292:	d101      	bne.n	8008298 <__ieee754_pow+0x58>
 8008294:	2e00      	cmp	r6, #0
 8008296:	d1ea      	bne.n	800826e <__ieee754_pow+0x2e>
 8008298:	4592      	cmp	sl, r2
 800829a:	d801      	bhi.n	80082a0 <__ieee754_pow+0x60>
 800829c:	d10e      	bne.n	80082bc <__ieee754_pow+0x7c>
 800829e:	b169      	cbz	r1, 80082bc <__ieee754_pow+0x7c>
 80082a0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80082a4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80082a8:	431d      	orrs	r5, r3
 80082aa:	d1e0      	bne.n	800826e <__ieee754_pow+0x2e>
 80082ac:	e9dd 3200 	ldrd	r3, r2, [sp]
 80082b0:	18db      	adds	r3, r3, r3
 80082b2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80082b6:	4152      	adcs	r2, r2
 80082b8:	429d      	cmp	r5, r3
 80082ba:	e7d4      	b.n	8008266 <__ieee754_pow+0x26>
 80082bc:	2d00      	cmp	r5, #0
 80082be:	46c3      	mov	fp, r8
 80082c0:	da3a      	bge.n	8008338 <__ieee754_pow+0xf8>
 80082c2:	4a83      	ldr	r2, [pc, #524]	@ (80084d0 <__ieee754_pow+0x290>)
 80082c4:	4592      	cmp	sl, r2
 80082c6:	d84d      	bhi.n	8008364 <__ieee754_pow+0x124>
 80082c8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80082cc:	4592      	cmp	sl, r2
 80082ce:	f240 84c7 	bls.w	8008c60 <__ieee754_pow+0xa20>
 80082d2:	ea4f 522a 	mov.w	r2, sl, asr #20
 80082d6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80082da:	2a14      	cmp	r2, #20
 80082dc:	dd0f      	ble.n	80082fe <__ieee754_pow+0xbe>
 80082de:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80082e2:	fa21 f402 	lsr.w	r4, r1, r2
 80082e6:	fa04 f202 	lsl.w	r2, r4, r2
 80082ea:	428a      	cmp	r2, r1
 80082ec:	f040 84b8 	bne.w	8008c60 <__ieee754_pow+0xa20>
 80082f0:	f004 0401 	and.w	r4, r4, #1
 80082f4:	f1c4 0402 	rsb	r4, r4, #2
 80082f8:	2900      	cmp	r1, #0
 80082fa:	d158      	bne.n	80083ae <__ieee754_pow+0x16e>
 80082fc:	e00e      	b.n	800831c <__ieee754_pow+0xdc>
 80082fe:	2900      	cmp	r1, #0
 8008300:	d154      	bne.n	80083ac <__ieee754_pow+0x16c>
 8008302:	f1c2 0214 	rsb	r2, r2, #20
 8008306:	fa4a f402 	asr.w	r4, sl, r2
 800830a:	fa04 f202 	lsl.w	r2, r4, r2
 800830e:	4552      	cmp	r2, sl
 8008310:	f040 84a3 	bne.w	8008c5a <__ieee754_pow+0xa1a>
 8008314:	f004 0401 	and.w	r4, r4, #1
 8008318:	f1c4 0402 	rsb	r4, r4, #2
 800831c:	4a6d      	ldr	r2, [pc, #436]	@ (80084d4 <__ieee754_pow+0x294>)
 800831e:	4592      	cmp	sl, r2
 8008320:	d12e      	bne.n	8008380 <__ieee754_pow+0x140>
 8008322:	f1b9 0f00 	cmp.w	r9, #0
 8008326:	f280 8494 	bge.w	8008c52 <__ieee754_pow+0xa12>
 800832a:	496a      	ldr	r1, [pc, #424]	@ (80084d4 <__ieee754_pow+0x294>)
 800832c:	4632      	mov	r2, r6
 800832e:	463b      	mov	r3, r7
 8008330:	2000      	movs	r0, #0
 8008332:	f7f8 fa8b 	bl	800084c <__aeabi_ddiv>
 8008336:	e7a0      	b.n	800827a <__ieee754_pow+0x3a>
 8008338:	2400      	movs	r4, #0
 800833a:	bbc1      	cbnz	r1, 80083ae <__ieee754_pow+0x16e>
 800833c:	4a63      	ldr	r2, [pc, #396]	@ (80084cc <__ieee754_pow+0x28c>)
 800833e:	4592      	cmp	sl, r2
 8008340:	d1ec      	bne.n	800831c <__ieee754_pow+0xdc>
 8008342:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8008346:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800834a:	431a      	orrs	r2, r3
 800834c:	f000 8479 	beq.w	8008c42 <__ieee754_pow+0xa02>
 8008350:	4b61      	ldr	r3, [pc, #388]	@ (80084d8 <__ieee754_pow+0x298>)
 8008352:	4598      	cmp	r8, r3
 8008354:	d908      	bls.n	8008368 <__ieee754_pow+0x128>
 8008356:	f1b9 0f00 	cmp.w	r9, #0
 800835a:	f2c0 8476 	blt.w	8008c4a <__ieee754_pow+0xa0a>
 800835e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008362:	e78a      	b.n	800827a <__ieee754_pow+0x3a>
 8008364:	2402      	movs	r4, #2
 8008366:	e7e8      	b.n	800833a <__ieee754_pow+0xfa>
 8008368:	f1b9 0f00 	cmp.w	r9, #0
 800836c:	f04f 0000 	mov.w	r0, #0
 8008370:	f04f 0100 	mov.w	r1, #0
 8008374:	da81      	bge.n	800827a <__ieee754_pow+0x3a>
 8008376:	e9dd 0300 	ldrd	r0, r3, [sp]
 800837a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800837e:	e77c      	b.n	800827a <__ieee754_pow+0x3a>
 8008380:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8008384:	d106      	bne.n	8008394 <__ieee754_pow+0x154>
 8008386:	4632      	mov	r2, r6
 8008388:	463b      	mov	r3, r7
 800838a:	4630      	mov	r0, r6
 800838c:	4639      	mov	r1, r7
 800838e:	f7f8 f933 	bl	80005f8 <__aeabi_dmul>
 8008392:	e772      	b.n	800827a <__ieee754_pow+0x3a>
 8008394:	4a51      	ldr	r2, [pc, #324]	@ (80084dc <__ieee754_pow+0x29c>)
 8008396:	4591      	cmp	r9, r2
 8008398:	d109      	bne.n	80083ae <__ieee754_pow+0x16e>
 800839a:	2d00      	cmp	r5, #0
 800839c:	db07      	blt.n	80083ae <__ieee754_pow+0x16e>
 800839e:	ec47 6b10 	vmov	d0, r6, r7
 80083a2:	b011      	add	sp, #68	@ 0x44
 80083a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083a8:	f7ff bcea 	b.w	8007d80 <__ieee754_sqrt>
 80083ac:	2400      	movs	r4, #0
 80083ae:	ec47 6b10 	vmov	d0, r6, r7
 80083b2:	9302      	str	r3, [sp, #8]
 80083b4:	f000 fe84 	bl	80090c0 <fabs>
 80083b8:	9b02      	ldr	r3, [sp, #8]
 80083ba:	ec51 0b10 	vmov	r0, r1, d0
 80083be:	bb53      	cbnz	r3, 8008416 <__ieee754_pow+0x1d6>
 80083c0:	4b44      	ldr	r3, [pc, #272]	@ (80084d4 <__ieee754_pow+0x294>)
 80083c2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 80083c6:	429a      	cmp	r2, r3
 80083c8:	d002      	beq.n	80083d0 <__ieee754_pow+0x190>
 80083ca:	f1b8 0f00 	cmp.w	r8, #0
 80083ce:	d122      	bne.n	8008416 <__ieee754_pow+0x1d6>
 80083d0:	f1b9 0f00 	cmp.w	r9, #0
 80083d4:	da05      	bge.n	80083e2 <__ieee754_pow+0x1a2>
 80083d6:	4602      	mov	r2, r0
 80083d8:	460b      	mov	r3, r1
 80083da:	2000      	movs	r0, #0
 80083dc:	493d      	ldr	r1, [pc, #244]	@ (80084d4 <__ieee754_pow+0x294>)
 80083de:	f7f8 fa35 	bl	800084c <__aeabi_ddiv>
 80083e2:	2d00      	cmp	r5, #0
 80083e4:	f6bf af49 	bge.w	800827a <__ieee754_pow+0x3a>
 80083e8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 80083ec:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 80083f0:	ea58 0804 	orrs.w	r8, r8, r4
 80083f4:	d108      	bne.n	8008408 <__ieee754_pow+0x1c8>
 80083f6:	4602      	mov	r2, r0
 80083f8:	460b      	mov	r3, r1
 80083fa:	4610      	mov	r0, r2
 80083fc:	4619      	mov	r1, r3
 80083fe:	f7f7 ff43 	bl	8000288 <__aeabi_dsub>
 8008402:	4602      	mov	r2, r0
 8008404:	460b      	mov	r3, r1
 8008406:	e794      	b.n	8008332 <__ieee754_pow+0xf2>
 8008408:	2c01      	cmp	r4, #1
 800840a:	f47f af36 	bne.w	800827a <__ieee754_pow+0x3a>
 800840e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008412:	4619      	mov	r1, r3
 8008414:	e731      	b.n	800827a <__ieee754_pow+0x3a>
 8008416:	0feb      	lsrs	r3, r5, #31
 8008418:	3b01      	subs	r3, #1
 800841a:	ea53 0204 	orrs.w	r2, r3, r4
 800841e:	d102      	bne.n	8008426 <__ieee754_pow+0x1e6>
 8008420:	4632      	mov	r2, r6
 8008422:	463b      	mov	r3, r7
 8008424:	e7e9      	b.n	80083fa <__ieee754_pow+0x1ba>
 8008426:	3c01      	subs	r4, #1
 8008428:	431c      	orrs	r4, r3
 800842a:	d016      	beq.n	800845a <__ieee754_pow+0x21a>
 800842c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 80084b8 <__ieee754_pow+0x278>
 8008430:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8008434:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008438:	f240 8112 	bls.w	8008660 <__ieee754_pow+0x420>
 800843c:	4b28      	ldr	r3, [pc, #160]	@ (80084e0 <__ieee754_pow+0x2a0>)
 800843e:	459a      	cmp	sl, r3
 8008440:	4b25      	ldr	r3, [pc, #148]	@ (80084d8 <__ieee754_pow+0x298>)
 8008442:	d916      	bls.n	8008472 <__ieee754_pow+0x232>
 8008444:	4598      	cmp	r8, r3
 8008446:	d80b      	bhi.n	8008460 <__ieee754_pow+0x220>
 8008448:	f1b9 0f00 	cmp.w	r9, #0
 800844c:	da0b      	bge.n	8008466 <__ieee754_pow+0x226>
 800844e:	2000      	movs	r0, #0
 8008450:	b011      	add	sp, #68	@ 0x44
 8008452:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008456:	f000 beef 	b.w	8009238 <__math_oflow>
 800845a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 80084c0 <__ieee754_pow+0x280>
 800845e:	e7e7      	b.n	8008430 <__ieee754_pow+0x1f0>
 8008460:	f1b9 0f00 	cmp.w	r9, #0
 8008464:	dcf3      	bgt.n	800844e <__ieee754_pow+0x20e>
 8008466:	2000      	movs	r0, #0
 8008468:	b011      	add	sp, #68	@ 0x44
 800846a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800846e:	f000 bedb 	b.w	8009228 <__math_uflow>
 8008472:	4598      	cmp	r8, r3
 8008474:	d20c      	bcs.n	8008490 <__ieee754_pow+0x250>
 8008476:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800847a:	2200      	movs	r2, #0
 800847c:	2300      	movs	r3, #0
 800847e:	f7f8 fb2d 	bl	8000adc <__aeabi_dcmplt>
 8008482:	3800      	subs	r0, #0
 8008484:	bf18      	it	ne
 8008486:	2001      	movne	r0, #1
 8008488:	f1b9 0f00 	cmp.w	r9, #0
 800848c:	daec      	bge.n	8008468 <__ieee754_pow+0x228>
 800848e:	e7df      	b.n	8008450 <__ieee754_pow+0x210>
 8008490:	4b10      	ldr	r3, [pc, #64]	@ (80084d4 <__ieee754_pow+0x294>)
 8008492:	4598      	cmp	r8, r3
 8008494:	f04f 0200 	mov.w	r2, #0
 8008498:	d924      	bls.n	80084e4 <__ieee754_pow+0x2a4>
 800849a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800849e:	2300      	movs	r3, #0
 80084a0:	f7f8 fb1c 	bl	8000adc <__aeabi_dcmplt>
 80084a4:	3800      	subs	r0, #0
 80084a6:	bf18      	it	ne
 80084a8:	2001      	movne	r0, #1
 80084aa:	f1b9 0f00 	cmp.w	r9, #0
 80084ae:	dccf      	bgt.n	8008450 <__ieee754_pow+0x210>
 80084b0:	e7da      	b.n	8008468 <__ieee754_pow+0x228>
 80084b2:	bf00      	nop
 80084b4:	f3af 8000 	nop.w
 80084b8:	00000000 	.word	0x00000000
 80084bc:	3ff00000 	.word	0x3ff00000
 80084c0:	00000000 	.word	0x00000000
 80084c4:	bff00000 	.word	0xbff00000
 80084c8:	fff00000 	.word	0xfff00000
 80084cc:	7ff00000 	.word	0x7ff00000
 80084d0:	433fffff 	.word	0x433fffff
 80084d4:	3ff00000 	.word	0x3ff00000
 80084d8:	3fefffff 	.word	0x3fefffff
 80084dc:	3fe00000 	.word	0x3fe00000
 80084e0:	43f00000 	.word	0x43f00000
 80084e4:	4b5a      	ldr	r3, [pc, #360]	@ (8008650 <__ieee754_pow+0x410>)
 80084e6:	f7f7 fecf 	bl	8000288 <__aeabi_dsub>
 80084ea:	a351      	add	r3, pc, #324	@ (adr r3, 8008630 <__ieee754_pow+0x3f0>)
 80084ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f0:	4604      	mov	r4, r0
 80084f2:	460d      	mov	r5, r1
 80084f4:	f7f8 f880 	bl	80005f8 <__aeabi_dmul>
 80084f8:	a34f      	add	r3, pc, #316	@ (adr r3, 8008638 <__ieee754_pow+0x3f8>)
 80084fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084fe:	4606      	mov	r6, r0
 8008500:	460f      	mov	r7, r1
 8008502:	4620      	mov	r0, r4
 8008504:	4629      	mov	r1, r5
 8008506:	f7f8 f877 	bl	80005f8 <__aeabi_dmul>
 800850a:	4b52      	ldr	r3, [pc, #328]	@ (8008654 <__ieee754_pow+0x414>)
 800850c:	4682      	mov	sl, r0
 800850e:	468b      	mov	fp, r1
 8008510:	2200      	movs	r2, #0
 8008512:	4620      	mov	r0, r4
 8008514:	4629      	mov	r1, r5
 8008516:	f7f8 f86f 	bl	80005f8 <__aeabi_dmul>
 800851a:	4602      	mov	r2, r0
 800851c:	460b      	mov	r3, r1
 800851e:	a148      	add	r1, pc, #288	@ (adr r1, 8008640 <__ieee754_pow+0x400>)
 8008520:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008524:	f7f7 feb0 	bl	8000288 <__aeabi_dsub>
 8008528:	4622      	mov	r2, r4
 800852a:	462b      	mov	r3, r5
 800852c:	f7f8 f864 	bl	80005f8 <__aeabi_dmul>
 8008530:	4602      	mov	r2, r0
 8008532:	460b      	mov	r3, r1
 8008534:	2000      	movs	r0, #0
 8008536:	4948      	ldr	r1, [pc, #288]	@ (8008658 <__ieee754_pow+0x418>)
 8008538:	f7f7 fea6 	bl	8000288 <__aeabi_dsub>
 800853c:	4622      	mov	r2, r4
 800853e:	4680      	mov	r8, r0
 8008540:	4689      	mov	r9, r1
 8008542:	462b      	mov	r3, r5
 8008544:	4620      	mov	r0, r4
 8008546:	4629      	mov	r1, r5
 8008548:	f7f8 f856 	bl	80005f8 <__aeabi_dmul>
 800854c:	4602      	mov	r2, r0
 800854e:	460b      	mov	r3, r1
 8008550:	4640      	mov	r0, r8
 8008552:	4649      	mov	r1, r9
 8008554:	f7f8 f850 	bl	80005f8 <__aeabi_dmul>
 8008558:	a33b      	add	r3, pc, #236	@ (adr r3, 8008648 <__ieee754_pow+0x408>)
 800855a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800855e:	f7f8 f84b 	bl	80005f8 <__aeabi_dmul>
 8008562:	4602      	mov	r2, r0
 8008564:	460b      	mov	r3, r1
 8008566:	4650      	mov	r0, sl
 8008568:	4659      	mov	r1, fp
 800856a:	f7f7 fe8d 	bl	8000288 <__aeabi_dsub>
 800856e:	4602      	mov	r2, r0
 8008570:	460b      	mov	r3, r1
 8008572:	4680      	mov	r8, r0
 8008574:	4689      	mov	r9, r1
 8008576:	4630      	mov	r0, r6
 8008578:	4639      	mov	r1, r7
 800857a:	f7f7 fe87 	bl	800028c <__adddf3>
 800857e:	2400      	movs	r4, #0
 8008580:	4632      	mov	r2, r6
 8008582:	463b      	mov	r3, r7
 8008584:	4620      	mov	r0, r4
 8008586:	460d      	mov	r5, r1
 8008588:	f7f7 fe7e 	bl	8000288 <__aeabi_dsub>
 800858c:	4602      	mov	r2, r0
 800858e:	460b      	mov	r3, r1
 8008590:	4640      	mov	r0, r8
 8008592:	4649      	mov	r1, r9
 8008594:	f7f7 fe78 	bl	8000288 <__aeabi_dsub>
 8008598:	e9dd 2300 	ldrd	r2, r3, [sp]
 800859c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80085a0:	2300      	movs	r3, #0
 80085a2:	9304      	str	r3, [sp, #16]
 80085a4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80085a8:	4606      	mov	r6, r0
 80085aa:	460f      	mov	r7, r1
 80085ac:	4652      	mov	r2, sl
 80085ae:	465b      	mov	r3, fp
 80085b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80085b4:	f7f7 fe68 	bl	8000288 <__aeabi_dsub>
 80085b8:	4622      	mov	r2, r4
 80085ba:	462b      	mov	r3, r5
 80085bc:	f7f8 f81c 	bl	80005f8 <__aeabi_dmul>
 80085c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80085c4:	4680      	mov	r8, r0
 80085c6:	4689      	mov	r9, r1
 80085c8:	4630      	mov	r0, r6
 80085ca:	4639      	mov	r1, r7
 80085cc:	f7f8 f814 	bl	80005f8 <__aeabi_dmul>
 80085d0:	4602      	mov	r2, r0
 80085d2:	460b      	mov	r3, r1
 80085d4:	4640      	mov	r0, r8
 80085d6:	4649      	mov	r1, r9
 80085d8:	f7f7 fe58 	bl	800028c <__adddf3>
 80085dc:	4652      	mov	r2, sl
 80085de:	465b      	mov	r3, fp
 80085e0:	4606      	mov	r6, r0
 80085e2:	460f      	mov	r7, r1
 80085e4:	4620      	mov	r0, r4
 80085e6:	4629      	mov	r1, r5
 80085e8:	f7f8 f806 	bl	80005f8 <__aeabi_dmul>
 80085ec:	460b      	mov	r3, r1
 80085ee:	4602      	mov	r2, r0
 80085f0:	4680      	mov	r8, r0
 80085f2:	4689      	mov	r9, r1
 80085f4:	4630      	mov	r0, r6
 80085f6:	4639      	mov	r1, r7
 80085f8:	f7f7 fe48 	bl	800028c <__adddf3>
 80085fc:	4b17      	ldr	r3, [pc, #92]	@ (800865c <__ieee754_pow+0x41c>)
 80085fe:	4299      	cmp	r1, r3
 8008600:	4604      	mov	r4, r0
 8008602:	460d      	mov	r5, r1
 8008604:	468a      	mov	sl, r1
 8008606:	468b      	mov	fp, r1
 8008608:	f340 82ef 	ble.w	8008bea <__ieee754_pow+0x9aa>
 800860c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8008610:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8008614:	4303      	orrs	r3, r0
 8008616:	f000 81e8 	beq.w	80089ea <__ieee754_pow+0x7aa>
 800861a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800861e:	2200      	movs	r2, #0
 8008620:	2300      	movs	r3, #0
 8008622:	f7f8 fa5b 	bl	8000adc <__aeabi_dcmplt>
 8008626:	3800      	subs	r0, #0
 8008628:	bf18      	it	ne
 800862a:	2001      	movne	r0, #1
 800862c:	e710      	b.n	8008450 <__ieee754_pow+0x210>
 800862e:	bf00      	nop
 8008630:	60000000 	.word	0x60000000
 8008634:	3ff71547 	.word	0x3ff71547
 8008638:	f85ddf44 	.word	0xf85ddf44
 800863c:	3e54ae0b 	.word	0x3e54ae0b
 8008640:	55555555 	.word	0x55555555
 8008644:	3fd55555 	.word	0x3fd55555
 8008648:	652b82fe 	.word	0x652b82fe
 800864c:	3ff71547 	.word	0x3ff71547
 8008650:	3ff00000 	.word	0x3ff00000
 8008654:	3fd00000 	.word	0x3fd00000
 8008658:	3fe00000 	.word	0x3fe00000
 800865c:	408fffff 	.word	0x408fffff
 8008660:	4bd5      	ldr	r3, [pc, #852]	@ (80089b8 <__ieee754_pow+0x778>)
 8008662:	402b      	ands	r3, r5
 8008664:	2200      	movs	r2, #0
 8008666:	b92b      	cbnz	r3, 8008674 <__ieee754_pow+0x434>
 8008668:	4bd4      	ldr	r3, [pc, #848]	@ (80089bc <__ieee754_pow+0x77c>)
 800866a:	f7f7 ffc5 	bl	80005f8 <__aeabi_dmul>
 800866e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8008672:	468b      	mov	fp, r1
 8008674:	ea4f 532b 	mov.w	r3, fp, asr #20
 8008678:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800867c:	4413      	add	r3, r2
 800867e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008680:	4bcf      	ldr	r3, [pc, #828]	@ (80089c0 <__ieee754_pow+0x780>)
 8008682:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8008686:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800868a:	459b      	cmp	fp, r3
 800868c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008690:	dd08      	ble.n	80086a4 <__ieee754_pow+0x464>
 8008692:	4bcc      	ldr	r3, [pc, #816]	@ (80089c4 <__ieee754_pow+0x784>)
 8008694:	459b      	cmp	fp, r3
 8008696:	f340 81a5 	ble.w	80089e4 <__ieee754_pow+0x7a4>
 800869a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800869c:	3301      	adds	r3, #1
 800869e:	930a      	str	r3, [sp, #40]	@ 0x28
 80086a0:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80086a4:	f04f 0a00 	mov.w	sl, #0
 80086a8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80086ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 80086ae:	4bc6      	ldr	r3, [pc, #792]	@ (80089c8 <__ieee754_pow+0x788>)
 80086b0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80086b4:	ed93 7b00 	vldr	d7, [r3]
 80086b8:	4629      	mov	r1, r5
 80086ba:	ec53 2b17 	vmov	r2, r3, d7
 80086be:	ed8d 7b06 	vstr	d7, [sp, #24]
 80086c2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80086c6:	f7f7 fddf 	bl	8000288 <__aeabi_dsub>
 80086ca:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80086ce:	4606      	mov	r6, r0
 80086d0:	460f      	mov	r7, r1
 80086d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80086d6:	f7f7 fdd9 	bl	800028c <__adddf3>
 80086da:	4602      	mov	r2, r0
 80086dc:	460b      	mov	r3, r1
 80086de:	2000      	movs	r0, #0
 80086e0:	49ba      	ldr	r1, [pc, #744]	@ (80089cc <__ieee754_pow+0x78c>)
 80086e2:	f7f8 f8b3 	bl	800084c <__aeabi_ddiv>
 80086e6:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80086ea:	4602      	mov	r2, r0
 80086ec:	460b      	mov	r3, r1
 80086ee:	4630      	mov	r0, r6
 80086f0:	4639      	mov	r1, r7
 80086f2:	f7f7 ff81 	bl	80005f8 <__aeabi_dmul>
 80086f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80086fa:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 80086fe:	106d      	asrs	r5, r5, #1
 8008700:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8008704:	f04f 0b00 	mov.w	fp, #0
 8008708:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800870c:	4661      	mov	r1, ip
 800870e:	2200      	movs	r2, #0
 8008710:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8008714:	4658      	mov	r0, fp
 8008716:	46e1      	mov	r9, ip
 8008718:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800871c:	4614      	mov	r4, r2
 800871e:	461d      	mov	r5, r3
 8008720:	f7f7 ff6a 	bl	80005f8 <__aeabi_dmul>
 8008724:	4602      	mov	r2, r0
 8008726:	460b      	mov	r3, r1
 8008728:	4630      	mov	r0, r6
 800872a:	4639      	mov	r1, r7
 800872c:	f7f7 fdac 	bl	8000288 <__aeabi_dsub>
 8008730:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008734:	4606      	mov	r6, r0
 8008736:	460f      	mov	r7, r1
 8008738:	4620      	mov	r0, r4
 800873a:	4629      	mov	r1, r5
 800873c:	f7f7 fda4 	bl	8000288 <__aeabi_dsub>
 8008740:	4602      	mov	r2, r0
 8008742:	460b      	mov	r3, r1
 8008744:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008748:	f7f7 fd9e 	bl	8000288 <__aeabi_dsub>
 800874c:	465a      	mov	r2, fp
 800874e:	464b      	mov	r3, r9
 8008750:	f7f7 ff52 	bl	80005f8 <__aeabi_dmul>
 8008754:	4602      	mov	r2, r0
 8008756:	460b      	mov	r3, r1
 8008758:	4630      	mov	r0, r6
 800875a:	4639      	mov	r1, r7
 800875c:	f7f7 fd94 	bl	8000288 <__aeabi_dsub>
 8008760:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008764:	f7f7 ff48 	bl	80005f8 <__aeabi_dmul>
 8008768:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800876c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008770:	4610      	mov	r0, r2
 8008772:	4619      	mov	r1, r3
 8008774:	f7f7 ff40 	bl	80005f8 <__aeabi_dmul>
 8008778:	a37d      	add	r3, pc, #500	@ (adr r3, 8008970 <__ieee754_pow+0x730>)
 800877a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800877e:	4604      	mov	r4, r0
 8008780:	460d      	mov	r5, r1
 8008782:	f7f7 ff39 	bl	80005f8 <__aeabi_dmul>
 8008786:	a37c      	add	r3, pc, #496	@ (adr r3, 8008978 <__ieee754_pow+0x738>)
 8008788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800878c:	f7f7 fd7e 	bl	800028c <__adddf3>
 8008790:	4622      	mov	r2, r4
 8008792:	462b      	mov	r3, r5
 8008794:	f7f7 ff30 	bl	80005f8 <__aeabi_dmul>
 8008798:	a379      	add	r3, pc, #484	@ (adr r3, 8008980 <__ieee754_pow+0x740>)
 800879a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800879e:	f7f7 fd75 	bl	800028c <__adddf3>
 80087a2:	4622      	mov	r2, r4
 80087a4:	462b      	mov	r3, r5
 80087a6:	f7f7 ff27 	bl	80005f8 <__aeabi_dmul>
 80087aa:	a377      	add	r3, pc, #476	@ (adr r3, 8008988 <__ieee754_pow+0x748>)
 80087ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b0:	f7f7 fd6c 	bl	800028c <__adddf3>
 80087b4:	4622      	mov	r2, r4
 80087b6:	462b      	mov	r3, r5
 80087b8:	f7f7 ff1e 	bl	80005f8 <__aeabi_dmul>
 80087bc:	a374      	add	r3, pc, #464	@ (adr r3, 8008990 <__ieee754_pow+0x750>)
 80087be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c2:	f7f7 fd63 	bl	800028c <__adddf3>
 80087c6:	4622      	mov	r2, r4
 80087c8:	462b      	mov	r3, r5
 80087ca:	f7f7 ff15 	bl	80005f8 <__aeabi_dmul>
 80087ce:	a372      	add	r3, pc, #456	@ (adr r3, 8008998 <__ieee754_pow+0x758>)
 80087d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d4:	f7f7 fd5a 	bl	800028c <__adddf3>
 80087d8:	4622      	mov	r2, r4
 80087da:	4606      	mov	r6, r0
 80087dc:	460f      	mov	r7, r1
 80087de:	462b      	mov	r3, r5
 80087e0:	4620      	mov	r0, r4
 80087e2:	4629      	mov	r1, r5
 80087e4:	f7f7 ff08 	bl	80005f8 <__aeabi_dmul>
 80087e8:	4602      	mov	r2, r0
 80087ea:	460b      	mov	r3, r1
 80087ec:	4630      	mov	r0, r6
 80087ee:	4639      	mov	r1, r7
 80087f0:	f7f7 ff02 	bl	80005f8 <__aeabi_dmul>
 80087f4:	465a      	mov	r2, fp
 80087f6:	4604      	mov	r4, r0
 80087f8:	460d      	mov	r5, r1
 80087fa:	464b      	mov	r3, r9
 80087fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008800:	f7f7 fd44 	bl	800028c <__adddf3>
 8008804:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008808:	f7f7 fef6 	bl	80005f8 <__aeabi_dmul>
 800880c:	4622      	mov	r2, r4
 800880e:	462b      	mov	r3, r5
 8008810:	f7f7 fd3c 	bl	800028c <__adddf3>
 8008814:	465a      	mov	r2, fp
 8008816:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800881a:	464b      	mov	r3, r9
 800881c:	4658      	mov	r0, fp
 800881e:	4649      	mov	r1, r9
 8008820:	f7f7 feea 	bl	80005f8 <__aeabi_dmul>
 8008824:	4b6a      	ldr	r3, [pc, #424]	@ (80089d0 <__ieee754_pow+0x790>)
 8008826:	2200      	movs	r2, #0
 8008828:	4606      	mov	r6, r0
 800882a:	460f      	mov	r7, r1
 800882c:	f7f7 fd2e 	bl	800028c <__adddf3>
 8008830:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008834:	f7f7 fd2a 	bl	800028c <__adddf3>
 8008838:	46d8      	mov	r8, fp
 800883a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800883e:	460d      	mov	r5, r1
 8008840:	465a      	mov	r2, fp
 8008842:	460b      	mov	r3, r1
 8008844:	4640      	mov	r0, r8
 8008846:	4649      	mov	r1, r9
 8008848:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800884c:	f7f7 fed4 	bl	80005f8 <__aeabi_dmul>
 8008850:	465c      	mov	r4, fp
 8008852:	4680      	mov	r8, r0
 8008854:	4689      	mov	r9, r1
 8008856:	4b5e      	ldr	r3, [pc, #376]	@ (80089d0 <__ieee754_pow+0x790>)
 8008858:	2200      	movs	r2, #0
 800885a:	4620      	mov	r0, r4
 800885c:	4629      	mov	r1, r5
 800885e:	f7f7 fd13 	bl	8000288 <__aeabi_dsub>
 8008862:	4632      	mov	r2, r6
 8008864:	463b      	mov	r3, r7
 8008866:	f7f7 fd0f 	bl	8000288 <__aeabi_dsub>
 800886a:	4602      	mov	r2, r0
 800886c:	460b      	mov	r3, r1
 800886e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008872:	f7f7 fd09 	bl	8000288 <__aeabi_dsub>
 8008876:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800887a:	f7f7 febd 	bl	80005f8 <__aeabi_dmul>
 800887e:	4622      	mov	r2, r4
 8008880:	4606      	mov	r6, r0
 8008882:	460f      	mov	r7, r1
 8008884:	462b      	mov	r3, r5
 8008886:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800888a:	f7f7 feb5 	bl	80005f8 <__aeabi_dmul>
 800888e:	4602      	mov	r2, r0
 8008890:	460b      	mov	r3, r1
 8008892:	4630      	mov	r0, r6
 8008894:	4639      	mov	r1, r7
 8008896:	f7f7 fcf9 	bl	800028c <__adddf3>
 800889a:	4606      	mov	r6, r0
 800889c:	460f      	mov	r7, r1
 800889e:	4602      	mov	r2, r0
 80088a0:	460b      	mov	r3, r1
 80088a2:	4640      	mov	r0, r8
 80088a4:	4649      	mov	r1, r9
 80088a6:	f7f7 fcf1 	bl	800028c <__adddf3>
 80088aa:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 80088ae:	a33c      	add	r3, pc, #240	@ (adr r3, 80089a0 <__ieee754_pow+0x760>)
 80088b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b4:	4658      	mov	r0, fp
 80088b6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80088ba:	460d      	mov	r5, r1
 80088bc:	f7f7 fe9c 	bl	80005f8 <__aeabi_dmul>
 80088c0:	465c      	mov	r4, fp
 80088c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80088c6:	4642      	mov	r2, r8
 80088c8:	464b      	mov	r3, r9
 80088ca:	4620      	mov	r0, r4
 80088cc:	4629      	mov	r1, r5
 80088ce:	f7f7 fcdb 	bl	8000288 <__aeabi_dsub>
 80088d2:	4602      	mov	r2, r0
 80088d4:	460b      	mov	r3, r1
 80088d6:	4630      	mov	r0, r6
 80088d8:	4639      	mov	r1, r7
 80088da:	f7f7 fcd5 	bl	8000288 <__aeabi_dsub>
 80088de:	a332      	add	r3, pc, #200	@ (adr r3, 80089a8 <__ieee754_pow+0x768>)
 80088e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088e4:	f7f7 fe88 	bl	80005f8 <__aeabi_dmul>
 80088e8:	a331      	add	r3, pc, #196	@ (adr r3, 80089b0 <__ieee754_pow+0x770>)
 80088ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ee:	4606      	mov	r6, r0
 80088f0:	460f      	mov	r7, r1
 80088f2:	4620      	mov	r0, r4
 80088f4:	4629      	mov	r1, r5
 80088f6:	f7f7 fe7f 	bl	80005f8 <__aeabi_dmul>
 80088fa:	4602      	mov	r2, r0
 80088fc:	460b      	mov	r3, r1
 80088fe:	4630      	mov	r0, r6
 8008900:	4639      	mov	r1, r7
 8008902:	f7f7 fcc3 	bl	800028c <__adddf3>
 8008906:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008908:	4b32      	ldr	r3, [pc, #200]	@ (80089d4 <__ieee754_pow+0x794>)
 800890a:	4413      	add	r3, r2
 800890c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008910:	f7f7 fcbc 	bl	800028c <__adddf3>
 8008914:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008918:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800891a:	f7f7 fe03 	bl	8000524 <__aeabi_i2d>
 800891e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008920:	4b2d      	ldr	r3, [pc, #180]	@ (80089d8 <__ieee754_pow+0x798>)
 8008922:	4413      	add	r3, r2
 8008924:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008928:	4606      	mov	r6, r0
 800892a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800892e:	460f      	mov	r7, r1
 8008930:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008934:	f7f7 fcaa 	bl	800028c <__adddf3>
 8008938:	4642      	mov	r2, r8
 800893a:	464b      	mov	r3, r9
 800893c:	f7f7 fca6 	bl	800028c <__adddf3>
 8008940:	4632      	mov	r2, r6
 8008942:	463b      	mov	r3, r7
 8008944:	f7f7 fca2 	bl	800028c <__adddf3>
 8008948:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800894c:	4632      	mov	r2, r6
 800894e:	463b      	mov	r3, r7
 8008950:	4658      	mov	r0, fp
 8008952:	460d      	mov	r5, r1
 8008954:	f7f7 fc98 	bl	8000288 <__aeabi_dsub>
 8008958:	4642      	mov	r2, r8
 800895a:	464b      	mov	r3, r9
 800895c:	f7f7 fc94 	bl	8000288 <__aeabi_dsub>
 8008960:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008964:	f7f7 fc90 	bl	8000288 <__aeabi_dsub>
 8008968:	465c      	mov	r4, fp
 800896a:	4602      	mov	r2, r0
 800896c:	e036      	b.n	80089dc <__ieee754_pow+0x79c>
 800896e:	bf00      	nop
 8008970:	4a454eef 	.word	0x4a454eef
 8008974:	3fca7e28 	.word	0x3fca7e28
 8008978:	93c9db65 	.word	0x93c9db65
 800897c:	3fcd864a 	.word	0x3fcd864a
 8008980:	a91d4101 	.word	0xa91d4101
 8008984:	3fd17460 	.word	0x3fd17460
 8008988:	518f264d 	.word	0x518f264d
 800898c:	3fd55555 	.word	0x3fd55555
 8008990:	db6fabff 	.word	0xdb6fabff
 8008994:	3fdb6db6 	.word	0x3fdb6db6
 8008998:	33333303 	.word	0x33333303
 800899c:	3fe33333 	.word	0x3fe33333
 80089a0:	e0000000 	.word	0xe0000000
 80089a4:	3feec709 	.word	0x3feec709
 80089a8:	dc3a03fd 	.word	0xdc3a03fd
 80089ac:	3feec709 	.word	0x3feec709
 80089b0:	145b01f5 	.word	0x145b01f5
 80089b4:	be3e2fe0 	.word	0xbe3e2fe0
 80089b8:	7ff00000 	.word	0x7ff00000
 80089bc:	43400000 	.word	0x43400000
 80089c0:	0003988e 	.word	0x0003988e
 80089c4:	000bb679 	.word	0x000bb679
 80089c8:	08009ab8 	.word	0x08009ab8
 80089cc:	3ff00000 	.word	0x3ff00000
 80089d0:	40080000 	.word	0x40080000
 80089d4:	08009a98 	.word	0x08009a98
 80089d8:	08009aa8 	.word	0x08009aa8
 80089dc:	460b      	mov	r3, r1
 80089de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80089e2:	e5d7      	b.n	8008594 <__ieee754_pow+0x354>
 80089e4:	f04f 0a01 	mov.w	sl, #1
 80089e8:	e65e      	b.n	80086a8 <__ieee754_pow+0x468>
 80089ea:	a3b4      	add	r3, pc, #720	@ (adr r3, 8008cbc <__ieee754_pow+0xa7c>)
 80089ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f0:	4630      	mov	r0, r6
 80089f2:	4639      	mov	r1, r7
 80089f4:	f7f7 fc4a 	bl	800028c <__adddf3>
 80089f8:	4642      	mov	r2, r8
 80089fa:	e9cd 0100 	strd	r0, r1, [sp]
 80089fe:	464b      	mov	r3, r9
 8008a00:	4620      	mov	r0, r4
 8008a02:	4629      	mov	r1, r5
 8008a04:	f7f7 fc40 	bl	8000288 <__aeabi_dsub>
 8008a08:	4602      	mov	r2, r0
 8008a0a:	460b      	mov	r3, r1
 8008a0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a10:	f7f8 f882 	bl	8000b18 <__aeabi_dcmpgt>
 8008a14:	2800      	cmp	r0, #0
 8008a16:	f47f ae00 	bne.w	800861a <__ieee754_pow+0x3da>
 8008a1a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8008a1e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8008a22:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8008a26:	fa43 fa0a 	asr.w	sl, r3, sl
 8008a2a:	44da      	add	sl, fp
 8008a2c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8008a30:	489d      	ldr	r0, [pc, #628]	@ (8008ca8 <__ieee754_pow+0xa68>)
 8008a32:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8008a36:	4108      	asrs	r0, r1
 8008a38:	ea00 030a 	and.w	r3, r0, sl
 8008a3c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8008a40:	f1c1 0114 	rsb	r1, r1, #20
 8008a44:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8008a48:	fa4a fa01 	asr.w	sl, sl, r1
 8008a4c:	f1bb 0f00 	cmp.w	fp, #0
 8008a50:	4640      	mov	r0, r8
 8008a52:	4649      	mov	r1, r9
 8008a54:	f04f 0200 	mov.w	r2, #0
 8008a58:	bfb8      	it	lt
 8008a5a:	f1ca 0a00 	rsblt	sl, sl, #0
 8008a5e:	f7f7 fc13 	bl	8000288 <__aeabi_dsub>
 8008a62:	4680      	mov	r8, r0
 8008a64:	4689      	mov	r9, r1
 8008a66:	4632      	mov	r2, r6
 8008a68:	463b      	mov	r3, r7
 8008a6a:	4640      	mov	r0, r8
 8008a6c:	4649      	mov	r1, r9
 8008a6e:	f7f7 fc0d 	bl	800028c <__adddf3>
 8008a72:	2400      	movs	r4, #0
 8008a74:	a37c      	add	r3, pc, #496	@ (adr r3, 8008c68 <__ieee754_pow+0xa28>)
 8008a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a7a:	4620      	mov	r0, r4
 8008a7c:	460d      	mov	r5, r1
 8008a7e:	f7f7 fdbb 	bl	80005f8 <__aeabi_dmul>
 8008a82:	4642      	mov	r2, r8
 8008a84:	e9cd 0100 	strd	r0, r1, [sp]
 8008a88:	464b      	mov	r3, r9
 8008a8a:	4620      	mov	r0, r4
 8008a8c:	4629      	mov	r1, r5
 8008a8e:	f7f7 fbfb 	bl	8000288 <__aeabi_dsub>
 8008a92:	4602      	mov	r2, r0
 8008a94:	460b      	mov	r3, r1
 8008a96:	4630      	mov	r0, r6
 8008a98:	4639      	mov	r1, r7
 8008a9a:	f7f7 fbf5 	bl	8000288 <__aeabi_dsub>
 8008a9e:	a374      	add	r3, pc, #464	@ (adr r3, 8008c70 <__ieee754_pow+0xa30>)
 8008aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa4:	f7f7 fda8 	bl	80005f8 <__aeabi_dmul>
 8008aa8:	a373      	add	r3, pc, #460	@ (adr r3, 8008c78 <__ieee754_pow+0xa38>)
 8008aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aae:	4680      	mov	r8, r0
 8008ab0:	4689      	mov	r9, r1
 8008ab2:	4620      	mov	r0, r4
 8008ab4:	4629      	mov	r1, r5
 8008ab6:	f7f7 fd9f 	bl	80005f8 <__aeabi_dmul>
 8008aba:	4602      	mov	r2, r0
 8008abc:	460b      	mov	r3, r1
 8008abe:	4640      	mov	r0, r8
 8008ac0:	4649      	mov	r1, r9
 8008ac2:	f7f7 fbe3 	bl	800028c <__adddf3>
 8008ac6:	4604      	mov	r4, r0
 8008ac8:	460d      	mov	r5, r1
 8008aca:	4602      	mov	r2, r0
 8008acc:	460b      	mov	r3, r1
 8008ace:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ad2:	f7f7 fbdb 	bl	800028c <__adddf3>
 8008ad6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ada:	4680      	mov	r8, r0
 8008adc:	4689      	mov	r9, r1
 8008ade:	f7f7 fbd3 	bl	8000288 <__aeabi_dsub>
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	460b      	mov	r3, r1
 8008ae6:	4620      	mov	r0, r4
 8008ae8:	4629      	mov	r1, r5
 8008aea:	f7f7 fbcd 	bl	8000288 <__aeabi_dsub>
 8008aee:	4642      	mov	r2, r8
 8008af0:	4606      	mov	r6, r0
 8008af2:	460f      	mov	r7, r1
 8008af4:	464b      	mov	r3, r9
 8008af6:	4640      	mov	r0, r8
 8008af8:	4649      	mov	r1, r9
 8008afa:	f7f7 fd7d 	bl	80005f8 <__aeabi_dmul>
 8008afe:	a360      	add	r3, pc, #384	@ (adr r3, 8008c80 <__ieee754_pow+0xa40>)
 8008b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b04:	4604      	mov	r4, r0
 8008b06:	460d      	mov	r5, r1
 8008b08:	f7f7 fd76 	bl	80005f8 <__aeabi_dmul>
 8008b0c:	a35e      	add	r3, pc, #376	@ (adr r3, 8008c88 <__ieee754_pow+0xa48>)
 8008b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b12:	f7f7 fbb9 	bl	8000288 <__aeabi_dsub>
 8008b16:	4622      	mov	r2, r4
 8008b18:	462b      	mov	r3, r5
 8008b1a:	f7f7 fd6d 	bl	80005f8 <__aeabi_dmul>
 8008b1e:	a35c      	add	r3, pc, #368	@ (adr r3, 8008c90 <__ieee754_pow+0xa50>)
 8008b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b24:	f7f7 fbb2 	bl	800028c <__adddf3>
 8008b28:	4622      	mov	r2, r4
 8008b2a:	462b      	mov	r3, r5
 8008b2c:	f7f7 fd64 	bl	80005f8 <__aeabi_dmul>
 8008b30:	a359      	add	r3, pc, #356	@ (adr r3, 8008c98 <__ieee754_pow+0xa58>)
 8008b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b36:	f7f7 fba7 	bl	8000288 <__aeabi_dsub>
 8008b3a:	4622      	mov	r2, r4
 8008b3c:	462b      	mov	r3, r5
 8008b3e:	f7f7 fd5b 	bl	80005f8 <__aeabi_dmul>
 8008b42:	a357      	add	r3, pc, #348	@ (adr r3, 8008ca0 <__ieee754_pow+0xa60>)
 8008b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b48:	f7f7 fba0 	bl	800028c <__adddf3>
 8008b4c:	4622      	mov	r2, r4
 8008b4e:	462b      	mov	r3, r5
 8008b50:	f7f7 fd52 	bl	80005f8 <__aeabi_dmul>
 8008b54:	4602      	mov	r2, r0
 8008b56:	460b      	mov	r3, r1
 8008b58:	4640      	mov	r0, r8
 8008b5a:	4649      	mov	r1, r9
 8008b5c:	f7f7 fb94 	bl	8000288 <__aeabi_dsub>
 8008b60:	4604      	mov	r4, r0
 8008b62:	460d      	mov	r5, r1
 8008b64:	4602      	mov	r2, r0
 8008b66:	460b      	mov	r3, r1
 8008b68:	4640      	mov	r0, r8
 8008b6a:	4649      	mov	r1, r9
 8008b6c:	f7f7 fd44 	bl	80005f8 <__aeabi_dmul>
 8008b70:	2200      	movs	r2, #0
 8008b72:	e9cd 0100 	strd	r0, r1, [sp]
 8008b76:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008b7a:	4620      	mov	r0, r4
 8008b7c:	4629      	mov	r1, r5
 8008b7e:	f7f7 fb83 	bl	8000288 <__aeabi_dsub>
 8008b82:	4602      	mov	r2, r0
 8008b84:	460b      	mov	r3, r1
 8008b86:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b8a:	f7f7 fe5f 	bl	800084c <__aeabi_ddiv>
 8008b8e:	4632      	mov	r2, r6
 8008b90:	4604      	mov	r4, r0
 8008b92:	460d      	mov	r5, r1
 8008b94:	463b      	mov	r3, r7
 8008b96:	4640      	mov	r0, r8
 8008b98:	4649      	mov	r1, r9
 8008b9a:	f7f7 fd2d 	bl	80005f8 <__aeabi_dmul>
 8008b9e:	4632      	mov	r2, r6
 8008ba0:	463b      	mov	r3, r7
 8008ba2:	f7f7 fb73 	bl	800028c <__adddf3>
 8008ba6:	4602      	mov	r2, r0
 8008ba8:	460b      	mov	r3, r1
 8008baa:	4620      	mov	r0, r4
 8008bac:	4629      	mov	r1, r5
 8008bae:	f7f7 fb6b 	bl	8000288 <__aeabi_dsub>
 8008bb2:	4642      	mov	r2, r8
 8008bb4:	464b      	mov	r3, r9
 8008bb6:	f7f7 fb67 	bl	8000288 <__aeabi_dsub>
 8008bba:	460b      	mov	r3, r1
 8008bbc:	4602      	mov	r2, r0
 8008bbe:	493b      	ldr	r1, [pc, #236]	@ (8008cac <__ieee754_pow+0xa6c>)
 8008bc0:	2000      	movs	r0, #0
 8008bc2:	f7f7 fb61 	bl	8000288 <__aeabi_dsub>
 8008bc6:	ec41 0b10 	vmov	d0, r0, r1
 8008bca:	ee10 3a90 	vmov	r3, s1
 8008bce:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008bd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008bd6:	da30      	bge.n	8008c3a <__ieee754_pow+0x9fa>
 8008bd8:	4650      	mov	r0, sl
 8008bda:	f000 fa79 	bl	80090d0 <scalbn>
 8008bde:	ec51 0b10 	vmov	r0, r1, d0
 8008be2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008be6:	f7ff bbd2 	b.w	800838e <__ieee754_pow+0x14e>
 8008bea:	4c31      	ldr	r4, [pc, #196]	@ (8008cb0 <__ieee754_pow+0xa70>)
 8008bec:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008bf0:	42a3      	cmp	r3, r4
 8008bf2:	d91a      	bls.n	8008c2a <__ieee754_pow+0x9ea>
 8008bf4:	4b2f      	ldr	r3, [pc, #188]	@ (8008cb4 <__ieee754_pow+0xa74>)
 8008bf6:	440b      	add	r3, r1
 8008bf8:	4303      	orrs	r3, r0
 8008bfa:	d009      	beq.n	8008c10 <__ieee754_pow+0x9d0>
 8008bfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c00:	2200      	movs	r2, #0
 8008c02:	2300      	movs	r3, #0
 8008c04:	f7f7 ff6a 	bl	8000adc <__aeabi_dcmplt>
 8008c08:	3800      	subs	r0, #0
 8008c0a:	bf18      	it	ne
 8008c0c:	2001      	movne	r0, #1
 8008c0e:	e42b      	b.n	8008468 <__ieee754_pow+0x228>
 8008c10:	4642      	mov	r2, r8
 8008c12:	464b      	mov	r3, r9
 8008c14:	f7f7 fb38 	bl	8000288 <__aeabi_dsub>
 8008c18:	4632      	mov	r2, r6
 8008c1a:	463b      	mov	r3, r7
 8008c1c:	f7f7 ff72 	bl	8000b04 <__aeabi_dcmpge>
 8008c20:	2800      	cmp	r0, #0
 8008c22:	d1eb      	bne.n	8008bfc <__ieee754_pow+0x9bc>
 8008c24:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8008cc4 <__ieee754_pow+0xa84>
 8008c28:	e6f7      	b.n	8008a1a <__ieee754_pow+0x7da>
 8008c2a:	469a      	mov	sl, r3
 8008c2c:	4b22      	ldr	r3, [pc, #136]	@ (8008cb8 <__ieee754_pow+0xa78>)
 8008c2e:	459a      	cmp	sl, r3
 8008c30:	f63f aef3 	bhi.w	8008a1a <__ieee754_pow+0x7da>
 8008c34:	f8dd a010 	ldr.w	sl, [sp, #16]
 8008c38:	e715      	b.n	8008a66 <__ieee754_pow+0x826>
 8008c3a:	ec51 0b10 	vmov	r0, r1, d0
 8008c3e:	4619      	mov	r1, r3
 8008c40:	e7cf      	b.n	8008be2 <__ieee754_pow+0x9a2>
 8008c42:	491a      	ldr	r1, [pc, #104]	@ (8008cac <__ieee754_pow+0xa6c>)
 8008c44:	2000      	movs	r0, #0
 8008c46:	f7ff bb18 	b.w	800827a <__ieee754_pow+0x3a>
 8008c4a:	2000      	movs	r0, #0
 8008c4c:	2100      	movs	r1, #0
 8008c4e:	f7ff bb14 	b.w	800827a <__ieee754_pow+0x3a>
 8008c52:	4630      	mov	r0, r6
 8008c54:	4639      	mov	r1, r7
 8008c56:	f7ff bb10 	b.w	800827a <__ieee754_pow+0x3a>
 8008c5a:	460c      	mov	r4, r1
 8008c5c:	f7ff bb5e 	b.w	800831c <__ieee754_pow+0xdc>
 8008c60:	2400      	movs	r4, #0
 8008c62:	f7ff bb49 	b.w	80082f8 <__ieee754_pow+0xb8>
 8008c66:	bf00      	nop
 8008c68:	00000000 	.word	0x00000000
 8008c6c:	3fe62e43 	.word	0x3fe62e43
 8008c70:	fefa39ef 	.word	0xfefa39ef
 8008c74:	3fe62e42 	.word	0x3fe62e42
 8008c78:	0ca86c39 	.word	0x0ca86c39
 8008c7c:	be205c61 	.word	0xbe205c61
 8008c80:	72bea4d0 	.word	0x72bea4d0
 8008c84:	3e663769 	.word	0x3e663769
 8008c88:	c5d26bf1 	.word	0xc5d26bf1
 8008c8c:	3ebbbd41 	.word	0x3ebbbd41
 8008c90:	af25de2c 	.word	0xaf25de2c
 8008c94:	3f11566a 	.word	0x3f11566a
 8008c98:	16bebd93 	.word	0x16bebd93
 8008c9c:	3f66c16c 	.word	0x3f66c16c
 8008ca0:	5555553e 	.word	0x5555553e
 8008ca4:	3fc55555 	.word	0x3fc55555
 8008ca8:	fff00000 	.word	0xfff00000
 8008cac:	3ff00000 	.word	0x3ff00000
 8008cb0:	4090cbff 	.word	0x4090cbff
 8008cb4:	3f6f3400 	.word	0x3f6f3400
 8008cb8:	3fe00000 	.word	0x3fe00000
 8008cbc:	652b82fe 	.word	0x652b82fe
 8008cc0:	3c971547 	.word	0x3c971547
 8008cc4:	4090cc00 	.word	0x4090cc00

08008cc8 <__ieee754_rem_pio2>:
 8008cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ccc:	ec57 6b10 	vmov	r6, r7, d0
 8008cd0:	4bc5      	ldr	r3, [pc, #788]	@ (8008fe8 <__ieee754_rem_pio2+0x320>)
 8008cd2:	b08d      	sub	sp, #52	@ 0x34
 8008cd4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8008cd8:	4598      	cmp	r8, r3
 8008cda:	4604      	mov	r4, r0
 8008cdc:	9704      	str	r7, [sp, #16]
 8008cde:	d807      	bhi.n	8008cf0 <__ieee754_rem_pio2+0x28>
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	ed80 0b00 	vstr	d0, [r0]
 8008ce8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008cec:	2500      	movs	r5, #0
 8008cee:	e028      	b.n	8008d42 <__ieee754_rem_pio2+0x7a>
 8008cf0:	4bbe      	ldr	r3, [pc, #760]	@ (8008fec <__ieee754_rem_pio2+0x324>)
 8008cf2:	4598      	cmp	r8, r3
 8008cf4:	d878      	bhi.n	8008de8 <__ieee754_rem_pio2+0x120>
 8008cf6:	9b04      	ldr	r3, [sp, #16]
 8008cf8:	4dbd      	ldr	r5, [pc, #756]	@ (8008ff0 <__ieee754_rem_pio2+0x328>)
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	4630      	mov	r0, r6
 8008cfe:	a3ac      	add	r3, pc, #688	@ (adr r3, 8008fb0 <__ieee754_rem_pio2+0x2e8>)
 8008d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d04:	4639      	mov	r1, r7
 8008d06:	dd38      	ble.n	8008d7a <__ieee754_rem_pio2+0xb2>
 8008d08:	f7f7 fabe 	bl	8000288 <__aeabi_dsub>
 8008d0c:	45a8      	cmp	r8, r5
 8008d0e:	4606      	mov	r6, r0
 8008d10:	460f      	mov	r7, r1
 8008d12:	d01a      	beq.n	8008d4a <__ieee754_rem_pio2+0x82>
 8008d14:	a3a8      	add	r3, pc, #672	@ (adr r3, 8008fb8 <__ieee754_rem_pio2+0x2f0>)
 8008d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d1a:	f7f7 fab5 	bl	8000288 <__aeabi_dsub>
 8008d1e:	4602      	mov	r2, r0
 8008d20:	460b      	mov	r3, r1
 8008d22:	4680      	mov	r8, r0
 8008d24:	4689      	mov	r9, r1
 8008d26:	4630      	mov	r0, r6
 8008d28:	4639      	mov	r1, r7
 8008d2a:	f7f7 faad 	bl	8000288 <__aeabi_dsub>
 8008d2e:	a3a2      	add	r3, pc, #648	@ (adr r3, 8008fb8 <__ieee754_rem_pio2+0x2f0>)
 8008d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d34:	f7f7 faa8 	bl	8000288 <__aeabi_dsub>
 8008d38:	e9c4 8900 	strd	r8, r9, [r4]
 8008d3c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008d40:	2501      	movs	r5, #1
 8008d42:	4628      	mov	r0, r5
 8008d44:	b00d      	add	sp, #52	@ 0x34
 8008d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d4a:	a39d      	add	r3, pc, #628	@ (adr r3, 8008fc0 <__ieee754_rem_pio2+0x2f8>)
 8008d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d50:	f7f7 fa9a 	bl	8000288 <__aeabi_dsub>
 8008d54:	a39c      	add	r3, pc, #624	@ (adr r3, 8008fc8 <__ieee754_rem_pio2+0x300>)
 8008d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d5a:	4606      	mov	r6, r0
 8008d5c:	460f      	mov	r7, r1
 8008d5e:	f7f7 fa93 	bl	8000288 <__aeabi_dsub>
 8008d62:	4602      	mov	r2, r0
 8008d64:	460b      	mov	r3, r1
 8008d66:	4680      	mov	r8, r0
 8008d68:	4689      	mov	r9, r1
 8008d6a:	4630      	mov	r0, r6
 8008d6c:	4639      	mov	r1, r7
 8008d6e:	f7f7 fa8b 	bl	8000288 <__aeabi_dsub>
 8008d72:	a395      	add	r3, pc, #596	@ (adr r3, 8008fc8 <__ieee754_rem_pio2+0x300>)
 8008d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d78:	e7dc      	b.n	8008d34 <__ieee754_rem_pio2+0x6c>
 8008d7a:	f7f7 fa87 	bl	800028c <__adddf3>
 8008d7e:	45a8      	cmp	r8, r5
 8008d80:	4606      	mov	r6, r0
 8008d82:	460f      	mov	r7, r1
 8008d84:	d018      	beq.n	8008db8 <__ieee754_rem_pio2+0xf0>
 8008d86:	a38c      	add	r3, pc, #560	@ (adr r3, 8008fb8 <__ieee754_rem_pio2+0x2f0>)
 8008d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d8c:	f7f7 fa7e 	bl	800028c <__adddf3>
 8008d90:	4602      	mov	r2, r0
 8008d92:	460b      	mov	r3, r1
 8008d94:	4680      	mov	r8, r0
 8008d96:	4689      	mov	r9, r1
 8008d98:	4630      	mov	r0, r6
 8008d9a:	4639      	mov	r1, r7
 8008d9c:	f7f7 fa74 	bl	8000288 <__aeabi_dsub>
 8008da0:	a385      	add	r3, pc, #532	@ (adr r3, 8008fb8 <__ieee754_rem_pio2+0x2f0>)
 8008da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da6:	f7f7 fa71 	bl	800028c <__adddf3>
 8008daa:	f04f 35ff 	mov.w	r5, #4294967295
 8008dae:	e9c4 8900 	strd	r8, r9, [r4]
 8008db2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008db6:	e7c4      	b.n	8008d42 <__ieee754_rem_pio2+0x7a>
 8008db8:	a381      	add	r3, pc, #516	@ (adr r3, 8008fc0 <__ieee754_rem_pio2+0x2f8>)
 8008dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dbe:	f7f7 fa65 	bl	800028c <__adddf3>
 8008dc2:	a381      	add	r3, pc, #516	@ (adr r3, 8008fc8 <__ieee754_rem_pio2+0x300>)
 8008dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc8:	4606      	mov	r6, r0
 8008dca:	460f      	mov	r7, r1
 8008dcc:	f7f7 fa5e 	bl	800028c <__adddf3>
 8008dd0:	4602      	mov	r2, r0
 8008dd2:	460b      	mov	r3, r1
 8008dd4:	4680      	mov	r8, r0
 8008dd6:	4689      	mov	r9, r1
 8008dd8:	4630      	mov	r0, r6
 8008dda:	4639      	mov	r1, r7
 8008ddc:	f7f7 fa54 	bl	8000288 <__aeabi_dsub>
 8008de0:	a379      	add	r3, pc, #484	@ (adr r3, 8008fc8 <__ieee754_rem_pio2+0x300>)
 8008de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de6:	e7de      	b.n	8008da6 <__ieee754_rem_pio2+0xde>
 8008de8:	4b82      	ldr	r3, [pc, #520]	@ (8008ff4 <__ieee754_rem_pio2+0x32c>)
 8008dea:	4598      	cmp	r8, r3
 8008dec:	f200 80d1 	bhi.w	8008f92 <__ieee754_rem_pio2+0x2ca>
 8008df0:	f000 f966 	bl	80090c0 <fabs>
 8008df4:	ec57 6b10 	vmov	r6, r7, d0
 8008df8:	a375      	add	r3, pc, #468	@ (adr r3, 8008fd0 <__ieee754_rem_pio2+0x308>)
 8008dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dfe:	4630      	mov	r0, r6
 8008e00:	4639      	mov	r1, r7
 8008e02:	f7f7 fbf9 	bl	80005f8 <__aeabi_dmul>
 8008e06:	4b7c      	ldr	r3, [pc, #496]	@ (8008ff8 <__ieee754_rem_pio2+0x330>)
 8008e08:	2200      	movs	r2, #0
 8008e0a:	f7f7 fa3f 	bl	800028c <__adddf3>
 8008e0e:	f7f7 fea3 	bl	8000b58 <__aeabi_d2iz>
 8008e12:	4605      	mov	r5, r0
 8008e14:	f7f7 fb86 	bl	8000524 <__aeabi_i2d>
 8008e18:	4602      	mov	r2, r0
 8008e1a:	460b      	mov	r3, r1
 8008e1c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008e20:	a363      	add	r3, pc, #396	@ (adr r3, 8008fb0 <__ieee754_rem_pio2+0x2e8>)
 8008e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e26:	f7f7 fbe7 	bl	80005f8 <__aeabi_dmul>
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	460b      	mov	r3, r1
 8008e2e:	4630      	mov	r0, r6
 8008e30:	4639      	mov	r1, r7
 8008e32:	f7f7 fa29 	bl	8000288 <__aeabi_dsub>
 8008e36:	a360      	add	r3, pc, #384	@ (adr r3, 8008fb8 <__ieee754_rem_pio2+0x2f0>)
 8008e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e3c:	4682      	mov	sl, r0
 8008e3e:	468b      	mov	fp, r1
 8008e40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e44:	f7f7 fbd8 	bl	80005f8 <__aeabi_dmul>
 8008e48:	2d1f      	cmp	r5, #31
 8008e4a:	4606      	mov	r6, r0
 8008e4c:	460f      	mov	r7, r1
 8008e4e:	dc0c      	bgt.n	8008e6a <__ieee754_rem_pio2+0x1a2>
 8008e50:	4b6a      	ldr	r3, [pc, #424]	@ (8008ffc <__ieee754_rem_pio2+0x334>)
 8008e52:	1e6a      	subs	r2, r5, #1
 8008e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e58:	4543      	cmp	r3, r8
 8008e5a:	d006      	beq.n	8008e6a <__ieee754_rem_pio2+0x1a2>
 8008e5c:	4632      	mov	r2, r6
 8008e5e:	463b      	mov	r3, r7
 8008e60:	4650      	mov	r0, sl
 8008e62:	4659      	mov	r1, fp
 8008e64:	f7f7 fa10 	bl	8000288 <__aeabi_dsub>
 8008e68:	e00e      	b.n	8008e88 <__ieee754_rem_pio2+0x1c0>
 8008e6a:	463b      	mov	r3, r7
 8008e6c:	4632      	mov	r2, r6
 8008e6e:	4650      	mov	r0, sl
 8008e70:	4659      	mov	r1, fp
 8008e72:	f7f7 fa09 	bl	8000288 <__aeabi_dsub>
 8008e76:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008e7a:	9305      	str	r3, [sp, #20]
 8008e7c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008e80:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8008e84:	2b10      	cmp	r3, #16
 8008e86:	dc02      	bgt.n	8008e8e <__ieee754_rem_pio2+0x1c6>
 8008e88:	e9c4 0100 	strd	r0, r1, [r4]
 8008e8c:	e039      	b.n	8008f02 <__ieee754_rem_pio2+0x23a>
 8008e8e:	a34c      	add	r3, pc, #304	@ (adr r3, 8008fc0 <__ieee754_rem_pio2+0x2f8>)
 8008e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e98:	f7f7 fbae 	bl	80005f8 <__aeabi_dmul>
 8008e9c:	4606      	mov	r6, r0
 8008e9e:	460f      	mov	r7, r1
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	460b      	mov	r3, r1
 8008ea4:	4650      	mov	r0, sl
 8008ea6:	4659      	mov	r1, fp
 8008ea8:	f7f7 f9ee 	bl	8000288 <__aeabi_dsub>
 8008eac:	4602      	mov	r2, r0
 8008eae:	460b      	mov	r3, r1
 8008eb0:	4680      	mov	r8, r0
 8008eb2:	4689      	mov	r9, r1
 8008eb4:	4650      	mov	r0, sl
 8008eb6:	4659      	mov	r1, fp
 8008eb8:	f7f7 f9e6 	bl	8000288 <__aeabi_dsub>
 8008ebc:	4632      	mov	r2, r6
 8008ebe:	463b      	mov	r3, r7
 8008ec0:	f7f7 f9e2 	bl	8000288 <__aeabi_dsub>
 8008ec4:	a340      	add	r3, pc, #256	@ (adr r3, 8008fc8 <__ieee754_rem_pio2+0x300>)
 8008ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eca:	4606      	mov	r6, r0
 8008ecc:	460f      	mov	r7, r1
 8008ece:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ed2:	f7f7 fb91 	bl	80005f8 <__aeabi_dmul>
 8008ed6:	4632      	mov	r2, r6
 8008ed8:	463b      	mov	r3, r7
 8008eda:	f7f7 f9d5 	bl	8000288 <__aeabi_dsub>
 8008ede:	4602      	mov	r2, r0
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	4606      	mov	r6, r0
 8008ee4:	460f      	mov	r7, r1
 8008ee6:	4640      	mov	r0, r8
 8008ee8:	4649      	mov	r1, r9
 8008eea:	f7f7 f9cd 	bl	8000288 <__aeabi_dsub>
 8008eee:	9a05      	ldr	r2, [sp, #20]
 8008ef0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008ef4:	1ad3      	subs	r3, r2, r3
 8008ef6:	2b31      	cmp	r3, #49	@ 0x31
 8008ef8:	dc20      	bgt.n	8008f3c <__ieee754_rem_pio2+0x274>
 8008efa:	e9c4 0100 	strd	r0, r1, [r4]
 8008efe:	46c2      	mov	sl, r8
 8008f00:	46cb      	mov	fp, r9
 8008f02:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008f06:	4650      	mov	r0, sl
 8008f08:	4642      	mov	r2, r8
 8008f0a:	464b      	mov	r3, r9
 8008f0c:	4659      	mov	r1, fp
 8008f0e:	f7f7 f9bb 	bl	8000288 <__aeabi_dsub>
 8008f12:	463b      	mov	r3, r7
 8008f14:	4632      	mov	r2, r6
 8008f16:	f7f7 f9b7 	bl	8000288 <__aeabi_dsub>
 8008f1a:	9b04      	ldr	r3, [sp, #16]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008f22:	f6bf af0e 	bge.w	8008d42 <__ieee754_rem_pio2+0x7a>
 8008f26:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8008f2a:	6063      	str	r3, [r4, #4]
 8008f2c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008f30:	f8c4 8000 	str.w	r8, [r4]
 8008f34:	60a0      	str	r0, [r4, #8]
 8008f36:	60e3      	str	r3, [r4, #12]
 8008f38:	426d      	negs	r5, r5
 8008f3a:	e702      	b.n	8008d42 <__ieee754_rem_pio2+0x7a>
 8008f3c:	a326      	add	r3, pc, #152	@ (adr r3, 8008fd8 <__ieee754_rem_pio2+0x310>)
 8008f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f46:	f7f7 fb57 	bl	80005f8 <__aeabi_dmul>
 8008f4a:	4606      	mov	r6, r0
 8008f4c:	460f      	mov	r7, r1
 8008f4e:	4602      	mov	r2, r0
 8008f50:	460b      	mov	r3, r1
 8008f52:	4640      	mov	r0, r8
 8008f54:	4649      	mov	r1, r9
 8008f56:	f7f7 f997 	bl	8000288 <__aeabi_dsub>
 8008f5a:	4602      	mov	r2, r0
 8008f5c:	460b      	mov	r3, r1
 8008f5e:	4682      	mov	sl, r0
 8008f60:	468b      	mov	fp, r1
 8008f62:	4640      	mov	r0, r8
 8008f64:	4649      	mov	r1, r9
 8008f66:	f7f7 f98f 	bl	8000288 <__aeabi_dsub>
 8008f6a:	4632      	mov	r2, r6
 8008f6c:	463b      	mov	r3, r7
 8008f6e:	f7f7 f98b 	bl	8000288 <__aeabi_dsub>
 8008f72:	a31b      	add	r3, pc, #108	@ (adr r3, 8008fe0 <__ieee754_rem_pio2+0x318>)
 8008f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f78:	4606      	mov	r6, r0
 8008f7a:	460f      	mov	r7, r1
 8008f7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f80:	f7f7 fb3a 	bl	80005f8 <__aeabi_dmul>
 8008f84:	4632      	mov	r2, r6
 8008f86:	463b      	mov	r3, r7
 8008f88:	f7f7 f97e 	bl	8000288 <__aeabi_dsub>
 8008f8c:	4606      	mov	r6, r0
 8008f8e:	460f      	mov	r7, r1
 8008f90:	e764      	b.n	8008e5c <__ieee754_rem_pio2+0x194>
 8008f92:	4b1b      	ldr	r3, [pc, #108]	@ (8009000 <__ieee754_rem_pio2+0x338>)
 8008f94:	4598      	cmp	r8, r3
 8008f96:	d935      	bls.n	8009004 <__ieee754_rem_pio2+0x33c>
 8008f98:	4632      	mov	r2, r6
 8008f9a:	463b      	mov	r3, r7
 8008f9c:	4630      	mov	r0, r6
 8008f9e:	4639      	mov	r1, r7
 8008fa0:	f7f7 f972 	bl	8000288 <__aeabi_dsub>
 8008fa4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008fa8:	e9c4 0100 	strd	r0, r1, [r4]
 8008fac:	e69e      	b.n	8008cec <__ieee754_rem_pio2+0x24>
 8008fae:	bf00      	nop
 8008fb0:	54400000 	.word	0x54400000
 8008fb4:	3ff921fb 	.word	0x3ff921fb
 8008fb8:	1a626331 	.word	0x1a626331
 8008fbc:	3dd0b461 	.word	0x3dd0b461
 8008fc0:	1a600000 	.word	0x1a600000
 8008fc4:	3dd0b461 	.word	0x3dd0b461
 8008fc8:	2e037073 	.word	0x2e037073
 8008fcc:	3ba3198a 	.word	0x3ba3198a
 8008fd0:	6dc9c883 	.word	0x6dc9c883
 8008fd4:	3fe45f30 	.word	0x3fe45f30
 8008fd8:	2e000000 	.word	0x2e000000
 8008fdc:	3ba3198a 	.word	0x3ba3198a
 8008fe0:	252049c1 	.word	0x252049c1
 8008fe4:	397b839a 	.word	0x397b839a
 8008fe8:	3fe921fb 	.word	0x3fe921fb
 8008fec:	4002d97b 	.word	0x4002d97b
 8008ff0:	3ff921fb 	.word	0x3ff921fb
 8008ff4:	413921fb 	.word	0x413921fb
 8008ff8:	3fe00000 	.word	0x3fe00000
 8008ffc:	08009ac8 	.word	0x08009ac8
 8009000:	7fefffff 	.word	0x7fefffff
 8009004:	ea4f 5528 	mov.w	r5, r8, asr #20
 8009008:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800900c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8009010:	4630      	mov	r0, r6
 8009012:	460f      	mov	r7, r1
 8009014:	f7f7 fda0 	bl	8000b58 <__aeabi_d2iz>
 8009018:	f7f7 fa84 	bl	8000524 <__aeabi_i2d>
 800901c:	4602      	mov	r2, r0
 800901e:	460b      	mov	r3, r1
 8009020:	4630      	mov	r0, r6
 8009022:	4639      	mov	r1, r7
 8009024:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009028:	f7f7 f92e 	bl	8000288 <__aeabi_dsub>
 800902c:	4b22      	ldr	r3, [pc, #136]	@ (80090b8 <__ieee754_rem_pio2+0x3f0>)
 800902e:	2200      	movs	r2, #0
 8009030:	f7f7 fae2 	bl	80005f8 <__aeabi_dmul>
 8009034:	460f      	mov	r7, r1
 8009036:	4606      	mov	r6, r0
 8009038:	f7f7 fd8e 	bl	8000b58 <__aeabi_d2iz>
 800903c:	f7f7 fa72 	bl	8000524 <__aeabi_i2d>
 8009040:	4602      	mov	r2, r0
 8009042:	460b      	mov	r3, r1
 8009044:	4630      	mov	r0, r6
 8009046:	4639      	mov	r1, r7
 8009048:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800904c:	f7f7 f91c 	bl	8000288 <__aeabi_dsub>
 8009050:	4b19      	ldr	r3, [pc, #100]	@ (80090b8 <__ieee754_rem_pio2+0x3f0>)
 8009052:	2200      	movs	r2, #0
 8009054:	f7f7 fad0 	bl	80005f8 <__aeabi_dmul>
 8009058:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800905c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8009060:	f04f 0803 	mov.w	r8, #3
 8009064:	2600      	movs	r6, #0
 8009066:	2700      	movs	r7, #0
 8009068:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800906c:	4632      	mov	r2, r6
 800906e:	463b      	mov	r3, r7
 8009070:	46c2      	mov	sl, r8
 8009072:	f108 38ff 	add.w	r8, r8, #4294967295
 8009076:	f7f7 fd27 	bl	8000ac8 <__aeabi_dcmpeq>
 800907a:	2800      	cmp	r0, #0
 800907c:	d1f4      	bne.n	8009068 <__ieee754_rem_pio2+0x3a0>
 800907e:	4b0f      	ldr	r3, [pc, #60]	@ (80090bc <__ieee754_rem_pio2+0x3f4>)
 8009080:	9301      	str	r3, [sp, #4]
 8009082:	2302      	movs	r3, #2
 8009084:	9300      	str	r3, [sp, #0]
 8009086:	462a      	mov	r2, r5
 8009088:	4653      	mov	r3, sl
 800908a:	4621      	mov	r1, r4
 800908c:	a806      	add	r0, sp, #24
 800908e:	f000 f8db 	bl	8009248 <__kernel_rem_pio2>
 8009092:	9b04      	ldr	r3, [sp, #16]
 8009094:	2b00      	cmp	r3, #0
 8009096:	4605      	mov	r5, r0
 8009098:	f6bf ae53 	bge.w	8008d42 <__ieee754_rem_pio2+0x7a>
 800909c:	e9d4 2100 	ldrd	r2, r1, [r4]
 80090a0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80090a4:	e9c4 2300 	strd	r2, r3, [r4]
 80090a8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80090ac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80090b0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80090b4:	e740      	b.n	8008f38 <__ieee754_rem_pio2+0x270>
 80090b6:	bf00      	nop
 80090b8:	41700000 	.word	0x41700000
 80090bc:	08009b48 	.word	0x08009b48

080090c0 <fabs>:
 80090c0:	ec51 0b10 	vmov	r0, r1, d0
 80090c4:	4602      	mov	r2, r0
 80090c6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80090ca:	ec43 2b10 	vmov	d0, r2, r3
 80090ce:	4770      	bx	lr

080090d0 <scalbn>:
 80090d0:	b570      	push	{r4, r5, r6, lr}
 80090d2:	ec55 4b10 	vmov	r4, r5, d0
 80090d6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80090da:	4606      	mov	r6, r0
 80090dc:	462b      	mov	r3, r5
 80090de:	b991      	cbnz	r1, 8009106 <scalbn+0x36>
 80090e0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80090e4:	4323      	orrs	r3, r4
 80090e6:	d03d      	beq.n	8009164 <scalbn+0x94>
 80090e8:	4b35      	ldr	r3, [pc, #212]	@ (80091c0 <scalbn+0xf0>)
 80090ea:	4620      	mov	r0, r4
 80090ec:	4629      	mov	r1, r5
 80090ee:	2200      	movs	r2, #0
 80090f0:	f7f7 fa82 	bl	80005f8 <__aeabi_dmul>
 80090f4:	4b33      	ldr	r3, [pc, #204]	@ (80091c4 <scalbn+0xf4>)
 80090f6:	429e      	cmp	r6, r3
 80090f8:	4604      	mov	r4, r0
 80090fa:	460d      	mov	r5, r1
 80090fc:	da0f      	bge.n	800911e <scalbn+0x4e>
 80090fe:	a328      	add	r3, pc, #160	@ (adr r3, 80091a0 <scalbn+0xd0>)
 8009100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009104:	e01e      	b.n	8009144 <scalbn+0x74>
 8009106:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800910a:	4291      	cmp	r1, r2
 800910c:	d10b      	bne.n	8009126 <scalbn+0x56>
 800910e:	4622      	mov	r2, r4
 8009110:	4620      	mov	r0, r4
 8009112:	4629      	mov	r1, r5
 8009114:	f7f7 f8ba 	bl	800028c <__adddf3>
 8009118:	4604      	mov	r4, r0
 800911a:	460d      	mov	r5, r1
 800911c:	e022      	b.n	8009164 <scalbn+0x94>
 800911e:	460b      	mov	r3, r1
 8009120:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8009124:	3936      	subs	r1, #54	@ 0x36
 8009126:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800912a:	4296      	cmp	r6, r2
 800912c:	dd0d      	ble.n	800914a <scalbn+0x7a>
 800912e:	2d00      	cmp	r5, #0
 8009130:	a11d      	add	r1, pc, #116	@ (adr r1, 80091a8 <scalbn+0xd8>)
 8009132:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009136:	da02      	bge.n	800913e <scalbn+0x6e>
 8009138:	a11d      	add	r1, pc, #116	@ (adr r1, 80091b0 <scalbn+0xe0>)
 800913a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800913e:	a31a      	add	r3, pc, #104	@ (adr r3, 80091a8 <scalbn+0xd8>)
 8009140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009144:	f7f7 fa58 	bl	80005f8 <__aeabi_dmul>
 8009148:	e7e6      	b.n	8009118 <scalbn+0x48>
 800914a:	1872      	adds	r2, r6, r1
 800914c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8009150:	428a      	cmp	r2, r1
 8009152:	dcec      	bgt.n	800912e <scalbn+0x5e>
 8009154:	2a00      	cmp	r2, #0
 8009156:	dd08      	ble.n	800916a <scalbn+0x9a>
 8009158:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800915c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8009160:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009164:	ec45 4b10 	vmov	d0, r4, r5
 8009168:	bd70      	pop	{r4, r5, r6, pc}
 800916a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800916e:	da08      	bge.n	8009182 <scalbn+0xb2>
 8009170:	2d00      	cmp	r5, #0
 8009172:	a10b      	add	r1, pc, #44	@ (adr r1, 80091a0 <scalbn+0xd0>)
 8009174:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009178:	dac1      	bge.n	80090fe <scalbn+0x2e>
 800917a:	a10f      	add	r1, pc, #60	@ (adr r1, 80091b8 <scalbn+0xe8>)
 800917c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009180:	e7bd      	b.n	80090fe <scalbn+0x2e>
 8009182:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009186:	3236      	adds	r2, #54	@ 0x36
 8009188:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800918c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009190:	4620      	mov	r0, r4
 8009192:	4b0d      	ldr	r3, [pc, #52]	@ (80091c8 <scalbn+0xf8>)
 8009194:	4629      	mov	r1, r5
 8009196:	2200      	movs	r2, #0
 8009198:	e7d4      	b.n	8009144 <scalbn+0x74>
 800919a:	bf00      	nop
 800919c:	f3af 8000 	nop.w
 80091a0:	c2f8f359 	.word	0xc2f8f359
 80091a4:	01a56e1f 	.word	0x01a56e1f
 80091a8:	8800759c 	.word	0x8800759c
 80091ac:	7e37e43c 	.word	0x7e37e43c
 80091b0:	8800759c 	.word	0x8800759c
 80091b4:	fe37e43c 	.word	0xfe37e43c
 80091b8:	c2f8f359 	.word	0xc2f8f359
 80091bc:	81a56e1f 	.word	0x81a56e1f
 80091c0:	43500000 	.word	0x43500000
 80091c4:	ffff3cb0 	.word	0xffff3cb0
 80091c8:	3c900000 	.word	0x3c900000

080091cc <with_errno>:
 80091cc:	b510      	push	{r4, lr}
 80091ce:	ed2d 8b02 	vpush	{d8}
 80091d2:	eeb0 8a40 	vmov.f32	s16, s0
 80091d6:	eef0 8a60 	vmov.f32	s17, s1
 80091da:	4604      	mov	r4, r0
 80091dc:	f7fe f808 	bl	80071f0 <__errno>
 80091e0:	eeb0 0a48 	vmov.f32	s0, s16
 80091e4:	eef0 0a68 	vmov.f32	s1, s17
 80091e8:	ecbd 8b02 	vpop	{d8}
 80091ec:	6004      	str	r4, [r0, #0]
 80091ee:	bd10      	pop	{r4, pc}

080091f0 <xflow>:
 80091f0:	4603      	mov	r3, r0
 80091f2:	b507      	push	{r0, r1, r2, lr}
 80091f4:	ec51 0b10 	vmov	r0, r1, d0
 80091f8:	b183      	cbz	r3, 800921c <xflow+0x2c>
 80091fa:	4602      	mov	r2, r0
 80091fc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009200:	e9cd 2300 	strd	r2, r3, [sp]
 8009204:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009208:	f7f7 f9f6 	bl	80005f8 <__aeabi_dmul>
 800920c:	ec41 0b10 	vmov	d0, r0, r1
 8009210:	2022      	movs	r0, #34	@ 0x22
 8009212:	b003      	add	sp, #12
 8009214:	f85d eb04 	ldr.w	lr, [sp], #4
 8009218:	f7ff bfd8 	b.w	80091cc <with_errno>
 800921c:	4602      	mov	r2, r0
 800921e:	460b      	mov	r3, r1
 8009220:	e7ee      	b.n	8009200 <xflow+0x10>
 8009222:	0000      	movs	r0, r0
 8009224:	0000      	movs	r0, r0
	...

08009228 <__math_uflow>:
 8009228:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009230 <__math_uflow+0x8>
 800922c:	f7ff bfe0 	b.w	80091f0 <xflow>
 8009230:	00000000 	.word	0x00000000
 8009234:	10000000 	.word	0x10000000

08009238 <__math_oflow>:
 8009238:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009240 <__math_oflow+0x8>
 800923c:	f7ff bfd8 	b.w	80091f0 <xflow>
 8009240:	00000000 	.word	0x00000000
 8009244:	70000000 	.word	0x70000000

08009248 <__kernel_rem_pio2>:
 8009248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800924c:	ed2d 8b02 	vpush	{d8}
 8009250:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8009254:	f112 0f14 	cmn.w	r2, #20
 8009258:	9306      	str	r3, [sp, #24]
 800925a:	9104      	str	r1, [sp, #16]
 800925c:	4bbe      	ldr	r3, [pc, #760]	@ (8009558 <__kernel_rem_pio2+0x310>)
 800925e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8009260:	9008      	str	r0, [sp, #32]
 8009262:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009266:	9300      	str	r3, [sp, #0]
 8009268:	9b06      	ldr	r3, [sp, #24]
 800926a:	f103 33ff 	add.w	r3, r3, #4294967295
 800926e:	bfa8      	it	ge
 8009270:	1ed4      	subge	r4, r2, #3
 8009272:	9305      	str	r3, [sp, #20]
 8009274:	bfb2      	itee	lt
 8009276:	2400      	movlt	r4, #0
 8009278:	2318      	movge	r3, #24
 800927a:	fb94 f4f3 	sdivge	r4, r4, r3
 800927e:	f06f 0317 	mvn.w	r3, #23
 8009282:	fb04 3303 	mla	r3, r4, r3, r3
 8009286:	eb03 0b02 	add.w	fp, r3, r2
 800928a:	9b00      	ldr	r3, [sp, #0]
 800928c:	9a05      	ldr	r2, [sp, #20]
 800928e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8009548 <__kernel_rem_pio2+0x300>
 8009292:	eb03 0802 	add.w	r8, r3, r2
 8009296:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8009298:	1aa7      	subs	r7, r4, r2
 800929a:	ae20      	add	r6, sp, #128	@ 0x80
 800929c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80092a0:	2500      	movs	r5, #0
 80092a2:	4545      	cmp	r5, r8
 80092a4:	dd13      	ble.n	80092ce <__kernel_rem_pio2+0x86>
 80092a6:	9b06      	ldr	r3, [sp, #24]
 80092a8:	aa20      	add	r2, sp, #128	@ 0x80
 80092aa:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80092ae:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 80092b2:	f04f 0800 	mov.w	r8, #0
 80092b6:	9b00      	ldr	r3, [sp, #0]
 80092b8:	4598      	cmp	r8, r3
 80092ba:	dc31      	bgt.n	8009320 <__kernel_rem_pio2+0xd8>
 80092bc:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8009548 <__kernel_rem_pio2+0x300>
 80092c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80092c4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80092c8:	462f      	mov	r7, r5
 80092ca:	2600      	movs	r6, #0
 80092cc:	e01b      	b.n	8009306 <__kernel_rem_pio2+0xbe>
 80092ce:	42ef      	cmn	r7, r5
 80092d0:	d407      	bmi.n	80092e2 <__kernel_rem_pio2+0x9a>
 80092d2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80092d6:	f7f7 f925 	bl	8000524 <__aeabi_i2d>
 80092da:	e8e6 0102 	strd	r0, r1, [r6], #8
 80092de:	3501      	adds	r5, #1
 80092e0:	e7df      	b.n	80092a2 <__kernel_rem_pio2+0x5a>
 80092e2:	ec51 0b18 	vmov	r0, r1, d8
 80092e6:	e7f8      	b.n	80092da <__kernel_rem_pio2+0x92>
 80092e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092ec:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80092f0:	f7f7 f982 	bl	80005f8 <__aeabi_dmul>
 80092f4:	4602      	mov	r2, r0
 80092f6:	460b      	mov	r3, r1
 80092f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092fc:	f7f6 ffc6 	bl	800028c <__adddf3>
 8009300:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009304:	3601      	adds	r6, #1
 8009306:	9b05      	ldr	r3, [sp, #20]
 8009308:	429e      	cmp	r6, r3
 800930a:	f1a7 0708 	sub.w	r7, r7, #8
 800930e:	ddeb      	ble.n	80092e8 <__kernel_rem_pio2+0xa0>
 8009310:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009314:	f108 0801 	add.w	r8, r8, #1
 8009318:	ecaa 7b02 	vstmia	sl!, {d7}
 800931c:	3508      	adds	r5, #8
 800931e:	e7ca      	b.n	80092b6 <__kernel_rem_pio2+0x6e>
 8009320:	9b00      	ldr	r3, [sp, #0]
 8009322:	f8dd 8000 	ldr.w	r8, [sp]
 8009326:	aa0c      	add	r2, sp, #48	@ 0x30
 8009328:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800932c:	930a      	str	r3, [sp, #40]	@ 0x28
 800932e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8009330:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009334:	9309      	str	r3, [sp, #36]	@ 0x24
 8009336:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800933a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800933c:	ab98      	add	r3, sp, #608	@ 0x260
 800933e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009342:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8009346:	ed8d 7b02 	vstr	d7, [sp, #8]
 800934a:	ac0c      	add	r4, sp, #48	@ 0x30
 800934c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800934e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8009352:	46a1      	mov	r9, r4
 8009354:	46c2      	mov	sl, r8
 8009356:	f1ba 0f00 	cmp.w	sl, #0
 800935a:	f1a5 0508 	sub.w	r5, r5, #8
 800935e:	dc77      	bgt.n	8009450 <__kernel_rem_pio2+0x208>
 8009360:	4658      	mov	r0, fp
 8009362:	ed9d 0b02 	vldr	d0, [sp, #8]
 8009366:	f7ff feb3 	bl	80090d0 <scalbn>
 800936a:	ec57 6b10 	vmov	r6, r7, d0
 800936e:	2200      	movs	r2, #0
 8009370:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8009374:	4630      	mov	r0, r6
 8009376:	4639      	mov	r1, r7
 8009378:	f7f7 f93e 	bl	80005f8 <__aeabi_dmul>
 800937c:	ec41 0b10 	vmov	d0, r0, r1
 8009380:	f000 faba 	bl	80098f8 <floor>
 8009384:	4b75      	ldr	r3, [pc, #468]	@ (800955c <__kernel_rem_pio2+0x314>)
 8009386:	ec51 0b10 	vmov	r0, r1, d0
 800938a:	2200      	movs	r2, #0
 800938c:	f7f7 f934 	bl	80005f8 <__aeabi_dmul>
 8009390:	4602      	mov	r2, r0
 8009392:	460b      	mov	r3, r1
 8009394:	4630      	mov	r0, r6
 8009396:	4639      	mov	r1, r7
 8009398:	f7f6 ff76 	bl	8000288 <__aeabi_dsub>
 800939c:	460f      	mov	r7, r1
 800939e:	4606      	mov	r6, r0
 80093a0:	f7f7 fbda 	bl	8000b58 <__aeabi_d2iz>
 80093a4:	9002      	str	r0, [sp, #8]
 80093a6:	f7f7 f8bd 	bl	8000524 <__aeabi_i2d>
 80093aa:	4602      	mov	r2, r0
 80093ac:	460b      	mov	r3, r1
 80093ae:	4630      	mov	r0, r6
 80093b0:	4639      	mov	r1, r7
 80093b2:	f7f6 ff69 	bl	8000288 <__aeabi_dsub>
 80093b6:	f1bb 0f00 	cmp.w	fp, #0
 80093ba:	4606      	mov	r6, r0
 80093bc:	460f      	mov	r7, r1
 80093be:	dd6c      	ble.n	800949a <__kernel_rem_pio2+0x252>
 80093c0:	f108 31ff 	add.w	r1, r8, #4294967295
 80093c4:	ab0c      	add	r3, sp, #48	@ 0x30
 80093c6:	9d02      	ldr	r5, [sp, #8]
 80093c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80093cc:	f1cb 0018 	rsb	r0, fp, #24
 80093d0:	fa43 f200 	asr.w	r2, r3, r0
 80093d4:	4415      	add	r5, r2
 80093d6:	4082      	lsls	r2, r0
 80093d8:	1a9b      	subs	r3, r3, r2
 80093da:	aa0c      	add	r2, sp, #48	@ 0x30
 80093dc:	9502      	str	r5, [sp, #8]
 80093de:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80093e2:	f1cb 0217 	rsb	r2, fp, #23
 80093e6:	fa43 f902 	asr.w	r9, r3, r2
 80093ea:	f1b9 0f00 	cmp.w	r9, #0
 80093ee:	dd64      	ble.n	80094ba <__kernel_rem_pio2+0x272>
 80093f0:	9b02      	ldr	r3, [sp, #8]
 80093f2:	2200      	movs	r2, #0
 80093f4:	3301      	adds	r3, #1
 80093f6:	9302      	str	r3, [sp, #8]
 80093f8:	4615      	mov	r5, r2
 80093fa:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 80093fe:	4590      	cmp	r8, r2
 8009400:	f300 80b8 	bgt.w	8009574 <__kernel_rem_pio2+0x32c>
 8009404:	f1bb 0f00 	cmp.w	fp, #0
 8009408:	dd07      	ble.n	800941a <__kernel_rem_pio2+0x1d2>
 800940a:	f1bb 0f01 	cmp.w	fp, #1
 800940e:	f000 80bf 	beq.w	8009590 <__kernel_rem_pio2+0x348>
 8009412:	f1bb 0f02 	cmp.w	fp, #2
 8009416:	f000 80c6 	beq.w	80095a6 <__kernel_rem_pio2+0x35e>
 800941a:	f1b9 0f02 	cmp.w	r9, #2
 800941e:	d14c      	bne.n	80094ba <__kernel_rem_pio2+0x272>
 8009420:	4632      	mov	r2, r6
 8009422:	463b      	mov	r3, r7
 8009424:	494e      	ldr	r1, [pc, #312]	@ (8009560 <__kernel_rem_pio2+0x318>)
 8009426:	2000      	movs	r0, #0
 8009428:	f7f6 ff2e 	bl	8000288 <__aeabi_dsub>
 800942c:	4606      	mov	r6, r0
 800942e:	460f      	mov	r7, r1
 8009430:	2d00      	cmp	r5, #0
 8009432:	d042      	beq.n	80094ba <__kernel_rem_pio2+0x272>
 8009434:	4658      	mov	r0, fp
 8009436:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8009550 <__kernel_rem_pio2+0x308>
 800943a:	f7ff fe49 	bl	80090d0 <scalbn>
 800943e:	4630      	mov	r0, r6
 8009440:	4639      	mov	r1, r7
 8009442:	ec53 2b10 	vmov	r2, r3, d0
 8009446:	f7f6 ff1f 	bl	8000288 <__aeabi_dsub>
 800944a:	4606      	mov	r6, r0
 800944c:	460f      	mov	r7, r1
 800944e:	e034      	b.n	80094ba <__kernel_rem_pio2+0x272>
 8009450:	4b44      	ldr	r3, [pc, #272]	@ (8009564 <__kernel_rem_pio2+0x31c>)
 8009452:	2200      	movs	r2, #0
 8009454:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009458:	f7f7 f8ce 	bl	80005f8 <__aeabi_dmul>
 800945c:	f7f7 fb7c 	bl	8000b58 <__aeabi_d2iz>
 8009460:	f7f7 f860 	bl	8000524 <__aeabi_i2d>
 8009464:	4b40      	ldr	r3, [pc, #256]	@ (8009568 <__kernel_rem_pio2+0x320>)
 8009466:	2200      	movs	r2, #0
 8009468:	4606      	mov	r6, r0
 800946a:	460f      	mov	r7, r1
 800946c:	f7f7 f8c4 	bl	80005f8 <__aeabi_dmul>
 8009470:	4602      	mov	r2, r0
 8009472:	460b      	mov	r3, r1
 8009474:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009478:	f7f6 ff06 	bl	8000288 <__aeabi_dsub>
 800947c:	f7f7 fb6c 	bl	8000b58 <__aeabi_d2iz>
 8009480:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009484:	f849 0b04 	str.w	r0, [r9], #4
 8009488:	4639      	mov	r1, r7
 800948a:	4630      	mov	r0, r6
 800948c:	f7f6 fefe 	bl	800028c <__adddf3>
 8009490:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009494:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009498:	e75d      	b.n	8009356 <__kernel_rem_pio2+0x10e>
 800949a:	d107      	bne.n	80094ac <__kernel_rem_pio2+0x264>
 800949c:	f108 33ff 	add.w	r3, r8, #4294967295
 80094a0:	aa0c      	add	r2, sp, #48	@ 0x30
 80094a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80094a6:	ea4f 59e3 	mov.w	r9, r3, asr #23
 80094aa:	e79e      	b.n	80093ea <__kernel_rem_pio2+0x1a2>
 80094ac:	4b2f      	ldr	r3, [pc, #188]	@ (800956c <__kernel_rem_pio2+0x324>)
 80094ae:	2200      	movs	r2, #0
 80094b0:	f7f7 fb28 	bl	8000b04 <__aeabi_dcmpge>
 80094b4:	2800      	cmp	r0, #0
 80094b6:	d143      	bne.n	8009540 <__kernel_rem_pio2+0x2f8>
 80094b8:	4681      	mov	r9, r0
 80094ba:	2200      	movs	r2, #0
 80094bc:	2300      	movs	r3, #0
 80094be:	4630      	mov	r0, r6
 80094c0:	4639      	mov	r1, r7
 80094c2:	f7f7 fb01 	bl	8000ac8 <__aeabi_dcmpeq>
 80094c6:	2800      	cmp	r0, #0
 80094c8:	f000 80bf 	beq.w	800964a <__kernel_rem_pio2+0x402>
 80094cc:	f108 33ff 	add.w	r3, r8, #4294967295
 80094d0:	2200      	movs	r2, #0
 80094d2:	9900      	ldr	r1, [sp, #0]
 80094d4:	428b      	cmp	r3, r1
 80094d6:	da6e      	bge.n	80095b6 <__kernel_rem_pio2+0x36e>
 80094d8:	2a00      	cmp	r2, #0
 80094da:	f000 8089 	beq.w	80095f0 <__kernel_rem_pio2+0x3a8>
 80094de:	f108 38ff 	add.w	r8, r8, #4294967295
 80094e2:	ab0c      	add	r3, sp, #48	@ 0x30
 80094e4:	f1ab 0b18 	sub.w	fp, fp, #24
 80094e8:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d0f6      	beq.n	80094de <__kernel_rem_pio2+0x296>
 80094f0:	4658      	mov	r0, fp
 80094f2:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8009550 <__kernel_rem_pio2+0x308>
 80094f6:	f7ff fdeb 	bl	80090d0 <scalbn>
 80094fa:	f108 0301 	add.w	r3, r8, #1
 80094fe:	00da      	lsls	r2, r3, #3
 8009500:	9205      	str	r2, [sp, #20]
 8009502:	ec55 4b10 	vmov	r4, r5, d0
 8009506:	aa70      	add	r2, sp, #448	@ 0x1c0
 8009508:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8009564 <__kernel_rem_pio2+0x31c>
 800950c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8009510:	4646      	mov	r6, r8
 8009512:	f04f 0a00 	mov.w	sl, #0
 8009516:	2e00      	cmp	r6, #0
 8009518:	f280 80cf 	bge.w	80096ba <__kernel_rem_pio2+0x472>
 800951c:	4644      	mov	r4, r8
 800951e:	2c00      	cmp	r4, #0
 8009520:	f2c0 80fd 	blt.w	800971e <__kernel_rem_pio2+0x4d6>
 8009524:	4b12      	ldr	r3, [pc, #72]	@ (8009570 <__kernel_rem_pio2+0x328>)
 8009526:	461f      	mov	r7, r3
 8009528:	ab70      	add	r3, sp, #448	@ 0x1c0
 800952a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800952e:	9306      	str	r3, [sp, #24]
 8009530:	f04f 0a00 	mov.w	sl, #0
 8009534:	f04f 0b00 	mov.w	fp, #0
 8009538:	2600      	movs	r6, #0
 800953a:	eba8 0504 	sub.w	r5, r8, r4
 800953e:	e0e2      	b.n	8009706 <__kernel_rem_pio2+0x4be>
 8009540:	f04f 0902 	mov.w	r9, #2
 8009544:	e754      	b.n	80093f0 <__kernel_rem_pio2+0x1a8>
 8009546:	bf00      	nop
	...
 8009554:	3ff00000 	.word	0x3ff00000
 8009558:	08009c90 	.word	0x08009c90
 800955c:	40200000 	.word	0x40200000
 8009560:	3ff00000 	.word	0x3ff00000
 8009564:	3e700000 	.word	0x3e700000
 8009568:	41700000 	.word	0x41700000
 800956c:	3fe00000 	.word	0x3fe00000
 8009570:	08009c50 	.word	0x08009c50
 8009574:	f854 3b04 	ldr.w	r3, [r4], #4
 8009578:	b945      	cbnz	r5, 800958c <__kernel_rem_pio2+0x344>
 800957a:	b123      	cbz	r3, 8009586 <__kernel_rem_pio2+0x33e>
 800957c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8009580:	f844 3c04 	str.w	r3, [r4, #-4]
 8009584:	2301      	movs	r3, #1
 8009586:	3201      	adds	r2, #1
 8009588:	461d      	mov	r5, r3
 800958a:	e738      	b.n	80093fe <__kernel_rem_pio2+0x1b6>
 800958c:	1acb      	subs	r3, r1, r3
 800958e:	e7f7      	b.n	8009580 <__kernel_rem_pio2+0x338>
 8009590:	f108 32ff 	add.w	r2, r8, #4294967295
 8009594:	ab0c      	add	r3, sp, #48	@ 0x30
 8009596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800959a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800959e:	a90c      	add	r1, sp, #48	@ 0x30
 80095a0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80095a4:	e739      	b.n	800941a <__kernel_rem_pio2+0x1d2>
 80095a6:	f108 32ff 	add.w	r2, r8, #4294967295
 80095aa:	ab0c      	add	r3, sp, #48	@ 0x30
 80095ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095b0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80095b4:	e7f3      	b.n	800959e <__kernel_rem_pio2+0x356>
 80095b6:	a90c      	add	r1, sp, #48	@ 0x30
 80095b8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80095bc:	3b01      	subs	r3, #1
 80095be:	430a      	orrs	r2, r1
 80095c0:	e787      	b.n	80094d2 <__kernel_rem_pio2+0x28a>
 80095c2:	3401      	adds	r4, #1
 80095c4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80095c8:	2a00      	cmp	r2, #0
 80095ca:	d0fa      	beq.n	80095c2 <__kernel_rem_pio2+0x37a>
 80095cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80095ce:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80095d2:	eb0d 0503 	add.w	r5, sp, r3
 80095d6:	9b06      	ldr	r3, [sp, #24]
 80095d8:	aa20      	add	r2, sp, #128	@ 0x80
 80095da:	4443      	add	r3, r8
 80095dc:	f108 0701 	add.w	r7, r8, #1
 80095e0:	3d98      	subs	r5, #152	@ 0x98
 80095e2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 80095e6:	4444      	add	r4, r8
 80095e8:	42bc      	cmp	r4, r7
 80095ea:	da04      	bge.n	80095f6 <__kernel_rem_pio2+0x3ae>
 80095ec:	46a0      	mov	r8, r4
 80095ee:	e6a2      	b.n	8009336 <__kernel_rem_pio2+0xee>
 80095f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095f2:	2401      	movs	r4, #1
 80095f4:	e7e6      	b.n	80095c4 <__kernel_rem_pio2+0x37c>
 80095f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095f8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80095fc:	f7f6 ff92 	bl	8000524 <__aeabi_i2d>
 8009600:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 80098c8 <__kernel_rem_pio2+0x680>
 8009604:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009608:	ed8d 7b02 	vstr	d7, [sp, #8]
 800960c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009610:	46b2      	mov	sl, r6
 8009612:	f04f 0800 	mov.w	r8, #0
 8009616:	9b05      	ldr	r3, [sp, #20]
 8009618:	4598      	cmp	r8, r3
 800961a:	dd05      	ble.n	8009628 <__kernel_rem_pio2+0x3e0>
 800961c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009620:	3701      	adds	r7, #1
 8009622:	eca5 7b02 	vstmia	r5!, {d7}
 8009626:	e7df      	b.n	80095e8 <__kernel_rem_pio2+0x3a0>
 8009628:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800962c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009630:	f7f6 ffe2 	bl	80005f8 <__aeabi_dmul>
 8009634:	4602      	mov	r2, r0
 8009636:	460b      	mov	r3, r1
 8009638:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800963c:	f7f6 fe26 	bl	800028c <__adddf3>
 8009640:	f108 0801 	add.w	r8, r8, #1
 8009644:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009648:	e7e5      	b.n	8009616 <__kernel_rem_pio2+0x3ce>
 800964a:	f1cb 0000 	rsb	r0, fp, #0
 800964e:	ec47 6b10 	vmov	d0, r6, r7
 8009652:	f7ff fd3d 	bl	80090d0 <scalbn>
 8009656:	ec55 4b10 	vmov	r4, r5, d0
 800965a:	4b9d      	ldr	r3, [pc, #628]	@ (80098d0 <__kernel_rem_pio2+0x688>)
 800965c:	2200      	movs	r2, #0
 800965e:	4620      	mov	r0, r4
 8009660:	4629      	mov	r1, r5
 8009662:	f7f7 fa4f 	bl	8000b04 <__aeabi_dcmpge>
 8009666:	b300      	cbz	r0, 80096aa <__kernel_rem_pio2+0x462>
 8009668:	4b9a      	ldr	r3, [pc, #616]	@ (80098d4 <__kernel_rem_pio2+0x68c>)
 800966a:	2200      	movs	r2, #0
 800966c:	4620      	mov	r0, r4
 800966e:	4629      	mov	r1, r5
 8009670:	f7f6 ffc2 	bl	80005f8 <__aeabi_dmul>
 8009674:	f7f7 fa70 	bl	8000b58 <__aeabi_d2iz>
 8009678:	4606      	mov	r6, r0
 800967a:	f7f6 ff53 	bl	8000524 <__aeabi_i2d>
 800967e:	4b94      	ldr	r3, [pc, #592]	@ (80098d0 <__kernel_rem_pio2+0x688>)
 8009680:	2200      	movs	r2, #0
 8009682:	f7f6 ffb9 	bl	80005f8 <__aeabi_dmul>
 8009686:	460b      	mov	r3, r1
 8009688:	4602      	mov	r2, r0
 800968a:	4629      	mov	r1, r5
 800968c:	4620      	mov	r0, r4
 800968e:	f7f6 fdfb 	bl	8000288 <__aeabi_dsub>
 8009692:	f7f7 fa61 	bl	8000b58 <__aeabi_d2iz>
 8009696:	ab0c      	add	r3, sp, #48	@ 0x30
 8009698:	f10b 0b18 	add.w	fp, fp, #24
 800969c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80096a0:	f108 0801 	add.w	r8, r8, #1
 80096a4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80096a8:	e722      	b.n	80094f0 <__kernel_rem_pio2+0x2a8>
 80096aa:	4620      	mov	r0, r4
 80096ac:	4629      	mov	r1, r5
 80096ae:	f7f7 fa53 	bl	8000b58 <__aeabi_d2iz>
 80096b2:	ab0c      	add	r3, sp, #48	@ 0x30
 80096b4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80096b8:	e71a      	b.n	80094f0 <__kernel_rem_pio2+0x2a8>
 80096ba:	ab0c      	add	r3, sp, #48	@ 0x30
 80096bc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80096c0:	f7f6 ff30 	bl	8000524 <__aeabi_i2d>
 80096c4:	4622      	mov	r2, r4
 80096c6:	462b      	mov	r3, r5
 80096c8:	f7f6 ff96 	bl	80005f8 <__aeabi_dmul>
 80096cc:	4652      	mov	r2, sl
 80096ce:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80096d2:	465b      	mov	r3, fp
 80096d4:	4620      	mov	r0, r4
 80096d6:	4629      	mov	r1, r5
 80096d8:	f7f6 ff8e 	bl	80005f8 <__aeabi_dmul>
 80096dc:	3e01      	subs	r6, #1
 80096de:	4604      	mov	r4, r0
 80096e0:	460d      	mov	r5, r1
 80096e2:	e718      	b.n	8009516 <__kernel_rem_pio2+0x2ce>
 80096e4:	9906      	ldr	r1, [sp, #24]
 80096e6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 80096ea:	9106      	str	r1, [sp, #24]
 80096ec:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 80096f0:	f7f6 ff82 	bl	80005f8 <__aeabi_dmul>
 80096f4:	4602      	mov	r2, r0
 80096f6:	460b      	mov	r3, r1
 80096f8:	4650      	mov	r0, sl
 80096fa:	4659      	mov	r1, fp
 80096fc:	f7f6 fdc6 	bl	800028c <__adddf3>
 8009700:	3601      	adds	r6, #1
 8009702:	4682      	mov	sl, r0
 8009704:	468b      	mov	fp, r1
 8009706:	9b00      	ldr	r3, [sp, #0]
 8009708:	429e      	cmp	r6, r3
 800970a:	dc01      	bgt.n	8009710 <__kernel_rem_pio2+0x4c8>
 800970c:	42b5      	cmp	r5, r6
 800970e:	dae9      	bge.n	80096e4 <__kernel_rem_pio2+0x49c>
 8009710:	ab48      	add	r3, sp, #288	@ 0x120
 8009712:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009716:	e9c5 ab00 	strd	sl, fp, [r5]
 800971a:	3c01      	subs	r4, #1
 800971c:	e6ff      	b.n	800951e <__kernel_rem_pio2+0x2d6>
 800971e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8009720:	2b02      	cmp	r3, #2
 8009722:	dc0b      	bgt.n	800973c <__kernel_rem_pio2+0x4f4>
 8009724:	2b00      	cmp	r3, #0
 8009726:	dc39      	bgt.n	800979c <__kernel_rem_pio2+0x554>
 8009728:	d05d      	beq.n	80097e6 <__kernel_rem_pio2+0x59e>
 800972a:	9b02      	ldr	r3, [sp, #8]
 800972c:	f003 0007 	and.w	r0, r3, #7
 8009730:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8009734:	ecbd 8b02 	vpop	{d8}
 8009738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800973c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800973e:	2b03      	cmp	r3, #3
 8009740:	d1f3      	bne.n	800972a <__kernel_rem_pio2+0x4e2>
 8009742:	9b05      	ldr	r3, [sp, #20]
 8009744:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009748:	eb0d 0403 	add.w	r4, sp, r3
 800974c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8009750:	4625      	mov	r5, r4
 8009752:	46c2      	mov	sl, r8
 8009754:	f1ba 0f00 	cmp.w	sl, #0
 8009758:	f1a5 0508 	sub.w	r5, r5, #8
 800975c:	dc6b      	bgt.n	8009836 <__kernel_rem_pio2+0x5ee>
 800975e:	4645      	mov	r5, r8
 8009760:	2d01      	cmp	r5, #1
 8009762:	f1a4 0408 	sub.w	r4, r4, #8
 8009766:	f300 8087 	bgt.w	8009878 <__kernel_rem_pio2+0x630>
 800976a:	9c05      	ldr	r4, [sp, #20]
 800976c:	ab48      	add	r3, sp, #288	@ 0x120
 800976e:	441c      	add	r4, r3
 8009770:	2000      	movs	r0, #0
 8009772:	2100      	movs	r1, #0
 8009774:	f1b8 0f01 	cmp.w	r8, #1
 8009778:	f300 809c 	bgt.w	80098b4 <__kernel_rem_pio2+0x66c>
 800977c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8009780:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8009784:	f1b9 0f00 	cmp.w	r9, #0
 8009788:	f040 80a6 	bne.w	80098d8 <__kernel_rem_pio2+0x690>
 800978c:	9b04      	ldr	r3, [sp, #16]
 800978e:	e9c3 7800 	strd	r7, r8, [r3]
 8009792:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8009796:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800979a:	e7c6      	b.n	800972a <__kernel_rem_pio2+0x4e2>
 800979c:	9d05      	ldr	r5, [sp, #20]
 800979e:	ab48      	add	r3, sp, #288	@ 0x120
 80097a0:	441d      	add	r5, r3
 80097a2:	4644      	mov	r4, r8
 80097a4:	2000      	movs	r0, #0
 80097a6:	2100      	movs	r1, #0
 80097a8:	2c00      	cmp	r4, #0
 80097aa:	da35      	bge.n	8009818 <__kernel_rem_pio2+0x5d0>
 80097ac:	f1b9 0f00 	cmp.w	r9, #0
 80097b0:	d038      	beq.n	8009824 <__kernel_rem_pio2+0x5dc>
 80097b2:	4602      	mov	r2, r0
 80097b4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80097b8:	9c04      	ldr	r4, [sp, #16]
 80097ba:	e9c4 2300 	strd	r2, r3, [r4]
 80097be:	4602      	mov	r2, r0
 80097c0:	460b      	mov	r3, r1
 80097c2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80097c6:	f7f6 fd5f 	bl	8000288 <__aeabi_dsub>
 80097ca:	ad4a      	add	r5, sp, #296	@ 0x128
 80097cc:	2401      	movs	r4, #1
 80097ce:	45a0      	cmp	r8, r4
 80097d0:	da2b      	bge.n	800982a <__kernel_rem_pio2+0x5e2>
 80097d2:	f1b9 0f00 	cmp.w	r9, #0
 80097d6:	d002      	beq.n	80097de <__kernel_rem_pio2+0x596>
 80097d8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80097dc:	4619      	mov	r1, r3
 80097de:	9b04      	ldr	r3, [sp, #16]
 80097e0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80097e4:	e7a1      	b.n	800972a <__kernel_rem_pio2+0x4e2>
 80097e6:	9c05      	ldr	r4, [sp, #20]
 80097e8:	ab48      	add	r3, sp, #288	@ 0x120
 80097ea:	441c      	add	r4, r3
 80097ec:	2000      	movs	r0, #0
 80097ee:	2100      	movs	r1, #0
 80097f0:	f1b8 0f00 	cmp.w	r8, #0
 80097f4:	da09      	bge.n	800980a <__kernel_rem_pio2+0x5c2>
 80097f6:	f1b9 0f00 	cmp.w	r9, #0
 80097fa:	d002      	beq.n	8009802 <__kernel_rem_pio2+0x5ba>
 80097fc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009800:	4619      	mov	r1, r3
 8009802:	9b04      	ldr	r3, [sp, #16]
 8009804:	e9c3 0100 	strd	r0, r1, [r3]
 8009808:	e78f      	b.n	800972a <__kernel_rem_pio2+0x4e2>
 800980a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800980e:	f7f6 fd3d 	bl	800028c <__adddf3>
 8009812:	f108 38ff 	add.w	r8, r8, #4294967295
 8009816:	e7eb      	b.n	80097f0 <__kernel_rem_pio2+0x5a8>
 8009818:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800981c:	f7f6 fd36 	bl	800028c <__adddf3>
 8009820:	3c01      	subs	r4, #1
 8009822:	e7c1      	b.n	80097a8 <__kernel_rem_pio2+0x560>
 8009824:	4602      	mov	r2, r0
 8009826:	460b      	mov	r3, r1
 8009828:	e7c6      	b.n	80097b8 <__kernel_rem_pio2+0x570>
 800982a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800982e:	f7f6 fd2d 	bl	800028c <__adddf3>
 8009832:	3401      	adds	r4, #1
 8009834:	e7cb      	b.n	80097ce <__kernel_rem_pio2+0x586>
 8009836:	ed95 7b00 	vldr	d7, [r5]
 800983a:	ed8d 7b00 	vstr	d7, [sp]
 800983e:	ed95 7b02 	vldr	d7, [r5, #8]
 8009842:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009846:	ec53 2b17 	vmov	r2, r3, d7
 800984a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800984e:	f7f6 fd1d 	bl	800028c <__adddf3>
 8009852:	4602      	mov	r2, r0
 8009854:	460b      	mov	r3, r1
 8009856:	4606      	mov	r6, r0
 8009858:	460f      	mov	r7, r1
 800985a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800985e:	f7f6 fd13 	bl	8000288 <__aeabi_dsub>
 8009862:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009866:	f7f6 fd11 	bl	800028c <__adddf3>
 800986a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800986e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8009872:	e9c5 6700 	strd	r6, r7, [r5]
 8009876:	e76d      	b.n	8009754 <__kernel_rem_pio2+0x50c>
 8009878:	ed94 7b00 	vldr	d7, [r4]
 800987c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8009880:	ec51 0b17 	vmov	r0, r1, d7
 8009884:	4652      	mov	r2, sl
 8009886:	465b      	mov	r3, fp
 8009888:	ed8d 7b00 	vstr	d7, [sp]
 800988c:	f7f6 fcfe 	bl	800028c <__adddf3>
 8009890:	4602      	mov	r2, r0
 8009892:	460b      	mov	r3, r1
 8009894:	4606      	mov	r6, r0
 8009896:	460f      	mov	r7, r1
 8009898:	e9dd 0100 	ldrd	r0, r1, [sp]
 800989c:	f7f6 fcf4 	bl	8000288 <__aeabi_dsub>
 80098a0:	4652      	mov	r2, sl
 80098a2:	465b      	mov	r3, fp
 80098a4:	f7f6 fcf2 	bl	800028c <__adddf3>
 80098a8:	3d01      	subs	r5, #1
 80098aa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80098ae:	e9c4 6700 	strd	r6, r7, [r4]
 80098b2:	e755      	b.n	8009760 <__kernel_rem_pio2+0x518>
 80098b4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80098b8:	f7f6 fce8 	bl	800028c <__adddf3>
 80098bc:	f108 38ff 	add.w	r8, r8, #4294967295
 80098c0:	e758      	b.n	8009774 <__kernel_rem_pio2+0x52c>
 80098c2:	bf00      	nop
 80098c4:	f3af 8000 	nop.w
	...
 80098d0:	41700000 	.word	0x41700000
 80098d4:	3e700000 	.word	0x3e700000
 80098d8:	9b04      	ldr	r3, [sp, #16]
 80098da:	9a04      	ldr	r2, [sp, #16]
 80098dc:	601f      	str	r7, [r3, #0]
 80098de:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 80098e2:	605c      	str	r4, [r3, #4]
 80098e4:	609d      	str	r5, [r3, #8]
 80098e6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80098ea:	60d3      	str	r3, [r2, #12]
 80098ec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80098f0:	6110      	str	r0, [r2, #16]
 80098f2:	6153      	str	r3, [r2, #20]
 80098f4:	e719      	b.n	800972a <__kernel_rem_pio2+0x4e2>
 80098f6:	bf00      	nop

080098f8 <floor>:
 80098f8:	ec51 0b10 	vmov	r0, r1, d0
 80098fc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009904:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8009908:	2e13      	cmp	r6, #19
 800990a:	460c      	mov	r4, r1
 800990c:	4605      	mov	r5, r0
 800990e:	4680      	mov	r8, r0
 8009910:	dc34      	bgt.n	800997c <floor+0x84>
 8009912:	2e00      	cmp	r6, #0
 8009914:	da17      	bge.n	8009946 <floor+0x4e>
 8009916:	a332      	add	r3, pc, #200	@ (adr r3, 80099e0 <floor+0xe8>)
 8009918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800991c:	f7f6 fcb6 	bl	800028c <__adddf3>
 8009920:	2200      	movs	r2, #0
 8009922:	2300      	movs	r3, #0
 8009924:	f7f7 f8f8 	bl	8000b18 <__aeabi_dcmpgt>
 8009928:	b150      	cbz	r0, 8009940 <floor+0x48>
 800992a:	2c00      	cmp	r4, #0
 800992c:	da55      	bge.n	80099da <floor+0xe2>
 800992e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8009932:	432c      	orrs	r4, r5
 8009934:	2500      	movs	r5, #0
 8009936:	42ac      	cmp	r4, r5
 8009938:	4c2b      	ldr	r4, [pc, #172]	@ (80099e8 <floor+0xf0>)
 800993a:	bf08      	it	eq
 800993c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8009940:	4621      	mov	r1, r4
 8009942:	4628      	mov	r0, r5
 8009944:	e023      	b.n	800998e <floor+0x96>
 8009946:	4f29      	ldr	r7, [pc, #164]	@ (80099ec <floor+0xf4>)
 8009948:	4137      	asrs	r7, r6
 800994a:	ea01 0307 	and.w	r3, r1, r7
 800994e:	4303      	orrs	r3, r0
 8009950:	d01d      	beq.n	800998e <floor+0x96>
 8009952:	a323      	add	r3, pc, #140	@ (adr r3, 80099e0 <floor+0xe8>)
 8009954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009958:	f7f6 fc98 	bl	800028c <__adddf3>
 800995c:	2200      	movs	r2, #0
 800995e:	2300      	movs	r3, #0
 8009960:	f7f7 f8da 	bl	8000b18 <__aeabi_dcmpgt>
 8009964:	2800      	cmp	r0, #0
 8009966:	d0eb      	beq.n	8009940 <floor+0x48>
 8009968:	2c00      	cmp	r4, #0
 800996a:	bfbe      	ittt	lt
 800996c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8009970:	4133      	asrlt	r3, r6
 8009972:	18e4      	addlt	r4, r4, r3
 8009974:	ea24 0407 	bic.w	r4, r4, r7
 8009978:	2500      	movs	r5, #0
 800997a:	e7e1      	b.n	8009940 <floor+0x48>
 800997c:	2e33      	cmp	r6, #51	@ 0x33
 800997e:	dd0a      	ble.n	8009996 <floor+0x9e>
 8009980:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8009984:	d103      	bne.n	800998e <floor+0x96>
 8009986:	4602      	mov	r2, r0
 8009988:	460b      	mov	r3, r1
 800998a:	f7f6 fc7f 	bl	800028c <__adddf3>
 800998e:	ec41 0b10 	vmov	d0, r0, r1
 8009992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009996:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800999a:	f04f 37ff 	mov.w	r7, #4294967295
 800999e:	40df      	lsrs	r7, r3
 80099a0:	4207      	tst	r7, r0
 80099a2:	d0f4      	beq.n	800998e <floor+0x96>
 80099a4:	a30e      	add	r3, pc, #56	@ (adr r3, 80099e0 <floor+0xe8>)
 80099a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099aa:	f7f6 fc6f 	bl	800028c <__adddf3>
 80099ae:	2200      	movs	r2, #0
 80099b0:	2300      	movs	r3, #0
 80099b2:	f7f7 f8b1 	bl	8000b18 <__aeabi_dcmpgt>
 80099b6:	2800      	cmp	r0, #0
 80099b8:	d0c2      	beq.n	8009940 <floor+0x48>
 80099ba:	2c00      	cmp	r4, #0
 80099bc:	da0a      	bge.n	80099d4 <floor+0xdc>
 80099be:	2e14      	cmp	r6, #20
 80099c0:	d101      	bne.n	80099c6 <floor+0xce>
 80099c2:	3401      	adds	r4, #1
 80099c4:	e006      	b.n	80099d4 <floor+0xdc>
 80099c6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80099ca:	2301      	movs	r3, #1
 80099cc:	40b3      	lsls	r3, r6
 80099ce:	441d      	add	r5, r3
 80099d0:	4545      	cmp	r5, r8
 80099d2:	d3f6      	bcc.n	80099c2 <floor+0xca>
 80099d4:	ea25 0507 	bic.w	r5, r5, r7
 80099d8:	e7b2      	b.n	8009940 <floor+0x48>
 80099da:	2500      	movs	r5, #0
 80099dc:	462c      	mov	r4, r5
 80099de:	e7af      	b.n	8009940 <floor+0x48>
 80099e0:	8800759c 	.word	0x8800759c
 80099e4:	7e37e43c 	.word	0x7e37e43c
 80099e8:	bff00000 	.word	0xbff00000
 80099ec:	000fffff 	.word	0x000fffff

080099f0 <_init>:
 80099f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099f2:	bf00      	nop
 80099f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099f6:	bc08      	pop	{r3}
 80099f8:	469e      	mov	lr, r3
 80099fa:	4770      	bx	lr

080099fc <_fini>:
 80099fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099fe:	bf00      	nop
 8009a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a02:	bc08      	pop	{r3}
 8009a04:	469e      	mov	lr, r3
 8009a06:	4770      	bx	lr
