
flying_arm_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bdc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08005d70  08005d70  00006d70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e50  08005e50  00007100  2**0
                  CONTENTS
  4 .ARM          00000008  08005e50  08005e50  00006e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e58  08005e58  00007100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e58  08005e58  00006e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005e5c  08005e5c  00006e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000100  20000000  08005e60  00007000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007100  2**0
                  CONTENTS
 10 .bss          000002ac  20000100  20000100  00007100  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200003ac  200003ac  00007100  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007100  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d848  00000000  00000000  00007130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f36  00000000  00000000  00014978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000de8  00000000  00000000  000168b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ae2  00000000  00000000  00017698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000230a8  00000000  00000000  0001817a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011aa1  00000000  00000000  0003b222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8b11  00000000  00000000  0004ccc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001257d4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004364  00000000  00000000  00125818  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  00129b7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000100 	.word	0x20000100
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005d54 	.word	0x08005d54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000104 	.word	0x20000104
 80001cc:	08005d54 	.word	0x08005d54

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e98:	b590      	push	{r4, r7, lr}
 8000e9a:	b093      	sub	sp, #76	@ 0x4c
 8000e9c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9e:	f001 f931 	bl	8002104 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea2:	f000 f87f 	bl	8000fa4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea6:	f000 f9df 	bl	8001268 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000eaa:	f000 f8d9 	bl	8001060 <MX_ADC1_Init>
  MX_I2C3_Init();
 8000eae:	f000 f937 	bl	8001120 <MX_I2C3_Init>
  MX_TIM4_Init();
 8000eb2:	f000 f963 	bl	800117c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  Lcd_PortType ports[] = {FA_Data4_GPIO_Port, FA_Data5_GPIO_Port, FA_Data6_GPIO_Port, FA_Data7_GPIO_Port};
 8000eb6:	4b36      	ldr	r3, [pc, #216]	@ (8000f90 <main+0xf8>)
 8000eb8:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8000ebc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ebe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Lcd_PinType pins[] = {FA_Data4_Pin, FA_Data5_Pin, FA_Data6_Pin, FA_Data7_Pin};
 8000ec2:	4a34      	ldr	r2, [pc, #208]	@ (8000f94 <main+0xfc>)
 8000ec4:	f107 0320 	add.w	r3, r7, #32
 8000ec8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ecc:	e883 0003 	stmia.w	r3, {r0, r1}
  Lcd_HandleTypeDef lcd = Lcd_create(ports, pins, FA_RS_GPIO_Port, FA_RS_Pin, FA_EN_GPIO_Port, FA_EN_Pin, LCD_4_BIT_MODE);
 8000ed0:	f107 0008 	add.w	r0, r7, #8
 8000ed4:	f107 0220 	add.w	r2, r7, #32
 8000ed8:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8000edc:	2300      	movs	r3, #0
 8000ede:	9303      	str	r3, [sp, #12]
 8000ee0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000ee4:	9302      	str	r3, [sp, #8]
 8000ee6:	4b2c      	ldr	r3, [pc, #176]	@ (8000f98 <main+0x100>)
 8000ee8:	9301      	str	r3, [sp, #4]
 8000eea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000eee:	9300      	str	r3, [sp, #0]
 8000ef0:	4b29      	ldr	r3, [pc, #164]	@ (8000f98 <main+0x100>)
 8000ef2:	f000 fc74 	bl	80017de <Lcd_create>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MPU6050_Read_All(&hi2c3,&IMU_struct);
 8000ef6:	4929      	ldr	r1, [pc, #164]	@ (8000f9c <main+0x104>)
 8000ef8:	4829      	ldr	r0, [pc, #164]	@ (8000fa0 <main+0x108>)
 8000efa:	f000 fdc1 	bl	8001a80 <MPU6050_Read_All>

	  Lcd_clear(&lcd);
 8000efe:	f107 0308 	add.w	r3, r7, #8
 8000f02:	4618      	mov	r0, r3
 8000f04:	f000 fd12 	bl	800192c <Lcd_clear>

	  Lcd_cursor(&lcd,0,0);
 8000f08:	f107 0308 	add.w	r3, r7, #8
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4618      	mov	r0, r3
 8000f12:	f000 fcf1 	bl	80018f8 <Lcd_cursor>
	  Lcd_int(&lcd,IMU_struct.Gx);
 8000f16:	4b21      	ldr	r3, [pc, #132]	@ (8000f9c <main+0x104>)
 8000f18:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	4619      	mov	r1, r3
 8000f20:	f7ff fe1a 	bl	8000b58 <__aeabi_d2iz>
 8000f24:	4602      	mov	r2, r0
 8000f26:	f107 0308 	add.w	r3, r7, #8
 8000f2a:	4611      	mov	r1, r2
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f000 fcab 	bl	8001888 <Lcd_int>
	  Lcd_cursor(&lcd,0,8);
 8000f32:	f107 0308 	add.w	r3, r7, #8
 8000f36:	2208      	movs	r2, #8
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f000 fcdc 	bl	80018f8 <Lcd_cursor>
	  Lcd_int(&lcd,IMU_struct.Gy);
 8000f40:	4b16      	ldr	r3, [pc, #88]	@ (8000f9c <main+0x104>)
 8000f42:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8000f46:	4610      	mov	r0, r2
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f7ff fe05 	bl	8000b58 <__aeabi_d2iz>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	f107 0308 	add.w	r3, r7, #8
 8000f54:	4611      	mov	r1, r2
 8000f56:	4618      	mov	r0, r3
 8000f58:	f000 fc96 	bl	8001888 <Lcd_int>
	  Lcd_cursor(&lcd,0,16);
 8000f5c:	f107 0308 	add.w	r3, r7, #8
 8000f60:	2210      	movs	r2, #16
 8000f62:	2100      	movs	r1, #0
 8000f64:	4618      	mov	r0, r3
 8000f66:	f000 fcc7 	bl	80018f8 <Lcd_cursor>
	  Lcd_int(&lcd,IMU_struct.Gz);
 8000f6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f9c <main+0x104>)
 8000f6c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8000f70:	4610      	mov	r0, r2
 8000f72:	4619      	mov	r1, r3
 8000f74:	f7ff fdf0 	bl	8000b58 <__aeabi_d2iz>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	f107 0308 	add.w	r3, r7, #8
 8000f7e:	4611      	mov	r1, r2
 8000f80:	4618      	mov	r0, r3
 8000f82:	f000 fc81 	bl	8001888 <Lcd_int>
	  HAL_Delay(100);
 8000f86:	2064      	movs	r0, #100	@ 0x64
 8000f88:	f001 f92e 	bl	80021e8 <HAL_Delay>
	  MPU6050_Read_All(&hi2c3,&IMU_struct);
 8000f8c:	bf00      	nop
 8000f8e:	e7b2      	b.n	8000ef6 <main+0x5e>
 8000f90:	08005d70 	.word	0x08005d70
 8000f94:	08005d80 	.word	0x08005d80
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	20000200 	.word	0x20000200
 8000fa0:	20000164 	.word	0x20000164

08000fa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b094      	sub	sp, #80	@ 0x50
 8000fa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000faa:	f107 0320 	add.w	r3, r7, #32
 8000fae:	2230      	movs	r2, #48	@ 0x30
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f003 fede 	bl	8004d74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb8:	f107 030c 	add.w	r3, r7, #12
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	4b22      	ldr	r3, [pc, #136]	@ (8001058 <SystemClock_Config+0xb4>)
 8000fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd0:	4a21      	ldr	r2, [pc, #132]	@ (8001058 <SystemClock_Config+0xb4>)
 8000fd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fd6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fd8:	4b1f      	ldr	r3, [pc, #124]	@ (8001058 <SystemClock_Config+0xb4>)
 8000fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	4b1c      	ldr	r3, [pc, #112]	@ (800105c <SystemClock_Config+0xb8>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a1b      	ldr	r2, [pc, #108]	@ (800105c <SystemClock_Config+0xb8>)
 8000fee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ff2:	6013      	str	r3, [r2, #0]
 8000ff4:	4b19      	ldr	r3, [pc, #100]	@ (800105c <SystemClock_Config+0xb8>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ffc:	607b      	str	r3, [r7, #4]
 8000ffe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001000:	2302      	movs	r3, #2
 8001002:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001004:	2301      	movs	r3, #1
 8001006:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001008:	2310      	movs	r3, #16
 800100a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800100c:	2300      	movs	r3, #0
 800100e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001010:	f107 0320 	add.w	r3, r7, #32
 8001014:	4618      	mov	r0, r3
 8001016:	f002 fca5 	bl	8003964 <HAL_RCC_OscConfig>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001020:	f000 f9fe 	bl	8001420 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001024:	230f      	movs	r3, #15
 8001026:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001028:	2300      	movs	r3, #0
 800102a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001030:	2300      	movs	r3, #0
 8001032:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001034:	2300      	movs	r3, #0
 8001036:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001038:	f107 030c 	add.w	r3, r7, #12
 800103c:	2100      	movs	r1, #0
 800103e:	4618      	mov	r0, r3
 8001040:	f002 ff08 	bl	8003e54 <HAL_RCC_ClockConfig>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800104a:	f000 f9e9 	bl	8001420 <Error_Handler>
  }
}
 800104e:	bf00      	nop
 8001050:	3750      	adds	r7, #80	@ 0x50
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40023800 	.word	0x40023800
 800105c:	40007000 	.word	0x40007000

08001060 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001066:	463b      	mov	r3, r7
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001072:	4b28      	ldr	r3, [pc, #160]	@ (8001114 <MX_ADC1_Init+0xb4>)
 8001074:	4a28      	ldr	r2, [pc, #160]	@ (8001118 <MX_ADC1_Init+0xb8>)
 8001076:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001078:	4b26      	ldr	r3, [pc, #152]	@ (8001114 <MX_ADC1_Init+0xb4>)
 800107a:	2200      	movs	r2, #0
 800107c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800107e:	4b25      	ldr	r3, [pc, #148]	@ (8001114 <MX_ADC1_Init+0xb4>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001084:	4b23      	ldr	r3, [pc, #140]	@ (8001114 <MX_ADC1_Init+0xb4>)
 8001086:	2201      	movs	r2, #1
 8001088:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800108a:	4b22      	ldr	r3, [pc, #136]	@ (8001114 <MX_ADC1_Init+0xb4>)
 800108c:	2201      	movs	r2, #1
 800108e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001090:	4b20      	ldr	r3, [pc, #128]	@ (8001114 <MX_ADC1_Init+0xb4>)
 8001092:	2200      	movs	r2, #0
 8001094:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001098:	4b1e      	ldr	r3, [pc, #120]	@ (8001114 <MX_ADC1_Init+0xb4>)
 800109a:	2200      	movs	r2, #0
 800109c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800109e:	4b1d      	ldr	r3, [pc, #116]	@ (8001114 <MX_ADC1_Init+0xb4>)
 80010a0:	4a1e      	ldr	r2, [pc, #120]	@ (800111c <MX_ADC1_Init+0xbc>)
 80010a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001114 <MX_ADC1_Init+0xb4>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80010aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001114 <MX_ADC1_Init+0xb4>)
 80010ac:	2202      	movs	r2, #2
 80010ae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010b0:	4b18      	ldr	r3, [pc, #96]	@ (8001114 <MX_ADC1_Init+0xb4>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010b8:	4b16      	ldr	r3, [pc, #88]	@ (8001114 <MX_ADC1_Init+0xb4>)
 80010ba:	2201      	movs	r2, #1
 80010bc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010be:	4815      	ldr	r0, [pc, #84]	@ (8001114 <MX_ADC1_Init+0xb4>)
 80010c0:	f001 f8b6 	bl	8002230 <HAL_ADC_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80010ca:	f000 f9a9 	bl	8001420 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80010ce:	230a      	movs	r3, #10
 80010d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010d2:	2301      	movs	r3, #1
 80010d4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80010d6:	2302      	movs	r3, #2
 80010d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010da:	463b      	mov	r3, r7
 80010dc:	4619      	mov	r1, r3
 80010de:	480d      	ldr	r0, [pc, #52]	@ (8001114 <MX_ADC1_Init+0xb4>)
 80010e0:	f001 f8ea 	bl	80022b8 <HAL_ADC_ConfigChannel>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80010ea:	f000 f999 	bl	8001420 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80010ee:	230c      	movs	r3, #12
 80010f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80010f2:	2302      	movs	r3, #2
 80010f4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010f6:	463b      	mov	r3, r7
 80010f8:	4619      	mov	r1, r3
 80010fa:	4806      	ldr	r0, [pc, #24]	@ (8001114 <MX_ADC1_Init+0xb4>)
 80010fc:	f001 f8dc 	bl	80022b8 <HAL_ADC_ConfigChannel>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001106:	f000 f98b 	bl	8001420 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800110a:	bf00      	nop
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	2000011c 	.word	0x2000011c
 8001118:	40012000 	.word	0x40012000
 800111c:	0f000001 	.word	0x0f000001

08001120 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001124:	4b12      	ldr	r3, [pc, #72]	@ (8001170 <MX_I2C3_Init+0x50>)
 8001126:	4a13      	ldr	r2, [pc, #76]	@ (8001174 <MX_I2C3_Init+0x54>)
 8001128:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800112a:	4b11      	ldr	r3, [pc, #68]	@ (8001170 <MX_I2C3_Init+0x50>)
 800112c:	4a12      	ldr	r2, [pc, #72]	@ (8001178 <MX_I2C3_Init+0x58>)
 800112e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001130:	4b0f      	ldr	r3, [pc, #60]	@ (8001170 <MX_I2C3_Init+0x50>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001136:	4b0e      	ldr	r3, [pc, #56]	@ (8001170 <MX_I2C3_Init+0x50>)
 8001138:	2200      	movs	r2, #0
 800113a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800113c:	4b0c      	ldr	r3, [pc, #48]	@ (8001170 <MX_I2C3_Init+0x50>)
 800113e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001142:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001144:	4b0a      	ldr	r3, [pc, #40]	@ (8001170 <MX_I2C3_Init+0x50>)
 8001146:	2200      	movs	r2, #0
 8001148:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800114a:	4b09      	ldr	r3, [pc, #36]	@ (8001170 <MX_I2C3_Init+0x50>)
 800114c:	2200      	movs	r2, #0
 800114e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001150:	4b07      	ldr	r3, [pc, #28]	@ (8001170 <MX_I2C3_Init+0x50>)
 8001152:	2200      	movs	r2, #0
 8001154:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001156:	4b06      	ldr	r3, [pc, #24]	@ (8001170 <MX_I2C3_Init+0x50>)
 8001158:	2200      	movs	r2, #0
 800115a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800115c:	4804      	ldr	r0, [pc, #16]	@ (8001170 <MX_I2C3_Init+0x50>)
 800115e:	f001 fdb5 	bl	8002ccc <HAL_I2C_Init>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001168:	f000 f95a 	bl	8001420 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20000164 	.word	0x20000164
 8001174:	40005c00 	.word	0x40005c00
 8001178:	000186a0 	.word	0x000186a0

0800117c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08e      	sub	sp, #56	@ 0x38
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001182:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001190:	f107 0320 	add.w	r3, r7, #32
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800119a:	1d3b      	adds	r3, r7, #4
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	611a      	str	r2, [r3, #16]
 80011a8:	615a      	str	r2, [r3, #20]
 80011aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80011ac:	4b2c      	ldr	r3, [pc, #176]	@ (8001260 <MX_TIM4_Init+0xe4>)
 80011ae:	4a2d      	ldr	r2, [pc, #180]	@ (8001264 <MX_TIM4_Init+0xe8>)
 80011b0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 204;
 80011b2:	4b2b      	ldr	r3, [pc, #172]	@ (8001260 <MX_TIM4_Init+0xe4>)
 80011b4:	22cc      	movs	r2, #204	@ 0xcc
 80011b6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b8:	4b29      	ldr	r3, [pc, #164]	@ (8001260 <MX_TIM4_Init+0xe4>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4095;
 80011be:	4b28      	ldr	r3, [pc, #160]	@ (8001260 <MX_TIM4_Init+0xe4>)
 80011c0:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80011c4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011c6:	4b26      	ldr	r3, [pc, #152]	@ (8001260 <MX_TIM4_Init+0xe4>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011cc:	4b24      	ldr	r3, [pc, #144]	@ (8001260 <MX_TIM4_Init+0xe4>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80011d2:	4823      	ldr	r0, [pc, #140]	@ (8001260 <MX_TIM4_Init+0xe4>)
 80011d4:	f003 f80a 	bl	80041ec <HAL_TIM_Base_Init>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80011de:	f000 f91f 	bl	8001420 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80011e8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011ec:	4619      	mov	r1, r3
 80011ee:	481c      	ldr	r0, [pc, #112]	@ (8001260 <MX_TIM4_Init+0xe4>)
 80011f0:	f003 f966 	bl	80044c0 <HAL_TIM_ConfigClockSource>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80011fa:	f000 f911 	bl	8001420 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80011fe:	4818      	ldr	r0, [pc, #96]	@ (8001260 <MX_TIM4_Init+0xe4>)
 8001200:	f003 f843 	bl	800428a <HAL_TIM_PWM_Init>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800120a:	f000 f909 	bl	8001420 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800120e:	2300      	movs	r3, #0
 8001210:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001212:	2300      	movs	r3, #0
 8001214:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001216:	f107 0320 	add.w	r3, r7, #32
 800121a:	4619      	mov	r1, r3
 800121c:	4810      	ldr	r0, [pc, #64]	@ (8001260 <MX_TIM4_Init+0xe4>)
 800121e:	f003 fd0d 	bl	8004c3c <HAL_TIMEx_MasterConfigSynchronization>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001228:	f000 f8fa 	bl	8001420 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800122c:	2360      	movs	r3, #96	@ 0x60
 800122e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001234:	2300      	movs	r3, #0
 8001236:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	2200      	movs	r2, #0
 8001240:	4619      	mov	r1, r3
 8001242:	4807      	ldr	r0, [pc, #28]	@ (8001260 <MX_TIM4_Init+0xe4>)
 8001244:	f003 f87a 	bl	800433c <HAL_TIM_PWM_ConfigChannel>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800124e:	f000 f8e7 	bl	8001420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001252:	4803      	ldr	r0, [pc, #12]	@ (8001260 <MX_TIM4_Init+0xe4>)
 8001254:	f000 f9e2 	bl	800161c <HAL_TIM_MspPostInit>

}
 8001258:	bf00      	nop
 800125a:	3738      	adds	r7, #56	@ 0x38
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	200001b8 	.word	0x200001b8
 8001264:	40000800 	.word	0x40000800

08001268 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08a      	sub	sp, #40	@ 0x28
 800126c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126e:	f107 0314 	add.w	r3, r7, #20
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]
 800127a:	60da      	str	r2, [r3, #12]
 800127c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	613b      	str	r3, [r7, #16]
 8001282:	4b62      	ldr	r3, [pc, #392]	@ (800140c <MX_GPIO_Init+0x1a4>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001286:	4a61      	ldr	r2, [pc, #388]	@ (800140c <MX_GPIO_Init+0x1a4>)
 8001288:	f043 0304 	orr.w	r3, r3, #4
 800128c:	6313      	str	r3, [r2, #48]	@ 0x30
 800128e:	4b5f      	ldr	r3, [pc, #380]	@ (800140c <MX_GPIO_Init+0x1a4>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001292:	f003 0304 	and.w	r3, r3, #4
 8001296:	613b      	str	r3, [r7, #16]
 8001298:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	4b5b      	ldr	r3, [pc, #364]	@ (800140c <MX_GPIO_Init+0x1a4>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	4a5a      	ldr	r2, [pc, #360]	@ (800140c <MX_GPIO_Init+0x1a4>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012aa:	4b58      	ldr	r3, [pc, #352]	@ (800140c <MX_GPIO_Init+0x1a4>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	60bb      	str	r3, [r7, #8]
 80012ba:	4b54      	ldr	r3, [pc, #336]	@ (800140c <MX_GPIO_Init+0x1a4>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012be:	4a53      	ldr	r2, [pc, #332]	@ (800140c <MX_GPIO_Init+0x1a4>)
 80012c0:	f043 0310 	orr.w	r3, r3, #16
 80012c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012c6:	4b51      	ldr	r3, [pc, #324]	@ (800140c <MX_GPIO_Init+0x1a4>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ca:	f003 0310 	and.w	r3, r3, #16
 80012ce:	60bb      	str	r3, [r7, #8]
 80012d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	607b      	str	r3, [r7, #4]
 80012d6:	4b4d      	ldr	r3, [pc, #308]	@ (800140c <MX_GPIO_Init+0x1a4>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012da:	4a4c      	ldr	r2, [pc, #304]	@ (800140c <MX_GPIO_Init+0x1a4>)
 80012dc:	f043 0302 	orr.w	r3, r3, #2
 80012e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012e2:	4b4a      	ldr	r3, [pc, #296]	@ (800140c <MX_GPIO_Init+0x1a4>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	607b      	str	r3, [r7, #4]
 80012ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	603b      	str	r3, [r7, #0]
 80012f2:	4b46      	ldr	r3, [pc, #280]	@ (800140c <MX_GPIO_Init+0x1a4>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f6:	4a45      	ldr	r2, [pc, #276]	@ (800140c <MX_GPIO_Init+0x1a4>)
 80012f8:	f043 0308 	orr.w	r3, r3, #8
 80012fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012fe:	4b43      	ldr	r3, [pc, #268]	@ (800140c <MX_GPIO_Init+0x1a4>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001302:	f003 0308 	and.w	r3, r3, #8
 8001306:	603b      	str	r3, [r7, #0]
 8001308:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FA_LED0_GPIO_Port, FA_LED0_Pin, GPIO_PIN_RESET);
 800130a:	2200      	movs	r2, #0
 800130c:	2102      	movs	r1, #2
 800130e:	4840      	ldr	r0, [pc, #256]	@ (8001410 <MX_GPIO_Init+0x1a8>)
 8001310:	f001 fc9e 	bl	8002c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FA_LED1_Pin|FA_LED2_Pin, GPIO_PIN_RESET);
 8001314:	2200      	movs	r2, #0
 8001316:	2121      	movs	r1, #33	@ 0x21
 8001318:	483e      	ldr	r0, [pc, #248]	@ (8001414 <MX_GPIO_Init+0x1ac>)
 800131a:	f001 fc99 	bl	8002c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, FA_Data7_Pin|FA_Data6_Pin|FA_Data5_Pin|FA_EN_Pin
 800131e:	2200      	movs	r2, #0
 8001320:	f64a 3180 	movw	r1, #43904	@ 0xab80
 8001324:	483c      	ldr	r0, [pc, #240]	@ (8001418 <MX_GPIO_Init+0x1b0>)
 8001326:	f001 fc93 	bl	8002c50 <HAL_GPIO_WritePin>
                          |FA_RS_Pin|FA_Data4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FA_LED3_GPIO_Port, FA_LED3_Pin, GPIO_PIN_RESET);
 800132a:	2200      	movs	r2, #0
 800132c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001330:	483a      	ldr	r0, [pc, #232]	@ (800141c <MX_GPIO_Init+0x1b4>)
 8001332:	f001 fc8d 	bl	8002c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : FA_LED0_Pin */
  GPIO_InitStruct.Pin = FA_LED0_Pin;
 8001336:	2302      	movs	r3, #2
 8001338:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133a:	2301      	movs	r3, #1
 800133c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001342:	2300      	movs	r3, #0
 8001344:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FA_LED0_GPIO_Port, &GPIO_InitStruct);
 8001346:	f107 0314 	add.w	r3, r7, #20
 800134a:	4619      	mov	r1, r3
 800134c:	4830      	ldr	r0, [pc, #192]	@ (8001410 <MX_GPIO_Init+0x1a8>)
 800134e:	f001 fae3 	bl	8002918 <HAL_GPIO_Init>

  /*Configure GPIO pin : FA_BP_Pin */
  GPIO_InitStruct.Pin = FA_BP_Pin;
 8001352:	2308      	movs	r3, #8
 8001354:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001356:	2300      	movs	r3, #0
 8001358:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(FA_BP_GPIO_Port, &GPIO_InitStruct);
 800135e:	f107 0314 	add.w	r3, r7, #20
 8001362:	4619      	mov	r1, r3
 8001364:	482a      	ldr	r0, [pc, #168]	@ (8001410 <MX_GPIO_Init+0x1a8>)
 8001366:	f001 fad7 	bl	8002918 <HAL_GPIO_Init>

  /*Configure GPIO pins : FA_LED1_Pin FA_LED2_Pin */
  GPIO_InitStruct.Pin = FA_LED1_Pin|FA_LED2_Pin;
 800136a:	2321      	movs	r3, #33	@ 0x21
 800136c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136e:	2301      	movs	r3, #1
 8001370:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	2300      	movs	r3, #0
 8001378:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137a:	f107 0314 	add.w	r3, r7, #20
 800137e:	4619      	mov	r1, r3
 8001380:	4824      	ldr	r0, [pc, #144]	@ (8001414 <MX_GPIO_Init+0x1ac>)
 8001382:	f001 fac9 	bl	8002918 <HAL_GPIO_Init>

  /*Configure GPIO pins : FA_Cbit3_Pin FA_Cbit1_Pin FA_Cbit0_Pin FA_Cbit2_Pin */
  GPIO_InitStruct.Pin = FA_Cbit3_Pin|FA_Cbit1_Pin|FA_Cbit0_Pin|FA_Cbit2_Pin;
 8001386:	235a      	movs	r3, #90	@ 0x5a
 8001388:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800138a:	2300      	movs	r3, #0
 800138c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001392:	f107 0314 	add.w	r3, r7, #20
 8001396:	4619      	mov	r1, r3
 8001398:	481e      	ldr	r0, [pc, #120]	@ (8001414 <MX_GPIO_Init+0x1ac>)
 800139a:	f001 fabd 	bl	8002918 <HAL_GPIO_Init>

  /*Configure GPIO pin : FA_CbitInterrupt_Pin */
  GPIO_InitStruct.Pin = FA_CbitInterrupt_Pin;
 800139e:	2304      	movs	r3, #4
 80013a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013a2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80013a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(FA_CbitInterrupt_GPIO_Port, &GPIO_InitStruct);
 80013ac:	f107 0314 	add.w	r3, r7, #20
 80013b0:	4619      	mov	r1, r3
 80013b2:	4818      	ldr	r0, [pc, #96]	@ (8001414 <MX_GPIO_Init+0x1ac>)
 80013b4:	f001 fab0 	bl	8002918 <HAL_GPIO_Init>

  /*Configure GPIO pins : FA_Data7_Pin FA_Data6_Pin FA_Data5_Pin FA_EN_Pin
                           FA_RS_Pin FA_Data4_Pin */
  GPIO_InitStruct.Pin = FA_Data7_Pin|FA_Data6_Pin|FA_Data5_Pin|FA_EN_Pin
 80013b8:	f64a 3380 	movw	r3, #43904	@ 0xab80
 80013bc:	617b      	str	r3, [r7, #20]
                          |FA_RS_Pin|FA_Data4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013be:	2301      	movs	r3, #1
 80013c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c6:	2300      	movs	r3, #0
 80013c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013ca:	f107 0314 	add.w	r3, r7, #20
 80013ce:	4619      	mov	r1, r3
 80013d0:	4811      	ldr	r0, [pc, #68]	@ (8001418 <MX_GPIO_Init+0x1b0>)
 80013d2:	f001 faa1 	bl	8002918 <HAL_GPIO_Init>

  /*Configure GPIO pin : FA_LED3_Pin */
  GPIO_InitStruct.Pin = FA_LED3_Pin;
 80013d6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80013da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013dc:	2301      	movs	r3, #1
 80013de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e4:	2300      	movs	r3, #0
 80013e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FA_LED3_GPIO_Port, &GPIO_InitStruct);
 80013e8:	f107 0314 	add.w	r3, r7, #20
 80013ec:	4619      	mov	r1, r3
 80013ee:	480b      	ldr	r0, [pc, #44]	@ (800141c <MX_GPIO_Init+0x1b4>)
 80013f0:	f001 fa92 	bl	8002918 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80013f4:	2200      	movs	r2, #0
 80013f6:	2100      	movs	r1, #0
 80013f8:	2008      	movs	r0, #8
 80013fa:	f001 fa56 	bl	80028aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80013fe:	2008      	movs	r0, #8
 8001400:	f001 fa6f 	bl	80028e2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001404:	bf00      	nop
 8001406:	3728      	adds	r7, #40	@ 0x28
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40023800 	.word	0x40023800
 8001410:	40020800 	.word	0x40020800
 8001414:	40020000 	.word	0x40020000
 8001418:	40021000 	.word	0x40021000
 800141c:	40020400 	.word	0x40020400

08001420 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001424:	b672      	cpsid	i
}
 8001426:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001428:	bf00      	nop
 800142a:	e7fd      	b.n	8001428 <Error_Handler+0x8>

0800142c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	607b      	str	r3, [r7, #4]
 8001436:	4b10      	ldr	r3, [pc, #64]	@ (8001478 <HAL_MspInit+0x4c>)
 8001438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800143a:	4a0f      	ldr	r2, [pc, #60]	@ (8001478 <HAL_MspInit+0x4c>)
 800143c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001440:	6453      	str	r3, [r2, #68]	@ 0x44
 8001442:	4b0d      	ldr	r3, [pc, #52]	@ (8001478 <HAL_MspInit+0x4c>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001446:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	603b      	str	r3, [r7, #0]
 8001452:	4b09      	ldr	r3, [pc, #36]	@ (8001478 <HAL_MspInit+0x4c>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001456:	4a08      	ldr	r2, [pc, #32]	@ (8001478 <HAL_MspInit+0x4c>)
 8001458:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800145c:	6413      	str	r3, [r2, #64]	@ 0x40
 800145e:	4b06      	ldr	r3, [pc, #24]	@ (8001478 <HAL_MspInit+0x4c>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001462:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001466:	603b      	str	r3, [r7, #0]
 8001468:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	40023800 	.word	0x40023800

0800147c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08a      	sub	sp, #40	@ 0x28
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001484:	f107 0314 	add.w	r3, r7, #20
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a17      	ldr	r2, [pc, #92]	@ (80014f8 <HAL_ADC_MspInit+0x7c>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d127      	bne.n	80014ee <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	4b16      	ldr	r3, [pc, #88]	@ (80014fc <HAL_ADC_MspInit+0x80>)
 80014a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014a6:	4a15      	ldr	r2, [pc, #84]	@ (80014fc <HAL_ADC_MspInit+0x80>)
 80014a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80014ae:	4b13      	ldr	r3, [pc, #76]	@ (80014fc <HAL_ADC_MspInit+0x80>)
 80014b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014b6:	613b      	str	r3, [r7, #16]
 80014b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	4b0f      	ldr	r3, [pc, #60]	@ (80014fc <HAL_ADC_MspInit+0x80>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c2:	4a0e      	ldr	r2, [pc, #56]	@ (80014fc <HAL_ADC_MspInit+0x80>)
 80014c4:	f043 0304 	orr.w	r3, r3, #4
 80014c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ca:	4b0c      	ldr	r3, [pc, #48]	@ (80014fc <HAL_ADC_MspInit+0x80>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ce:	f003 0304 	and.w	r3, r3, #4
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = FA_PotArm_Pin|FA_PotBox_Pin;
 80014d6:	2305      	movs	r3, #5
 80014d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014da:	2303      	movs	r3, #3
 80014dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014e2:	f107 0314 	add.w	r3, r7, #20
 80014e6:	4619      	mov	r1, r3
 80014e8:	4805      	ldr	r0, [pc, #20]	@ (8001500 <HAL_ADC_MspInit+0x84>)
 80014ea:	f001 fa15 	bl	8002918 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014ee:	bf00      	nop
 80014f0:	3728      	adds	r7, #40	@ 0x28
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40012000 	.word	0x40012000
 80014fc:	40023800 	.word	0x40023800
 8001500:	40020800 	.word	0x40020800

08001504 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08a      	sub	sp, #40	@ 0x28
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a29      	ldr	r2, [pc, #164]	@ (80015c8 <HAL_I2C_MspInit+0xc4>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d14b      	bne.n	80015be <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	613b      	str	r3, [r7, #16]
 800152a:	4b28      	ldr	r3, [pc, #160]	@ (80015cc <HAL_I2C_MspInit+0xc8>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152e:	4a27      	ldr	r2, [pc, #156]	@ (80015cc <HAL_I2C_MspInit+0xc8>)
 8001530:	f043 0304 	orr.w	r3, r3, #4
 8001534:	6313      	str	r3, [r2, #48]	@ 0x30
 8001536:	4b25      	ldr	r3, [pc, #148]	@ (80015cc <HAL_I2C_MspInit+0xc8>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153a:	f003 0304 	and.w	r3, r3, #4
 800153e:	613b      	str	r3, [r7, #16]
 8001540:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	4b21      	ldr	r3, [pc, #132]	@ (80015cc <HAL_I2C_MspInit+0xc8>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154a:	4a20      	ldr	r2, [pc, #128]	@ (80015cc <HAL_I2C_MspInit+0xc8>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	6313      	str	r3, [r2, #48]	@ 0x30
 8001552:	4b1e      	ldr	r3, [pc, #120]	@ (80015cc <HAL_I2C_MspInit+0xc8>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = FA_SDA_IMU_Pin;
 800155e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001562:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001564:	2312      	movs	r3, #18
 8001566:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156c:	2303      	movs	r3, #3
 800156e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001570:	2304      	movs	r3, #4
 8001572:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(FA_SDA_IMU_GPIO_Port, &GPIO_InitStruct);
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	4619      	mov	r1, r3
 800157a:	4815      	ldr	r0, [pc, #84]	@ (80015d0 <HAL_I2C_MspInit+0xcc>)
 800157c:	f001 f9cc 	bl	8002918 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = FA_SCL_IMU_Pin;
 8001580:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001584:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001586:	2312      	movs	r3, #18
 8001588:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158e:	2303      	movs	r3, #3
 8001590:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001592:	2304      	movs	r3, #4
 8001594:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(FA_SCL_IMU_GPIO_Port, &GPIO_InitStruct);
 8001596:	f107 0314 	add.w	r3, r7, #20
 800159a:	4619      	mov	r1, r3
 800159c:	480d      	ldr	r0, [pc, #52]	@ (80015d4 <HAL_I2C_MspInit+0xd0>)
 800159e:	f001 f9bb 	bl	8002918 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	60bb      	str	r3, [r7, #8]
 80015a6:	4b09      	ldr	r3, [pc, #36]	@ (80015cc <HAL_I2C_MspInit+0xc8>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015aa:	4a08      	ldr	r2, [pc, #32]	@ (80015cc <HAL_I2C_MspInit+0xc8>)
 80015ac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80015b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80015b2:	4b06      	ldr	r3, [pc, #24]	@ (80015cc <HAL_I2C_MspInit+0xc8>)
 80015b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80015ba:	60bb      	str	r3, [r7, #8]
 80015bc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80015be:	bf00      	nop
 80015c0:	3728      	adds	r7, #40	@ 0x28
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40005c00 	.word	0x40005c00
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40020800 	.word	0x40020800
 80015d4:	40020000 	.word	0x40020000

080015d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a0b      	ldr	r2, [pc, #44]	@ (8001614 <HAL_TIM_Base_MspInit+0x3c>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d10d      	bne.n	8001606 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001618 <HAL_TIM_Base_MspInit+0x40>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f2:	4a09      	ldr	r2, [pc, #36]	@ (8001618 <HAL_TIM_Base_MspInit+0x40>)
 80015f4:	f043 0304 	orr.w	r3, r3, #4
 80015f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80015fa:	4b07      	ldr	r3, [pc, #28]	@ (8001618 <HAL_TIM_Base_MspInit+0x40>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015fe:	f003 0304 	and.w	r3, r3, #4
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001606:	bf00      	nop
 8001608:	3714      	adds	r7, #20
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	40000800 	.word	0x40000800
 8001618:	40023800 	.word	0x40023800

0800161c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b088      	sub	sp, #32
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001624:	f107 030c 	add.w	r3, r7, #12
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
 8001632:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a12      	ldr	r2, [pc, #72]	@ (8001684 <HAL_TIM_MspPostInit+0x68>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d11e      	bne.n	800167c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	60bb      	str	r3, [r7, #8]
 8001642:	4b11      	ldr	r3, [pc, #68]	@ (8001688 <HAL_TIM_MspPostInit+0x6c>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001646:	4a10      	ldr	r2, [pc, #64]	@ (8001688 <HAL_TIM_MspPostInit+0x6c>)
 8001648:	f043 0308 	orr.w	r3, r3, #8
 800164c:	6313      	str	r3, [r2, #48]	@ 0x30
 800164e:	4b0e      	ldr	r3, [pc, #56]	@ (8001688 <HAL_TIM_MspPostInit+0x6c>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001652:	f003 0308 	and.w	r3, r3, #8
 8001656:	60bb      	str	r3, [r7, #8]
 8001658:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = FA_ESC_PWM_Pin;
 800165a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800165e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001660:	2302      	movs	r3, #2
 8001662:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001668:	2300      	movs	r3, #0
 800166a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800166c:	2302      	movs	r3, #2
 800166e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(FA_ESC_PWM_GPIO_Port, &GPIO_InitStruct);
 8001670:	f107 030c 	add.w	r3, r7, #12
 8001674:	4619      	mov	r1, r3
 8001676:	4805      	ldr	r0, [pc, #20]	@ (800168c <HAL_TIM_MspPostInit+0x70>)
 8001678:	f001 f94e 	bl	8002918 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800167c:	bf00      	nop
 800167e:	3720      	adds	r7, #32
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40000800 	.word	0x40000800
 8001688:	40023800 	.word	0x40023800
 800168c:	40020c00 	.word	0x40020c00

08001690 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001694:	bf00      	nop
 8001696:	e7fd      	b.n	8001694 <NMI_Handler+0x4>

08001698 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800169c:	bf00      	nop
 800169e:	e7fd      	b.n	800169c <HardFault_Handler+0x4>

080016a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016a4:	bf00      	nop
 80016a6:	e7fd      	b.n	80016a4 <MemManage_Handler+0x4>

080016a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ac:	bf00      	nop
 80016ae:	e7fd      	b.n	80016ac <BusFault_Handler+0x4>

080016b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016b4:	bf00      	nop
 80016b6:	e7fd      	b.n	80016b4 <UsageFault_Handler+0x4>

080016b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016c6:	b480      	push	{r7}
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016e6:	f000 fd5f 	bl	80021a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}

080016ee <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(FA_CbitInterrupt_Pin);
 80016f2:	2004      	movs	r0, #4
 80016f4:	f001 fac6 	bl	8002c84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80016f8:	bf00      	nop
 80016fa:	bd80      	pop	{r7, pc}

080016fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001704:	4a14      	ldr	r2, [pc, #80]	@ (8001758 <_sbrk+0x5c>)
 8001706:	4b15      	ldr	r3, [pc, #84]	@ (800175c <_sbrk+0x60>)
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001710:	4b13      	ldr	r3, [pc, #76]	@ (8001760 <_sbrk+0x64>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d102      	bne.n	800171e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001718:	4b11      	ldr	r3, [pc, #68]	@ (8001760 <_sbrk+0x64>)
 800171a:	4a12      	ldr	r2, [pc, #72]	@ (8001764 <_sbrk+0x68>)
 800171c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800171e:	4b10      	ldr	r3, [pc, #64]	@ (8001760 <_sbrk+0x64>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4413      	add	r3, r2
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	429a      	cmp	r2, r3
 800172a:	d207      	bcs.n	800173c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800172c:	f003 fb2a 	bl	8004d84 <__errno>
 8001730:	4603      	mov	r3, r0
 8001732:	220c      	movs	r2, #12
 8001734:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001736:	f04f 33ff 	mov.w	r3, #4294967295
 800173a:	e009      	b.n	8001750 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800173c:	4b08      	ldr	r3, [pc, #32]	@ (8001760 <_sbrk+0x64>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001742:	4b07      	ldr	r3, [pc, #28]	@ (8001760 <_sbrk+0x64>)
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4413      	add	r3, r2
 800174a:	4a05      	ldr	r2, [pc, #20]	@ (8001760 <_sbrk+0x64>)
 800174c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800174e:	68fb      	ldr	r3, [r7, #12]
}
 8001750:	4618      	mov	r0, r3
 8001752:	3718      	adds	r7, #24
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20020000 	.word	0x20020000
 800175c:	00000400 	.word	0x00000400
 8001760:	20000258 	.word	0x20000258
 8001764:	200003b0 	.word	0x200003b0

08001768 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800176c:	4b06      	ldr	r3, [pc, #24]	@ (8001788 <SystemInit+0x20>)
 800176e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001772:	4a05      	ldr	r2, [pc, #20]	@ (8001788 <SystemInit+0x20>)
 8001774:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001778:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800178c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017c4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001790:	f7ff ffea 	bl	8001768 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001794:	480c      	ldr	r0, [pc, #48]	@ (80017c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001796:	490d      	ldr	r1, [pc, #52]	@ (80017cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001798:	4a0d      	ldr	r2, [pc, #52]	@ (80017d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800179a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800179c:	e002      	b.n	80017a4 <LoopCopyDataInit>

0800179e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800179e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017a2:	3304      	adds	r3, #4

080017a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017a8:	d3f9      	bcc.n	800179e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017aa:	4a0a      	ldr	r2, [pc, #40]	@ (80017d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017ac:	4c0a      	ldr	r4, [pc, #40]	@ (80017d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017b0:	e001      	b.n	80017b6 <LoopFillZerobss>

080017b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017b4:	3204      	adds	r2, #4

080017b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017b8:	d3fb      	bcc.n	80017b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ba:	f003 fae9 	bl	8004d90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017be:	f7ff fb6b 	bl	8000e98 <main>
  bx  lr    
 80017c2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80017c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017cc:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 80017d0:	08005e60 	.word	0x08005e60
  ldr r2, =_sbss
 80017d4:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 80017d8:	200003ac 	.word	0x200003ac

080017dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017dc:	e7fe      	b.n	80017dc <ADC_IRQHandler>

080017de <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 80017de:	b5b0      	push	{r4, r5, r7, lr}
 80017e0:	b08a      	sub	sp, #40	@ 0x28
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	60f8      	str	r0, [r7, #12]
 80017e6:	60b9      	str	r1, [r7, #8]
 80017e8:	607a      	str	r2, [r7, #4]
 80017ea:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 80017ec:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80017f0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	lcd.en_pin = en_pin;
 80017f4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80017f8:	84bb      	strh	r3, [r7, #36]	@ 0x24
	lcd.en_port = en_port;
 80017fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80017fc:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 80017fe:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001800:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 800180e:	f107 0310 	add.w	r3, r7, #16
 8001812:	4618      	mov	r0, r3
 8001814:	f000 f80e 	bl	8001834 <Lcd_init>

	return lcd;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	461d      	mov	r5, r3
 800181c:	f107 0410 	add.w	r4, r7, #16
 8001820:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001822:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001824:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001828:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800182c:	68f8      	ldr	r0, [r7, #12]
 800182e:	3728      	adds	r7, #40	@ 0x28
 8001830:	46bd      	mov	sp, r7
 8001832:	bdb0      	pop	{r4, r5, r7, pc}

08001834 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	7d9b      	ldrb	r3, [r3, #22]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d10c      	bne.n	800185e <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 8001844:	2133      	movs	r1, #51	@ 0x33
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f000 f87c 	bl	8001944 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 800184c:	2132      	movs	r1, #50	@ 0x32
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f000 f878 	bl	8001944 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8001854:	2128      	movs	r1, #40	@ 0x28
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f000 f874 	bl	8001944 <lcd_write_command>
 800185c:	e003      	b.n	8001866 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 800185e:	2138      	movs	r1, #56	@ 0x38
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f000 f86f 	bl	8001944 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8001866:	2101      	movs	r1, #1
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f000 f86b 	bl	8001944 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 800186e:	210c      	movs	r1, #12
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f000 f867 	bl	8001944 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8001876:	2106      	movs	r1, #6
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f000 f863 	bl	8001944 <lcd_write_command>
}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
	...

08001888 <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 8001892:	f107 030c 	add.w	r3, r7, #12
 8001896:	683a      	ldr	r2, [r7, #0]
 8001898:	4906      	ldr	r1, [pc, #24]	@ (80018b4 <Lcd_int+0x2c>)
 800189a:	4618      	mov	r0, r3
 800189c:	f003 fa4a 	bl	8004d34 <siprintf>

	Lcd_string(lcd, buffer);
 80018a0:	f107 030c 	add.w	r3, r7, #12
 80018a4:	4619      	mov	r1, r3
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f000 f806 	bl	80018b8 <Lcd_string>
}
 80018ac:	bf00      	nop
 80018ae:	3718      	adds	r7, #24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	08005d88 	.word	0x08005d88

080018b8 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 80018b8:	b590      	push	{r4, r7, lr}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 80018c2:	2300      	movs	r3, #0
 80018c4:	73fb      	strb	r3, [r7, #15]
 80018c6:	e00a      	b.n	80018de <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 80018c8:	7bfb      	ldrb	r3, [r7, #15]
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	4413      	add	r3, r2
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	4619      	mov	r1, r3
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f000 f864 	bl	80019a0 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 80018d8:	7bfb      	ldrb	r3, [r7, #15]
 80018da:	3301      	adds	r3, #1
 80018dc:	73fb      	strb	r3, [r7, #15]
 80018de:	7bfc      	ldrb	r4, [r7, #15]
 80018e0:	6838      	ldr	r0, [r7, #0]
 80018e2:	f7fe fc75 	bl	80001d0 <strlen>
 80018e6:	4603      	mov	r3, r0
 80018e8:	429c      	cmp	r4, r3
 80018ea:	d3ed      	bcc.n	80018c8 <Lcd_string+0x10>
	}
}
 80018ec:	bf00      	nop
 80018ee:	bf00      	nop
 80018f0:	3714      	adds	r7, #20
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd90      	pop	{r4, r7, pc}
	...

080018f8 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	460b      	mov	r3, r1
 8001902:	70fb      	strb	r3, [r7, #3]
 8001904:	4613      	mov	r3, r2
 8001906:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
 8001908:	78fb      	ldrb	r3, [r7, #3]
 800190a:	4a07      	ldr	r2, [pc, #28]	@ (8001928 <Lcd_cursor+0x30>)
 800190c:	5cd2      	ldrb	r2, [r2, r3]
 800190e:	78bb      	ldrb	r3, [r7, #2]
 8001910:	4413      	add	r3, r2
 8001912:	b2db      	uxtb	r3, r3
 8001914:	3b80      	subs	r3, #128	@ 0x80
 8001916:	b2db      	uxtb	r3, r3
 8001918:	4619      	mov	r1, r3
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f000 f812 	bl	8001944 <lcd_write_command>
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
	#endif
}
 8001920:	bf00      	nop
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	08005da4 	.word	0x08005da4

0800192c <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 8001934:	2101      	movs	r1, #1
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f000 f804 	bl	8001944 <lcd_write_command>
}
 800193c:	bf00      	nop
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	460b      	mov	r3, r1
 800194e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6898      	ldr	r0, [r3, #8]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	899b      	ldrh	r3, [r3, #12]
 8001958:	2200      	movs	r2, #0
 800195a:	4619      	mov	r1, r3
 800195c:	f001 f978 	bl	8002c50 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	7d9b      	ldrb	r3, [r3, #22]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d111      	bne.n	800198c <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8001968:	78fb      	ldrb	r3, [r7, #3]
 800196a:	091b      	lsrs	r3, r3, #4
 800196c:	b2db      	uxtb	r3, r3
 800196e:	2204      	movs	r2, #4
 8001970:	4619      	mov	r1, r3
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f000 f842 	bl	80019fc <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8001978:	78fb      	ldrb	r3, [r7, #3]
 800197a:	f003 030f 	and.w	r3, r3, #15
 800197e:	b2db      	uxtb	r3, r3
 8001980:	2204      	movs	r2, #4
 8001982:	4619      	mov	r1, r3
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f000 f839 	bl	80019fc <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 800198a:	e005      	b.n	8001998 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 800198c:	78fb      	ldrb	r3, [r7, #3]
 800198e:	2208      	movs	r2, #8
 8001990:	4619      	mov	r1, r3
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f000 f832 	bl	80019fc <lcd_write>
}
 8001998:	bf00      	nop
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	460b      	mov	r3, r1
 80019aa:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6898      	ldr	r0, [r3, #8]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	899b      	ldrh	r3, [r3, #12]
 80019b4:	2201      	movs	r2, #1
 80019b6:	4619      	mov	r1, r3
 80019b8:	f001 f94a 	bl	8002c50 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	7d9b      	ldrb	r3, [r3, #22]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d111      	bne.n	80019e8 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 80019c4:	78fb      	ldrb	r3, [r7, #3]
 80019c6:	091b      	lsrs	r3, r3, #4
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	2204      	movs	r2, #4
 80019cc:	4619      	mov	r1, r3
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f000 f814 	bl	80019fc <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 80019d4:	78fb      	ldrb	r3, [r7, #3]
 80019d6:	f003 030f 	and.w	r3, r3, #15
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	2204      	movs	r2, #4
 80019de:	4619      	mov	r1, r3
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f000 f80b 	bl	80019fc <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 80019e6:	e005      	b.n	80019f4 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 80019e8:	78fb      	ldrb	r3, [r7, #3]
 80019ea:	2208      	movs	r2, #8
 80019ec:	4619      	mov	r1, r3
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f000 f804 	bl	80019fc <lcd_write>
}
 80019f4:	bf00      	nop
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	460b      	mov	r3, r1
 8001a06:	70fb      	strb	r3, [r7, #3]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	73fb      	strb	r3, [r7, #15]
 8001a10:	e019      	b.n	8001a46 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	7bfb      	ldrb	r3, [r7, #15]
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4413      	add	r3, r2
 8001a1c:	6818      	ldr	r0, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685a      	ldr	r2, [r3, #4]
 8001a22:	7bfb      	ldrb	r3, [r7, #15]
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	4413      	add	r3, r2
 8001a28:	8819      	ldrh	r1, [r3, #0]
 8001a2a:	78fa      	ldrb	r2, [r7, #3]
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
 8001a2e:	fa42 f303 	asr.w	r3, r2, r3
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	f003 0301 	and.w	r3, r3, #1
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	f001 f908 	bl	8002c50 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8001a40:	7bfb      	ldrb	r3, [r7, #15]
 8001a42:	3301      	adds	r3, #1
 8001a44:	73fb      	strb	r3, [r7, #15]
 8001a46:	7bfa      	ldrb	r2, [r7, #15]
 8001a48:	78bb      	ldrb	r3, [r7, #2]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d3e1      	bcc.n	8001a12 <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6918      	ldr	r0, [r3, #16]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	8a9b      	ldrh	r3, [r3, #20]
 8001a56:	2201      	movs	r2, #1
 8001a58:	4619      	mov	r1, r3
 8001a5a:	f001 f8f9 	bl	8002c50 <HAL_GPIO_WritePin>
	DELAY(1);
 8001a5e:	2001      	movs	r0, #1
 8001a60:	f000 fbc2 	bl	80021e8 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6918      	ldr	r0, [r3, #16]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	8a9b      	ldrh	r3, [r3, #20]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	4619      	mov	r1, r3
 8001a70:	f001 f8ee 	bl	8002c50 <HAL_GPIO_WritePin>
}
 8001a74:	bf00      	nop
 8001a76:	3710      	adds	r7, #16
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	0000      	movs	r0, r0
	...

08001a80 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8001a80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a84:	b094      	sub	sp, #80	@ 0x50
 8001a86:	af04      	add	r7, sp, #16
 8001a88:	6078      	str	r0, [r7, #4]
 8001a8a:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001a8c:	2364      	movs	r3, #100	@ 0x64
 8001a8e:	9302      	str	r3, [sp, #8]
 8001a90:	230e      	movs	r3, #14
 8001a92:	9301      	str	r3, [sp, #4]
 8001a94:	f107 0308 	add.w	r3, r7, #8
 8001a98:	9300      	str	r3, [sp, #0]
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	223b      	movs	r2, #59	@ 0x3b
 8001a9e:	21d0      	movs	r1, #208	@ 0xd0
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f001 fa57 	bl	8002f54 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001aa6:	7a3b      	ldrb	r3, [r7, #8]
 8001aa8:	021b      	lsls	r3, r3, #8
 8001aaa:	b21a      	sxth	r2, r3
 8001aac:	7a7b      	ldrb	r3, [r7, #9]
 8001aae:	b21b      	sxth	r3, r3
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	b21a      	sxth	r2, r3
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001ab8:	7abb      	ldrb	r3, [r7, #10]
 8001aba:	021b      	lsls	r3, r3, #8
 8001abc:	b21a      	sxth	r2, r3
 8001abe:	7afb      	ldrb	r3, [r7, #11]
 8001ac0:	b21b      	sxth	r3, r3
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	b21a      	sxth	r2, r3
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001aca:	7b3b      	ldrb	r3, [r7, #12]
 8001acc:	021b      	lsls	r3, r3, #8
 8001ace:	b21a      	sxth	r2, r3
 8001ad0:	7b7b      	ldrb	r3, [r7, #13]
 8001ad2:	b21b      	sxth	r3, r3
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	b21a      	sxth	r2, r3
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8001adc:	7bbb      	ldrb	r3, [r7, #14]
 8001ade:	021b      	lsls	r3, r3, #8
 8001ae0:	b21a      	sxth	r2, r3
 8001ae2:	7bfb      	ldrb	r3, [r7, #15]
 8001ae4:	b21b      	sxth	r3, r3
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	86fb      	strh	r3, [r7, #54]	@ 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8001aea:	7c3b      	ldrb	r3, [r7, #16]
 8001aec:	021b      	lsls	r3, r3, #8
 8001aee:	b21a      	sxth	r2, r3
 8001af0:	7c7b      	ldrb	r3, [r7, #17]
 8001af2:	b21b      	sxth	r3, r3
 8001af4:	4313      	orrs	r3, r2
 8001af6:	b21a      	sxth	r2, r3
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8001afc:	7cbb      	ldrb	r3, [r7, #18]
 8001afe:	021b      	lsls	r3, r3, #8
 8001b00:	b21a      	sxth	r2, r3
 8001b02:	7cfb      	ldrb	r3, [r7, #19]
 8001b04:	b21b      	sxth	r3, r3
 8001b06:	4313      	orrs	r3, r2
 8001b08:	b21a      	sxth	r2, r3
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8001b0e:	7d3b      	ldrb	r3, [r7, #20]
 8001b10:	021b      	lsls	r3, r3, #8
 8001b12:	b21a      	sxth	r2, r3
 8001b14:	7d7b      	ldrb	r3, [r7, #21]
 8001b16:	b21b      	sxth	r3, r3
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	b21a      	sxth	r2, r3
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	849a      	strh	r2, [r3, #36]	@ 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7fe fcfc 	bl	8000524 <__aeabi_i2d>
 8001b2c:	f04f 0200 	mov.w	r2, #0
 8001b30:	4bbd      	ldr	r3, [pc, #756]	@ (8001e28 <MPU6050_Read_All+0x3a8>)
 8001b32:	f7fe fe8b 	bl	800084c <__aeabi_ddiv>
 8001b36:	4602      	mov	r2, r0
 8001b38:	460b      	mov	r3, r1
 8001b3a:	6839      	ldr	r1, [r7, #0]
 8001b3c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7fe fcec 	bl	8000524 <__aeabi_i2d>
 8001b4c:	f04f 0200 	mov.w	r2, #0
 8001b50:	4bb5      	ldr	r3, [pc, #724]	@ (8001e28 <MPU6050_Read_All+0x3a8>)
 8001b52:	f7fe fe7b 	bl	800084c <__aeabi_ddiv>
 8001b56:	4602      	mov	r2, r0
 8001b58:	460b      	mov	r3, r1
 8001b5a:	6839      	ldr	r1, [r7, #0]
 8001b5c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7fe fcdc 	bl	8000524 <__aeabi_i2d>
 8001b6c:	a3a8      	add	r3, pc, #672	@ (adr r3, 8001e10 <MPU6050_Read_All+0x390>)
 8001b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b72:	f7fe fe6b 	bl	800084c <__aeabi_ddiv>
 8001b76:	4602      	mov	r2, r0
 8001b78:	460b      	mov	r3, r1
 8001b7a:	6839      	ldr	r1, [r7, #0]
 8001b7c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8001b80:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8001b84:	ee07 3a90 	vmov	s15, r3
 8001b88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b8c:	eddf 6aa7 	vldr	s13, [pc, #668]	@ 8001e2c <MPU6050_Read_All+0x3ac>
 8001b90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b94:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 8001e30 <MPU6050_Read_All+0x3b0>
 8001b98:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7fe fcbb 	bl	8000524 <__aeabi_i2d>
 8001bae:	a39a      	add	r3, pc, #616	@ (adr r3, 8001e18 <MPU6050_Read_All+0x398>)
 8001bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb4:	f7fe fe4a 	bl	800084c <__aeabi_ddiv>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	460b      	mov	r3, r1
 8001bbc:	6839      	ldr	r1, [r7, #0]
 8001bbe:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7fe fcab 	bl	8000524 <__aeabi_i2d>
 8001bce:	a392      	add	r3, pc, #584	@ (adr r3, 8001e18 <MPU6050_Read_All+0x398>)
 8001bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd4:	f7fe fe3a 	bl	800084c <__aeabi_ddiv>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	6839      	ldr	r1, [r7, #0]
 8001bde:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7fe fc9b 	bl	8000524 <__aeabi_i2d>
 8001bee:	a38a      	add	r3, pc, #552	@ (adr r3, 8001e18 <MPU6050_Read_All+0x398>)
 8001bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf4:	f7fe fe2a 	bl	800084c <__aeabi_ddiv>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	6839      	ldr	r1, [r7, #0]
 8001bfe:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8001c02:	f000 fae5 	bl	80021d0 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	4b8a      	ldr	r3, [pc, #552]	@ (8001e34 <MPU6050_Read_All+0x3b4>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7fe fc78 	bl	8000504 <__aeabi_ui2d>
 8001c14:	f04f 0200 	mov.w	r2, #0
 8001c18:	4b87      	ldr	r3, [pc, #540]	@ (8001e38 <MPU6050_Read_All+0x3b8>)
 8001c1a:	f7fe fe17 	bl	800084c <__aeabi_ddiv>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	460b      	mov	r3, r1
 8001c22:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    timer = HAL_GetTick();
 8001c26:	f000 fad3 	bl	80021d0 <HAL_GetTick>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	4a81      	ldr	r2, [pc, #516]	@ (8001e34 <MPU6050_Read_All+0x3b4>)
 8001c2e:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c36:	461a      	mov	r2, r3
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c3e:	fb03 f202 	mul.w	r2, r3, r2
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c48:	4619      	mov	r1, r3
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c50:	fb01 f303 	mul.w	r3, r1, r3
 8001c54:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7fe fc64 	bl	8000524 <__aeabi_i2d>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	460b      	mov	r3, r1
 8001c60:	ec43 2b10 	vmov	d0, r2, r3
 8001c64:	f003 fd08 	bl	8005678 <sqrt>
 8001c68:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 8001c6c:	f04f 0200 	mov.w	r2, #0
 8001c70:	f04f 0300 	mov.w	r3, #0
 8001c74:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001c78:	f7fe ff26 	bl	8000ac8 <__aeabi_dcmpeq>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d11f      	bne.n	8001cc2 <MPU6050_Read_All+0x242>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7fe fc4b 	bl	8000524 <__aeabi_i2d>
 8001c8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c92:	f7fe fddb 	bl	800084c <__aeabi_ddiv>
 8001c96:	4602      	mov	r2, r0
 8001c98:	460b      	mov	r3, r1
 8001c9a:	ec43 2b17 	vmov	d7, r2, r3
 8001c9e:	eeb0 0a47 	vmov.f32	s0, s14
 8001ca2:	eef0 0a67 	vmov.f32	s1, s15
 8001ca6:	f003 fd13 	bl	80056d0 <atan>
 8001caa:	ec51 0b10 	vmov	r0, r1, d0
 8001cae:	a35c      	add	r3, pc, #368	@ (adr r3, 8001e20 <MPU6050_Read_All+0x3a0>)
 8001cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb4:	f7fe fca0 	bl	80005f8 <__aeabi_dmul>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8001cc0:	e005      	b.n	8001cce <MPU6050_Read_All+0x24e>
    }
    else
    {
        roll = 0.0;
 8001cc2:	f04f 0200 	mov.w	r2, #0
 8001cc6:	f04f 0300 	mov.w	r3, #0
 8001cca:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cd4:	425b      	negs	r3, r3
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7fe fc24 	bl	8000524 <__aeabi_i2d>
 8001cdc:	4682      	mov	sl, r0
 8001cde:	468b      	mov	fp, r1
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7fe fc1c 	bl	8000524 <__aeabi_i2d>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	ec43 2b11 	vmov	d1, r2, r3
 8001cf4:	ec4b ab10 	vmov	d0, sl, fp
 8001cf8:	f003 fcbc 	bl	8005674 <atan2>
 8001cfc:	ec51 0b10 	vmov	r0, r1, d0
 8001d00:	a347      	add	r3, pc, #284	@ (adr r3, 8001e20 <MPU6050_Read_All+0x3a0>)
 8001d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d06:	f7fe fc77 	bl	80005f8 <__aeabi_dmul>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8001d12:	f04f 0200 	mov.w	r2, #0
 8001d16:	4b49      	ldr	r3, [pc, #292]	@ (8001e3c <MPU6050_Read_All+0x3bc>)
 8001d18:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d1c:	f7fe fede 	bl	8000adc <__aeabi_dcmplt>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00a      	beq.n	8001d3c <MPU6050_Read_All+0x2bc>
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001d2c:	f04f 0200 	mov.w	r2, #0
 8001d30:	4b43      	ldr	r3, [pc, #268]	@ (8001e40 <MPU6050_Read_All+0x3c0>)
 8001d32:	f7fe fef1 	bl	8000b18 <__aeabi_dcmpgt>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d114      	bne.n	8001d66 <MPU6050_Read_All+0x2e6>
 8001d3c:	f04f 0200 	mov.w	r2, #0
 8001d40:	4b3f      	ldr	r3, [pc, #252]	@ (8001e40 <MPU6050_Read_All+0x3c0>)
 8001d42:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d46:	f7fe fee7 	bl	8000b18 <__aeabi_dcmpgt>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d015      	beq.n	8001d7c <MPU6050_Read_All+0x2fc>
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001d56:	f04f 0200 	mov.w	r2, #0
 8001d5a:	4b38      	ldr	r3, [pc, #224]	@ (8001e3c <MPU6050_Read_All+0x3bc>)
 8001d5c:	f7fe febe 	bl	8000adc <__aeabi_dcmplt>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d00a      	beq.n	8001d7c <MPU6050_Read_All+0x2fc>
    {
        KalmanY.angle = pitch;
 8001d66:	4937      	ldr	r1, [pc, #220]	@ (8001e44 <MPU6050_Read_All+0x3c4>)
 8001d68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d6c:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8001d70:	6839      	ldr	r1, [r7, #0]
 8001d72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d76:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8001d7a:	e014      	b.n	8001da6 <MPU6050_Read_All+0x326>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 8001d82:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 8001d86:	eeb0 1a47 	vmov.f32	s2, s14
 8001d8a:	eef0 1a67 	vmov.f32	s3, s15
 8001d8e:	ed97 0b06 	vldr	d0, [r7, #24]
 8001d92:	482c      	ldr	r0, [pc, #176]	@ (8001e44 <MPU6050_Read_All+0x3c4>)
 8001d94:	f000 f85a 	bl	8001e4c <Kalman_getAngle>
 8001d98:	eeb0 7a40 	vmov.f32	s14, s0
 8001d9c:	eef0 7a60 	vmov.f32	s15, s1
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8001dac:	4690      	mov	r8, r2
 8001dae:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8001db2:	f04f 0200 	mov.w	r2, #0
 8001db6:	4b22      	ldr	r3, [pc, #136]	@ (8001e40 <MPU6050_Read_All+0x3c0>)
 8001db8:	4640      	mov	r0, r8
 8001dba:	4649      	mov	r1, r9
 8001dbc:	f7fe feac 	bl	8000b18 <__aeabi_dcmpgt>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d008      	beq.n	8001dd8 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001dcc:	4614      	mov	r4, r2
 8001dce:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8001dde:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 8001de2:	eeb0 1a47 	vmov.f32	s2, s14
 8001de6:	eef0 1a67 	vmov.f32	s3, s15
 8001dea:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8001dee:	4816      	ldr	r0, [pc, #88]	@ (8001e48 <MPU6050_Read_All+0x3c8>)
 8001df0:	f000 f82c 	bl	8001e4c <Kalman_getAngle>
 8001df4:	eeb0 7a40 	vmov.f32	s14, s0
 8001df8:	eef0 7a60 	vmov.f32	s15, s1
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	ed83 7b12 	vstr	d7, [r3, #72]	@ 0x48
}
 8001e02:	bf00      	nop
 8001e04:	3740      	adds	r7, #64	@ 0x40
 8001e06:	46bd      	mov	sp, r7
 8001e08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e0c:	f3af 8000 	nop.w
 8001e10:	00000000 	.word	0x00000000
 8001e14:	40cc2900 	.word	0x40cc2900
 8001e18:	00000000 	.word	0x00000000
 8001e1c:	40606000 	.word	0x40606000
 8001e20:	1a63c1f8 	.word	0x1a63c1f8
 8001e24:	404ca5dc 	.word	0x404ca5dc
 8001e28:	40d00000 	.word	0x40d00000
 8001e2c:	43aa0000 	.word	0x43aa0000
 8001e30:	42121eb8 	.word	0x42121eb8
 8001e34:	2000025c 	.word	0x2000025c
 8001e38:	408f4000 	.word	0x408f4000
 8001e3c:	c0568000 	.word	0xc0568000
 8001e40:	40568000 	.word	0x40568000
 8001e44:	20000050 	.word	0x20000050
 8001e48:	20000008 	.word	0x20000008

08001e4c <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8001e4c:	b5b0      	push	{r4, r5, r7, lr}
 8001e4e:	b096      	sub	sp, #88	@ 0x58
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	61f8      	str	r0, [r7, #28]
 8001e54:	ed87 0b04 	vstr	d0, [r7, #16]
 8001e58:	ed87 1b02 	vstr	d1, [r7, #8]
 8001e5c:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001e66:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e6a:	f7fe fa0d 	bl	8000288 <__aeabi_dsub>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	460b      	mov	r3, r1
 8001e72:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    Kalman->angle += dt * rate;
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001e7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001e80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e84:	f7fe fbb8 	bl	80005f8 <__aeabi_dmul>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	4620      	mov	r0, r4
 8001e8e:	4629      	mov	r1, r5
 8001e90:	f7fe f9fc 	bl	800028c <__adddf3>
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	69f9      	ldr	r1, [r7, #28]
 8001e9a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8001eaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001eae:	f7fe fba3 	bl	80005f8 <__aeabi_dmul>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	4610      	mov	r0, r2
 8001eb8:	4619      	mov	r1, r3
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001ec0:	f7fe f9e2 	bl	8000288 <__aeabi_dsub>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	4610      	mov	r0, r2
 8001eca:	4619      	mov	r1, r3
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001ed2:	f7fe f9d9 	bl	8000288 <__aeabi_dsub>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	460b      	mov	r3, r1
 8001eda:	4610      	mov	r0, r2
 8001edc:	4619      	mov	r1, r3
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee4:	f7fe f9d2 	bl	800028c <__adddf3>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	460b      	mov	r3, r1
 8001eec:	4610      	mov	r0, r2
 8001eee:	4619      	mov	r1, r3
 8001ef0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ef4:	f7fe fb80 	bl	80005f8 <__aeabi_dmul>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	460b      	mov	r3, r1
 8001efc:	4620      	mov	r0, r4
 8001efe:	4629      	mov	r1, r5
 8001f00:	f7fe f9c4 	bl	800028c <__adddf3>
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	69f9      	ldr	r1, [r7, #28]
 8001f0a:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8001f1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f1e:	f7fe fb6b 	bl	80005f8 <__aeabi_dmul>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	4620      	mov	r0, r4
 8001f28:	4629      	mov	r1, r5
 8001f2a:	f7fe f9ad 	bl	8000288 <__aeabi_dsub>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	460b      	mov	r3, r1
 8001f32:	69f9      	ldr	r1, [r7, #28]
 8001f34:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8001f44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f48:	f7fe fb56 	bl	80005f8 <__aeabi_dmul>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	460b      	mov	r3, r1
 8001f50:	4620      	mov	r0, r4
 8001f52:	4629      	mov	r1, r5
 8001f54:	f7fe f998 	bl	8000288 <__aeabi_dsub>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	69f9      	ldr	r1, [r7, #28]
 8001f5e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001f6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f72:	f7fe fb41 	bl	80005f8 <__aeabi_dmul>
 8001f76:	4602      	mov	r2, r0
 8001f78:	460b      	mov	r3, r1
 8001f7a:	4620      	mov	r0, r4
 8001f7c:	4629      	mov	r1, r5
 8001f7e:	f7fe f985 	bl	800028c <__adddf3>
 8001f82:	4602      	mov	r2, r0
 8001f84:	460b      	mov	r3, r1
 8001f86:	69f9      	ldr	r1, [r7, #28]
 8001f88:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001f98:	f7fe f978 	bl	800028c <__adddf3>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001faa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001fae:	f7fe fc4d 	bl	800084c <__aeabi_ddiv>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8001fc0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001fc4:	f7fe fc42 	bl	800084c <__aeabi_ddiv>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	460b      	mov	r3, r1
 8001fcc:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    double y = newAngle - Kalman->angle;
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001fd6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001fda:	f7fe f955 	bl	8000288 <__aeabi_dsub>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    Kalman->angle += K[0] * y;
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001fec:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ff0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001ff4:	f7fe fb00 	bl	80005f8 <__aeabi_dmul>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	4620      	mov	r0, r4
 8001ffe:	4629      	mov	r1, r5
 8002000:	f7fe f944 	bl	800028c <__adddf3>
 8002004:	4602      	mov	r2, r0
 8002006:	460b      	mov	r3, r1
 8002008:	69f9      	ldr	r1, [r7, #28]
 800200a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002014:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002018:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800201c:	f7fe faec 	bl	80005f8 <__aeabi_dmul>
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	4620      	mov	r0, r4
 8002026:	4629      	mov	r1, r5
 8002028:	f7fe f930 	bl	800028c <__adddf3>
 800202c:	4602      	mov	r2, r0
 800202e:	460b      	mov	r3, r1
 8002030:	69f9      	ldr	r1, [r7, #28]
 8002032:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800203c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double P01_temp = Kalman->P[0][1];
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8002046:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8002050:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002054:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002058:	f7fe face 	bl	80005f8 <__aeabi_dmul>
 800205c:	4602      	mov	r2, r0
 800205e:	460b      	mov	r3, r1
 8002060:	4620      	mov	r0, r4
 8002062:	4629      	mov	r1, r5
 8002064:	f7fe f910 	bl	8000288 <__aeabi_dsub>
 8002068:	4602      	mov	r2, r0
 800206a:	460b      	mov	r3, r1
 800206c:	69f9      	ldr	r1, [r7, #28]
 800206e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8002078:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800207c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002080:	f7fe faba 	bl	80005f8 <__aeabi_dmul>
 8002084:	4602      	mov	r2, r0
 8002086:	460b      	mov	r3, r1
 8002088:	4620      	mov	r0, r4
 800208a:	4629      	mov	r1, r5
 800208c:	f7fe f8fc 	bl	8000288 <__aeabi_dsub>
 8002090:	4602      	mov	r2, r0
 8002092:	460b      	mov	r3, r1
 8002094:	69f9      	ldr	r1, [r7, #28]
 8002096:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 80020a0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80020a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80020a8:	f7fe faa6 	bl	80005f8 <__aeabi_dmul>
 80020ac:	4602      	mov	r2, r0
 80020ae:	460b      	mov	r3, r1
 80020b0:	4620      	mov	r0, r4
 80020b2:	4629      	mov	r1, r5
 80020b4:	f7fe f8e8 	bl	8000288 <__aeabi_dsub>
 80020b8:	4602      	mov	r2, r0
 80020ba:	460b      	mov	r3, r1
 80020bc:	69f9      	ldr	r1, [r7, #28]
 80020be:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 80020c8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80020cc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80020d0:	f7fe fa92 	bl	80005f8 <__aeabi_dmul>
 80020d4:	4602      	mov	r2, r0
 80020d6:	460b      	mov	r3, r1
 80020d8:	4620      	mov	r0, r4
 80020da:	4629      	mov	r1, r5
 80020dc:	f7fe f8d4 	bl	8000288 <__aeabi_dsub>
 80020e0:	4602      	mov	r2, r0
 80020e2:	460b      	mov	r3, r1
 80020e4:	69f9      	ldr	r1, [r7, #28]
 80020e6:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    return Kalman->angle;
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80020f0:	ec43 2b17 	vmov	d7, r2, r3
};
 80020f4:	eeb0 0a47 	vmov.f32	s0, s14
 80020f8:	eef0 0a67 	vmov.f32	s1, s15
 80020fc:	3758      	adds	r7, #88	@ 0x58
 80020fe:	46bd      	mov	sp, r7
 8002100:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002104 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002108:	4b0e      	ldr	r3, [pc, #56]	@ (8002144 <HAL_Init+0x40>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a0d      	ldr	r2, [pc, #52]	@ (8002144 <HAL_Init+0x40>)
 800210e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002112:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002114:	4b0b      	ldr	r3, [pc, #44]	@ (8002144 <HAL_Init+0x40>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a0a      	ldr	r2, [pc, #40]	@ (8002144 <HAL_Init+0x40>)
 800211a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800211e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002120:	4b08      	ldr	r3, [pc, #32]	@ (8002144 <HAL_Init+0x40>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a07      	ldr	r2, [pc, #28]	@ (8002144 <HAL_Init+0x40>)
 8002126:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800212a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800212c:	2003      	movs	r0, #3
 800212e:	f000 fbb1 	bl	8002894 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002132:	200f      	movs	r0, #15
 8002134:	f000 f808 	bl	8002148 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002138:	f7ff f978 	bl	800142c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40023c00 	.word	0x40023c00

08002148 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002150:	4b12      	ldr	r3, [pc, #72]	@ (800219c <HAL_InitTick+0x54>)
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	4b12      	ldr	r3, [pc, #72]	@ (80021a0 <HAL_InitTick+0x58>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	4619      	mov	r1, r3
 800215a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800215e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002162:	fbb2 f3f3 	udiv	r3, r2, r3
 8002166:	4618      	mov	r0, r3
 8002168:	f000 fbc9 	bl	80028fe <HAL_SYSTICK_Config>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e00e      	b.n	8002194 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2b0f      	cmp	r3, #15
 800217a:	d80a      	bhi.n	8002192 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800217c:	2200      	movs	r2, #0
 800217e:	6879      	ldr	r1, [r7, #4]
 8002180:	f04f 30ff 	mov.w	r0, #4294967295
 8002184:	f000 fb91 	bl	80028aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002188:	4a06      	ldr	r2, [pc, #24]	@ (80021a4 <HAL_InitTick+0x5c>)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800218e:	2300      	movs	r3, #0
 8002190:	e000      	b.n	8002194 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
}
 8002194:	4618      	mov	r0, r3
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	20000000 	.word	0x20000000
 80021a0:	2000009c 	.word	0x2000009c
 80021a4:	20000098 	.word	0x20000098

080021a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021ac:	4b06      	ldr	r3, [pc, #24]	@ (80021c8 <HAL_IncTick+0x20>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	461a      	mov	r2, r3
 80021b2:	4b06      	ldr	r3, [pc, #24]	@ (80021cc <HAL_IncTick+0x24>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4413      	add	r3, r2
 80021b8:	4a04      	ldr	r2, [pc, #16]	@ (80021cc <HAL_IncTick+0x24>)
 80021ba:	6013      	str	r3, [r2, #0]
}
 80021bc:	bf00      	nop
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	2000009c 	.word	0x2000009c
 80021cc:	20000260 	.word	0x20000260

080021d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  return uwTick;
 80021d4:	4b03      	ldr	r3, [pc, #12]	@ (80021e4 <HAL_GetTick+0x14>)
 80021d6:	681b      	ldr	r3, [r3, #0]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	20000260 	.word	0x20000260

080021e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021f0:	f7ff ffee 	bl	80021d0 <HAL_GetTick>
 80021f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002200:	d005      	beq.n	800220e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002202:	4b0a      	ldr	r3, [pc, #40]	@ (800222c <HAL_Delay+0x44>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	461a      	mov	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	4413      	add	r3, r2
 800220c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800220e:	bf00      	nop
 8002210:	f7ff ffde 	bl	80021d0 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	429a      	cmp	r2, r3
 800221e:	d8f7      	bhi.n	8002210 <HAL_Delay+0x28>
  {
  }
}
 8002220:	bf00      	nop
 8002222:	bf00      	nop
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	2000009c 	.word	0x2000009c

08002230 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002238:	2300      	movs	r3, #0
 800223a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d101      	bne.n	8002246 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e033      	b.n	80022ae <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224a:	2b00      	cmp	r3, #0
 800224c:	d109      	bne.n	8002262 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7ff f914 	bl	800147c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002266:	f003 0310 	and.w	r3, r3, #16
 800226a:	2b00      	cmp	r3, #0
 800226c:	d118      	bne.n	80022a0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002272:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002276:	f023 0302 	bic.w	r3, r3, #2
 800227a:	f043 0202 	orr.w	r2, r3, #2
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 f93a 	bl	80024fc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002292:	f023 0303 	bic.w	r3, r3, #3
 8002296:	f043 0201 	orr.w	r2, r3, #1
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	641a      	str	r2, [r3, #64]	@ 0x40
 800229e:	e001      	b.n	80022a4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80022ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
	...

080022b8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80022c2:	2300      	movs	r3, #0
 80022c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d101      	bne.n	80022d4 <HAL_ADC_ConfigChannel+0x1c>
 80022d0:	2302      	movs	r3, #2
 80022d2:	e105      	b.n	80024e0 <HAL_ADC_ConfigChannel+0x228>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2b09      	cmp	r3, #9
 80022e2:	d925      	bls.n	8002330 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68d9      	ldr	r1, [r3, #12]
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	461a      	mov	r2, r3
 80022f2:	4613      	mov	r3, r2
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	4413      	add	r3, r2
 80022f8:	3b1e      	subs	r3, #30
 80022fa:	2207      	movs	r2, #7
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	43da      	mvns	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	400a      	ands	r2, r1
 8002308:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68d9      	ldr	r1, [r3, #12]
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	689a      	ldr	r2, [r3, #8]
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	b29b      	uxth	r3, r3
 800231a:	4618      	mov	r0, r3
 800231c:	4603      	mov	r3, r0
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	4403      	add	r3, r0
 8002322:	3b1e      	subs	r3, #30
 8002324:	409a      	lsls	r2, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	430a      	orrs	r2, r1
 800232c:	60da      	str	r2, [r3, #12]
 800232e:	e022      	b.n	8002376 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6919      	ldr	r1, [r3, #16]
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	b29b      	uxth	r3, r3
 800233c:	461a      	mov	r2, r3
 800233e:	4613      	mov	r3, r2
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	4413      	add	r3, r2
 8002344:	2207      	movs	r2, #7
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	43da      	mvns	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	400a      	ands	r2, r1
 8002352:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6919      	ldr	r1, [r3, #16]
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	689a      	ldr	r2, [r3, #8]
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	b29b      	uxth	r3, r3
 8002364:	4618      	mov	r0, r3
 8002366:	4603      	mov	r3, r0
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	4403      	add	r3, r0
 800236c:	409a      	lsls	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	430a      	orrs	r2, r1
 8002374:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	2b06      	cmp	r3, #6
 800237c:	d824      	bhi.n	80023c8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685a      	ldr	r2, [r3, #4]
 8002388:	4613      	mov	r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	4413      	add	r3, r2
 800238e:	3b05      	subs	r3, #5
 8002390:	221f      	movs	r2, #31
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	43da      	mvns	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	400a      	ands	r2, r1
 800239e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	4618      	mov	r0, r3
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685a      	ldr	r2, [r3, #4]
 80023b2:	4613      	mov	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	4413      	add	r3, r2
 80023b8:	3b05      	subs	r3, #5
 80023ba:	fa00 f203 	lsl.w	r2, r0, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	430a      	orrs	r2, r1
 80023c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80023c6:	e04c      	b.n	8002462 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	2b0c      	cmp	r3, #12
 80023ce:	d824      	bhi.n	800241a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685a      	ldr	r2, [r3, #4]
 80023da:	4613      	mov	r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4413      	add	r3, r2
 80023e0:	3b23      	subs	r3, #35	@ 0x23
 80023e2:	221f      	movs	r2, #31
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	43da      	mvns	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	400a      	ands	r2, r1
 80023f0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	4618      	mov	r0, r3
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685a      	ldr	r2, [r3, #4]
 8002404:	4613      	mov	r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	4413      	add	r3, r2
 800240a:	3b23      	subs	r3, #35	@ 0x23
 800240c:	fa00 f203 	lsl.w	r2, r0, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	430a      	orrs	r2, r1
 8002416:	631a      	str	r2, [r3, #48]	@ 0x30
 8002418:	e023      	b.n	8002462 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685a      	ldr	r2, [r3, #4]
 8002424:	4613      	mov	r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	4413      	add	r3, r2
 800242a:	3b41      	subs	r3, #65	@ 0x41
 800242c:	221f      	movs	r2, #31
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	43da      	mvns	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	400a      	ands	r2, r1
 800243a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	b29b      	uxth	r3, r3
 8002448:	4618      	mov	r0, r3
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685a      	ldr	r2, [r3, #4]
 800244e:	4613      	mov	r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	4413      	add	r3, r2
 8002454:	3b41      	subs	r3, #65	@ 0x41
 8002456:	fa00 f203 	lsl.w	r2, r0, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	430a      	orrs	r2, r1
 8002460:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002462:	4b22      	ldr	r3, [pc, #136]	@ (80024ec <HAL_ADC_ConfigChannel+0x234>)
 8002464:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a21      	ldr	r2, [pc, #132]	@ (80024f0 <HAL_ADC_ConfigChannel+0x238>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d109      	bne.n	8002484 <HAL_ADC_ConfigChannel+0x1cc>
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2b12      	cmp	r3, #18
 8002476:	d105      	bne.n	8002484 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a19      	ldr	r2, [pc, #100]	@ (80024f0 <HAL_ADC_ConfigChannel+0x238>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d123      	bne.n	80024d6 <HAL_ADC_ConfigChannel+0x21e>
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2b10      	cmp	r3, #16
 8002494:	d003      	beq.n	800249e <HAL_ADC_ConfigChannel+0x1e6>
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2b11      	cmp	r3, #17
 800249c:	d11b      	bne.n	80024d6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2b10      	cmp	r3, #16
 80024b0:	d111      	bne.n	80024d6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024b2:	4b10      	ldr	r3, [pc, #64]	@ (80024f4 <HAL_ADC_ConfigChannel+0x23c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a10      	ldr	r2, [pc, #64]	@ (80024f8 <HAL_ADC_ConfigChannel+0x240>)
 80024b8:	fba2 2303 	umull	r2, r3, r2, r3
 80024bc:	0c9a      	lsrs	r2, r3, #18
 80024be:	4613      	mov	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	4413      	add	r3, r2
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80024c8:	e002      	b.n	80024d0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	3b01      	subs	r3, #1
 80024ce:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1f9      	bne.n	80024ca <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3714      	adds	r7, #20
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr
 80024ec:	40012300 	.word	0x40012300
 80024f0:	40012000 	.word	0x40012000
 80024f4:	20000000 	.word	0x20000000
 80024f8:	431bde83 	.word	0x431bde83

080024fc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002504:	4b79      	ldr	r3, [pc, #484]	@ (80026ec <ADC_Init+0x1f0>)
 8002506:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	431a      	orrs	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002530:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	6859      	ldr	r1, [r3, #4]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	021a      	lsls	r2, r3, #8
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	430a      	orrs	r2, r1
 8002544:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	685a      	ldr	r2, [r3, #4]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002554:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	6859      	ldr	r1, [r3, #4]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	430a      	orrs	r2, r1
 8002566:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	689a      	ldr	r2, [r3, #8]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002576:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	6899      	ldr	r1, [r3, #8]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	68da      	ldr	r2, [r3, #12]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	430a      	orrs	r2, r1
 8002588:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800258e:	4a58      	ldr	r2, [pc, #352]	@ (80026f0 <ADC_Init+0x1f4>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d022      	beq.n	80025da <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	689a      	ldr	r2, [r3, #8]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80025a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6899      	ldr	r1, [r3, #8]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	430a      	orrs	r2, r1
 80025b4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80025c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	6899      	ldr	r1, [r3, #8]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	430a      	orrs	r2, r1
 80025d6:	609a      	str	r2, [r3, #8]
 80025d8:	e00f      	b.n	80025fa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	689a      	ldr	r2, [r3, #8]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80025e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80025f8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	689a      	ldr	r2, [r3, #8]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 0202 	bic.w	r2, r2, #2
 8002608:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	6899      	ldr	r1, [r3, #8]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	7e1b      	ldrb	r3, [r3, #24]
 8002614:	005a      	lsls	r2, r3, #1
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	430a      	orrs	r2, r1
 800261c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d01b      	beq.n	8002660 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	685a      	ldr	r2, [r3, #4]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002636:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	685a      	ldr	r2, [r3, #4]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002646:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	6859      	ldr	r1, [r3, #4]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002652:	3b01      	subs	r3, #1
 8002654:	035a      	lsls	r2, r3, #13
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	430a      	orrs	r2, r1
 800265c:	605a      	str	r2, [r3, #4]
 800265e:	e007      	b.n	8002670 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	685a      	ldr	r2, [r3, #4]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800266e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800267e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	3b01      	subs	r3, #1
 800268c:	051a      	lsls	r2, r3, #20
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	430a      	orrs	r2, r1
 8002694:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	689a      	ldr	r2, [r3, #8]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80026a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	6899      	ldr	r1, [r3, #8]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80026b2:	025a      	lsls	r2, r3, #9
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	430a      	orrs	r2, r1
 80026ba:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	689a      	ldr	r2, [r3, #8]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6899      	ldr	r1, [r3, #8]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	029a      	lsls	r2, r3, #10
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	430a      	orrs	r2, r1
 80026de:	609a      	str	r2, [r3, #8]
}
 80026e0:	bf00      	nop
 80026e2:	3714      	adds	r7, #20
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr
 80026ec:	40012300 	.word	0x40012300
 80026f0:	0f000001 	.word	0x0f000001

080026f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f003 0307 	and.w	r3, r3, #7
 8002702:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002704:	4b0c      	ldr	r3, [pc, #48]	@ (8002738 <__NVIC_SetPriorityGrouping+0x44>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800270a:	68ba      	ldr	r2, [r7, #8]
 800270c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002710:	4013      	ands	r3, r2
 8002712:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800271c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002720:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002724:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002726:	4a04      	ldr	r2, [pc, #16]	@ (8002738 <__NVIC_SetPriorityGrouping+0x44>)
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	60d3      	str	r3, [r2, #12]
}
 800272c:	bf00      	nop
 800272e:	3714      	adds	r7, #20
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr
 8002738:	e000ed00 	.word	0xe000ed00

0800273c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002740:	4b04      	ldr	r3, [pc, #16]	@ (8002754 <__NVIC_GetPriorityGrouping+0x18>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	0a1b      	lsrs	r3, r3, #8
 8002746:	f003 0307 	and.w	r3, r3, #7
}
 800274a:	4618      	mov	r0, r3
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr
 8002754:	e000ed00 	.word	0xe000ed00

08002758 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	4603      	mov	r3, r0
 8002760:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002766:	2b00      	cmp	r3, #0
 8002768:	db0b      	blt.n	8002782 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800276a:	79fb      	ldrb	r3, [r7, #7]
 800276c:	f003 021f 	and.w	r2, r3, #31
 8002770:	4907      	ldr	r1, [pc, #28]	@ (8002790 <__NVIC_EnableIRQ+0x38>)
 8002772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002776:	095b      	lsrs	r3, r3, #5
 8002778:	2001      	movs	r0, #1
 800277a:	fa00 f202 	lsl.w	r2, r0, r2
 800277e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002782:	bf00      	nop
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	e000e100 	.word	0xe000e100

08002794 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	4603      	mov	r3, r0
 800279c:	6039      	str	r1, [r7, #0]
 800279e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	db0a      	blt.n	80027be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	b2da      	uxtb	r2, r3
 80027ac:	490c      	ldr	r1, [pc, #48]	@ (80027e0 <__NVIC_SetPriority+0x4c>)
 80027ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b2:	0112      	lsls	r2, r2, #4
 80027b4:	b2d2      	uxtb	r2, r2
 80027b6:	440b      	add	r3, r1
 80027b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027bc:	e00a      	b.n	80027d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	b2da      	uxtb	r2, r3
 80027c2:	4908      	ldr	r1, [pc, #32]	@ (80027e4 <__NVIC_SetPriority+0x50>)
 80027c4:	79fb      	ldrb	r3, [r7, #7]
 80027c6:	f003 030f 	and.w	r3, r3, #15
 80027ca:	3b04      	subs	r3, #4
 80027cc:	0112      	lsls	r2, r2, #4
 80027ce:	b2d2      	uxtb	r2, r2
 80027d0:	440b      	add	r3, r1
 80027d2:	761a      	strb	r2, [r3, #24]
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr
 80027e0:	e000e100 	.word	0xe000e100
 80027e4:	e000ed00 	.word	0xe000ed00

080027e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b089      	sub	sp, #36	@ 0x24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f003 0307 	and.w	r3, r3, #7
 80027fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	f1c3 0307 	rsb	r3, r3, #7
 8002802:	2b04      	cmp	r3, #4
 8002804:	bf28      	it	cs
 8002806:	2304      	movcs	r3, #4
 8002808:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	3304      	adds	r3, #4
 800280e:	2b06      	cmp	r3, #6
 8002810:	d902      	bls.n	8002818 <NVIC_EncodePriority+0x30>
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	3b03      	subs	r3, #3
 8002816:	e000      	b.n	800281a <NVIC_EncodePriority+0x32>
 8002818:	2300      	movs	r3, #0
 800281a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800281c:	f04f 32ff 	mov.w	r2, #4294967295
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	43da      	mvns	r2, r3
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	401a      	ands	r2, r3
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002830:	f04f 31ff 	mov.w	r1, #4294967295
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	fa01 f303 	lsl.w	r3, r1, r3
 800283a:	43d9      	mvns	r1, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002840:	4313      	orrs	r3, r2
         );
}
 8002842:	4618      	mov	r0, r3
 8002844:	3724      	adds	r7, #36	@ 0x24
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
	...

08002850 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	3b01      	subs	r3, #1
 800285c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002860:	d301      	bcc.n	8002866 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002862:	2301      	movs	r3, #1
 8002864:	e00f      	b.n	8002886 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002866:	4a0a      	ldr	r2, [pc, #40]	@ (8002890 <SysTick_Config+0x40>)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3b01      	subs	r3, #1
 800286c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800286e:	210f      	movs	r1, #15
 8002870:	f04f 30ff 	mov.w	r0, #4294967295
 8002874:	f7ff ff8e 	bl	8002794 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002878:	4b05      	ldr	r3, [pc, #20]	@ (8002890 <SysTick_Config+0x40>)
 800287a:	2200      	movs	r2, #0
 800287c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800287e:	4b04      	ldr	r3, [pc, #16]	@ (8002890 <SysTick_Config+0x40>)
 8002880:	2207      	movs	r2, #7
 8002882:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	e000e010 	.word	0xe000e010

08002894 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f7ff ff29 	bl	80026f4 <__NVIC_SetPriorityGrouping>
}
 80028a2:	bf00      	nop
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b086      	sub	sp, #24
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	4603      	mov	r3, r0
 80028b2:	60b9      	str	r1, [r7, #8]
 80028b4:	607a      	str	r2, [r7, #4]
 80028b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028b8:	2300      	movs	r3, #0
 80028ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028bc:	f7ff ff3e 	bl	800273c <__NVIC_GetPriorityGrouping>
 80028c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	68b9      	ldr	r1, [r7, #8]
 80028c6:	6978      	ldr	r0, [r7, #20]
 80028c8:	f7ff ff8e 	bl	80027e8 <NVIC_EncodePriority>
 80028cc:	4602      	mov	r2, r0
 80028ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028d2:	4611      	mov	r1, r2
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff ff5d 	bl	8002794 <__NVIC_SetPriority>
}
 80028da:	bf00      	nop
 80028dc:	3718      	adds	r7, #24
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b082      	sub	sp, #8
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	4603      	mov	r3, r0
 80028ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7ff ff31 	bl	8002758 <__NVIC_EnableIRQ>
}
 80028f6:	bf00      	nop
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b082      	sub	sp, #8
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f7ff ffa2 	bl	8002850 <SysTick_Config>
 800290c:	4603      	mov	r3, r0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
	...

08002918 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002918:	b480      	push	{r7}
 800291a:	b089      	sub	sp, #36	@ 0x24
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002922:	2300      	movs	r3, #0
 8002924:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002926:	2300      	movs	r3, #0
 8002928:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800292a:	2300      	movs	r3, #0
 800292c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800292e:	2300      	movs	r3, #0
 8002930:	61fb      	str	r3, [r7, #28]
 8002932:	e16b      	b.n	8002c0c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002934:	2201      	movs	r2, #1
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	4013      	ands	r3, r2
 8002946:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	429a      	cmp	r2, r3
 800294e:	f040 815a 	bne.w	8002c06 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f003 0303 	and.w	r3, r3, #3
 800295a:	2b01      	cmp	r3, #1
 800295c:	d005      	beq.n	800296a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002966:	2b02      	cmp	r3, #2
 8002968:	d130      	bne.n	80029cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	2203      	movs	r2, #3
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	43db      	mvns	r3, r3
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	4013      	ands	r3, r2
 8002980:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	68da      	ldr	r2, [r3, #12]
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	4313      	orrs	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029a0:	2201      	movs	r2, #1
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	43db      	mvns	r3, r3
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	4013      	ands	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	091b      	lsrs	r3, r3, #4
 80029b6:	f003 0201 	and.w	r2, r3, #1
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f003 0303 	and.w	r3, r3, #3
 80029d4:	2b03      	cmp	r3, #3
 80029d6:	d017      	beq.n	8002a08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	2203      	movs	r2, #3
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	43db      	mvns	r3, r3
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	4013      	ands	r3, r2
 80029ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	689a      	ldr	r2, [r3, #8]
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f003 0303 	and.w	r3, r3, #3
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d123      	bne.n	8002a5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	08da      	lsrs	r2, r3, #3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	3208      	adds	r2, #8
 8002a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	f003 0307 	and.w	r3, r3, #7
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	220f      	movs	r2, #15
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	43db      	mvns	r3, r3
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	4013      	ands	r3, r2
 8002a36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	691a      	ldr	r2, [r3, #16]
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	f003 0307 	and.w	r3, r3, #7
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	08da      	lsrs	r2, r3, #3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	3208      	adds	r2, #8
 8002a56:	69b9      	ldr	r1, [r7, #24]
 8002a58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	2203      	movs	r2, #3
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	43db      	mvns	r3, r3
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	4013      	ands	r3, r2
 8002a72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f003 0203 	and.w	r2, r3, #3
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 80b4 	beq.w	8002c06 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	60fb      	str	r3, [r7, #12]
 8002aa2:	4b60      	ldr	r3, [pc, #384]	@ (8002c24 <HAL_GPIO_Init+0x30c>)
 8002aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aa6:	4a5f      	ldr	r2, [pc, #380]	@ (8002c24 <HAL_GPIO_Init+0x30c>)
 8002aa8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002aac:	6453      	str	r3, [r2, #68]	@ 0x44
 8002aae:	4b5d      	ldr	r3, [pc, #372]	@ (8002c24 <HAL_GPIO_Init+0x30c>)
 8002ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ab2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002aba:	4a5b      	ldr	r2, [pc, #364]	@ (8002c28 <HAL_GPIO_Init+0x310>)
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	089b      	lsrs	r3, r3, #2
 8002ac0:	3302      	adds	r3, #2
 8002ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	f003 0303 	and.w	r3, r3, #3
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	220f      	movs	r2, #15
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	4013      	ands	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a52      	ldr	r2, [pc, #328]	@ (8002c2c <HAL_GPIO_Init+0x314>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d02b      	beq.n	8002b3e <HAL_GPIO_Init+0x226>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a51      	ldr	r2, [pc, #324]	@ (8002c30 <HAL_GPIO_Init+0x318>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d025      	beq.n	8002b3a <HAL_GPIO_Init+0x222>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a50      	ldr	r2, [pc, #320]	@ (8002c34 <HAL_GPIO_Init+0x31c>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d01f      	beq.n	8002b36 <HAL_GPIO_Init+0x21e>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a4f      	ldr	r2, [pc, #316]	@ (8002c38 <HAL_GPIO_Init+0x320>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d019      	beq.n	8002b32 <HAL_GPIO_Init+0x21a>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a4e      	ldr	r2, [pc, #312]	@ (8002c3c <HAL_GPIO_Init+0x324>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d013      	beq.n	8002b2e <HAL_GPIO_Init+0x216>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a4d      	ldr	r2, [pc, #308]	@ (8002c40 <HAL_GPIO_Init+0x328>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d00d      	beq.n	8002b2a <HAL_GPIO_Init+0x212>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a4c      	ldr	r2, [pc, #304]	@ (8002c44 <HAL_GPIO_Init+0x32c>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d007      	beq.n	8002b26 <HAL_GPIO_Init+0x20e>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a4b      	ldr	r2, [pc, #300]	@ (8002c48 <HAL_GPIO_Init+0x330>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d101      	bne.n	8002b22 <HAL_GPIO_Init+0x20a>
 8002b1e:	2307      	movs	r3, #7
 8002b20:	e00e      	b.n	8002b40 <HAL_GPIO_Init+0x228>
 8002b22:	2308      	movs	r3, #8
 8002b24:	e00c      	b.n	8002b40 <HAL_GPIO_Init+0x228>
 8002b26:	2306      	movs	r3, #6
 8002b28:	e00a      	b.n	8002b40 <HAL_GPIO_Init+0x228>
 8002b2a:	2305      	movs	r3, #5
 8002b2c:	e008      	b.n	8002b40 <HAL_GPIO_Init+0x228>
 8002b2e:	2304      	movs	r3, #4
 8002b30:	e006      	b.n	8002b40 <HAL_GPIO_Init+0x228>
 8002b32:	2303      	movs	r3, #3
 8002b34:	e004      	b.n	8002b40 <HAL_GPIO_Init+0x228>
 8002b36:	2302      	movs	r3, #2
 8002b38:	e002      	b.n	8002b40 <HAL_GPIO_Init+0x228>
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e000      	b.n	8002b40 <HAL_GPIO_Init+0x228>
 8002b3e:	2300      	movs	r3, #0
 8002b40:	69fa      	ldr	r2, [r7, #28]
 8002b42:	f002 0203 	and.w	r2, r2, #3
 8002b46:	0092      	lsls	r2, r2, #2
 8002b48:	4093      	lsls	r3, r2
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b50:	4935      	ldr	r1, [pc, #212]	@ (8002c28 <HAL_GPIO_Init+0x310>)
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	089b      	lsrs	r3, r3, #2
 8002b56:	3302      	adds	r3, #2
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b5e:	4b3b      	ldr	r3, [pc, #236]	@ (8002c4c <HAL_GPIO_Init+0x334>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	43db      	mvns	r3, r3
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d003      	beq.n	8002b82 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b82:	4a32      	ldr	r2, [pc, #200]	@ (8002c4c <HAL_GPIO_Init+0x334>)
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b88:	4b30      	ldr	r3, [pc, #192]	@ (8002c4c <HAL_GPIO_Init+0x334>)
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	43db      	mvns	r3, r3
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	4013      	ands	r3, r2
 8002b96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d003      	beq.n	8002bac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bac:	4a27      	ldr	r2, [pc, #156]	@ (8002c4c <HAL_GPIO_Init+0x334>)
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bb2:	4b26      	ldr	r3, [pc, #152]	@ (8002c4c <HAL_GPIO_Init+0x334>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	43db      	mvns	r3, r3
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d003      	beq.n	8002bd6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bd6:	4a1d      	ldr	r2, [pc, #116]	@ (8002c4c <HAL_GPIO_Init+0x334>)
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bdc:	4b1b      	ldr	r3, [pc, #108]	@ (8002c4c <HAL_GPIO_Init+0x334>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	43db      	mvns	r3, r3
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	4013      	ands	r3, r2
 8002bea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d003      	beq.n	8002c00 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c00:	4a12      	ldr	r2, [pc, #72]	@ (8002c4c <HAL_GPIO_Init+0x334>)
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	3301      	adds	r3, #1
 8002c0a:	61fb      	str	r3, [r7, #28]
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	2b0f      	cmp	r3, #15
 8002c10:	f67f ae90 	bls.w	8002934 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c14:	bf00      	nop
 8002c16:	bf00      	nop
 8002c18:	3724      	adds	r7, #36	@ 0x24
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	40023800 	.word	0x40023800
 8002c28:	40013800 	.word	0x40013800
 8002c2c:	40020000 	.word	0x40020000
 8002c30:	40020400 	.word	0x40020400
 8002c34:	40020800 	.word	0x40020800
 8002c38:	40020c00 	.word	0x40020c00
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	40021400 	.word	0x40021400
 8002c44:	40021800 	.word	0x40021800
 8002c48:	40021c00 	.word	0x40021c00
 8002c4c:	40013c00 	.word	0x40013c00

08002c50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	460b      	mov	r3, r1
 8002c5a:	807b      	strh	r3, [r7, #2]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c60:	787b      	ldrb	r3, [r7, #1]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d003      	beq.n	8002c6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c66:	887a      	ldrh	r2, [r7, #2]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c6c:	e003      	b.n	8002c76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c6e:	887b      	ldrh	r3, [r7, #2]
 8002c70:	041a      	lsls	r2, r3, #16
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	619a      	str	r2, [r3, #24]
}
 8002c76:	bf00      	nop
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
	...

08002c84 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002c8e:	4b08      	ldr	r3, [pc, #32]	@ (8002cb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c90:	695a      	ldr	r2, [r3, #20]
 8002c92:	88fb      	ldrh	r3, [r7, #6]
 8002c94:	4013      	ands	r3, r2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d006      	beq.n	8002ca8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c9a:	4a05      	ldr	r2, [pc, #20]	@ (8002cb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c9c:	88fb      	ldrh	r3, [r7, #6]
 8002c9e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ca0:	88fb      	ldrh	r3, [r7, #6]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f000 f806 	bl	8002cb4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ca8:	bf00      	nop
 8002caa:	3708      	adds	r7, #8
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	40013c00 	.word	0x40013c00

08002cb4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	4603      	mov	r3, r0
 8002cbc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002cbe:	bf00      	nop
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
	...

08002ccc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e12b      	b.n	8002f36 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d106      	bne.n	8002cf8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7fe fc06 	bl	8001504 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2224      	movs	r2, #36	@ 0x24
 8002cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 0201 	bic.w	r2, r2, #1
 8002d0e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002d2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d30:	f001 fa48 	bl	80041c4 <HAL_RCC_GetPCLK1Freq>
 8002d34:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	4a81      	ldr	r2, [pc, #516]	@ (8002f40 <HAL_I2C_Init+0x274>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d807      	bhi.n	8002d50 <HAL_I2C_Init+0x84>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	4a80      	ldr	r2, [pc, #512]	@ (8002f44 <HAL_I2C_Init+0x278>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	bf94      	ite	ls
 8002d48:	2301      	movls	r3, #1
 8002d4a:	2300      	movhi	r3, #0
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	e006      	b.n	8002d5e <HAL_I2C_Init+0x92>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	4a7d      	ldr	r2, [pc, #500]	@ (8002f48 <HAL_I2C_Init+0x27c>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	bf94      	ite	ls
 8002d58:	2301      	movls	r3, #1
 8002d5a:	2300      	movhi	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e0e7      	b.n	8002f36 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	4a78      	ldr	r2, [pc, #480]	@ (8002f4c <HAL_I2C_Init+0x280>)
 8002d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6e:	0c9b      	lsrs	r3, r3, #18
 8002d70:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68ba      	ldr	r2, [r7, #8]
 8002d82:	430a      	orrs	r2, r1
 8002d84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	4a6a      	ldr	r2, [pc, #424]	@ (8002f40 <HAL_I2C_Init+0x274>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d802      	bhi.n	8002da0 <HAL_I2C_Init+0xd4>
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	e009      	b.n	8002db4 <HAL_I2C_Init+0xe8>
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002da6:	fb02 f303 	mul.w	r3, r2, r3
 8002daa:	4a69      	ldr	r2, [pc, #420]	@ (8002f50 <HAL_I2C_Init+0x284>)
 8002dac:	fba2 2303 	umull	r2, r3, r2, r3
 8002db0:	099b      	lsrs	r3, r3, #6
 8002db2:	3301      	adds	r3, #1
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	6812      	ldr	r2, [r2, #0]
 8002db8:	430b      	orrs	r3, r1
 8002dba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	69db      	ldr	r3, [r3, #28]
 8002dc2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002dc6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	495c      	ldr	r1, [pc, #368]	@ (8002f40 <HAL_I2C_Init+0x274>)
 8002dd0:	428b      	cmp	r3, r1
 8002dd2:	d819      	bhi.n	8002e08 <HAL_I2C_Init+0x13c>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	1e59      	subs	r1, r3, #1
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	fbb1 f3f3 	udiv	r3, r1, r3
 8002de2:	1c59      	adds	r1, r3, #1
 8002de4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002de8:	400b      	ands	r3, r1
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00a      	beq.n	8002e04 <HAL_I2C_Init+0x138>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	1e59      	subs	r1, r3, #1
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e02:	e051      	b.n	8002ea8 <HAL_I2C_Init+0x1dc>
 8002e04:	2304      	movs	r3, #4
 8002e06:	e04f      	b.n	8002ea8 <HAL_I2C_Init+0x1dc>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d111      	bne.n	8002e34 <HAL_I2C_Init+0x168>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	1e58      	subs	r0, r3, #1
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6859      	ldr	r1, [r3, #4]
 8002e18:	460b      	mov	r3, r1
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	440b      	add	r3, r1
 8002e1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e22:	3301      	adds	r3, #1
 8002e24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	bf0c      	ite	eq
 8002e2c:	2301      	moveq	r3, #1
 8002e2e:	2300      	movne	r3, #0
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	e012      	b.n	8002e5a <HAL_I2C_Init+0x18e>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	1e58      	subs	r0, r3, #1
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6859      	ldr	r1, [r3, #4]
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	440b      	add	r3, r1
 8002e42:	0099      	lsls	r1, r3, #2
 8002e44:	440b      	add	r3, r1
 8002e46:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	bf0c      	ite	eq
 8002e54:	2301      	moveq	r3, #1
 8002e56:	2300      	movne	r3, #0
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <HAL_I2C_Init+0x196>
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e022      	b.n	8002ea8 <HAL_I2C_Init+0x1dc>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10e      	bne.n	8002e88 <HAL_I2C_Init+0x1bc>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	1e58      	subs	r0, r3, #1
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6859      	ldr	r1, [r3, #4]
 8002e72:	460b      	mov	r3, r1
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	440b      	add	r3, r1
 8002e78:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e86:	e00f      	b.n	8002ea8 <HAL_I2C_Init+0x1dc>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	1e58      	subs	r0, r3, #1
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6859      	ldr	r1, [r3, #4]
 8002e90:	460b      	mov	r3, r1
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	0099      	lsls	r1, r3, #2
 8002e98:	440b      	add	r3, r1
 8002e9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ea4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002ea8:	6879      	ldr	r1, [r7, #4]
 8002eaa:	6809      	ldr	r1, [r1, #0]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69da      	ldr	r2, [r3, #28]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002ed6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	6911      	ldr	r1, [r2, #16]
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	68d2      	ldr	r2, [r2, #12]
 8002ee2:	4311      	orrs	r1, r2
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	6812      	ldr	r2, [r2, #0]
 8002ee8:	430b      	orrs	r3, r1
 8002eea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	695a      	ldr	r2, [r3, #20]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	431a      	orrs	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	430a      	orrs	r2, r1
 8002f06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f042 0201 	orr.w	r2, r2, #1
 8002f16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2220      	movs	r2, #32
 8002f22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	000186a0 	.word	0x000186a0
 8002f44:	001e847f 	.word	0x001e847f
 8002f48:	003d08ff 	.word	0x003d08ff
 8002f4c:	431bde83 	.word	0x431bde83
 8002f50:	10624dd3 	.word	0x10624dd3

08002f54 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b08c      	sub	sp, #48	@ 0x30
 8002f58:	af02      	add	r7, sp, #8
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	4608      	mov	r0, r1
 8002f5e:	4611      	mov	r1, r2
 8002f60:	461a      	mov	r2, r3
 8002f62:	4603      	mov	r3, r0
 8002f64:	817b      	strh	r3, [r7, #10]
 8002f66:	460b      	mov	r3, r1
 8002f68:	813b      	strh	r3, [r7, #8]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f6e:	f7ff f92f 	bl	80021d0 <HAL_GetTick>
 8002f72:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	2b20      	cmp	r3, #32
 8002f7e:	f040 8214 	bne.w	80033aa <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	2319      	movs	r3, #25
 8002f88:	2201      	movs	r2, #1
 8002f8a:	497b      	ldr	r1, [pc, #492]	@ (8003178 <HAL_I2C_Mem_Read+0x224>)
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f000 fafb 	bl	8003588 <I2C_WaitOnFlagUntilTimeout>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002f98:	2302      	movs	r3, #2
 8002f9a:	e207      	b.n	80033ac <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d101      	bne.n	8002faa <HAL_I2C_Mem_Read+0x56>
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	e200      	b.n	80033ac <HAL_I2C_Mem_Read+0x458>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d007      	beq.n	8002fd0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f042 0201 	orr.w	r2, r2, #1
 8002fce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002fde:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2222      	movs	r2, #34	@ 0x22
 8002fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2240      	movs	r2, #64	@ 0x40
 8002fec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ffa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003000:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003006:	b29a      	uxth	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	4a5b      	ldr	r2, [pc, #364]	@ (800317c <HAL_I2C_Mem_Read+0x228>)
 8003010:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003012:	88f8      	ldrh	r0, [r7, #6]
 8003014:	893a      	ldrh	r2, [r7, #8]
 8003016:	8979      	ldrh	r1, [r7, #10]
 8003018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800301a:	9301      	str	r3, [sp, #4]
 800301c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800301e:	9300      	str	r3, [sp, #0]
 8003020:	4603      	mov	r3, r0
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f000 f9c8 	bl	80033b8 <I2C_RequestMemoryRead>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e1bc      	b.n	80033ac <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003036:	2b00      	cmp	r3, #0
 8003038:	d113      	bne.n	8003062 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800303a:	2300      	movs	r3, #0
 800303c:	623b      	str	r3, [r7, #32]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	695b      	ldr	r3, [r3, #20]
 8003044:	623b      	str	r3, [r7, #32]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	699b      	ldr	r3, [r3, #24]
 800304c:	623b      	str	r3, [r7, #32]
 800304e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800305e:	601a      	str	r2, [r3, #0]
 8003060:	e190      	b.n	8003384 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003066:	2b01      	cmp	r3, #1
 8003068:	d11b      	bne.n	80030a2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003078:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800307a:	2300      	movs	r3, #0
 800307c:	61fb      	str	r3, [r7, #28]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	695b      	ldr	r3, [r3, #20]
 8003084:	61fb      	str	r3, [r7, #28]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	61fb      	str	r3, [r7, #28]
 800308e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	e170      	b.n	8003384 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d11b      	bne.n	80030e2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030b8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030ca:	2300      	movs	r3, #0
 80030cc:	61bb      	str	r3, [r7, #24]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	695b      	ldr	r3, [r3, #20]
 80030d4:	61bb      	str	r3, [r7, #24]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	61bb      	str	r3, [r7, #24]
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	e150      	b.n	8003384 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030e2:	2300      	movs	r3, #0
 80030e4:	617b      	str	r3, [r7, #20]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	695b      	ldr	r3, [r3, #20]
 80030ec:	617b      	str	r3, [r7, #20]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	617b      	str	r3, [r7, #20]
 80030f6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80030f8:	e144      	b.n	8003384 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030fe:	2b03      	cmp	r3, #3
 8003100:	f200 80f1 	bhi.w	80032e6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003108:	2b01      	cmp	r3, #1
 800310a:	d123      	bne.n	8003154 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800310c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800310e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003110:	68f8      	ldr	r0, [r7, #12]
 8003112:	f000 fb9b 	bl	800384c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e145      	b.n	80033ac <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	691a      	ldr	r2, [r3, #16]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800312a:	b2d2      	uxtb	r2, r2
 800312c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003132:	1c5a      	adds	r2, r3, #1
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800313c:	3b01      	subs	r3, #1
 800313e:	b29a      	uxth	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003148:	b29b      	uxth	r3, r3
 800314a:	3b01      	subs	r3, #1
 800314c:	b29a      	uxth	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003152:	e117      	b.n	8003384 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003158:	2b02      	cmp	r3, #2
 800315a:	d14e      	bne.n	80031fa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800315c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003162:	2200      	movs	r2, #0
 8003164:	4906      	ldr	r1, [pc, #24]	@ (8003180 <HAL_I2C_Mem_Read+0x22c>)
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f000 fa0e 	bl	8003588 <I2C_WaitOnFlagUntilTimeout>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d008      	beq.n	8003184 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e11a      	b.n	80033ac <HAL_I2C_Mem_Read+0x458>
 8003176:	bf00      	nop
 8003178:	00100002 	.word	0x00100002
 800317c:	ffff0000 	.word	0xffff0000
 8003180:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003192:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	691a      	ldr	r2, [r3, #16]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800319e:	b2d2      	uxtb	r2, r2
 80031a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a6:	1c5a      	adds	r2, r3, #1
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031b0:	3b01      	subs	r3, #1
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031bc:	b29b      	uxth	r3, r3
 80031be:	3b01      	subs	r3, #1
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	691a      	ldr	r2, [r3, #16]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d0:	b2d2      	uxtb	r2, r2
 80031d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d8:	1c5a      	adds	r2, r3, #1
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031e2:	3b01      	subs	r3, #1
 80031e4:	b29a      	uxth	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	3b01      	subs	r3, #1
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80031f8:	e0c4      	b.n	8003384 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031fc:	9300      	str	r3, [sp, #0]
 80031fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003200:	2200      	movs	r2, #0
 8003202:	496c      	ldr	r1, [pc, #432]	@ (80033b4 <HAL_I2C_Mem_Read+0x460>)
 8003204:	68f8      	ldr	r0, [r7, #12]
 8003206:	f000 f9bf 	bl	8003588 <I2C_WaitOnFlagUntilTimeout>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e0cb      	b.n	80033ac <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003222:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	691a      	ldr	r2, [r3, #16]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800322e:	b2d2      	uxtb	r2, r2
 8003230:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003236:	1c5a      	adds	r2, r3, #1
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003240:	3b01      	subs	r3, #1
 8003242:	b29a      	uxth	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800324c:	b29b      	uxth	r3, r3
 800324e:	3b01      	subs	r3, #1
 8003250:	b29a      	uxth	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003258:	9300      	str	r3, [sp, #0]
 800325a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800325c:	2200      	movs	r2, #0
 800325e:	4955      	ldr	r1, [pc, #340]	@ (80033b4 <HAL_I2C_Mem_Read+0x460>)
 8003260:	68f8      	ldr	r0, [r7, #12]
 8003262:	f000 f991 	bl	8003588 <I2C_WaitOnFlagUntilTimeout>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e09d      	b.n	80033ac <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800327e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	691a      	ldr	r2, [r3, #16]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800328a:	b2d2      	uxtb	r2, r2
 800328c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003292:	1c5a      	adds	r2, r3, #1
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800329c:	3b01      	subs	r3, #1
 800329e:	b29a      	uxth	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	3b01      	subs	r3, #1
 80032ac:	b29a      	uxth	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	691a      	ldr	r2, [r3, #16]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032bc:	b2d2      	uxtb	r2, r2
 80032be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c4:	1c5a      	adds	r2, r3, #1
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032ce:	3b01      	subs	r3, #1
 80032d0:	b29a      	uxth	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032da:	b29b      	uxth	r3, r3
 80032dc:	3b01      	subs	r3, #1
 80032de:	b29a      	uxth	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80032e4:	e04e      	b.n	8003384 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032e8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80032ea:	68f8      	ldr	r0, [r7, #12]
 80032ec:	f000 faae 	bl	800384c <I2C_WaitOnRXNEFlagUntilTimeout>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e058      	b.n	80033ac <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	691a      	ldr	r2, [r3, #16]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003304:	b2d2      	uxtb	r2, r2
 8003306:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800330c:	1c5a      	adds	r2, r3, #1
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003316:	3b01      	subs	r3, #1
 8003318:	b29a      	uxth	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003322:	b29b      	uxth	r3, r3
 8003324:	3b01      	subs	r3, #1
 8003326:	b29a      	uxth	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	f003 0304 	and.w	r3, r3, #4
 8003336:	2b04      	cmp	r3, #4
 8003338:	d124      	bne.n	8003384 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800333e:	2b03      	cmp	r3, #3
 8003340:	d107      	bne.n	8003352 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003350:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	691a      	ldr	r2, [r3, #16]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800335c:	b2d2      	uxtb	r2, r2
 800335e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003364:	1c5a      	adds	r2, r3, #1
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800336e:	3b01      	subs	r3, #1
 8003370:	b29a      	uxth	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800337a:	b29b      	uxth	r3, r3
 800337c:	3b01      	subs	r3, #1
 800337e:	b29a      	uxth	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003388:	2b00      	cmp	r3, #0
 800338a:	f47f aeb6 	bne.w	80030fa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2220      	movs	r2, #32
 8003392:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80033a6:	2300      	movs	r3, #0
 80033a8:	e000      	b.n	80033ac <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80033aa:	2302      	movs	r3, #2
  }
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3728      	adds	r7, #40	@ 0x28
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	00010004 	.word	0x00010004

080033b8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b088      	sub	sp, #32
 80033bc:	af02      	add	r7, sp, #8
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	4608      	mov	r0, r1
 80033c2:	4611      	mov	r1, r2
 80033c4:	461a      	mov	r2, r3
 80033c6:	4603      	mov	r3, r0
 80033c8:	817b      	strh	r3, [r7, #10]
 80033ca:	460b      	mov	r3, r1
 80033cc:	813b      	strh	r3, [r7, #8]
 80033ce:	4613      	mov	r3, r2
 80033d0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80033e0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f4:	9300      	str	r3, [sp, #0]
 80033f6:	6a3b      	ldr	r3, [r7, #32]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f000 f8c2 	bl	8003588 <I2C_WaitOnFlagUntilTimeout>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00d      	beq.n	8003426 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003414:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003418:	d103      	bne.n	8003422 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003420:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e0aa      	b.n	800357c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003426:	897b      	ldrh	r3, [r7, #10]
 8003428:	b2db      	uxtb	r3, r3
 800342a:	461a      	mov	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003434:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003438:	6a3a      	ldr	r2, [r7, #32]
 800343a:	4952      	ldr	r1, [pc, #328]	@ (8003584 <I2C_RequestMemoryRead+0x1cc>)
 800343c:	68f8      	ldr	r0, [r7, #12]
 800343e:	f000 f91d 	bl	800367c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d001      	beq.n	800344c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e097      	b.n	800357c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800344c:	2300      	movs	r3, #0
 800344e:	617b      	str	r3, [r7, #20]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	617b      	str	r3, [r7, #20]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	617b      	str	r3, [r7, #20]
 8003460:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003462:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003464:	6a39      	ldr	r1, [r7, #32]
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f000 f9a8 	bl	80037bc <I2C_WaitOnTXEFlagUntilTimeout>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00d      	beq.n	800348e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003476:	2b04      	cmp	r3, #4
 8003478:	d107      	bne.n	800348a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003488:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e076      	b.n	800357c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800348e:	88fb      	ldrh	r3, [r7, #6]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d105      	bne.n	80034a0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003494:	893b      	ldrh	r3, [r7, #8]
 8003496:	b2da      	uxtb	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	611a      	str	r2, [r3, #16]
 800349e:	e021      	b.n	80034e4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80034a0:	893b      	ldrh	r3, [r7, #8]
 80034a2:	0a1b      	lsrs	r3, r3, #8
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	b2da      	uxtb	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034b0:	6a39      	ldr	r1, [r7, #32]
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f000 f982 	bl	80037bc <I2C_WaitOnTXEFlagUntilTimeout>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00d      	beq.n	80034da <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c2:	2b04      	cmp	r3, #4
 80034c4:	d107      	bne.n	80034d6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e050      	b.n	800357c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034da:	893b      	ldrh	r3, [r7, #8]
 80034dc:	b2da      	uxtb	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034e6:	6a39      	ldr	r1, [r7, #32]
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f000 f967 	bl	80037bc <I2C_WaitOnTXEFlagUntilTimeout>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00d      	beq.n	8003510 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f8:	2b04      	cmp	r3, #4
 80034fa:	d107      	bne.n	800350c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800350a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e035      	b.n	800357c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800351e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003522:	9300      	str	r3, [sp, #0]
 8003524:	6a3b      	ldr	r3, [r7, #32]
 8003526:	2200      	movs	r2, #0
 8003528:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800352c:	68f8      	ldr	r0, [r7, #12]
 800352e:	f000 f82b 	bl	8003588 <I2C_WaitOnFlagUntilTimeout>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00d      	beq.n	8003554 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003542:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003546:	d103      	bne.n	8003550 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800354e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e013      	b.n	800357c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003554:	897b      	ldrh	r3, [r7, #10]
 8003556:	b2db      	uxtb	r3, r3
 8003558:	f043 0301 	orr.w	r3, r3, #1
 800355c:	b2da      	uxtb	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003566:	6a3a      	ldr	r2, [r7, #32]
 8003568:	4906      	ldr	r1, [pc, #24]	@ (8003584 <I2C_RequestMemoryRead+0x1cc>)
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f000 f886 	bl	800367c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d001      	beq.n	800357a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e000      	b.n	800357c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3718      	adds	r7, #24
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	00010002 	.word	0x00010002

08003588 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	603b      	str	r3, [r7, #0]
 8003594:	4613      	mov	r3, r2
 8003596:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003598:	e048      	b.n	800362c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a0:	d044      	beq.n	800362c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035a2:	f7fe fe15 	bl	80021d0 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d302      	bcc.n	80035b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d139      	bne.n	800362c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	0c1b      	lsrs	r3, r3, #16
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d10d      	bne.n	80035de <I2C_WaitOnFlagUntilTimeout+0x56>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	695b      	ldr	r3, [r3, #20]
 80035c8:	43da      	mvns	r2, r3
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	4013      	ands	r3, r2
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	bf0c      	ite	eq
 80035d4:	2301      	moveq	r3, #1
 80035d6:	2300      	movne	r3, #0
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	461a      	mov	r2, r3
 80035dc:	e00c      	b.n	80035f8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	43da      	mvns	r2, r3
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	4013      	ands	r3, r2
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	bf0c      	ite	eq
 80035f0:	2301      	moveq	r3, #1
 80035f2:	2300      	movne	r3, #0
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	461a      	mov	r2, r3
 80035f8:	79fb      	ldrb	r3, [r7, #7]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d116      	bne.n	800362c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2220      	movs	r2, #32
 8003608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003618:	f043 0220 	orr.w	r2, r3, #32
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e023      	b.n	8003674 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	0c1b      	lsrs	r3, r3, #16
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b01      	cmp	r3, #1
 8003634:	d10d      	bne.n	8003652 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	695b      	ldr	r3, [r3, #20]
 800363c:	43da      	mvns	r2, r3
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	4013      	ands	r3, r2
 8003642:	b29b      	uxth	r3, r3
 8003644:	2b00      	cmp	r3, #0
 8003646:	bf0c      	ite	eq
 8003648:	2301      	moveq	r3, #1
 800364a:	2300      	movne	r3, #0
 800364c:	b2db      	uxtb	r3, r3
 800364e:	461a      	mov	r2, r3
 8003650:	e00c      	b.n	800366c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	43da      	mvns	r2, r3
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	4013      	ands	r3, r2
 800365e:	b29b      	uxth	r3, r3
 8003660:	2b00      	cmp	r3, #0
 8003662:	bf0c      	ite	eq
 8003664:	2301      	moveq	r3, #1
 8003666:	2300      	movne	r3, #0
 8003668:	b2db      	uxtb	r3, r3
 800366a:	461a      	mov	r2, r3
 800366c:	79fb      	ldrb	r3, [r7, #7]
 800366e:	429a      	cmp	r2, r3
 8003670:	d093      	beq.n	800359a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	3710      	adds	r7, #16
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
 8003688:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800368a:	e071      	b.n	8003770 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003696:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800369a:	d123      	bne.n	80036e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036aa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80036b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2220      	movs	r2, #32
 80036c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d0:	f043 0204 	orr.w	r2, r3, #4
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e067      	b.n	80037b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ea:	d041      	beq.n	8003770 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ec:	f7fe fd70 	bl	80021d0 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d302      	bcc.n	8003702 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d136      	bne.n	8003770 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	0c1b      	lsrs	r3, r3, #16
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b01      	cmp	r3, #1
 800370a:	d10c      	bne.n	8003726 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	43da      	mvns	r2, r3
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	4013      	ands	r3, r2
 8003718:	b29b      	uxth	r3, r3
 800371a:	2b00      	cmp	r3, #0
 800371c:	bf14      	ite	ne
 800371e:	2301      	movne	r3, #1
 8003720:	2300      	moveq	r3, #0
 8003722:	b2db      	uxtb	r3, r3
 8003724:	e00b      	b.n	800373e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	43da      	mvns	r2, r3
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	4013      	ands	r3, r2
 8003732:	b29b      	uxth	r3, r3
 8003734:	2b00      	cmp	r3, #0
 8003736:	bf14      	ite	ne
 8003738:	2301      	movne	r3, #1
 800373a:	2300      	moveq	r3, #0
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d016      	beq.n	8003770 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2200      	movs	r2, #0
 8003746:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2220      	movs	r2, #32
 800374c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375c:	f043 0220 	orr.w	r2, r3, #32
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e021      	b.n	80037b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	0c1b      	lsrs	r3, r3, #16
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b01      	cmp	r3, #1
 8003778:	d10c      	bne.n	8003794 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	695b      	ldr	r3, [r3, #20]
 8003780:	43da      	mvns	r2, r3
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	4013      	ands	r3, r2
 8003786:	b29b      	uxth	r3, r3
 8003788:	2b00      	cmp	r3, #0
 800378a:	bf14      	ite	ne
 800378c:	2301      	movne	r3, #1
 800378e:	2300      	moveq	r3, #0
 8003790:	b2db      	uxtb	r3, r3
 8003792:	e00b      	b.n	80037ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	43da      	mvns	r2, r3
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	4013      	ands	r3, r2
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	bf14      	ite	ne
 80037a6:	2301      	movne	r3, #1
 80037a8:	2300      	moveq	r3, #0
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f47f af6d 	bne.w	800368c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3710      	adds	r7, #16
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037c8:	e034      	b.n	8003834 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037ca:	68f8      	ldr	r0, [r7, #12]
 80037cc:	f000 f89b 	bl	8003906 <I2C_IsAcknowledgeFailed>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e034      	b.n	8003844 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e0:	d028      	beq.n	8003834 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037e2:	f7fe fcf5 	bl	80021d0 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d302      	bcc.n	80037f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d11d      	bne.n	8003834 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003802:	2b80      	cmp	r3, #128	@ 0x80
 8003804:	d016      	beq.n	8003834 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2220      	movs	r2, #32
 8003810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003820:	f043 0220 	orr.w	r2, r3, #32
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e007      	b.n	8003844 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800383e:	2b80      	cmp	r3, #128	@ 0x80
 8003840:	d1c3      	bne.n	80037ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003858:	e049      	b.n	80038ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	695b      	ldr	r3, [r3, #20]
 8003860:	f003 0310 	and.w	r3, r3, #16
 8003864:	2b10      	cmp	r3, #16
 8003866:	d119      	bne.n	800389c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f06f 0210 	mvn.w	r2, #16
 8003870:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2220      	movs	r2, #32
 800387c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e030      	b.n	80038fe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800389c:	f7fe fc98 	bl	80021d0 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	68ba      	ldr	r2, [r7, #8]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d302      	bcc.n	80038b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d11d      	bne.n	80038ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038bc:	2b40      	cmp	r3, #64	@ 0x40
 80038be:	d016      	beq.n	80038ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2220      	movs	r2, #32
 80038ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038da:	f043 0220 	orr.w	r2, r3, #32
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e007      	b.n	80038fe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	695b      	ldr	r3, [r3, #20]
 80038f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038f8:	2b40      	cmp	r3, #64	@ 0x40
 80038fa:	d1ae      	bne.n	800385a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3710      	adds	r7, #16
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}

08003906 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003906:	b480      	push	{r7}
 8003908:	b083      	sub	sp, #12
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	695b      	ldr	r3, [r3, #20]
 8003914:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003918:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800391c:	d11b      	bne.n	8003956 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003926:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2220      	movs	r2, #32
 8003932:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003942:	f043 0204 	orr.w	r2, r3, #4
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e000      	b.n	8003958 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d101      	bne.n	8003976 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e267      	b.n	8003e46 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b00      	cmp	r3, #0
 8003980:	d075      	beq.n	8003a6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003982:	4b88      	ldr	r3, [pc, #544]	@ (8003ba4 <HAL_RCC_OscConfig+0x240>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f003 030c 	and.w	r3, r3, #12
 800398a:	2b04      	cmp	r3, #4
 800398c:	d00c      	beq.n	80039a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800398e:	4b85      	ldr	r3, [pc, #532]	@ (8003ba4 <HAL_RCC_OscConfig+0x240>)
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003996:	2b08      	cmp	r3, #8
 8003998:	d112      	bne.n	80039c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800399a:	4b82      	ldr	r3, [pc, #520]	@ (8003ba4 <HAL_RCC_OscConfig+0x240>)
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039a6:	d10b      	bne.n	80039c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039a8:	4b7e      	ldr	r3, [pc, #504]	@ (8003ba4 <HAL_RCC_OscConfig+0x240>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d05b      	beq.n	8003a6c <HAL_RCC_OscConfig+0x108>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d157      	bne.n	8003a6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e242      	b.n	8003e46 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039c8:	d106      	bne.n	80039d8 <HAL_RCC_OscConfig+0x74>
 80039ca:	4b76      	ldr	r3, [pc, #472]	@ (8003ba4 <HAL_RCC_OscConfig+0x240>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a75      	ldr	r2, [pc, #468]	@ (8003ba4 <HAL_RCC_OscConfig+0x240>)
 80039d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039d4:	6013      	str	r3, [r2, #0]
 80039d6:	e01d      	b.n	8003a14 <HAL_RCC_OscConfig+0xb0>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039e0:	d10c      	bne.n	80039fc <HAL_RCC_OscConfig+0x98>
 80039e2:	4b70      	ldr	r3, [pc, #448]	@ (8003ba4 <HAL_RCC_OscConfig+0x240>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a6f      	ldr	r2, [pc, #444]	@ (8003ba4 <HAL_RCC_OscConfig+0x240>)
 80039e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039ec:	6013      	str	r3, [r2, #0]
 80039ee:	4b6d      	ldr	r3, [pc, #436]	@ (8003ba4 <HAL_RCC_OscConfig+0x240>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a6c      	ldr	r2, [pc, #432]	@ (8003ba4 <HAL_RCC_OscConfig+0x240>)
 80039f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039f8:	6013      	str	r3, [r2, #0]
 80039fa:	e00b      	b.n	8003a14 <HAL_RCC_OscConfig+0xb0>
 80039fc:	4b69      	ldr	r3, [pc, #420]	@ (8003ba4 <HAL_RCC_OscConfig+0x240>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a68      	ldr	r2, [pc, #416]	@ (8003ba4 <HAL_RCC_OscConfig+0x240>)
 8003a02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a06:	6013      	str	r3, [r2, #0]
 8003a08:	4b66      	ldr	r3, [pc, #408]	@ (8003ba4 <HAL_RCC_OscConfig+0x240>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a65      	ldr	r2, [pc, #404]	@ (8003ba4 <HAL_RCC_OscConfig+0x240>)
 8003a0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d013      	beq.n	8003a44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a1c:	f7fe fbd8 	bl	80021d0 <HAL_GetTick>
 8003a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a22:	e008      	b.n	8003a36 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a24:	f7fe fbd4 	bl	80021d0 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b64      	cmp	r3, #100	@ 0x64
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e207      	b.n	8003e46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a36:	4b5b      	ldr	r3, [pc, #364]	@ (8003ba4 <HAL_RCC_OscConfig+0x240>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d0f0      	beq.n	8003a24 <HAL_RCC_OscConfig+0xc0>
 8003a42:	e014      	b.n	8003a6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a44:	f7fe fbc4 	bl	80021d0 <HAL_GetTick>
 8003a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a4a:	e008      	b.n	8003a5e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a4c:	f7fe fbc0 	bl	80021d0 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	2b64      	cmp	r3, #100	@ 0x64
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e1f3      	b.n	8003e46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a5e:	4b51      	ldr	r3, [pc, #324]	@ (8003ba4 <HAL_RCC_OscConfig+0x240>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1f0      	bne.n	8003a4c <HAL_RCC_OscConfig+0xe8>
 8003a6a:	e000      	b.n	8003a6e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d063      	beq.n	8003b42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a7a:	4b4a      	ldr	r3, [pc, #296]	@ (8003ba4 <HAL_RCC_OscConfig+0x240>)
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f003 030c 	and.w	r3, r3, #12
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00b      	beq.n	8003a9e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a86:	4b47      	ldr	r3, [pc, #284]	@ (8003ba4 <HAL_RCC_OscConfig+0x240>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a8e:	2b08      	cmp	r3, #8
 8003a90:	d11c      	bne.n	8003acc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a92:	4b44      	ldr	r3, [pc, #272]	@ (8003ba4 <HAL_RCC_OscConfig+0x240>)
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d116      	bne.n	8003acc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a9e:	4b41      	ldr	r3, [pc, #260]	@ (8003ba4 <HAL_RCC_OscConfig+0x240>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d005      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x152>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d001      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e1c7      	b.n	8003e46 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ab6:	4b3b      	ldr	r3, [pc, #236]	@ (8003ba4 <HAL_RCC_OscConfig+0x240>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	4937      	ldr	r1, [pc, #220]	@ (8003ba4 <HAL_RCC_OscConfig+0x240>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aca:	e03a      	b.n	8003b42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d020      	beq.n	8003b16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ad4:	4b34      	ldr	r3, [pc, #208]	@ (8003ba8 <HAL_RCC_OscConfig+0x244>)
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ada:	f7fe fb79 	bl	80021d0 <HAL_GetTick>
 8003ade:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae0:	e008      	b.n	8003af4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ae2:	f7fe fb75 	bl	80021d0 <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d901      	bls.n	8003af4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	e1a8      	b.n	8003e46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003af4:	4b2b      	ldr	r3, [pc, #172]	@ (8003ba4 <HAL_RCC_OscConfig+0x240>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d0f0      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b00:	4b28      	ldr	r3, [pc, #160]	@ (8003ba4 <HAL_RCC_OscConfig+0x240>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	00db      	lsls	r3, r3, #3
 8003b0e:	4925      	ldr	r1, [pc, #148]	@ (8003ba4 <HAL_RCC_OscConfig+0x240>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	600b      	str	r3, [r1, #0]
 8003b14:	e015      	b.n	8003b42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b16:	4b24      	ldr	r3, [pc, #144]	@ (8003ba8 <HAL_RCC_OscConfig+0x244>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b1c:	f7fe fb58 	bl	80021d0 <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b22:	e008      	b.n	8003b36 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b24:	f7fe fb54 	bl	80021d0 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e187      	b.n	8003e46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b36:	4b1b      	ldr	r3, [pc, #108]	@ (8003ba4 <HAL_RCC_OscConfig+0x240>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1f0      	bne.n	8003b24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0308 	and.w	r3, r3, #8
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d036      	beq.n	8003bbc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d016      	beq.n	8003b84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b56:	4b15      	ldr	r3, [pc, #84]	@ (8003bac <HAL_RCC_OscConfig+0x248>)
 8003b58:	2201      	movs	r2, #1
 8003b5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b5c:	f7fe fb38 	bl	80021d0 <HAL_GetTick>
 8003b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b62:	e008      	b.n	8003b76 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b64:	f7fe fb34 	bl	80021d0 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e167      	b.n	8003e46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b76:	4b0b      	ldr	r3, [pc, #44]	@ (8003ba4 <HAL_RCC_OscConfig+0x240>)
 8003b78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d0f0      	beq.n	8003b64 <HAL_RCC_OscConfig+0x200>
 8003b82:	e01b      	b.n	8003bbc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b84:	4b09      	ldr	r3, [pc, #36]	@ (8003bac <HAL_RCC_OscConfig+0x248>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b8a:	f7fe fb21 	bl	80021d0 <HAL_GetTick>
 8003b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b90:	e00e      	b.n	8003bb0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b92:	f7fe fb1d 	bl	80021d0 <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d907      	bls.n	8003bb0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e150      	b.n	8003e46 <HAL_RCC_OscConfig+0x4e2>
 8003ba4:	40023800 	.word	0x40023800
 8003ba8:	42470000 	.word	0x42470000
 8003bac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bb0:	4b88      	ldr	r3, [pc, #544]	@ (8003dd4 <HAL_RCC_OscConfig+0x470>)
 8003bb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bb4:	f003 0302 	and.w	r3, r3, #2
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d1ea      	bne.n	8003b92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0304 	and.w	r3, r3, #4
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	f000 8097 	beq.w	8003cf8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bce:	4b81      	ldr	r3, [pc, #516]	@ (8003dd4 <HAL_RCC_OscConfig+0x470>)
 8003bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10f      	bne.n	8003bfa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bda:	2300      	movs	r3, #0
 8003bdc:	60bb      	str	r3, [r7, #8]
 8003bde:	4b7d      	ldr	r3, [pc, #500]	@ (8003dd4 <HAL_RCC_OscConfig+0x470>)
 8003be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be2:	4a7c      	ldr	r2, [pc, #496]	@ (8003dd4 <HAL_RCC_OscConfig+0x470>)
 8003be4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003be8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bea:	4b7a      	ldr	r3, [pc, #488]	@ (8003dd4 <HAL_RCC_OscConfig+0x470>)
 8003bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bf2:	60bb      	str	r3, [r7, #8]
 8003bf4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bfa:	4b77      	ldr	r3, [pc, #476]	@ (8003dd8 <HAL_RCC_OscConfig+0x474>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d118      	bne.n	8003c38 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c06:	4b74      	ldr	r3, [pc, #464]	@ (8003dd8 <HAL_RCC_OscConfig+0x474>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a73      	ldr	r2, [pc, #460]	@ (8003dd8 <HAL_RCC_OscConfig+0x474>)
 8003c0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c12:	f7fe fadd 	bl	80021d0 <HAL_GetTick>
 8003c16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c18:	e008      	b.n	8003c2c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c1a:	f7fe fad9 	bl	80021d0 <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d901      	bls.n	8003c2c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e10c      	b.n	8003e46 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c2c:	4b6a      	ldr	r3, [pc, #424]	@ (8003dd8 <HAL_RCC_OscConfig+0x474>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d0f0      	beq.n	8003c1a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d106      	bne.n	8003c4e <HAL_RCC_OscConfig+0x2ea>
 8003c40:	4b64      	ldr	r3, [pc, #400]	@ (8003dd4 <HAL_RCC_OscConfig+0x470>)
 8003c42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c44:	4a63      	ldr	r2, [pc, #396]	@ (8003dd4 <HAL_RCC_OscConfig+0x470>)
 8003c46:	f043 0301 	orr.w	r3, r3, #1
 8003c4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c4c:	e01c      	b.n	8003c88 <HAL_RCC_OscConfig+0x324>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	2b05      	cmp	r3, #5
 8003c54:	d10c      	bne.n	8003c70 <HAL_RCC_OscConfig+0x30c>
 8003c56:	4b5f      	ldr	r3, [pc, #380]	@ (8003dd4 <HAL_RCC_OscConfig+0x470>)
 8003c58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c5a:	4a5e      	ldr	r2, [pc, #376]	@ (8003dd4 <HAL_RCC_OscConfig+0x470>)
 8003c5c:	f043 0304 	orr.w	r3, r3, #4
 8003c60:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c62:	4b5c      	ldr	r3, [pc, #368]	@ (8003dd4 <HAL_RCC_OscConfig+0x470>)
 8003c64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c66:	4a5b      	ldr	r2, [pc, #364]	@ (8003dd4 <HAL_RCC_OscConfig+0x470>)
 8003c68:	f043 0301 	orr.w	r3, r3, #1
 8003c6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c6e:	e00b      	b.n	8003c88 <HAL_RCC_OscConfig+0x324>
 8003c70:	4b58      	ldr	r3, [pc, #352]	@ (8003dd4 <HAL_RCC_OscConfig+0x470>)
 8003c72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c74:	4a57      	ldr	r2, [pc, #348]	@ (8003dd4 <HAL_RCC_OscConfig+0x470>)
 8003c76:	f023 0301 	bic.w	r3, r3, #1
 8003c7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c7c:	4b55      	ldr	r3, [pc, #340]	@ (8003dd4 <HAL_RCC_OscConfig+0x470>)
 8003c7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c80:	4a54      	ldr	r2, [pc, #336]	@ (8003dd4 <HAL_RCC_OscConfig+0x470>)
 8003c82:	f023 0304 	bic.w	r3, r3, #4
 8003c86:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d015      	beq.n	8003cbc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c90:	f7fe fa9e 	bl	80021d0 <HAL_GetTick>
 8003c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c96:	e00a      	b.n	8003cae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c98:	f7fe fa9a 	bl	80021d0 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e0cb      	b.n	8003e46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cae:	4b49      	ldr	r3, [pc, #292]	@ (8003dd4 <HAL_RCC_OscConfig+0x470>)
 8003cb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d0ee      	beq.n	8003c98 <HAL_RCC_OscConfig+0x334>
 8003cba:	e014      	b.n	8003ce6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cbc:	f7fe fa88 	bl	80021d0 <HAL_GetTick>
 8003cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cc2:	e00a      	b.n	8003cda <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cc4:	f7fe fa84 	bl	80021d0 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e0b5      	b.n	8003e46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cda:	4b3e      	ldr	r3, [pc, #248]	@ (8003dd4 <HAL_RCC_OscConfig+0x470>)
 8003cdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1ee      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ce6:	7dfb      	ldrb	r3, [r7, #23]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d105      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cec:	4b39      	ldr	r3, [pc, #228]	@ (8003dd4 <HAL_RCC_OscConfig+0x470>)
 8003cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf0:	4a38      	ldr	r2, [pc, #224]	@ (8003dd4 <HAL_RCC_OscConfig+0x470>)
 8003cf2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cf6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	f000 80a1 	beq.w	8003e44 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d02:	4b34      	ldr	r3, [pc, #208]	@ (8003dd4 <HAL_RCC_OscConfig+0x470>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f003 030c 	and.w	r3, r3, #12
 8003d0a:	2b08      	cmp	r3, #8
 8003d0c:	d05c      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d141      	bne.n	8003d9a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d16:	4b31      	ldr	r3, [pc, #196]	@ (8003ddc <HAL_RCC_OscConfig+0x478>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d1c:	f7fe fa58 	bl	80021d0 <HAL_GetTick>
 8003d20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d22:	e008      	b.n	8003d36 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d24:	f7fe fa54 	bl	80021d0 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e087      	b.n	8003e46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d36:	4b27      	ldr	r3, [pc, #156]	@ (8003dd4 <HAL_RCC_OscConfig+0x470>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1f0      	bne.n	8003d24 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	69da      	ldr	r2, [r3, #28]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	431a      	orrs	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d50:	019b      	lsls	r3, r3, #6
 8003d52:	431a      	orrs	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d58:	085b      	lsrs	r3, r3, #1
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	041b      	lsls	r3, r3, #16
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d64:	061b      	lsls	r3, r3, #24
 8003d66:	491b      	ldr	r1, [pc, #108]	@ (8003dd4 <HAL_RCC_OscConfig+0x470>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d6c:	4b1b      	ldr	r3, [pc, #108]	@ (8003ddc <HAL_RCC_OscConfig+0x478>)
 8003d6e:	2201      	movs	r2, #1
 8003d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d72:	f7fe fa2d 	bl	80021d0 <HAL_GetTick>
 8003d76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d78:	e008      	b.n	8003d8c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d7a:	f7fe fa29 	bl	80021d0 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d901      	bls.n	8003d8c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e05c      	b.n	8003e46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d8c:	4b11      	ldr	r3, [pc, #68]	@ (8003dd4 <HAL_RCC_OscConfig+0x470>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d0f0      	beq.n	8003d7a <HAL_RCC_OscConfig+0x416>
 8003d98:	e054      	b.n	8003e44 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d9a:	4b10      	ldr	r3, [pc, #64]	@ (8003ddc <HAL_RCC_OscConfig+0x478>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da0:	f7fe fa16 	bl	80021d0 <HAL_GetTick>
 8003da4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003da6:	e008      	b.n	8003dba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003da8:	f7fe fa12 	bl	80021d0 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d901      	bls.n	8003dba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e045      	b.n	8003e46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dba:	4b06      	ldr	r3, [pc, #24]	@ (8003dd4 <HAL_RCC_OscConfig+0x470>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1f0      	bne.n	8003da8 <HAL_RCC_OscConfig+0x444>
 8003dc6:	e03d      	b.n	8003e44 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d107      	bne.n	8003de0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e038      	b.n	8003e46 <HAL_RCC_OscConfig+0x4e2>
 8003dd4:	40023800 	.word	0x40023800
 8003dd8:	40007000 	.word	0x40007000
 8003ddc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003de0:	4b1b      	ldr	r3, [pc, #108]	@ (8003e50 <HAL_RCC_OscConfig+0x4ec>)
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d028      	beq.n	8003e40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d121      	bne.n	8003e40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d11a      	bne.n	8003e40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003e10:	4013      	ands	r3, r2
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d111      	bne.n	8003e40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e26:	085b      	lsrs	r3, r3, #1
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d107      	bne.n	8003e40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d001      	beq.n	8003e44 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e000      	b.n	8003e46 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3718      	adds	r7, #24
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	40023800 	.word	0x40023800

08003e54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d101      	bne.n	8003e68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e0cc      	b.n	8004002 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e68:	4b68      	ldr	r3, [pc, #416]	@ (800400c <HAL_RCC_ClockConfig+0x1b8>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0307 	and.w	r3, r3, #7
 8003e70:	683a      	ldr	r2, [r7, #0]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d90c      	bls.n	8003e90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e76:	4b65      	ldr	r3, [pc, #404]	@ (800400c <HAL_RCC_ClockConfig+0x1b8>)
 8003e78:	683a      	ldr	r2, [r7, #0]
 8003e7a:	b2d2      	uxtb	r2, r2
 8003e7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e7e:	4b63      	ldr	r3, [pc, #396]	@ (800400c <HAL_RCC_ClockConfig+0x1b8>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0307 	and.w	r3, r3, #7
 8003e86:	683a      	ldr	r2, [r7, #0]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d001      	beq.n	8003e90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e0b8      	b.n	8004002 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d020      	beq.n	8003ede <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0304 	and.w	r3, r3, #4
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d005      	beq.n	8003eb4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ea8:	4b59      	ldr	r3, [pc, #356]	@ (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	4a58      	ldr	r2, [pc, #352]	@ (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003eae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003eb2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0308 	and.w	r3, r3, #8
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d005      	beq.n	8003ecc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ec0:	4b53      	ldr	r3, [pc, #332]	@ (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	4a52      	ldr	r2, [pc, #328]	@ (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003eca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ecc:	4b50      	ldr	r3, [pc, #320]	@ (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	494d      	ldr	r1, [pc, #308]	@ (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d044      	beq.n	8003f74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d107      	bne.n	8003f02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ef2:	4b47      	ldr	r3, [pc, #284]	@ (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d119      	bne.n	8003f32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e07f      	b.n	8004002 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d003      	beq.n	8003f12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f0e:	2b03      	cmp	r3, #3
 8003f10:	d107      	bne.n	8003f22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f12:	4b3f      	ldr	r3, [pc, #252]	@ (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d109      	bne.n	8003f32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e06f      	b.n	8004002 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f22:	4b3b      	ldr	r3, [pc, #236]	@ (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d101      	bne.n	8003f32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e067      	b.n	8004002 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f32:	4b37      	ldr	r3, [pc, #220]	@ (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f023 0203 	bic.w	r2, r3, #3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	4934      	ldr	r1, [pc, #208]	@ (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f44:	f7fe f944 	bl	80021d0 <HAL_GetTick>
 8003f48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f4a:	e00a      	b.n	8003f62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f4c:	f7fe f940 	bl	80021d0 <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e04f      	b.n	8004002 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f62:	4b2b      	ldr	r3, [pc, #172]	@ (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f003 020c 	and.w	r2, r3, #12
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d1eb      	bne.n	8003f4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f74:	4b25      	ldr	r3, [pc, #148]	@ (800400c <HAL_RCC_ClockConfig+0x1b8>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0307 	and.w	r3, r3, #7
 8003f7c:	683a      	ldr	r2, [r7, #0]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d20c      	bcs.n	8003f9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f82:	4b22      	ldr	r3, [pc, #136]	@ (800400c <HAL_RCC_ClockConfig+0x1b8>)
 8003f84:	683a      	ldr	r2, [r7, #0]
 8003f86:	b2d2      	uxtb	r2, r2
 8003f88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f8a:	4b20      	ldr	r3, [pc, #128]	@ (800400c <HAL_RCC_ClockConfig+0x1b8>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0307 	and.w	r3, r3, #7
 8003f92:	683a      	ldr	r2, [r7, #0]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d001      	beq.n	8003f9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e032      	b.n	8004002 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0304 	and.w	r3, r3, #4
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d008      	beq.n	8003fba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fa8:	4b19      	ldr	r3, [pc, #100]	@ (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	4916      	ldr	r1, [pc, #88]	@ (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0308 	and.w	r3, r3, #8
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d009      	beq.n	8003fda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fc6:	4b12      	ldr	r3, [pc, #72]	@ (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	00db      	lsls	r3, r3, #3
 8003fd4:	490e      	ldr	r1, [pc, #56]	@ (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fda:	f000 f821 	bl	8004020 <HAL_RCC_GetSysClockFreq>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	091b      	lsrs	r3, r3, #4
 8003fe6:	f003 030f 	and.w	r3, r3, #15
 8003fea:	490a      	ldr	r1, [pc, #40]	@ (8004014 <HAL_RCC_ClockConfig+0x1c0>)
 8003fec:	5ccb      	ldrb	r3, [r1, r3]
 8003fee:	fa22 f303 	lsr.w	r3, r2, r3
 8003ff2:	4a09      	ldr	r2, [pc, #36]	@ (8004018 <HAL_RCC_ClockConfig+0x1c4>)
 8003ff4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ff6:	4b09      	ldr	r3, [pc, #36]	@ (800401c <HAL_RCC_ClockConfig+0x1c8>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7fe f8a4 	bl	8002148 <HAL_InitTick>

  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	40023c00 	.word	0x40023c00
 8004010:	40023800 	.word	0x40023800
 8004014:	08005d8c 	.word	0x08005d8c
 8004018:	20000000 	.word	0x20000000
 800401c:	20000098 	.word	0x20000098

08004020 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004020:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004024:	b090      	sub	sp, #64	@ 0x40
 8004026:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004028:	2300      	movs	r3, #0
 800402a:	637b      	str	r3, [r7, #52]	@ 0x34
 800402c:	2300      	movs	r3, #0
 800402e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004030:	2300      	movs	r3, #0
 8004032:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004034:	2300      	movs	r3, #0
 8004036:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004038:	4b59      	ldr	r3, [pc, #356]	@ (80041a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f003 030c 	and.w	r3, r3, #12
 8004040:	2b08      	cmp	r3, #8
 8004042:	d00d      	beq.n	8004060 <HAL_RCC_GetSysClockFreq+0x40>
 8004044:	2b08      	cmp	r3, #8
 8004046:	f200 80a1 	bhi.w	800418c <HAL_RCC_GetSysClockFreq+0x16c>
 800404a:	2b00      	cmp	r3, #0
 800404c:	d002      	beq.n	8004054 <HAL_RCC_GetSysClockFreq+0x34>
 800404e:	2b04      	cmp	r3, #4
 8004050:	d003      	beq.n	800405a <HAL_RCC_GetSysClockFreq+0x3a>
 8004052:	e09b      	b.n	800418c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004054:	4b53      	ldr	r3, [pc, #332]	@ (80041a4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004056:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8004058:	e09b      	b.n	8004192 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800405a:	4b53      	ldr	r3, [pc, #332]	@ (80041a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800405c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800405e:	e098      	b.n	8004192 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004060:	4b4f      	ldr	r3, [pc, #316]	@ (80041a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004068:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800406a:	4b4d      	ldr	r3, [pc, #308]	@ (80041a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d028      	beq.n	80040c8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004076:	4b4a      	ldr	r3, [pc, #296]	@ (80041a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	099b      	lsrs	r3, r3, #6
 800407c:	2200      	movs	r2, #0
 800407e:	623b      	str	r3, [r7, #32]
 8004080:	627a      	str	r2, [r7, #36]	@ 0x24
 8004082:	6a3b      	ldr	r3, [r7, #32]
 8004084:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004088:	2100      	movs	r1, #0
 800408a:	4b47      	ldr	r3, [pc, #284]	@ (80041a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800408c:	fb03 f201 	mul.w	r2, r3, r1
 8004090:	2300      	movs	r3, #0
 8004092:	fb00 f303 	mul.w	r3, r0, r3
 8004096:	4413      	add	r3, r2
 8004098:	4a43      	ldr	r2, [pc, #268]	@ (80041a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800409a:	fba0 1202 	umull	r1, r2, r0, r2
 800409e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040a0:	460a      	mov	r2, r1
 80040a2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80040a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040a6:	4413      	add	r3, r2
 80040a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040ac:	2200      	movs	r2, #0
 80040ae:	61bb      	str	r3, [r7, #24]
 80040b0:	61fa      	str	r2, [r7, #28]
 80040b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80040ba:	f7fc fd75 	bl	8000ba8 <__aeabi_uldivmod>
 80040be:	4602      	mov	r2, r0
 80040c0:	460b      	mov	r3, r1
 80040c2:	4613      	mov	r3, r2
 80040c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040c6:	e053      	b.n	8004170 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040c8:	4b35      	ldr	r3, [pc, #212]	@ (80041a0 <HAL_RCC_GetSysClockFreq+0x180>)
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	099b      	lsrs	r3, r3, #6
 80040ce:	2200      	movs	r2, #0
 80040d0:	613b      	str	r3, [r7, #16]
 80040d2:	617a      	str	r2, [r7, #20]
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80040da:	f04f 0b00 	mov.w	fp, #0
 80040de:	4652      	mov	r2, sl
 80040e0:	465b      	mov	r3, fp
 80040e2:	f04f 0000 	mov.w	r0, #0
 80040e6:	f04f 0100 	mov.w	r1, #0
 80040ea:	0159      	lsls	r1, r3, #5
 80040ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040f0:	0150      	lsls	r0, r2, #5
 80040f2:	4602      	mov	r2, r0
 80040f4:	460b      	mov	r3, r1
 80040f6:	ebb2 080a 	subs.w	r8, r2, sl
 80040fa:	eb63 090b 	sbc.w	r9, r3, fp
 80040fe:	f04f 0200 	mov.w	r2, #0
 8004102:	f04f 0300 	mov.w	r3, #0
 8004106:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800410a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800410e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004112:	ebb2 0408 	subs.w	r4, r2, r8
 8004116:	eb63 0509 	sbc.w	r5, r3, r9
 800411a:	f04f 0200 	mov.w	r2, #0
 800411e:	f04f 0300 	mov.w	r3, #0
 8004122:	00eb      	lsls	r3, r5, #3
 8004124:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004128:	00e2      	lsls	r2, r4, #3
 800412a:	4614      	mov	r4, r2
 800412c:	461d      	mov	r5, r3
 800412e:	eb14 030a 	adds.w	r3, r4, sl
 8004132:	603b      	str	r3, [r7, #0]
 8004134:	eb45 030b 	adc.w	r3, r5, fp
 8004138:	607b      	str	r3, [r7, #4]
 800413a:	f04f 0200 	mov.w	r2, #0
 800413e:	f04f 0300 	mov.w	r3, #0
 8004142:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004146:	4629      	mov	r1, r5
 8004148:	028b      	lsls	r3, r1, #10
 800414a:	4621      	mov	r1, r4
 800414c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004150:	4621      	mov	r1, r4
 8004152:	028a      	lsls	r2, r1, #10
 8004154:	4610      	mov	r0, r2
 8004156:	4619      	mov	r1, r3
 8004158:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800415a:	2200      	movs	r2, #0
 800415c:	60bb      	str	r3, [r7, #8]
 800415e:	60fa      	str	r2, [r7, #12]
 8004160:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004164:	f7fc fd20 	bl	8000ba8 <__aeabi_uldivmod>
 8004168:	4602      	mov	r2, r0
 800416a:	460b      	mov	r3, r1
 800416c:	4613      	mov	r3, r2
 800416e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004170:	4b0b      	ldr	r3, [pc, #44]	@ (80041a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	0c1b      	lsrs	r3, r3, #16
 8004176:	f003 0303 	and.w	r3, r3, #3
 800417a:	3301      	adds	r3, #1
 800417c:	005b      	lsls	r3, r3, #1
 800417e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004180:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004184:	fbb2 f3f3 	udiv	r3, r2, r3
 8004188:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800418a:	e002      	b.n	8004192 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800418c:	4b05      	ldr	r3, [pc, #20]	@ (80041a4 <HAL_RCC_GetSysClockFreq+0x184>)
 800418e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004190:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004194:	4618      	mov	r0, r3
 8004196:	3740      	adds	r7, #64	@ 0x40
 8004198:	46bd      	mov	sp, r7
 800419a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800419e:	bf00      	nop
 80041a0:	40023800 	.word	0x40023800
 80041a4:	00f42400 	.word	0x00f42400
 80041a8:	017d7840 	.word	0x017d7840

080041ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041ac:	b480      	push	{r7}
 80041ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041b0:	4b03      	ldr	r3, [pc, #12]	@ (80041c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80041b2:	681b      	ldr	r3, [r3, #0]
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	20000000 	.word	0x20000000

080041c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80041c8:	f7ff fff0 	bl	80041ac <HAL_RCC_GetHCLKFreq>
 80041cc:	4602      	mov	r2, r0
 80041ce:	4b05      	ldr	r3, [pc, #20]	@ (80041e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	0a9b      	lsrs	r3, r3, #10
 80041d4:	f003 0307 	and.w	r3, r3, #7
 80041d8:	4903      	ldr	r1, [pc, #12]	@ (80041e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041da:	5ccb      	ldrb	r3, [r1, r3]
 80041dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	40023800 	.word	0x40023800
 80041e8:	08005d9c 	.word	0x08005d9c

080041ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d101      	bne.n	80041fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e041      	b.n	8004282 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b00      	cmp	r3, #0
 8004208:	d106      	bne.n	8004218 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f7fd f9e0 	bl	80015d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2202      	movs	r2, #2
 800421c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	3304      	adds	r3, #4
 8004228:	4619      	mov	r1, r3
 800422a:	4610      	mov	r0, r2
 800422c:	f000 fa10 	bl	8004650 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3708      	adds	r7, #8
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}

0800428a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800428a:	b580      	push	{r7, lr}
 800428c:	b082      	sub	sp, #8
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d101      	bne.n	800429c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e041      	b.n	8004320 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d106      	bne.n	80042b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 f839 	bl	8004328 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2202      	movs	r2, #2
 80042ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	3304      	adds	r3, #4
 80042c6:	4619      	mov	r1, r3
 80042c8:	4610      	mov	r0, r2
 80042ca:	f000 f9c1 	bl	8004650 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2201      	movs	r2, #1
 80042d2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2201      	movs	r2, #1
 80042ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2201      	movs	r2, #1
 80042f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2201      	movs	r2, #1
 8004302:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2201      	movs	r2, #1
 8004312:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2201      	movs	r2, #1
 800431a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	3708      	adds	r7, #8
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004330:	bf00      	nop
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b086      	sub	sp, #24
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004348:	2300      	movs	r3, #0
 800434a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004352:	2b01      	cmp	r3, #1
 8004354:	d101      	bne.n	800435a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004356:	2302      	movs	r3, #2
 8004358:	e0ae      	b.n	80044b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2b0c      	cmp	r3, #12
 8004366:	f200 809f 	bhi.w	80044a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800436a:	a201      	add	r2, pc, #4	@ (adr r2, 8004370 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800436c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004370:	080043a5 	.word	0x080043a5
 8004374:	080044a9 	.word	0x080044a9
 8004378:	080044a9 	.word	0x080044a9
 800437c:	080044a9 	.word	0x080044a9
 8004380:	080043e5 	.word	0x080043e5
 8004384:	080044a9 	.word	0x080044a9
 8004388:	080044a9 	.word	0x080044a9
 800438c:	080044a9 	.word	0x080044a9
 8004390:	08004427 	.word	0x08004427
 8004394:	080044a9 	.word	0x080044a9
 8004398:	080044a9 	.word	0x080044a9
 800439c:	080044a9 	.word	0x080044a9
 80043a0:	08004467 	.word	0x08004467
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68b9      	ldr	r1, [r7, #8]
 80043aa:	4618      	mov	r0, r3
 80043ac:	f000 f9fc 	bl	80047a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	699a      	ldr	r2, [r3, #24]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f042 0208 	orr.w	r2, r2, #8
 80043be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	699a      	ldr	r2, [r3, #24]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f022 0204 	bic.w	r2, r2, #4
 80043ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	6999      	ldr	r1, [r3, #24]
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	691a      	ldr	r2, [r3, #16]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	430a      	orrs	r2, r1
 80043e0:	619a      	str	r2, [r3, #24]
      break;
 80043e2:	e064      	b.n	80044ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68b9      	ldr	r1, [r7, #8]
 80043ea:	4618      	mov	r0, r3
 80043ec:	f000 fa4c 	bl	8004888 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	699a      	ldr	r2, [r3, #24]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	699a      	ldr	r2, [r3, #24]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800440e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	6999      	ldr	r1, [r3, #24]
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	021a      	lsls	r2, r3, #8
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	430a      	orrs	r2, r1
 8004422:	619a      	str	r2, [r3, #24]
      break;
 8004424:	e043      	b.n	80044ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68b9      	ldr	r1, [r7, #8]
 800442c:	4618      	mov	r0, r3
 800442e:	f000 faa1 	bl	8004974 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	69da      	ldr	r2, [r3, #28]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f042 0208 	orr.w	r2, r2, #8
 8004440:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	69da      	ldr	r2, [r3, #28]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f022 0204 	bic.w	r2, r2, #4
 8004450:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	69d9      	ldr	r1, [r3, #28]
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	691a      	ldr	r2, [r3, #16]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	430a      	orrs	r2, r1
 8004462:	61da      	str	r2, [r3, #28]
      break;
 8004464:	e023      	b.n	80044ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68b9      	ldr	r1, [r7, #8]
 800446c:	4618      	mov	r0, r3
 800446e:	f000 faf5 	bl	8004a5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	69da      	ldr	r2, [r3, #28]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004480:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	69da      	ldr	r2, [r3, #28]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004490:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	69d9      	ldr	r1, [r3, #28]
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	021a      	lsls	r2, r3, #8
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	430a      	orrs	r2, r1
 80044a4:	61da      	str	r2, [r3, #28]
      break;
 80044a6:	e002      	b.n	80044ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	75fb      	strb	r3, [r7, #23]
      break;
 80044ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80044b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3718      	adds	r7, #24
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044ca:	2300      	movs	r3, #0
 80044cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d101      	bne.n	80044dc <HAL_TIM_ConfigClockSource+0x1c>
 80044d8:	2302      	movs	r3, #2
 80044da:	e0b4      	b.n	8004646 <HAL_TIM_ConfigClockSource+0x186>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2202      	movs	r2, #2
 80044e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80044fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004502:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68ba      	ldr	r2, [r7, #8]
 800450a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004514:	d03e      	beq.n	8004594 <HAL_TIM_ConfigClockSource+0xd4>
 8004516:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800451a:	f200 8087 	bhi.w	800462c <HAL_TIM_ConfigClockSource+0x16c>
 800451e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004522:	f000 8086 	beq.w	8004632 <HAL_TIM_ConfigClockSource+0x172>
 8004526:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800452a:	d87f      	bhi.n	800462c <HAL_TIM_ConfigClockSource+0x16c>
 800452c:	2b70      	cmp	r3, #112	@ 0x70
 800452e:	d01a      	beq.n	8004566 <HAL_TIM_ConfigClockSource+0xa6>
 8004530:	2b70      	cmp	r3, #112	@ 0x70
 8004532:	d87b      	bhi.n	800462c <HAL_TIM_ConfigClockSource+0x16c>
 8004534:	2b60      	cmp	r3, #96	@ 0x60
 8004536:	d050      	beq.n	80045da <HAL_TIM_ConfigClockSource+0x11a>
 8004538:	2b60      	cmp	r3, #96	@ 0x60
 800453a:	d877      	bhi.n	800462c <HAL_TIM_ConfigClockSource+0x16c>
 800453c:	2b50      	cmp	r3, #80	@ 0x50
 800453e:	d03c      	beq.n	80045ba <HAL_TIM_ConfigClockSource+0xfa>
 8004540:	2b50      	cmp	r3, #80	@ 0x50
 8004542:	d873      	bhi.n	800462c <HAL_TIM_ConfigClockSource+0x16c>
 8004544:	2b40      	cmp	r3, #64	@ 0x40
 8004546:	d058      	beq.n	80045fa <HAL_TIM_ConfigClockSource+0x13a>
 8004548:	2b40      	cmp	r3, #64	@ 0x40
 800454a:	d86f      	bhi.n	800462c <HAL_TIM_ConfigClockSource+0x16c>
 800454c:	2b30      	cmp	r3, #48	@ 0x30
 800454e:	d064      	beq.n	800461a <HAL_TIM_ConfigClockSource+0x15a>
 8004550:	2b30      	cmp	r3, #48	@ 0x30
 8004552:	d86b      	bhi.n	800462c <HAL_TIM_ConfigClockSource+0x16c>
 8004554:	2b20      	cmp	r3, #32
 8004556:	d060      	beq.n	800461a <HAL_TIM_ConfigClockSource+0x15a>
 8004558:	2b20      	cmp	r3, #32
 800455a:	d867      	bhi.n	800462c <HAL_TIM_ConfigClockSource+0x16c>
 800455c:	2b00      	cmp	r3, #0
 800455e:	d05c      	beq.n	800461a <HAL_TIM_ConfigClockSource+0x15a>
 8004560:	2b10      	cmp	r3, #16
 8004562:	d05a      	beq.n	800461a <HAL_TIM_ConfigClockSource+0x15a>
 8004564:	e062      	b.n	800462c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004576:	f000 fb41 	bl	8004bfc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004588:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68ba      	ldr	r2, [r7, #8]
 8004590:	609a      	str	r2, [r3, #8]
      break;
 8004592:	e04f      	b.n	8004634 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045a4:	f000 fb2a 	bl	8004bfc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	689a      	ldr	r2, [r3, #8]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80045b6:	609a      	str	r2, [r3, #8]
      break;
 80045b8:	e03c      	b.n	8004634 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045c6:	461a      	mov	r2, r3
 80045c8:	f000 fa9e 	bl	8004b08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2150      	movs	r1, #80	@ 0x50
 80045d2:	4618      	mov	r0, r3
 80045d4:	f000 faf7 	bl	8004bc6 <TIM_ITRx_SetConfig>
      break;
 80045d8:	e02c      	b.n	8004634 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80045e6:	461a      	mov	r2, r3
 80045e8:	f000 fabd 	bl	8004b66 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2160      	movs	r1, #96	@ 0x60
 80045f2:	4618      	mov	r0, r3
 80045f4:	f000 fae7 	bl	8004bc6 <TIM_ITRx_SetConfig>
      break;
 80045f8:	e01c      	b.n	8004634 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004606:	461a      	mov	r2, r3
 8004608:	f000 fa7e 	bl	8004b08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2140      	movs	r1, #64	@ 0x40
 8004612:	4618      	mov	r0, r3
 8004614:	f000 fad7 	bl	8004bc6 <TIM_ITRx_SetConfig>
      break;
 8004618:	e00c      	b.n	8004634 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4619      	mov	r1, r3
 8004624:	4610      	mov	r0, r2
 8004626:	f000 face 	bl	8004bc6 <TIM_ITRx_SetConfig>
      break;
 800462a:	e003      	b.n	8004634 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	73fb      	strb	r3, [r7, #15]
      break;
 8004630:	e000      	b.n	8004634 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004632:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004644:	7bfb      	ldrb	r3, [r7, #15]
}
 8004646:	4618      	mov	r0, r3
 8004648:	3710      	adds	r7, #16
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
	...

08004650 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4a46      	ldr	r2, [pc, #280]	@ (800477c <TIM_Base_SetConfig+0x12c>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d013      	beq.n	8004690 <TIM_Base_SetConfig+0x40>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800466e:	d00f      	beq.n	8004690 <TIM_Base_SetConfig+0x40>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a43      	ldr	r2, [pc, #268]	@ (8004780 <TIM_Base_SetConfig+0x130>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d00b      	beq.n	8004690 <TIM_Base_SetConfig+0x40>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a42      	ldr	r2, [pc, #264]	@ (8004784 <TIM_Base_SetConfig+0x134>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d007      	beq.n	8004690 <TIM_Base_SetConfig+0x40>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a41      	ldr	r2, [pc, #260]	@ (8004788 <TIM_Base_SetConfig+0x138>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d003      	beq.n	8004690 <TIM_Base_SetConfig+0x40>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a40      	ldr	r2, [pc, #256]	@ (800478c <TIM_Base_SetConfig+0x13c>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d108      	bne.n	80046a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004696:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	4313      	orrs	r3, r2
 80046a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a35      	ldr	r2, [pc, #212]	@ (800477c <TIM_Base_SetConfig+0x12c>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d02b      	beq.n	8004702 <TIM_Base_SetConfig+0xb2>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046b0:	d027      	beq.n	8004702 <TIM_Base_SetConfig+0xb2>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a32      	ldr	r2, [pc, #200]	@ (8004780 <TIM_Base_SetConfig+0x130>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d023      	beq.n	8004702 <TIM_Base_SetConfig+0xb2>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a31      	ldr	r2, [pc, #196]	@ (8004784 <TIM_Base_SetConfig+0x134>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d01f      	beq.n	8004702 <TIM_Base_SetConfig+0xb2>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a30      	ldr	r2, [pc, #192]	@ (8004788 <TIM_Base_SetConfig+0x138>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d01b      	beq.n	8004702 <TIM_Base_SetConfig+0xb2>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a2f      	ldr	r2, [pc, #188]	@ (800478c <TIM_Base_SetConfig+0x13c>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d017      	beq.n	8004702 <TIM_Base_SetConfig+0xb2>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a2e      	ldr	r2, [pc, #184]	@ (8004790 <TIM_Base_SetConfig+0x140>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d013      	beq.n	8004702 <TIM_Base_SetConfig+0xb2>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a2d      	ldr	r2, [pc, #180]	@ (8004794 <TIM_Base_SetConfig+0x144>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d00f      	beq.n	8004702 <TIM_Base_SetConfig+0xb2>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a2c      	ldr	r2, [pc, #176]	@ (8004798 <TIM_Base_SetConfig+0x148>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d00b      	beq.n	8004702 <TIM_Base_SetConfig+0xb2>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a2b      	ldr	r2, [pc, #172]	@ (800479c <TIM_Base_SetConfig+0x14c>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d007      	beq.n	8004702 <TIM_Base_SetConfig+0xb2>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a2a      	ldr	r2, [pc, #168]	@ (80047a0 <TIM_Base_SetConfig+0x150>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d003      	beq.n	8004702 <TIM_Base_SetConfig+0xb2>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a29      	ldr	r2, [pc, #164]	@ (80047a4 <TIM_Base_SetConfig+0x154>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d108      	bne.n	8004714 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004708:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	4313      	orrs	r3, r2
 8004712:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	4313      	orrs	r3, r2
 8004720:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	689a      	ldr	r2, [r3, #8]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4a10      	ldr	r2, [pc, #64]	@ (800477c <TIM_Base_SetConfig+0x12c>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d003      	beq.n	8004748 <TIM_Base_SetConfig+0xf8>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4a12      	ldr	r2, [pc, #72]	@ (800478c <TIM_Base_SetConfig+0x13c>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d103      	bne.n	8004750 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	691a      	ldr	r2, [r3, #16]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	2b01      	cmp	r3, #1
 8004760:	d105      	bne.n	800476e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	f023 0201 	bic.w	r2, r3, #1
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	611a      	str	r2, [r3, #16]
  }
}
 800476e:	bf00      	nop
 8004770:	3714      	adds	r7, #20
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	40010000 	.word	0x40010000
 8004780:	40000400 	.word	0x40000400
 8004784:	40000800 	.word	0x40000800
 8004788:	40000c00 	.word	0x40000c00
 800478c:	40010400 	.word	0x40010400
 8004790:	40014000 	.word	0x40014000
 8004794:	40014400 	.word	0x40014400
 8004798:	40014800 	.word	0x40014800
 800479c:	40001800 	.word	0x40001800
 80047a0:	40001c00 	.word	0x40001c00
 80047a4:	40002000 	.word	0x40002000

080047a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b087      	sub	sp, #28
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a1b      	ldr	r3, [r3, #32]
 80047bc:	f023 0201 	bic.w	r2, r3, #1
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f023 0303 	bic.w	r3, r3, #3
 80047de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	f023 0302 	bic.w	r3, r3, #2
 80047f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	697a      	ldr	r2, [r7, #20]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a20      	ldr	r2, [pc, #128]	@ (8004880 <TIM_OC1_SetConfig+0xd8>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d003      	beq.n	800480c <TIM_OC1_SetConfig+0x64>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a1f      	ldr	r2, [pc, #124]	@ (8004884 <TIM_OC1_SetConfig+0xdc>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d10c      	bne.n	8004826 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	f023 0308 	bic.w	r3, r3, #8
 8004812:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	4313      	orrs	r3, r2
 800481c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	f023 0304 	bic.w	r3, r3, #4
 8004824:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a15      	ldr	r2, [pc, #84]	@ (8004880 <TIM_OC1_SetConfig+0xd8>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d003      	beq.n	8004836 <TIM_OC1_SetConfig+0x8e>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a14      	ldr	r2, [pc, #80]	@ (8004884 <TIM_OC1_SetConfig+0xdc>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d111      	bne.n	800485a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800483c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004844:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	693a      	ldr	r2, [r7, #16]
 800484c:	4313      	orrs	r3, r2
 800484e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	699b      	ldr	r3, [r3, #24]
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	4313      	orrs	r3, r2
 8004858:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	693a      	ldr	r2, [r7, #16]
 800485e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	68fa      	ldr	r2, [r7, #12]
 8004864:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	685a      	ldr	r2, [r3, #4]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	697a      	ldr	r2, [r7, #20]
 8004872:	621a      	str	r2, [r3, #32]
}
 8004874:	bf00      	nop
 8004876:	371c      	adds	r7, #28
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr
 8004880:	40010000 	.word	0x40010000
 8004884:	40010400 	.word	0x40010400

08004888 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004888:	b480      	push	{r7}
 800488a:	b087      	sub	sp, #28
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a1b      	ldr	r3, [r3, #32]
 800489c:	f023 0210 	bic.w	r2, r3, #16
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	021b      	lsls	r3, r3, #8
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	f023 0320 	bic.w	r3, r3, #32
 80048d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	011b      	lsls	r3, r3, #4
 80048da:	697a      	ldr	r2, [r7, #20]
 80048dc:	4313      	orrs	r3, r2
 80048de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a22      	ldr	r2, [pc, #136]	@ (800496c <TIM_OC2_SetConfig+0xe4>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d003      	beq.n	80048f0 <TIM_OC2_SetConfig+0x68>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a21      	ldr	r2, [pc, #132]	@ (8004970 <TIM_OC2_SetConfig+0xe8>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d10d      	bne.n	800490c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	011b      	lsls	r3, r3, #4
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	4313      	orrs	r3, r2
 8004902:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800490a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a17      	ldr	r2, [pc, #92]	@ (800496c <TIM_OC2_SetConfig+0xe4>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d003      	beq.n	800491c <TIM_OC2_SetConfig+0x94>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a16      	ldr	r2, [pc, #88]	@ (8004970 <TIM_OC2_SetConfig+0xe8>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d113      	bne.n	8004944 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004922:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800492a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	695b      	ldr	r3, [r3, #20]
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	4313      	orrs	r3, r2
 8004936:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	693a      	ldr	r2, [r7, #16]
 8004940:	4313      	orrs	r3, r2
 8004942:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	693a      	ldr	r2, [r7, #16]
 8004948:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	685a      	ldr	r2, [r3, #4]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	621a      	str	r2, [r3, #32]
}
 800495e:	bf00      	nop
 8004960:	371c      	adds	r7, #28
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	40010000 	.word	0x40010000
 8004970:	40010400 	.word	0x40010400

08004974 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004974:	b480      	push	{r7}
 8004976:	b087      	sub	sp, #28
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a1b      	ldr	r3, [r3, #32]
 8004982:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a1b      	ldr	r3, [r3, #32]
 8004988:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	69db      	ldr	r3, [r3, #28]
 800499a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f023 0303 	bic.w	r3, r3, #3
 80049aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80049bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	021b      	lsls	r3, r3, #8
 80049c4:	697a      	ldr	r2, [r7, #20]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a21      	ldr	r2, [pc, #132]	@ (8004a54 <TIM_OC3_SetConfig+0xe0>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d003      	beq.n	80049da <TIM_OC3_SetConfig+0x66>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a20      	ldr	r2, [pc, #128]	@ (8004a58 <TIM_OC3_SetConfig+0xe4>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d10d      	bne.n	80049f6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80049e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	021b      	lsls	r3, r3, #8
 80049e8:	697a      	ldr	r2, [r7, #20]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80049f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a16      	ldr	r2, [pc, #88]	@ (8004a54 <TIM_OC3_SetConfig+0xe0>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d003      	beq.n	8004a06 <TIM_OC3_SetConfig+0x92>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a15      	ldr	r2, [pc, #84]	@ (8004a58 <TIM_OC3_SetConfig+0xe4>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d113      	bne.n	8004a2e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004a14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	011b      	lsls	r3, r3, #4
 8004a1c:	693a      	ldr	r2, [r7, #16]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	011b      	lsls	r3, r3, #4
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	685a      	ldr	r2, [r3, #4]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	621a      	str	r2, [r3, #32]
}
 8004a48:	bf00      	nop
 8004a4a:	371c      	adds	r7, #28
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr
 8004a54:	40010000 	.word	0x40010000
 8004a58:	40010400 	.word	0x40010400

08004a5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b087      	sub	sp, #28
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a1b      	ldr	r3, [r3, #32]
 8004a70:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	69db      	ldr	r3, [r3, #28]
 8004a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	021b      	lsls	r3, r3, #8
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004aa6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	031b      	lsls	r3, r3, #12
 8004aae:	693a      	ldr	r2, [r7, #16]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a12      	ldr	r2, [pc, #72]	@ (8004b00 <TIM_OC4_SetConfig+0xa4>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d003      	beq.n	8004ac4 <TIM_OC4_SetConfig+0x68>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a11      	ldr	r2, [pc, #68]	@ (8004b04 <TIM_OC4_SetConfig+0xa8>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d109      	bne.n	8004ad8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004aca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	695b      	ldr	r3, [r3, #20]
 8004ad0:	019b      	lsls	r3, r3, #6
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	685a      	ldr	r2, [r3, #4]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	693a      	ldr	r2, [r7, #16]
 8004af0:	621a      	str	r2, [r3, #32]
}
 8004af2:	bf00      	nop
 8004af4:	371c      	adds	r7, #28
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	40010000 	.word	0x40010000
 8004b04:	40010400 	.word	0x40010400

08004b08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b087      	sub	sp, #28
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6a1b      	ldr	r3, [r3, #32]
 8004b18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6a1b      	ldr	r3, [r3, #32]
 8004b1e:	f023 0201 	bic.w	r2, r3, #1
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	011b      	lsls	r3, r3, #4
 8004b38:	693a      	ldr	r2, [r7, #16]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	f023 030a 	bic.w	r3, r3, #10
 8004b44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	621a      	str	r2, [r3, #32]
}
 8004b5a:	bf00      	nop
 8004b5c:	371c      	adds	r7, #28
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr

08004b66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b66:	b480      	push	{r7}
 8004b68:	b087      	sub	sp, #28
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	60f8      	str	r0, [r7, #12]
 8004b6e:	60b9      	str	r1, [r7, #8]
 8004b70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6a1b      	ldr	r3, [r3, #32]
 8004b76:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6a1b      	ldr	r3, [r3, #32]
 8004b7c:	f023 0210 	bic.w	r2, r3, #16
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	699b      	ldr	r3, [r3, #24]
 8004b88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004b90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	031b      	lsls	r3, r3, #12
 8004b96:	693a      	ldr	r2, [r7, #16]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004ba2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	011b      	lsls	r3, r3, #4
 8004ba8:	697a      	ldr	r2, [r7, #20]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	697a      	ldr	r2, [r7, #20]
 8004bb8:	621a      	str	r2, [r3, #32]
}
 8004bba:	bf00      	nop
 8004bbc:	371c      	adds	r7, #28
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr

08004bc6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004bc6:	b480      	push	{r7}
 8004bc8:	b085      	sub	sp, #20
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
 8004bce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bdc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bde:	683a      	ldr	r2, [r7, #0]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	f043 0307 	orr.w	r3, r3, #7
 8004be8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	609a      	str	r2, [r3, #8]
}
 8004bf0:	bf00      	nop
 8004bf2:	3714      	adds	r7, #20
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b087      	sub	sp, #28
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
 8004c08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	021a      	lsls	r2, r3, #8
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	431a      	orrs	r2, r3
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	697a      	ldr	r2, [r7, #20]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	697a      	ldr	r2, [r7, #20]
 8004c2e:	609a      	str	r2, [r3, #8]
}
 8004c30:	bf00      	nop
 8004c32:	371c      	adds	r7, #28
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b085      	sub	sp, #20
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d101      	bne.n	8004c54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c50:	2302      	movs	r3, #2
 8004c52:	e05a      	b.n	8004d0a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2202      	movs	r2, #2
 8004c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68fa      	ldr	r2, [r7, #12]
 8004c8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a21      	ldr	r2, [pc, #132]	@ (8004d18 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d022      	beq.n	8004cde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ca0:	d01d      	beq.n	8004cde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a1d      	ldr	r2, [pc, #116]	@ (8004d1c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d018      	beq.n	8004cde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a1b      	ldr	r2, [pc, #108]	@ (8004d20 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d013      	beq.n	8004cde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a1a      	ldr	r2, [pc, #104]	@ (8004d24 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d00e      	beq.n	8004cde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a18      	ldr	r2, [pc, #96]	@ (8004d28 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d009      	beq.n	8004cde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a17      	ldr	r2, [pc, #92]	@ (8004d2c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d004      	beq.n	8004cde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a15      	ldr	r2, [pc, #84]	@ (8004d30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d10c      	bne.n	8004cf8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ce4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	68ba      	ldr	r2, [r7, #8]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68ba      	ldr	r2, [r7, #8]
 8004cf6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3714      	adds	r7, #20
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	40010000 	.word	0x40010000
 8004d1c:	40000400 	.word	0x40000400
 8004d20:	40000800 	.word	0x40000800
 8004d24:	40000c00 	.word	0x40000c00
 8004d28:	40010400 	.word	0x40010400
 8004d2c:	40014000 	.word	0x40014000
 8004d30:	40001800 	.word	0x40001800

08004d34 <siprintf>:
 8004d34:	b40e      	push	{r1, r2, r3}
 8004d36:	b500      	push	{lr}
 8004d38:	b09c      	sub	sp, #112	@ 0x70
 8004d3a:	ab1d      	add	r3, sp, #116	@ 0x74
 8004d3c:	9002      	str	r0, [sp, #8]
 8004d3e:	9006      	str	r0, [sp, #24]
 8004d40:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004d44:	4809      	ldr	r0, [pc, #36]	@ (8004d6c <siprintf+0x38>)
 8004d46:	9107      	str	r1, [sp, #28]
 8004d48:	9104      	str	r1, [sp, #16]
 8004d4a:	4909      	ldr	r1, [pc, #36]	@ (8004d70 <siprintf+0x3c>)
 8004d4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d50:	9105      	str	r1, [sp, #20]
 8004d52:	6800      	ldr	r0, [r0, #0]
 8004d54:	9301      	str	r3, [sp, #4]
 8004d56:	a902      	add	r1, sp, #8
 8004d58:	f000 f994 	bl	8005084 <_svfiprintf_r>
 8004d5c:	9b02      	ldr	r3, [sp, #8]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	701a      	strb	r2, [r3, #0]
 8004d62:	b01c      	add	sp, #112	@ 0x70
 8004d64:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d68:	b003      	add	sp, #12
 8004d6a:	4770      	bx	lr
 8004d6c:	200000a0 	.word	0x200000a0
 8004d70:	ffff0208 	.word	0xffff0208

08004d74 <memset>:
 8004d74:	4402      	add	r2, r0
 8004d76:	4603      	mov	r3, r0
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d100      	bne.n	8004d7e <memset+0xa>
 8004d7c:	4770      	bx	lr
 8004d7e:	f803 1b01 	strb.w	r1, [r3], #1
 8004d82:	e7f9      	b.n	8004d78 <memset+0x4>

08004d84 <__errno>:
 8004d84:	4b01      	ldr	r3, [pc, #4]	@ (8004d8c <__errno+0x8>)
 8004d86:	6818      	ldr	r0, [r3, #0]
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	200000a0 	.word	0x200000a0

08004d90 <__libc_init_array>:
 8004d90:	b570      	push	{r4, r5, r6, lr}
 8004d92:	4d0d      	ldr	r5, [pc, #52]	@ (8004dc8 <__libc_init_array+0x38>)
 8004d94:	4c0d      	ldr	r4, [pc, #52]	@ (8004dcc <__libc_init_array+0x3c>)
 8004d96:	1b64      	subs	r4, r4, r5
 8004d98:	10a4      	asrs	r4, r4, #2
 8004d9a:	2600      	movs	r6, #0
 8004d9c:	42a6      	cmp	r6, r4
 8004d9e:	d109      	bne.n	8004db4 <__libc_init_array+0x24>
 8004da0:	4d0b      	ldr	r5, [pc, #44]	@ (8004dd0 <__libc_init_array+0x40>)
 8004da2:	4c0c      	ldr	r4, [pc, #48]	@ (8004dd4 <__libc_init_array+0x44>)
 8004da4:	f000 ffd6 	bl	8005d54 <_init>
 8004da8:	1b64      	subs	r4, r4, r5
 8004daa:	10a4      	asrs	r4, r4, #2
 8004dac:	2600      	movs	r6, #0
 8004dae:	42a6      	cmp	r6, r4
 8004db0:	d105      	bne.n	8004dbe <__libc_init_array+0x2e>
 8004db2:	bd70      	pop	{r4, r5, r6, pc}
 8004db4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004db8:	4798      	blx	r3
 8004dba:	3601      	adds	r6, #1
 8004dbc:	e7ee      	b.n	8004d9c <__libc_init_array+0xc>
 8004dbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dc2:	4798      	blx	r3
 8004dc4:	3601      	adds	r6, #1
 8004dc6:	e7f2      	b.n	8004dae <__libc_init_array+0x1e>
 8004dc8:	08005e58 	.word	0x08005e58
 8004dcc:	08005e58 	.word	0x08005e58
 8004dd0:	08005e58 	.word	0x08005e58
 8004dd4:	08005e5c 	.word	0x08005e5c

08004dd8 <__retarget_lock_acquire_recursive>:
 8004dd8:	4770      	bx	lr

08004dda <__retarget_lock_release_recursive>:
 8004dda:	4770      	bx	lr

08004ddc <_free_r>:
 8004ddc:	b538      	push	{r3, r4, r5, lr}
 8004dde:	4605      	mov	r5, r0
 8004de0:	2900      	cmp	r1, #0
 8004de2:	d041      	beq.n	8004e68 <_free_r+0x8c>
 8004de4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004de8:	1f0c      	subs	r4, r1, #4
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	bfb8      	it	lt
 8004dee:	18e4      	addlt	r4, r4, r3
 8004df0:	f000 f8e0 	bl	8004fb4 <__malloc_lock>
 8004df4:	4a1d      	ldr	r2, [pc, #116]	@ (8004e6c <_free_r+0x90>)
 8004df6:	6813      	ldr	r3, [r2, #0]
 8004df8:	b933      	cbnz	r3, 8004e08 <_free_r+0x2c>
 8004dfa:	6063      	str	r3, [r4, #4]
 8004dfc:	6014      	str	r4, [r2, #0]
 8004dfe:	4628      	mov	r0, r5
 8004e00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e04:	f000 b8dc 	b.w	8004fc0 <__malloc_unlock>
 8004e08:	42a3      	cmp	r3, r4
 8004e0a:	d908      	bls.n	8004e1e <_free_r+0x42>
 8004e0c:	6820      	ldr	r0, [r4, #0]
 8004e0e:	1821      	adds	r1, r4, r0
 8004e10:	428b      	cmp	r3, r1
 8004e12:	bf01      	itttt	eq
 8004e14:	6819      	ldreq	r1, [r3, #0]
 8004e16:	685b      	ldreq	r3, [r3, #4]
 8004e18:	1809      	addeq	r1, r1, r0
 8004e1a:	6021      	streq	r1, [r4, #0]
 8004e1c:	e7ed      	b.n	8004dfa <_free_r+0x1e>
 8004e1e:	461a      	mov	r2, r3
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	b10b      	cbz	r3, 8004e28 <_free_r+0x4c>
 8004e24:	42a3      	cmp	r3, r4
 8004e26:	d9fa      	bls.n	8004e1e <_free_r+0x42>
 8004e28:	6811      	ldr	r1, [r2, #0]
 8004e2a:	1850      	adds	r0, r2, r1
 8004e2c:	42a0      	cmp	r0, r4
 8004e2e:	d10b      	bne.n	8004e48 <_free_r+0x6c>
 8004e30:	6820      	ldr	r0, [r4, #0]
 8004e32:	4401      	add	r1, r0
 8004e34:	1850      	adds	r0, r2, r1
 8004e36:	4283      	cmp	r3, r0
 8004e38:	6011      	str	r1, [r2, #0]
 8004e3a:	d1e0      	bne.n	8004dfe <_free_r+0x22>
 8004e3c:	6818      	ldr	r0, [r3, #0]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	6053      	str	r3, [r2, #4]
 8004e42:	4408      	add	r0, r1
 8004e44:	6010      	str	r0, [r2, #0]
 8004e46:	e7da      	b.n	8004dfe <_free_r+0x22>
 8004e48:	d902      	bls.n	8004e50 <_free_r+0x74>
 8004e4a:	230c      	movs	r3, #12
 8004e4c:	602b      	str	r3, [r5, #0]
 8004e4e:	e7d6      	b.n	8004dfe <_free_r+0x22>
 8004e50:	6820      	ldr	r0, [r4, #0]
 8004e52:	1821      	adds	r1, r4, r0
 8004e54:	428b      	cmp	r3, r1
 8004e56:	bf04      	itt	eq
 8004e58:	6819      	ldreq	r1, [r3, #0]
 8004e5a:	685b      	ldreq	r3, [r3, #4]
 8004e5c:	6063      	str	r3, [r4, #4]
 8004e5e:	bf04      	itt	eq
 8004e60:	1809      	addeq	r1, r1, r0
 8004e62:	6021      	streq	r1, [r4, #0]
 8004e64:	6054      	str	r4, [r2, #4]
 8004e66:	e7ca      	b.n	8004dfe <_free_r+0x22>
 8004e68:	bd38      	pop	{r3, r4, r5, pc}
 8004e6a:	bf00      	nop
 8004e6c:	200003a8 	.word	0x200003a8

08004e70 <sbrk_aligned>:
 8004e70:	b570      	push	{r4, r5, r6, lr}
 8004e72:	4e0f      	ldr	r6, [pc, #60]	@ (8004eb0 <sbrk_aligned+0x40>)
 8004e74:	460c      	mov	r4, r1
 8004e76:	6831      	ldr	r1, [r6, #0]
 8004e78:	4605      	mov	r5, r0
 8004e7a:	b911      	cbnz	r1, 8004e82 <sbrk_aligned+0x12>
 8004e7c:	f000 fba6 	bl	80055cc <_sbrk_r>
 8004e80:	6030      	str	r0, [r6, #0]
 8004e82:	4621      	mov	r1, r4
 8004e84:	4628      	mov	r0, r5
 8004e86:	f000 fba1 	bl	80055cc <_sbrk_r>
 8004e8a:	1c43      	adds	r3, r0, #1
 8004e8c:	d103      	bne.n	8004e96 <sbrk_aligned+0x26>
 8004e8e:	f04f 34ff 	mov.w	r4, #4294967295
 8004e92:	4620      	mov	r0, r4
 8004e94:	bd70      	pop	{r4, r5, r6, pc}
 8004e96:	1cc4      	adds	r4, r0, #3
 8004e98:	f024 0403 	bic.w	r4, r4, #3
 8004e9c:	42a0      	cmp	r0, r4
 8004e9e:	d0f8      	beq.n	8004e92 <sbrk_aligned+0x22>
 8004ea0:	1a21      	subs	r1, r4, r0
 8004ea2:	4628      	mov	r0, r5
 8004ea4:	f000 fb92 	bl	80055cc <_sbrk_r>
 8004ea8:	3001      	adds	r0, #1
 8004eaa:	d1f2      	bne.n	8004e92 <sbrk_aligned+0x22>
 8004eac:	e7ef      	b.n	8004e8e <sbrk_aligned+0x1e>
 8004eae:	bf00      	nop
 8004eb0:	200003a4 	.word	0x200003a4

08004eb4 <_malloc_r>:
 8004eb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004eb8:	1ccd      	adds	r5, r1, #3
 8004eba:	f025 0503 	bic.w	r5, r5, #3
 8004ebe:	3508      	adds	r5, #8
 8004ec0:	2d0c      	cmp	r5, #12
 8004ec2:	bf38      	it	cc
 8004ec4:	250c      	movcc	r5, #12
 8004ec6:	2d00      	cmp	r5, #0
 8004ec8:	4606      	mov	r6, r0
 8004eca:	db01      	blt.n	8004ed0 <_malloc_r+0x1c>
 8004ecc:	42a9      	cmp	r1, r5
 8004ece:	d904      	bls.n	8004eda <_malloc_r+0x26>
 8004ed0:	230c      	movs	r3, #12
 8004ed2:	6033      	str	r3, [r6, #0]
 8004ed4:	2000      	movs	r0, #0
 8004ed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004eda:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004fb0 <_malloc_r+0xfc>
 8004ede:	f000 f869 	bl	8004fb4 <__malloc_lock>
 8004ee2:	f8d8 3000 	ldr.w	r3, [r8]
 8004ee6:	461c      	mov	r4, r3
 8004ee8:	bb44      	cbnz	r4, 8004f3c <_malloc_r+0x88>
 8004eea:	4629      	mov	r1, r5
 8004eec:	4630      	mov	r0, r6
 8004eee:	f7ff ffbf 	bl	8004e70 <sbrk_aligned>
 8004ef2:	1c43      	adds	r3, r0, #1
 8004ef4:	4604      	mov	r4, r0
 8004ef6:	d158      	bne.n	8004faa <_malloc_r+0xf6>
 8004ef8:	f8d8 4000 	ldr.w	r4, [r8]
 8004efc:	4627      	mov	r7, r4
 8004efe:	2f00      	cmp	r7, #0
 8004f00:	d143      	bne.n	8004f8a <_malloc_r+0xd6>
 8004f02:	2c00      	cmp	r4, #0
 8004f04:	d04b      	beq.n	8004f9e <_malloc_r+0xea>
 8004f06:	6823      	ldr	r3, [r4, #0]
 8004f08:	4639      	mov	r1, r7
 8004f0a:	4630      	mov	r0, r6
 8004f0c:	eb04 0903 	add.w	r9, r4, r3
 8004f10:	f000 fb5c 	bl	80055cc <_sbrk_r>
 8004f14:	4581      	cmp	r9, r0
 8004f16:	d142      	bne.n	8004f9e <_malloc_r+0xea>
 8004f18:	6821      	ldr	r1, [r4, #0]
 8004f1a:	1a6d      	subs	r5, r5, r1
 8004f1c:	4629      	mov	r1, r5
 8004f1e:	4630      	mov	r0, r6
 8004f20:	f7ff ffa6 	bl	8004e70 <sbrk_aligned>
 8004f24:	3001      	adds	r0, #1
 8004f26:	d03a      	beq.n	8004f9e <_malloc_r+0xea>
 8004f28:	6823      	ldr	r3, [r4, #0]
 8004f2a:	442b      	add	r3, r5
 8004f2c:	6023      	str	r3, [r4, #0]
 8004f2e:	f8d8 3000 	ldr.w	r3, [r8]
 8004f32:	685a      	ldr	r2, [r3, #4]
 8004f34:	bb62      	cbnz	r2, 8004f90 <_malloc_r+0xdc>
 8004f36:	f8c8 7000 	str.w	r7, [r8]
 8004f3a:	e00f      	b.n	8004f5c <_malloc_r+0xa8>
 8004f3c:	6822      	ldr	r2, [r4, #0]
 8004f3e:	1b52      	subs	r2, r2, r5
 8004f40:	d420      	bmi.n	8004f84 <_malloc_r+0xd0>
 8004f42:	2a0b      	cmp	r2, #11
 8004f44:	d917      	bls.n	8004f76 <_malloc_r+0xc2>
 8004f46:	1961      	adds	r1, r4, r5
 8004f48:	42a3      	cmp	r3, r4
 8004f4a:	6025      	str	r5, [r4, #0]
 8004f4c:	bf18      	it	ne
 8004f4e:	6059      	strne	r1, [r3, #4]
 8004f50:	6863      	ldr	r3, [r4, #4]
 8004f52:	bf08      	it	eq
 8004f54:	f8c8 1000 	streq.w	r1, [r8]
 8004f58:	5162      	str	r2, [r4, r5]
 8004f5a:	604b      	str	r3, [r1, #4]
 8004f5c:	4630      	mov	r0, r6
 8004f5e:	f000 f82f 	bl	8004fc0 <__malloc_unlock>
 8004f62:	f104 000b 	add.w	r0, r4, #11
 8004f66:	1d23      	adds	r3, r4, #4
 8004f68:	f020 0007 	bic.w	r0, r0, #7
 8004f6c:	1ac2      	subs	r2, r0, r3
 8004f6e:	bf1c      	itt	ne
 8004f70:	1a1b      	subne	r3, r3, r0
 8004f72:	50a3      	strne	r3, [r4, r2]
 8004f74:	e7af      	b.n	8004ed6 <_malloc_r+0x22>
 8004f76:	6862      	ldr	r2, [r4, #4]
 8004f78:	42a3      	cmp	r3, r4
 8004f7a:	bf0c      	ite	eq
 8004f7c:	f8c8 2000 	streq.w	r2, [r8]
 8004f80:	605a      	strne	r2, [r3, #4]
 8004f82:	e7eb      	b.n	8004f5c <_malloc_r+0xa8>
 8004f84:	4623      	mov	r3, r4
 8004f86:	6864      	ldr	r4, [r4, #4]
 8004f88:	e7ae      	b.n	8004ee8 <_malloc_r+0x34>
 8004f8a:	463c      	mov	r4, r7
 8004f8c:	687f      	ldr	r7, [r7, #4]
 8004f8e:	e7b6      	b.n	8004efe <_malloc_r+0x4a>
 8004f90:	461a      	mov	r2, r3
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	42a3      	cmp	r3, r4
 8004f96:	d1fb      	bne.n	8004f90 <_malloc_r+0xdc>
 8004f98:	2300      	movs	r3, #0
 8004f9a:	6053      	str	r3, [r2, #4]
 8004f9c:	e7de      	b.n	8004f5c <_malloc_r+0xa8>
 8004f9e:	230c      	movs	r3, #12
 8004fa0:	6033      	str	r3, [r6, #0]
 8004fa2:	4630      	mov	r0, r6
 8004fa4:	f000 f80c 	bl	8004fc0 <__malloc_unlock>
 8004fa8:	e794      	b.n	8004ed4 <_malloc_r+0x20>
 8004faa:	6005      	str	r5, [r0, #0]
 8004fac:	e7d6      	b.n	8004f5c <_malloc_r+0xa8>
 8004fae:	bf00      	nop
 8004fb0:	200003a8 	.word	0x200003a8

08004fb4 <__malloc_lock>:
 8004fb4:	4801      	ldr	r0, [pc, #4]	@ (8004fbc <__malloc_lock+0x8>)
 8004fb6:	f7ff bf0f 	b.w	8004dd8 <__retarget_lock_acquire_recursive>
 8004fba:	bf00      	nop
 8004fbc:	200003a0 	.word	0x200003a0

08004fc0 <__malloc_unlock>:
 8004fc0:	4801      	ldr	r0, [pc, #4]	@ (8004fc8 <__malloc_unlock+0x8>)
 8004fc2:	f7ff bf0a 	b.w	8004dda <__retarget_lock_release_recursive>
 8004fc6:	bf00      	nop
 8004fc8:	200003a0 	.word	0x200003a0

08004fcc <__ssputs_r>:
 8004fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fd0:	688e      	ldr	r6, [r1, #8]
 8004fd2:	461f      	mov	r7, r3
 8004fd4:	42be      	cmp	r6, r7
 8004fd6:	680b      	ldr	r3, [r1, #0]
 8004fd8:	4682      	mov	sl, r0
 8004fda:	460c      	mov	r4, r1
 8004fdc:	4690      	mov	r8, r2
 8004fde:	d82d      	bhi.n	800503c <__ssputs_r+0x70>
 8004fe0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004fe4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004fe8:	d026      	beq.n	8005038 <__ssputs_r+0x6c>
 8004fea:	6965      	ldr	r5, [r4, #20]
 8004fec:	6909      	ldr	r1, [r1, #16]
 8004fee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ff2:	eba3 0901 	sub.w	r9, r3, r1
 8004ff6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004ffa:	1c7b      	adds	r3, r7, #1
 8004ffc:	444b      	add	r3, r9
 8004ffe:	106d      	asrs	r5, r5, #1
 8005000:	429d      	cmp	r5, r3
 8005002:	bf38      	it	cc
 8005004:	461d      	movcc	r5, r3
 8005006:	0553      	lsls	r3, r2, #21
 8005008:	d527      	bpl.n	800505a <__ssputs_r+0x8e>
 800500a:	4629      	mov	r1, r5
 800500c:	f7ff ff52 	bl	8004eb4 <_malloc_r>
 8005010:	4606      	mov	r6, r0
 8005012:	b360      	cbz	r0, 800506e <__ssputs_r+0xa2>
 8005014:	6921      	ldr	r1, [r4, #16]
 8005016:	464a      	mov	r2, r9
 8005018:	f000 fae8 	bl	80055ec <memcpy>
 800501c:	89a3      	ldrh	r3, [r4, #12]
 800501e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005022:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005026:	81a3      	strh	r3, [r4, #12]
 8005028:	6126      	str	r6, [r4, #16]
 800502a:	6165      	str	r5, [r4, #20]
 800502c:	444e      	add	r6, r9
 800502e:	eba5 0509 	sub.w	r5, r5, r9
 8005032:	6026      	str	r6, [r4, #0]
 8005034:	60a5      	str	r5, [r4, #8]
 8005036:	463e      	mov	r6, r7
 8005038:	42be      	cmp	r6, r7
 800503a:	d900      	bls.n	800503e <__ssputs_r+0x72>
 800503c:	463e      	mov	r6, r7
 800503e:	6820      	ldr	r0, [r4, #0]
 8005040:	4632      	mov	r2, r6
 8005042:	4641      	mov	r1, r8
 8005044:	f000 faa8 	bl	8005598 <memmove>
 8005048:	68a3      	ldr	r3, [r4, #8]
 800504a:	1b9b      	subs	r3, r3, r6
 800504c:	60a3      	str	r3, [r4, #8]
 800504e:	6823      	ldr	r3, [r4, #0]
 8005050:	4433      	add	r3, r6
 8005052:	6023      	str	r3, [r4, #0]
 8005054:	2000      	movs	r0, #0
 8005056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800505a:	462a      	mov	r2, r5
 800505c:	f000 fad4 	bl	8005608 <_realloc_r>
 8005060:	4606      	mov	r6, r0
 8005062:	2800      	cmp	r0, #0
 8005064:	d1e0      	bne.n	8005028 <__ssputs_r+0x5c>
 8005066:	6921      	ldr	r1, [r4, #16]
 8005068:	4650      	mov	r0, sl
 800506a:	f7ff feb7 	bl	8004ddc <_free_r>
 800506e:	230c      	movs	r3, #12
 8005070:	f8ca 3000 	str.w	r3, [sl]
 8005074:	89a3      	ldrh	r3, [r4, #12]
 8005076:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800507a:	81a3      	strh	r3, [r4, #12]
 800507c:	f04f 30ff 	mov.w	r0, #4294967295
 8005080:	e7e9      	b.n	8005056 <__ssputs_r+0x8a>
	...

08005084 <_svfiprintf_r>:
 8005084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005088:	4698      	mov	r8, r3
 800508a:	898b      	ldrh	r3, [r1, #12]
 800508c:	061b      	lsls	r3, r3, #24
 800508e:	b09d      	sub	sp, #116	@ 0x74
 8005090:	4607      	mov	r7, r0
 8005092:	460d      	mov	r5, r1
 8005094:	4614      	mov	r4, r2
 8005096:	d510      	bpl.n	80050ba <_svfiprintf_r+0x36>
 8005098:	690b      	ldr	r3, [r1, #16]
 800509a:	b973      	cbnz	r3, 80050ba <_svfiprintf_r+0x36>
 800509c:	2140      	movs	r1, #64	@ 0x40
 800509e:	f7ff ff09 	bl	8004eb4 <_malloc_r>
 80050a2:	6028      	str	r0, [r5, #0]
 80050a4:	6128      	str	r0, [r5, #16]
 80050a6:	b930      	cbnz	r0, 80050b6 <_svfiprintf_r+0x32>
 80050a8:	230c      	movs	r3, #12
 80050aa:	603b      	str	r3, [r7, #0]
 80050ac:	f04f 30ff 	mov.w	r0, #4294967295
 80050b0:	b01d      	add	sp, #116	@ 0x74
 80050b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050b6:	2340      	movs	r3, #64	@ 0x40
 80050b8:	616b      	str	r3, [r5, #20]
 80050ba:	2300      	movs	r3, #0
 80050bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80050be:	2320      	movs	r3, #32
 80050c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80050c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80050c8:	2330      	movs	r3, #48	@ 0x30
 80050ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005268 <_svfiprintf_r+0x1e4>
 80050ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80050d2:	f04f 0901 	mov.w	r9, #1
 80050d6:	4623      	mov	r3, r4
 80050d8:	469a      	mov	sl, r3
 80050da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80050de:	b10a      	cbz	r2, 80050e4 <_svfiprintf_r+0x60>
 80050e0:	2a25      	cmp	r2, #37	@ 0x25
 80050e2:	d1f9      	bne.n	80050d8 <_svfiprintf_r+0x54>
 80050e4:	ebba 0b04 	subs.w	fp, sl, r4
 80050e8:	d00b      	beq.n	8005102 <_svfiprintf_r+0x7e>
 80050ea:	465b      	mov	r3, fp
 80050ec:	4622      	mov	r2, r4
 80050ee:	4629      	mov	r1, r5
 80050f0:	4638      	mov	r0, r7
 80050f2:	f7ff ff6b 	bl	8004fcc <__ssputs_r>
 80050f6:	3001      	adds	r0, #1
 80050f8:	f000 80a7 	beq.w	800524a <_svfiprintf_r+0x1c6>
 80050fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80050fe:	445a      	add	r2, fp
 8005100:	9209      	str	r2, [sp, #36]	@ 0x24
 8005102:	f89a 3000 	ldrb.w	r3, [sl]
 8005106:	2b00      	cmp	r3, #0
 8005108:	f000 809f 	beq.w	800524a <_svfiprintf_r+0x1c6>
 800510c:	2300      	movs	r3, #0
 800510e:	f04f 32ff 	mov.w	r2, #4294967295
 8005112:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005116:	f10a 0a01 	add.w	sl, sl, #1
 800511a:	9304      	str	r3, [sp, #16]
 800511c:	9307      	str	r3, [sp, #28]
 800511e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005122:	931a      	str	r3, [sp, #104]	@ 0x68
 8005124:	4654      	mov	r4, sl
 8005126:	2205      	movs	r2, #5
 8005128:	f814 1b01 	ldrb.w	r1, [r4], #1
 800512c:	484e      	ldr	r0, [pc, #312]	@ (8005268 <_svfiprintf_r+0x1e4>)
 800512e:	f7fb f857 	bl	80001e0 <memchr>
 8005132:	9a04      	ldr	r2, [sp, #16]
 8005134:	b9d8      	cbnz	r0, 800516e <_svfiprintf_r+0xea>
 8005136:	06d0      	lsls	r0, r2, #27
 8005138:	bf44      	itt	mi
 800513a:	2320      	movmi	r3, #32
 800513c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005140:	0711      	lsls	r1, r2, #28
 8005142:	bf44      	itt	mi
 8005144:	232b      	movmi	r3, #43	@ 0x2b
 8005146:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800514a:	f89a 3000 	ldrb.w	r3, [sl]
 800514e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005150:	d015      	beq.n	800517e <_svfiprintf_r+0xfa>
 8005152:	9a07      	ldr	r2, [sp, #28]
 8005154:	4654      	mov	r4, sl
 8005156:	2000      	movs	r0, #0
 8005158:	f04f 0c0a 	mov.w	ip, #10
 800515c:	4621      	mov	r1, r4
 800515e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005162:	3b30      	subs	r3, #48	@ 0x30
 8005164:	2b09      	cmp	r3, #9
 8005166:	d94b      	bls.n	8005200 <_svfiprintf_r+0x17c>
 8005168:	b1b0      	cbz	r0, 8005198 <_svfiprintf_r+0x114>
 800516a:	9207      	str	r2, [sp, #28]
 800516c:	e014      	b.n	8005198 <_svfiprintf_r+0x114>
 800516e:	eba0 0308 	sub.w	r3, r0, r8
 8005172:	fa09 f303 	lsl.w	r3, r9, r3
 8005176:	4313      	orrs	r3, r2
 8005178:	9304      	str	r3, [sp, #16]
 800517a:	46a2      	mov	sl, r4
 800517c:	e7d2      	b.n	8005124 <_svfiprintf_r+0xa0>
 800517e:	9b03      	ldr	r3, [sp, #12]
 8005180:	1d19      	adds	r1, r3, #4
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	9103      	str	r1, [sp, #12]
 8005186:	2b00      	cmp	r3, #0
 8005188:	bfbb      	ittet	lt
 800518a:	425b      	neglt	r3, r3
 800518c:	f042 0202 	orrlt.w	r2, r2, #2
 8005190:	9307      	strge	r3, [sp, #28]
 8005192:	9307      	strlt	r3, [sp, #28]
 8005194:	bfb8      	it	lt
 8005196:	9204      	strlt	r2, [sp, #16]
 8005198:	7823      	ldrb	r3, [r4, #0]
 800519a:	2b2e      	cmp	r3, #46	@ 0x2e
 800519c:	d10a      	bne.n	80051b4 <_svfiprintf_r+0x130>
 800519e:	7863      	ldrb	r3, [r4, #1]
 80051a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80051a2:	d132      	bne.n	800520a <_svfiprintf_r+0x186>
 80051a4:	9b03      	ldr	r3, [sp, #12]
 80051a6:	1d1a      	adds	r2, r3, #4
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	9203      	str	r2, [sp, #12]
 80051ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80051b0:	3402      	adds	r4, #2
 80051b2:	9305      	str	r3, [sp, #20]
 80051b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005278 <_svfiprintf_r+0x1f4>
 80051b8:	7821      	ldrb	r1, [r4, #0]
 80051ba:	2203      	movs	r2, #3
 80051bc:	4650      	mov	r0, sl
 80051be:	f7fb f80f 	bl	80001e0 <memchr>
 80051c2:	b138      	cbz	r0, 80051d4 <_svfiprintf_r+0x150>
 80051c4:	9b04      	ldr	r3, [sp, #16]
 80051c6:	eba0 000a 	sub.w	r0, r0, sl
 80051ca:	2240      	movs	r2, #64	@ 0x40
 80051cc:	4082      	lsls	r2, r0
 80051ce:	4313      	orrs	r3, r2
 80051d0:	3401      	adds	r4, #1
 80051d2:	9304      	str	r3, [sp, #16]
 80051d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051d8:	4824      	ldr	r0, [pc, #144]	@ (800526c <_svfiprintf_r+0x1e8>)
 80051da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80051de:	2206      	movs	r2, #6
 80051e0:	f7fa fffe 	bl	80001e0 <memchr>
 80051e4:	2800      	cmp	r0, #0
 80051e6:	d036      	beq.n	8005256 <_svfiprintf_r+0x1d2>
 80051e8:	4b21      	ldr	r3, [pc, #132]	@ (8005270 <_svfiprintf_r+0x1ec>)
 80051ea:	bb1b      	cbnz	r3, 8005234 <_svfiprintf_r+0x1b0>
 80051ec:	9b03      	ldr	r3, [sp, #12]
 80051ee:	3307      	adds	r3, #7
 80051f0:	f023 0307 	bic.w	r3, r3, #7
 80051f4:	3308      	adds	r3, #8
 80051f6:	9303      	str	r3, [sp, #12]
 80051f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051fa:	4433      	add	r3, r6
 80051fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80051fe:	e76a      	b.n	80050d6 <_svfiprintf_r+0x52>
 8005200:	fb0c 3202 	mla	r2, ip, r2, r3
 8005204:	460c      	mov	r4, r1
 8005206:	2001      	movs	r0, #1
 8005208:	e7a8      	b.n	800515c <_svfiprintf_r+0xd8>
 800520a:	2300      	movs	r3, #0
 800520c:	3401      	adds	r4, #1
 800520e:	9305      	str	r3, [sp, #20]
 8005210:	4619      	mov	r1, r3
 8005212:	f04f 0c0a 	mov.w	ip, #10
 8005216:	4620      	mov	r0, r4
 8005218:	f810 2b01 	ldrb.w	r2, [r0], #1
 800521c:	3a30      	subs	r2, #48	@ 0x30
 800521e:	2a09      	cmp	r2, #9
 8005220:	d903      	bls.n	800522a <_svfiprintf_r+0x1a6>
 8005222:	2b00      	cmp	r3, #0
 8005224:	d0c6      	beq.n	80051b4 <_svfiprintf_r+0x130>
 8005226:	9105      	str	r1, [sp, #20]
 8005228:	e7c4      	b.n	80051b4 <_svfiprintf_r+0x130>
 800522a:	fb0c 2101 	mla	r1, ip, r1, r2
 800522e:	4604      	mov	r4, r0
 8005230:	2301      	movs	r3, #1
 8005232:	e7f0      	b.n	8005216 <_svfiprintf_r+0x192>
 8005234:	ab03      	add	r3, sp, #12
 8005236:	9300      	str	r3, [sp, #0]
 8005238:	462a      	mov	r2, r5
 800523a:	4b0e      	ldr	r3, [pc, #56]	@ (8005274 <_svfiprintf_r+0x1f0>)
 800523c:	a904      	add	r1, sp, #16
 800523e:	4638      	mov	r0, r7
 8005240:	f3af 8000 	nop.w
 8005244:	1c42      	adds	r2, r0, #1
 8005246:	4606      	mov	r6, r0
 8005248:	d1d6      	bne.n	80051f8 <_svfiprintf_r+0x174>
 800524a:	89ab      	ldrh	r3, [r5, #12]
 800524c:	065b      	lsls	r3, r3, #25
 800524e:	f53f af2d 	bmi.w	80050ac <_svfiprintf_r+0x28>
 8005252:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005254:	e72c      	b.n	80050b0 <_svfiprintf_r+0x2c>
 8005256:	ab03      	add	r3, sp, #12
 8005258:	9300      	str	r3, [sp, #0]
 800525a:	462a      	mov	r2, r5
 800525c:	4b05      	ldr	r3, [pc, #20]	@ (8005274 <_svfiprintf_r+0x1f0>)
 800525e:	a904      	add	r1, sp, #16
 8005260:	4638      	mov	r0, r7
 8005262:	f000 f879 	bl	8005358 <_printf_i>
 8005266:	e7ed      	b.n	8005244 <_svfiprintf_r+0x1c0>
 8005268:	08005da8 	.word	0x08005da8
 800526c:	08005db2 	.word	0x08005db2
 8005270:	00000000 	.word	0x00000000
 8005274:	08004fcd 	.word	0x08004fcd
 8005278:	08005dae 	.word	0x08005dae

0800527c <_printf_common>:
 800527c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005280:	4616      	mov	r6, r2
 8005282:	4698      	mov	r8, r3
 8005284:	688a      	ldr	r2, [r1, #8]
 8005286:	690b      	ldr	r3, [r1, #16]
 8005288:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800528c:	4293      	cmp	r3, r2
 800528e:	bfb8      	it	lt
 8005290:	4613      	movlt	r3, r2
 8005292:	6033      	str	r3, [r6, #0]
 8005294:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005298:	4607      	mov	r7, r0
 800529a:	460c      	mov	r4, r1
 800529c:	b10a      	cbz	r2, 80052a2 <_printf_common+0x26>
 800529e:	3301      	adds	r3, #1
 80052a0:	6033      	str	r3, [r6, #0]
 80052a2:	6823      	ldr	r3, [r4, #0]
 80052a4:	0699      	lsls	r1, r3, #26
 80052a6:	bf42      	ittt	mi
 80052a8:	6833      	ldrmi	r3, [r6, #0]
 80052aa:	3302      	addmi	r3, #2
 80052ac:	6033      	strmi	r3, [r6, #0]
 80052ae:	6825      	ldr	r5, [r4, #0]
 80052b0:	f015 0506 	ands.w	r5, r5, #6
 80052b4:	d106      	bne.n	80052c4 <_printf_common+0x48>
 80052b6:	f104 0a19 	add.w	sl, r4, #25
 80052ba:	68e3      	ldr	r3, [r4, #12]
 80052bc:	6832      	ldr	r2, [r6, #0]
 80052be:	1a9b      	subs	r3, r3, r2
 80052c0:	42ab      	cmp	r3, r5
 80052c2:	dc26      	bgt.n	8005312 <_printf_common+0x96>
 80052c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80052c8:	6822      	ldr	r2, [r4, #0]
 80052ca:	3b00      	subs	r3, #0
 80052cc:	bf18      	it	ne
 80052ce:	2301      	movne	r3, #1
 80052d0:	0692      	lsls	r2, r2, #26
 80052d2:	d42b      	bmi.n	800532c <_printf_common+0xb0>
 80052d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80052d8:	4641      	mov	r1, r8
 80052da:	4638      	mov	r0, r7
 80052dc:	47c8      	blx	r9
 80052de:	3001      	adds	r0, #1
 80052e0:	d01e      	beq.n	8005320 <_printf_common+0xa4>
 80052e2:	6823      	ldr	r3, [r4, #0]
 80052e4:	6922      	ldr	r2, [r4, #16]
 80052e6:	f003 0306 	and.w	r3, r3, #6
 80052ea:	2b04      	cmp	r3, #4
 80052ec:	bf02      	ittt	eq
 80052ee:	68e5      	ldreq	r5, [r4, #12]
 80052f0:	6833      	ldreq	r3, [r6, #0]
 80052f2:	1aed      	subeq	r5, r5, r3
 80052f4:	68a3      	ldr	r3, [r4, #8]
 80052f6:	bf0c      	ite	eq
 80052f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052fc:	2500      	movne	r5, #0
 80052fe:	4293      	cmp	r3, r2
 8005300:	bfc4      	itt	gt
 8005302:	1a9b      	subgt	r3, r3, r2
 8005304:	18ed      	addgt	r5, r5, r3
 8005306:	2600      	movs	r6, #0
 8005308:	341a      	adds	r4, #26
 800530a:	42b5      	cmp	r5, r6
 800530c:	d11a      	bne.n	8005344 <_printf_common+0xc8>
 800530e:	2000      	movs	r0, #0
 8005310:	e008      	b.n	8005324 <_printf_common+0xa8>
 8005312:	2301      	movs	r3, #1
 8005314:	4652      	mov	r2, sl
 8005316:	4641      	mov	r1, r8
 8005318:	4638      	mov	r0, r7
 800531a:	47c8      	blx	r9
 800531c:	3001      	adds	r0, #1
 800531e:	d103      	bne.n	8005328 <_printf_common+0xac>
 8005320:	f04f 30ff 	mov.w	r0, #4294967295
 8005324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005328:	3501      	adds	r5, #1
 800532a:	e7c6      	b.n	80052ba <_printf_common+0x3e>
 800532c:	18e1      	adds	r1, r4, r3
 800532e:	1c5a      	adds	r2, r3, #1
 8005330:	2030      	movs	r0, #48	@ 0x30
 8005332:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005336:	4422      	add	r2, r4
 8005338:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800533c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005340:	3302      	adds	r3, #2
 8005342:	e7c7      	b.n	80052d4 <_printf_common+0x58>
 8005344:	2301      	movs	r3, #1
 8005346:	4622      	mov	r2, r4
 8005348:	4641      	mov	r1, r8
 800534a:	4638      	mov	r0, r7
 800534c:	47c8      	blx	r9
 800534e:	3001      	adds	r0, #1
 8005350:	d0e6      	beq.n	8005320 <_printf_common+0xa4>
 8005352:	3601      	adds	r6, #1
 8005354:	e7d9      	b.n	800530a <_printf_common+0x8e>
	...

08005358 <_printf_i>:
 8005358:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800535c:	7e0f      	ldrb	r7, [r1, #24]
 800535e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005360:	2f78      	cmp	r7, #120	@ 0x78
 8005362:	4691      	mov	r9, r2
 8005364:	4680      	mov	r8, r0
 8005366:	460c      	mov	r4, r1
 8005368:	469a      	mov	sl, r3
 800536a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800536e:	d807      	bhi.n	8005380 <_printf_i+0x28>
 8005370:	2f62      	cmp	r7, #98	@ 0x62
 8005372:	d80a      	bhi.n	800538a <_printf_i+0x32>
 8005374:	2f00      	cmp	r7, #0
 8005376:	f000 80d2 	beq.w	800551e <_printf_i+0x1c6>
 800537a:	2f58      	cmp	r7, #88	@ 0x58
 800537c:	f000 80b9 	beq.w	80054f2 <_printf_i+0x19a>
 8005380:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005384:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005388:	e03a      	b.n	8005400 <_printf_i+0xa8>
 800538a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800538e:	2b15      	cmp	r3, #21
 8005390:	d8f6      	bhi.n	8005380 <_printf_i+0x28>
 8005392:	a101      	add	r1, pc, #4	@ (adr r1, 8005398 <_printf_i+0x40>)
 8005394:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005398:	080053f1 	.word	0x080053f1
 800539c:	08005405 	.word	0x08005405
 80053a0:	08005381 	.word	0x08005381
 80053a4:	08005381 	.word	0x08005381
 80053a8:	08005381 	.word	0x08005381
 80053ac:	08005381 	.word	0x08005381
 80053b0:	08005405 	.word	0x08005405
 80053b4:	08005381 	.word	0x08005381
 80053b8:	08005381 	.word	0x08005381
 80053bc:	08005381 	.word	0x08005381
 80053c0:	08005381 	.word	0x08005381
 80053c4:	08005505 	.word	0x08005505
 80053c8:	0800542f 	.word	0x0800542f
 80053cc:	080054bf 	.word	0x080054bf
 80053d0:	08005381 	.word	0x08005381
 80053d4:	08005381 	.word	0x08005381
 80053d8:	08005527 	.word	0x08005527
 80053dc:	08005381 	.word	0x08005381
 80053e0:	0800542f 	.word	0x0800542f
 80053e4:	08005381 	.word	0x08005381
 80053e8:	08005381 	.word	0x08005381
 80053ec:	080054c7 	.word	0x080054c7
 80053f0:	6833      	ldr	r3, [r6, #0]
 80053f2:	1d1a      	adds	r2, r3, #4
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	6032      	str	r2, [r6, #0]
 80053f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80053fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005400:	2301      	movs	r3, #1
 8005402:	e09d      	b.n	8005540 <_printf_i+0x1e8>
 8005404:	6833      	ldr	r3, [r6, #0]
 8005406:	6820      	ldr	r0, [r4, #0]
 8005408:	1d19      	adds	r1, r3, #4
 800540a:	6031      	str	r1, [r6, #0]
 800540c:	0606      	lsls	r6, r0, #24
 800540e:	d501      	bpl.n	8005414 <_printf_i+0xbc>
 8005410:	681d      	ldr	r5, [r3, #0]
 8005412:	e003      	b.n	800541c <_printf_i+0xc4>
 8005414:	0645      	lsls	r5, r0, #25
 8005416:	d5fb      	bpl.n	8005410 <_printf_i+0xb8>
 8005418:	f9b3 5000 	ldrsh.w	r5, [r3]
 800541c:	2d00      	cmp	r5, #0
 800541e:	da03      	bge.n	8005428 <_printf_i+0xd0>
 8005420:	232d      	movs	r3, #45	@ 0x2d
 8005422:	426d      	negs	r5, r5
 8005424:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005428:	4859      	ldr	r0, [pc, #356]	@ (8005590 <_printf_i+0x238>)
 800542a:	230a      	movs	r3, #10
 800542c:	e011      	b.n	8005452 <_printf_i+0xfa>
 800542e:	6821      	ldr	r1, [r4, #0]
 8005430:	6833      	ldr	r3, [r6, #0]
 8005432:	0608      	lsls	r0, r1, #24
 8005434:	f853 5b04 	ldr.w	r5, [r3], #4
 8005438:	d402      	bmi.n	8005440 <_printf_i+0xe8>
 800543a:	0649      	lsls	r1, r1, #25
 800543c:	bf48      	it	mi
 800543e:	b2ad      	uxthmi	r5, r5
 8005440:	2f6f      	cmp	r7, #111	@ 0x6f
 8005442:	4853      	ldr	r0, [pc, #332]	@ (8005590 <_printf_i+0x238>)
 8005444:	6033      	str	r3, [r6, #0]
 8005446:	bf14      	ite	ne
 8005448:	230a      	movne	r3, #10
 800544a:	2308      	moveq	r3, #8
 800544c:	2100      	movs	r1, #0
 800544e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005452:	6866      	ldr	r6, [r4, #4]
 8005454:	60a6      	str	r6, [r4, #8]
 8005456:	2e00      	cmp	r6, #0
 8005458:	bfa2      	ittt	ge
 800545a:	6821      	ldrge	r1, [r4, #0]
 800545c:	f021 0104 	bicge.w	r1, r1, #4
 8005460:	6021      	strge	r1, [r4, #0]
 8005462:	b90d      	cbnz	r5, 8005468 <_printf_i+0x110>
 8005464:	2e00      	cmp	r6, #0
 8005466:	d04b      	beq.n	8005500 <_printf_i+0x1a8>
 8005468:	4616      	mov	r6, r2
 800546a:	fbb5 f1f3 	udiv	r1, r5, r3
 800546e:	fb03 5711 	mls	r7, r3, r1, r5
 8005472:	5dc7      	ldrb	r7, [r0, r7]
 8005474:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005478:	462f      	mov	r7, r5
 800547a:	42bb      	cmp	r3, r7
 800547c:	460d      	mov	r5, r1
 800547e:	d9f4      	bls.n	800546a <_printf_i+0x112>
 8005480:	2b08      	cmp	r3, #8
 8005482:	d10b      	bne.n	800549c <_printf_i+0x144>
 8005484:	6823      	ldr	r3, [r4, #0]
 8005486:	07df      	lsls	r7, r3, #31
 8005488:	d508      	bpl.n	800549c <_printf_i+0x144>
 800548a:	6923      	ldr	r3, [r4, #16]
 800548c:	6861      	ldr	r1, [r4, #4]
 800548e:	4299      	cmp	r1, r3
 8005490:	bfde      	ittt	le
 8005492:	2330      	movle	r3, #48	@ 0x30
 8005494:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005498:	f106 36ff 	addle.w	r6, r6, #4294967295
 800549c:	1b92      	subs	r2, r2, r6
 800549e:	6122      	str	r2, [r4, #16]
 80054a0:	f8cd a000 	str.w	sl, [sp]
 80054a4:	464b      	mov	r3, r9
 80054a6:	aa03      	add	r2, sp, #12
 80054a8:	4621      	mov	r1, r4
 80054aa:	4640      	mov	r0, r8
 80054ac:	f7ff fee6 	bl	800527c <_printf_common>
 80054b0:	3001      	adds	r0, #1
 80054b2:	d14a      	bne.n	800554a <_printf_i+0x1f2>
 80054b4:	f04f 30ff 	mov.w	r0, #4294967295
 80054b8:	b004      	add	sp, #16
 80054ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054be:	6823      	ldr	r3, [r4, #0]
 80054c0:	f043 0320 	orr.w	r3, r3, #32
 80054c4:	6023      	str	r3, [r4, #0]
 80054c6:	4833      	ldr	r0, [pc, #204]	@ (8005594 <_printf_i+0x23c>)
 80054c8:	2778      	movs	r7, #120	@ 0x78
 80054ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80054ce:	6823      	ldr	r3, [r4, #0]
 80054d0:	6831      	ldr	r1, [r6, #0]
 80054d2:	061f      	lsls	r7, r3, #24
 80054d4:	f851 5b04 	ldr.w	r5, [r1], #4
 80054d8:	d402      	bmi.n	80054e0 <_printf_i+0x188>
 80054da:	065f      	lsls	r7, r3, #25
 80054dc:	bf48      	it	mi
 80054de:	b2ad      	uxthmi	r5, r5
 80054e0:	6031      	str	r1, [r6, #0]
 80054e2:	07d9      	lsls	r1, r3, #31
 80054e4:	bf44      	itt	mi
 80054e6:	f043 0320 	orrmi.w	r3, r3, #32
 80054ea:	6023      	strmi	r3, [r4, #0]
 80054ec:	b11d      	cbz	r5, 80054f6 <_printf_i+0x19e>
 80054ee:	2310      	movs	r3, #16
 80054f0:	e7ac      	b.n	800544c <_printf_i+0xf4>
 80054f2:	4827      	ldr	r0, [pc, #156]	@ (8005590 <_printf_i+0x238>)
 80054f4:	e7e9      	b.n	80054ca <_printf_i+0x172>
 80054f6:	6823      	ldr	r3, [r4, #0]
 80054f8:	f023 0320 	bic.w	r3, r3, #32
 80054fc:	6023      	str	r3, [r4, #0]
 80054fe:	e7f6      	b.n	80054ee <_printf_i+0x196>
 8005500:	4616      	mov	r6, r2
 8005502:	e7bd      	b.n	8005480 <_printf_i+0x128>
 8005504:	6833      	ldr	r3, [r6, #0]
 8005506:	6825      	ldr	r5, [r4, #0]
 8005508:	6961      	ldr	r1, [r4, #20]
 800550a:	1d18      	adds	r0, r3, #4
 800550c:	6030      	str	r0, [r6, #0]
 800550e:	062e      	lsls	r6, r5, #24
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	d501      	bpl.n	8005518 <_printf_i+0x1c0>
 8005514:	6019      	str	r1, [r3, #0]
 8005516:	e002      	b.n	800551e <_printf_i+0x1c6>
 8005518:	0668      	lsls	r0, r5, #25
 800551a:	d5fb      	bpl.n	8005514 <_printf_i+0x1bc>
 800551c:	8019      	strh	r1, [r3, #0]
 800551e:	2300      	movs	r3, #0
 8005520:	6123      	str	r3, [r4, #16]
 8005522:	4616      	mov	r6, r2
 8005524:	e7bc      	b.n	80054a0 <_printf_i+0x148>
 8005526:	6833      	ldr	r3, [r6, #0]
 8005528:	1d1a      	adds	r2, r3, #4
 800552a:	6032      	str	r2, [r6, #0]
 800552c:	681e      	ldr	r6, [r3, #0]
 800552e:	6862      	ldr	r2, [r4, #4]
 8005530:	2100      	movs	r1, #0
 8005532:	4630      	mov	r0, r6
 8005534:	f7fa fe54 	bl	80001e0 <memchr>
 8005538:	b108      	cbz	r0, 800553e <_printf_i+0x1e6>
 800553a:	1b80      	subs	r0, r0, r6
 800553c:	6060      	str	r0, [r4, #4]
 800553e:	6863      	ldr	r3, [r4, #4]
 8005540:	6123      	str	r3, [r4, #16]
 8005542:	2300      	movs	r3, #0
 8005544:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005548:	e7aa      	b.n	80054a0 <_printf_i+0x148>
 800554a:	6923      	ldr	r3, [r4, #16]
 800554c:	4632      	mov	r2, r6
 800554e:	4649      	mov	r1, r9
 8005550:	4640      	mov	r0, r8
 8005552:	47d0      	blx	sl
 8005554:	3001      	adds	r0, #1
 8005556:	d0ad      	beq.n	80054b4 <_printf_i+0x15c>
 8005558:	6823      	ldr	r3, [r4, #0]
 800555a:	079b      	lsls	r3, r3, #30
 800555c:	d413      	bmi.n	8005586 <_printf_i+0x22e>
 800555e:	68e0      	ldr	r0, [r4, #12]
 8005560:	9b03      	ldr	r3, [sp, #12]
 8005562:	4298      	cmp	r0, r3
 8005564:	bfb8      	it	lt
 8005566:	4618      	movlt	r0, r3
 8005568:	e7a6      	b.n	80054b8 <_printf_i+0x160>
 800556a:	2301      	movs	r3, #1
 800556c:	4632      	mov	r2, r6
 800556e:	4649      	mov	r1, r9
 8005570:	4640      	mov	r0, r8
 8005572:	47d0      	blx	sl
 8005574:	3001      	adds	r0, #1
 8005576:	d09d      	beq.n	80054b4 <_printf_i+0x15c>
 8005578:	3501      	adds	r5, #1
 800557a:	68e3      	ldr	r3, [r4, #12]
 800557c:	9903      	ldr	r1, [sp, #12]
 800557e:	1a5b      	subs	r3, r3, r1
 8005580:	42ab      	cmp	r3, r5
 8005582:	dcf2      	bgt.n	800556a <_printf_i+0x212>
 8005584:	e7eb      	b.n	800555e <_printf_i+0x206>
 8005586:	2500      	movs	r5, #0
 8005588:	f104 0619 	add.w	r6, r4, #25
 800558c:	e7f5      	b.n	800557a <_printf_i+0x222>
 800558e:	bf00      	nop
 8005590:	08005db9 	.word	0x08005db9
 8005594:	08005dca 	.word	0x08005dca

08005598 <memmove>:
 8005598:	4288      	cmp	r0, r1
 800559a:	b510      	push	{r4, lr}
 800559c:	eb01 0402 	add.w	r4, r1, r2
 80055a0:	d902      	bls.n	80055a8 <memmove+0x10>
 80055a2:	4284      	cmp	r4, r0
 80055a4:	4623      	mov	r3, r4
 80055a6:	d807      	bhi.n	80055b8 <memmove+0x20>
 80055a8:	1e43      	subs	r3, r0, #1
 80055aa:	42a1      	cmp	r1, r4
 80055ac:	d008      	beq.n	80055c0 <memmove+0x28>
 80055ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80055b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80055b6:	e7f8      	b.n	80055aa <memmove+0x12>
 80055b8:	4402      	add	r2, r0
 80055ba:	4601      	mov	r1, r0
 80055bc:	428a      	cmp	r2, r1
 80055be:	d100      	bne.n	80055c2 <memmove+0x2a>
 80055c0:	bd10      	pop	{r4, pc}
 80055c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80055c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80055ca:	e7f7      	b.n	80055bc <memmove+0x24>

080055cc <_sbrk_r>:
 80055cc:	b538      	push	{r3, r4, r5, lr}
 80055ce:	4d06      	ldr	r5, [pc, #24]	@ (80055e8 <_sbrk_r+0x1c>)
 80055d0:	2300      	movs	r3, #0
 80055d2:	4604      	mov	r4, r0
 80055d4:	4608      	mov	r0, r1
 80055d6:	602b      	str	r3, [r5, #0]
 80055d8:	f7fc f890 	bl	80016fc <_sbrk>
 80055dc:	1c43      	adds	r3, r0, #1
 80055de:	d102      	bne.n	80055e6 <_sbrk_r+0x1a>
 80055e0:	682b      	ldr	r3, [r5, #0]
 80055e2:	b103      	cbz	r3, 80055e6 <_sbrk_r+0x1a>
 80055e4:	6023      	str	r3, [r4, #0]
 80055e6:	bd38      	pop	{r3, r4, r5, pc}
 80055e8:	2000039c 	.word	0x2000039c

080055ec <memcpy>:
 80055ec:	440a      	add	r2, r1
 80055ee:	4291      	cmp	r1, r2
 80055f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80055f4:	d100      	bne.n	80055f8 <memcpy+0xc>
 80055f6:	4770      	bx	lr
 80055f8:	b510      	push	{r4, lr}
 80055fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005602:	4291      	cmp	r1, r2
 8005604:	d1f9      	bne.n	80055fa <memcpy+0xe>
 8005606:	bd10      	pop	{r4, pc}

08005608 <_realloc_r>:
 8005608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800560c:	4680      	mov	r8, r0
 800560e:	4615      	mov	r5, r2
 8005610:	460c      	mov	r4, r1
 8005612:	b921      	cbnz	r1, 800561e <_realloc_r+0x16>
 8005614:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005618:	4611      	mov	r1, r2
 800561a:	f7ff bc4b 	b.w	8004eb4 <_malloc_r>
 800561e:	b92a      	cbnz	r2, 800562c <_realloc_r+0x24>
 8005620:	f7ff fbdc 	bl	8004ddc <_free_r>
 8005624:	2400      	movs	r4, #0
 8005626:	4620      	mov	r0, r4
 8005628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800562c:	f000 f81a 	bl	8005664 <_malloc_usable_size_r>
 8005630:	4285      	cmp	r5, r0
 8005632:	4606      	mov	r6, r0
 8005634:	d802      	bhi.n	800563c <_realloc_r+0x34>
 8005636:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800563a:	d8f4      	bhi.n	8005626 <_realloc_r+0x1e>
 800563c:	4629      	mov	r1, r5
 800563e:	4640      	mov	r0, r8
 8005640:	f7ff fc38 	bl	8004eb4 <_malloc_r>
 8005644:	4607      	mov	r7, r0
 8005646:	2800      	cmp	r0, #0
 8005648:	d0ec      	beq.n	8005624 <_realloc_r+0x1c>
 800564a:	42b5      	cmp	r5, r6
 800564c:	462a      	mov	r2, r5
 800564e:	4621      	mov	r1, r4
 8005650:	bf28      	it	cs
 8005652:	4632      	movcs	r2, r6
 8005654:	f7ff ffca 	bl	80055ec <memcpy>
 8005658:	4621      	mov	r1, r4
 800565a:	4640      	mov	r0, r8
 800565c:	f7ff fbbe 	bl	8004ddc <_free_r>
 8005660:	463c      	mov	r4, r7
 8005662:	e7e0      	b.n	8005626 <_realloc_r+0x1e>

08005664 <_malloc_usable_size_r>:
 8005664:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005668:	1f18      	subs	r0, r3, #4
 800566a:	2b00      	cmp	r3, #0
 800566c:	bfbc      	itt	lt
 800566e:	580b      	ldrlt	r3, [r1, r0]
 8005670:	18c0      	addlt	r0, r0, r3
 8005672:	4770      	bx	lr

08005674 <atan2>:
 8005674:	f000 baa8 	b.w	8005bc8 <__ieee754_atan2>

08005678 <sqrt>:
 8005678:	b538      	push	{r3, r4, r5, lr}
 800567a:	ed2d 8b02 	vpush	{d8}
 800567e:	ec55 4b10 	vmov	r4, r5, d0
 8005682:	f000 f9c5 	bl	8005a10 <__ieee754_sqrt>
 8005686:	4622      	mov	r2, r4
 8005688:	462b      	mov	r3, r5
 800568a:	4620      	mov	r0, r4
 800568c:	4629      	mov	r1, r5
 800568e:	eeb0 8a40 	vmov.f32	s16, s0
 8005692:	eef0 8a60 	vmov.f32	s17, s1
 8005696:	f7fb fa49 	bl	8000b2c <__aeabi_dcmpun>
 800569a:	b990      	cbnz	r0, 80056c2 <sqrt+0x4a>
 800569c:	2200      	movs	r2, #0
 800569e:	2300      	movs	r3, #0
 80056a0:	4620      	mov	r0, r4
 80056a2:	4629      	mov	r1, r5
 80056a4:	f7fb fa1a 	bl	8000adc <__aeabi_dcmplt>
 80056a8:	b158      	cbz	r0, 80056c2 <sqrt+0x4a>
 80056aa:	f7ff fb6b 	bl	8004d84 <__errno>
 80056ae:	2321      	movs	r3, #33	@ 0x21
 80056b0:	6003      	str	r3, [r0, #0]
 80056b2:	2200      	movs	r2, #0
 80056b4:	2300      	movs	r3, #0
 80056b6:	4610      	mov	r0, r2
 80056b8:	4619      	mov	r1, r3
 80056ba:	f7fb f8c7 	bl	800084c <__aeabi_ddiv>
 80056be:	ec41 0b18 	vmov	d8, r0, r1
 80056c2:	eeb0 0a48 	vmov.f32	s0, s16
 80056c6:	eef0 0a68 	vmov.f32	s1, s17
 80056ca:	ecbd 8b02 	vpop	{d8}
 80056ce:	bd38      	pop	{r3, r4, r5, pc}

080056d0 <atan>:
 80056d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056d4:	ec55 4b10 	vmov	r4, r5, d0
 80056d8:	4bbf      	ldr	r3, [pc, #764]	@ (80059d8 <atan+0x308>)
 80056da:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80056de:	429e      	cmp	r6, r3
 80056e0:	46ab      	mov	fp, r5
 80056e2:	d918      	bls.n	8005716 <atan+0x46>
 80056e4:	4bbd      	ldr	r3, [pc, #756]	@ (80059dc <atan+0x30c>)
 80056e6:	429e      	cmp	r6, r3
 80056e8:	d801      	bhi.n	80056ee <atan+0x1e>
 80056ea:	d109      	bne.n	8005700 <atan+0x30>
 80056ec:	b144      	cbz	r4, 8005700 <atan+0x30>
 80056ee:	4622      	mov	r2, r4
 80056f0:	462b      	mov	r3, r5
 80056f2:	4620      	mov	r0, r4
 80056f4:	4629      	mov	r1, r5
 80056f6:	f7fa fdc9 	bl	800028c <__adddf3>
 80056fa:	4604      	mov	r4, r0
 80056fc:	460d      	mov	r5, r1
 80056fe:	e006      	b.n	800570e <atan+0x3e>
 8005700:	f1bb 0f00 	cmp.w	fp, #0
 8005704:	f340 812b 	ble.w	800595e <atan+0x28e>
 8005708:	a597      	add	r5, pc, #604	@ (adr r5, 8005968 <atan+0x298>)
 800570a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800570e:	ec45 4b10 	vmov	d0, r4, r5
 8005712:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005716:	4bb2      	ldr	r3, [pc, #712]	@ (80059e0 <atan+0x310>)
 8005718:	429e      	cmp	r6, r3
 800571a:	d813      	bhi.n	8005744 <atan+0x74>
 800571c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8005720:	429e      	cmp	r6, r3
 8005722:	d80c      	bhi.n	800573e <atan+0x6e>
 8005724:	a392      	add	r3, pc, #584	@ (adr r3, 8005970 <atan+0x2a0>)
 8005726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800572a:	4620      	mov	r0, r4
 800572c:	4629      	mov	r1, r5
 800572e:	f7fa fdad 	bl	800028c <__adddf3>
 8005732:	4bac      	ldr	r3, [pc, #688]	@ (80059e4 <atan+0x314>)
 8005734:	2200      	movs	r2, #0
 8005736:	f7fb f9ef 	bl	8000b18 <__aeabi_dcmpgt>
 800573a:	2800      	cmp	r0, #0
 800573c:	d1e7      	bne.n	800570e <atan+0x3e>
 800573e:	f04f 3aff 	mov.w	sl, #4294967295
 8005742:	e029      	b.n	8005798 <atan+0xc8>
 8005744:	f000 f95c 	bl	8005a00 <fabs>
 8005748:	4ba7      	ldr	r3, [pc, #668]	@ (80059e8 <atan+0x318>)
 800574a:	429e      	cmp	r6, r3
 800574c:	ec55 4b10 	vmov	r4, r5, d0
 8005750:	f200 80bc 	bhi.w	80058cc <atan+0x1fc>
 8005754:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8005758:	429e      	cmp	r6, r3
 800575a:	f200 809e 	bhi.w	800589a <atan+0x1ca>
 800575e:	4622      	mov	r2, r4
 8005760:	462b      	mov	r3, r5
 8005762:	4620      	mov	r0, r4
 8005764:	4629      	mov	r1, r5
 8005766:	f7fa fd91 	bl	800028c <__adddf3>
 800576a:	4b9e      	ldr	r3, [pc, #632]	@ (80059e4 <atan+0x314>)
 800576c:	2200      	movs	r2, #0
 800576e:	f7fa fd8b 	bl	8000288 <__aeabi_dsub>
 8005772:	2200      	movs	r2, #0
 8005774:	4606      	mov	r6, r0
 8005776:	460f      	mov	r7, r1
 8005778:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800577c:	4620      	mov	r0, r4
 800577e:	4629      	mov	r1, r5
 8005780:	f7fa fd84 	bl	800028c <__adddf3>
 8005784:	4602      	mov	r2, r0
 8005786:	460b      	mov	r3, r1
 8005788:	4630      	mov	r0, r6
 800578a:	4639      	mov	r1, r7
 800578c:	f7fb f85e 	bl	800084c <__aeabi_ddiv>
 8005790:	f04f 0a00 	mov.w	sl, #0
 8005794:	4604      	mov	r4, r0
 8005796:	460d      	mov	r5, r1
 8005798:	4622      	mov	r2, r4
 800579a:	462b      	mov	r3, r5
 800579c:	4620      	mov	r0, r4
 800579e:	4629      	mov	r1, r5
 80057a0:	f7fa ff2a 	bl	80005f8 <__aeabi_dmul>
 80057a4:	4602      	mov	r2, r0
 80057a6:	460b      	mov	r3, r1
 80057a8:	4680      	mov	r8, r0
 80057aa:	4689      	mov	r9, r1
 80057ac:	f7fa ff24 	bl	80005f8 <__aeabi_dmul>
 80057b0:	a371      	add	r3, pc, #452	@ (adr r3, 8005978 <atan+0x2a8>)
 80057b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b6:	4606      	mov	r6, r0
 80057b8:	460f      	mov	r7, r1
 80057ba:	f7fa ff1d 	bl	80005f8 <__aeabi_dmul>
 80057be:	a370      	add	r3, pc, #448	@ (adr r3, 8005980 <atan+0x2b0>)
 80057c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c4:	f7fa fd62 	bl	800028c <__adddf3>
 80057c8:	4632      	mov	r2, r6
 80057ca:	463b      	mov	r3, r7
 80057cc:	f7fa ff14 	bl	80005f8 <__aeabi_dmul>
 80057d0:	a36d      	add	r3, pc, #436	@ (adr r3, 8005988 <atan+0x2b8>)
 80057d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d6:	f7fa fd59 	bl	800028c <__adddf3>
 80057da:	4632      	mov	r2, r6
 80057dc:	463b      	mov	r3, r7
 80057de:	f7fa ff0b 	bl	80005f8 <__aeabi_dmul>
 80057e2:	a36b      	add	r3, pc, #428	@ (adr r3, 8005990 <atan+0x2c0>)
 80057e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e8:	f7fa fd50 	bl	800028c <__adddf3>
 80057ec:	4632      	mov	r2, r6
 80057ee:	463b      	mov	r3, r7
 80057f0:	f7fa ff02 	bl	80005f8 <__aeabi_dmul>
 80057f4:	a368      	add	r3, pc, #416	@ (adr r3, 8005998 <atan+0x2c8>)
 80057f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057fa:	f7fa fd47 	bl	800028c <__adddf3>
 80057fe:	4632      	mov	r2, r6
 8005800:	463b      	mov	r3, r7
 8005802:	f7fa fef9 	bl	80005f8 <__aeabi_dmul>
 8005806:	a366      	add	r3, pc, #408	@ (adr r3, 80059a0 <atan+0x2d0>)
 8005808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580c:	f7fa fd3e 	bl	800028c <__adddf3>
 8005810:	4642      	mov	r2, r8
 8005812:	464b      	mov	r3, r9
 8005814:	f7fa fef0 	bl	80005f8 <__aeabi_dmul>
 8005818:	a363      	add	r3, pc, #396	@ (adr r3, 80059a8 <atan+0x2d8>)
 800581a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581e:	4680      	mov	r8, r0
 8005820:	4689      	mov	r9, r1
 8005822:	4630      	mov	r0, r6
 8005824:	4639      	mov	r1, r7
 8005826:	f7fa fee7 	bl	80005f8 <__aeabi_dmul>
 800582a:	a361      	add	r3, pc, #388	@ (adr r3, 80059b0 <atan+0x2e0>)
 800582c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005830:	f7fa fd2a 	bl	8000288 <__aeabi_dsub>
 8005834:	4632      	mov	r2, r6
 8005836:	463b      	mov	r3, r7
 8005838:	f7fa fede 	bl	80005f8 <__aeabi_dmul>
 800583c:	a35e      	add	r3, pc, #376	@ (adr r3, 80059b8 <atan+0x2e8>)
 800583e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005842:	f7fa fd21 	bl	8000288 <__aeabi_dsub>
 8005846:	4632      	mov	r2, r6
 8005848:	463b      	mov	r3, r7
 800584a:	f7fa fed5 	bl	80005f8 <__aeabi_dmul>
 800584e:	a35c      	add	r3, pc, #368	@ (adr r3, 80059c0 <atan+0x2f0>)
 8005850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005854:	f7fa fd18 	bl	8000288 <__aeabi_dsub>
 8005858:	4632      	mov	r2, r6
 800585a:	463b      	mov	r3, r7
 800585c:	f7fa fecc 	bl	80005f8 <__aeabi_dmul>
 8005860:	a359      	add	r3, pc, #356	@ (adr r3, 80059c8 <atan+0x2f8>)
 8005862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005866:	f7fa fd0f 	bl	8000288 <__aeabi_dsub>
 800586a:	4632      	mov	r2, r6
 800586c:	463b      	mov	r3, r7
 800586e:	f7fa fec3 	bl	80005f8 <__aeabi_dmul>
 8005872:	4602      	mov	r2, r0
 8005874:	460b      	mov	r3, r1
 8005876:	4640      	mov	r0, r8
 8005878:	4649      	mov	r1, r9
 800587a:	f7fa fd07 	bl	800028c <__adddf3>
 800587e:	4622      	mov	r2, r4
 8005880:	462b      	mov	r3, r5
 8005882:	f7fa feb9 	bl	80005f8 <__aeabi_dmul>
 8005886:	f1ba 3fff 	cmp.w	sl, #4294967295
 800588a:	4602      	mov	r2, r0
 800588c:	460b      	mov	r3, r1
 800588e:	d148      	bne.n	8005922 <atan+0x252>
 8005890:	4620      	mov	r0, r4
 8005892:	4629      	mov	r1, r5
 8005894:	f7fa fcf8 	bl	8000288 <__aeabi_dsub>
 8005898:	e72f      	b.n	80056fa <atan+0x2a>
 800589a:	4b52      	ldr	r3, [pc, #328]	@ (80059e4 <atan+0x314>)
 800589c:	2200      	movs	r2, #0
 800589e:	4620      	mov	r0, r4
 80058a0:	4629      	mov	r1, r5
 80058a2:	f7fa fcf1 	bl	8000288 <__aeabi_dsub>
 80058a6:	4b4f      	ldr	r3, [pc, #316]	@ (80059e4 <atan+0x314>)
 80058a8:	4606      	mov	r6, r0
 80058aa:	460f      	mov	r7, r1
 80058ac:	2200      	movs	r2, #0
 80058ae:	4620      	mov	r0, r4
 80058b0:	4629      	mov	r1, r5
 80058b2:	f7fa fceb 	bl	800028c <__adddf3>
 80058b6:	4602      	mov	r2, r0
 80058b8:	460b      	mov	r3, r1
 80058ba:	4630      	mov	r0, r6
 80058bc:	4639      	mov	r1, r7
 80058be:	f7fa ffc5 	bl	800084c <__aeabi_ddiv>
 80058c2:	f04f 0a01 	mov.w	sl, #1
 80058c6:	4604      	mov	r4, r0
 80058c8:	460d      	mov	r5, r1
 80058ca:	e765      	b.n	8005798 <atan+0xc8>
 80058cc:	4b47      	ldr	r3, [pc, #284]	@ (80059ec <atan+0x31c>)
 80058ce:	429e      	cmp	r6, r3
 80058d0:	d21c      	bcs.n	800590c <atan+0x23c>
 80058d2:	4b47      	ldr	r3, [pc, #284]	@ (80059f0 <atan+0x320>)
 80058d4:	2200      	movs	r2, #0
 80058d6:	4620      	mov	r0, r4
 80058d8:	4629      	mov	r1, r5
 80058da:	f7fa fcd5 	bl	8000288 <__aeabi_dsub>
 80058de:	4b44      	ldr	r3, [pc, #272]	@ (80059f0 <atan+0x320>)
 80058e0:	4606      	mov	r6, r0
 80058e2:	460f      	mov	r7, r1
 80058e4:	2200      	movs	r2, #0
 80058e6:	4620      	mov	r0, r4
 80058e8:	4629      	mov	r1, r5
 80058ea:	f7fa fe85 	bl	80005f8 <__aeabi_dmul>
 80058ee:	4b3d      	ldr	r3, [pc, #244]	@ (80059e4 <atan+0x314>)
 80058f0:	2200      	movs	r2, #0
 80058f2:	f7fa fccb 	bl	800028c <__adddf3>
 80058f6:	4602      	mov	r2, r0
 80058f8:	460b      	mov	r3, r1
 80058fa:	4630      	mov	r0, r6
 80058fc:	4639      	mov	r1, r7
 80058fe:	f7fa ffa5 	bl	800084c <__aeabi_ddiv>
 8005902:	f04f 0a02 	mov.w	sl, #2
 8005906:	4604      	mov	r4, r0
 8005908:	460d      	mov	r5, r1
 800590a:	e745      	b.n	8005798 <atan+0xc8>
 800590c:	4622      	mov	r2, r4
 800590e:	462b      	mov	r3, r5
 8005910:	4938      	ldr	r1, [pc, #224]	@ (80059f4 <atan+0x324>)
 8005912:	2000      	movs	r0, #0
 8005914:	f7fa ff9a 	bl	800084c <__aeabi_ddiv>
 8005918:	f04f 0a03 	mov.w	sl, #3
 800591c:	4604      	mov	r4, r0
 800591e:	460d      	mov	r5, r1
 8005920:	e73a      	b.n	8005798 <atan+0xc8>
 8005922:	4b35      	ldr	r3, [pc, #212]	@ (80059f8 <atan+0x328>)
 8005924:	4e35      	ldr	r6, [pc, #212]	@ (80059fc <atan+0x32c>)
 8005926:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800592a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800592e:	f7fa fcab 	bl	8000288 <__aeabi_dsub>
 8005932:	4622      	mov	r2, r4
 8005934:	462b      	mov	r3, r5
 8005936:	f7fa fca7 	bl	8000288 <__aeabi_dsub>
 800593a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800593e:	4602      	mov	r2, r0
 8005940:	460b      	mov	r3, r1
 8005942:	e9d6 0100 	ldrd	r0, r1, [r6]
 8005946:	f7fa fc9f 	bl	8000288 <__aeabi_dsub>
 800594a:	f1bb 0f00 	cmp.w	fp, #0
 800594e:	4604      	mov	r4, r0
 8005950:	460d      	mov	r5, r1
 8005952:	f6bf aedc 	bge.w	800570e <atan+0x3e>
 8005956:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800595a:	461d      	mov	r5, r3
 800595c:	e6d7      	b.n	800570e <atan+0x3e>
 800595e:	a51c      	add	r5, pc, #112	@ (adr r5, 80059d0 <atan+0x300>)
 8005960:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005964:	e6d3      	b.n	800570e <atan+0x3e>
 8005966:	bf00      	nop
 8005968:	54442d18 	.word	0x54442d18
 800596c:	3ff921fb 	.word	0x3ff921fb
 8005970:	8800759c 	.word	0x8800759c
 8005974:	7e37e43c 	.word	0x7e37e43c
 8005978:	e322da11 	.word	0xe322da11
 800597c:	3f90ad3a 	.word	0x3f90ad3a
 8005980:	24760deb 	.word	0x24760deb
 8005984:	3fa97b4b 	.word	0x3fa97b4b
 8005988:	a0d03d51 	.word	0xa0d03d51
 800598c:	3fb10d66 	.word	0x3fb10d66
 8005990:	c54c206e 	.word	0xc54c206e
 8005994:	3fb745cd 	.word	0x3fb745cd
 8005998:	920083ff 	.word	0x920083ff
 800599c:	3fc24924 	.word	0x3fc24924
 80059a0:	5555550d 	.word	0x5555550d
 80059a4:	3fd55555 	.word	0x3fd55555
 80059a8:	2c6a6c2f 	.word	0x2c6a6c2f
 80059ac:	bfa2b444 	.word	0xbfa2b444
 80059b0:	52defd9a 	.word	0x52defd9a
 80059b4:	3fadde2d 	.word	0x3fadde2d
 80059b8:	af749a6d 	.word	0xaf749a6d
 80059bc:	3fb3b0f2 	.word	0x3fb3b0f2
 80059c0:	fe231671 	.word	0xfe231671
 80059c4:	3fbc71c6 	.word	0x3fbc71c6
 80059c8:	9998ebc4 	.word	0x9998ebc4
 80059cc:	3fc99999 	.word	0x3fc99999
 80059d0:	54442d18 	.word	0x54442d18
 80059d4:	bff921fb 	.word	0xbff921fb
 80059d8:	440fffff 	.word	0x440fffff
 80059dc:	7ff00000 	.word	0x7ff00000
 80059e0:	3fdbffff 	.word	0x3fdbffff
 80059e4:	3ff00000 	.word	0x3ff00000
 80059e8:	3ff2ffff 	.word	0x3ff2ffff
 80059ec:	40038000 	.word	0x40038000
 80059f0:	3ff80000 	.word	0x3ff80000
 80059f4:	bff00000 	.word	0xbff00000
 80059f8:	08005de0 	.word	0x08005de0
 80059fc:	08005e00 	.word	0x08005e00

08005a00 <fabs>:
 8005a00:	ec51 0b10 	vmov	r0, r1, d0
 8005a04:	4602      	mov	r2, r0
 8005a06:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005a0a:	ec43 2b10 	vmov	d0, r2, r3
 8005a0e:	4770      	bx	lr

08005a10 <__ieee754_sqrt>:
 8005a10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a14:	4a68      	ldr	r2, [pc, #416]	@ (8005bb8 <__ieee754_sqrt+0x1a8>)
 8005a16:	ec55 4b10 	vmov	r4, r5, d0
 8005a1a:	43aa      	bics	r2, r5
 8005a1c:	462b      	mov	r3, r5
 8005a1e:	4621      	mov	r1, r4
 8005a20:	d110      	bne.n	8005a44 <__ieee754_sqrt+0x34>
 8005a22:	4622      	mov	r2, r4
 8005a24:	4620      	mov	r0, r4
 8005a26:	4629      	mov	r1, r5
 8005a28:	f7fa fde6 	bl	80005f8 <__aeabi_dmul>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	460b      	mov	r3, r1
 8005a30:	4620      	mov	r0, r4
 8005a32:	4629      	mov	r1, r5
 8005a34:	f7fa fc2a 	bl	800028c <__adddf3>
 8005a38:	4604      	mov	r4, r0
 8005a3a:	460d      	mov	r5, r1
 8005a3c:	ec45 4b10 	vmov	d0, r4, r5
 8005a40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a44:	2d00      	cmp	r5, #0
 8005a46:	dc0e      	bgt.n	8005a66 <__ieee754_sqrt+0x56>
 8005a48:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8005a4c:	4322      	orrs	r2, r4
 8005a4e:	d0f5      	beq.n	8005a3c <__ieee754_sqrt+0x2c>
 8005a50:	b19d      	cbz	r5, 8005a7a <__ieee754_sqrt+0x6a>
 8005a52:	4622      	mov	r2, r4
 8005a54:	4620      	mov	r0, r4
 8005a56:	4629      	mov	r1, r5
 8005a58:	f7fa fc16 	bl	8000288 <__aeabi_dsub>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	460b      	mov	r3, r1
 8005a60:	f7fa fef4 	bl	800084c <__aeabi_ddiv>
 8005a64:	e7e8      	b.n	8005a38 <__ieee754_sqrt+0x28>
 8005a66:	152a      	asrs	r2, r5, #20
 8005a68:	d115      	bne.n	8005a96 <__ieee754_sqrt+0x86>
 8005a6a:	2000      	movs	r0, #0
 8005a6c:	e009      	b.n	8005a82 <__ieee754_sqrt+0x72>
 8005a6e:	0acb      	lsrs	r3, r1, #11
 8005a70:	3a15      	subs	r2, #21
 8005a72:	0549      	lsls	r1, r1, #21
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d0fa      	beq.n	8005a6e <__ieee754_sqrt+0x5e>
 8005a78:	e7f7      	b.n	8005a6a <__ieee754_sqrt+0x5a>
 8005a7a:	462a      	mov	r2, r5
 8005a7c:	e7fa      	b.n	8005a74 <__ieee754_sqrt+0x64>
 8005a7e:	005b      	lsls	r3, r3, #1
 8005a80:	3001      	adds	r0, #1
 8005a82:	02dc      	lsls	r4, r3, #11
 8005a84:	d5fb      	bpl.n	8005a7e <__ieee754_sqrt+0x6e>
 8005a86:	1e44      	subs	r4, r0, #1
 8005a88:	1b12      	subs	r2, r2, r4
 8005a8a:	f1c0 0420 	rsb	r4, r0, #32
 8005a8e:	fa21 f404 	lsr.w	r4, r1, r4
 8005a92:	4323      	orrs	r3, r4
 8005a94:	4081      	lsls	r1, r0
 8005a96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a9a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8005a9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005aa2:	07d2      	lsls	r2, r2, #31
 8005aa4:	bf5c      	itt	pl
 8005aa6:	005b      	lslpl	r3, r3, #1
 8005aa8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8005aac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005ab0:	bf58      	it	pl
 8005ab2:	0049      	lslpl	r1, r1, #1
 8005ab4:	2600      	movs	r6, #0
 8005ab6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8005aba:	106d      	asrs	r5, r5, #1
 8005abc:	0049      	lsls	r1, r1, #1
 8005abe:	2016      	movs	r0, #22
 8005ac0:	4632      	mov	r2, r6
 8005ac2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8005ac6:	1917      	adds	r7, r2, r4
 8005ac8:	429f      	cmp	r7, r3
 8005aca:	bfde      	ittt	le
 8005acc:	193a      	addle	r2, r7, r4
 8005ace:	1bdb      	suble	r3, r3, r7
 8005ad0:	1936      	addle	r6, r6, r4
 8005ad2:	0fcf      	lsrs	r7, r1, #31
 8005ad4:	3801      	subs	r0, #1
 8005ad6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8005ada:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005ade:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8005ae2:	d1f0      	bne.n	8005ac6 <__ieee754_sqrt+0xb6>
 8005ae4:	4604      	mov	r4, r0
 8005ae6:	2720      	movs	r7, #32
 8005ae8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8005aec:	429a      	cmp	r2, r3
 8005aee:	eb00 0e0c 	add.w	lr, r0, ip
 8005af2:	db02      	blt.n	8005afa <__ieee754_sqrt+0xea>
 8005af4:	d113      	bne.n	8005b1e <__ieee754_sqrt+0x10e>
 8005af6:	458e      	cmp	lr, r1
 8005af8:	d811      	bhi.n	8005b1e <__ieee754_sqrt+0x10e>
 8005afa:	f1be 0f00 	cmp.w	lr, #0
 8005afe:	eb0e 000c 	add.w	r0, lr, ip
 8005b02:	da42      	bge.n	8005b8a <__ieee754_sqrt+0x17a>
 8005b04:	2800      	cmp	r0, #0
 8005b06:	db40      	blt.n	8005b8a <__ieee754_sqrt+0x17a>
 8005b08:	f102 0801 	add.w	r8, r2, #1
 8005b0c:	1a9b      	subs	r3, r3, r2
 8005b0e:	458e      	cmp	lr, r1
 8005b10:	bf88      	it	hi
 8005b12:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8005b16:	eba1 010e 	sub.w	r1, r1, lr
 8005b1a:	4464      	add	r4, ip
 8005b1c:	4642      	mov	r2, r8
 8005b1e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8005b22:	3f01      	subs	r7, #1
 8005b24:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8005b28:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005b2c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8005b30:	d1dc      	bne.n	8005aec <__ieee754_sqrt+0xdc>
 8005b32:	4319      	orrs	r1, r3
 8005b34:	d01b      	beq.n	8005b6e <__ieee754_sqrt+0x15e>
 8005b36:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8005bbc <__ieee754_sqrt+0x1ac>
 8005b3a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8005bc0 <__ieee754_sqrt+0x1b0>
 8005b3e:	e9da 0100 	ldrd	r0, r1, [sl]
 8005b42:	e9db 2300 	ldrd	r2, r3, [fp]
 8005b46:	f7fa fb9f 	bl	8000288 <__aeabi_dsub>
 8005b4a:	e9da 8900 	ldrd	r8, r9, [sl]
 8005b4e:	4602      	mov	r2, r0
 8005b50:	460b      	mov	r3, r1
 8005b52:	4640      	mov	r0, r8
 8005b54:	4649      	mov	r1, r9
 8005b56:	f7fa ffcb 	bl	8000af0 <__aeabi_dcmple>
 8005b5a:	b140      	cbz	r0, 8005b6e <__ieee754_sqrt+0x15e>
 8005b5c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8005b60:	e9da 0100 	ldrd	r0, r1, [sl]
 8005b64:	e9db 2300 	ldrd	r2, r3, [fp]
 8005b68:	d111      	bne.n	8005b8e <__ieee754_sqrt+0x17e>
 8005b6a:	3601      	adds	r6, #1
 8005b6c:	463c      	mov	r4, r7
 8005b6e:	1072      	asrs	r2, r6, #1
 8005b70:	0863      	lsrs	r3, r4, #1
 8005b72:	07f1      	lsls	r1, r6, #31
 8005b74:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8005b78:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8005b7c:	bf48      	it	mi
 8005b7e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8005b82:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8005b86:	4618      	mov	r0, r3
 8005b88:	e756      	b.n	8005a38 <__ieee754_sqrt+0x28>
 8005b8a:	4690      	mov	r8, r2
 8005b8c:	e7be      	b.n	8005b0c <__ieee754_sqrt+0xfc>
 8005b8e:	f7fa fb7d 	bl	800028c <__adddf3>
 8005b92:	e9da 8900 	ldrd	r8, r9, [sl]
 8005b96:	4602      	mov	r2, r0
 8005b98:	460b      	mov	r3, r1
 8005b9a:	4640      	mov	r0, r8
 8005b9c:	4649      	mov	r1, r9
 8005b9e:	f7fa ff9d 	bl	8000adc <__aeabi_dcmplt>
 8005ba2:	b120      	cbz	r0, 8005bae <__ieee754_sqrt+0x19e>
 8005ba4:	1ca0      	adds	r0, r4, #2
 8005ba6:	bf08      	it	eq
 8005ba8:	3601      	addeq	r6, #1
 8005baa:	3402      	adds	r4, #2
 8005bac:	e7df      	b.n	8005b6e <__ieee754_sqrt+0x15e>
 8005bae:	1c63      	adds	r3, r4, #1
 8005bb0:	f023 0401 	bic.w	r4, r3, #1
 8005bb4:	e7db      	b.n	8005b6e <__ieee754_sqrt+0x15e>
 8005bb6:	bf00      	nop
 8005bb8:	7ff00000 	.word	0x7ff00000
 8005bbc:	200000f8 	.word	0x200000f8
 8005bc0:	200000f0 	.word	0x200000f0
 8005bc4:	00000000 	.word	0x00000000

08005bc8 <__ieee754_atan2>:
 8005bc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bcc:	ec57 6b11 	vmov	r6, r7, d1
 8005bd0:	4273      	negs	r3, r6
 8005bd2:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8005d50 <__ieee754_atan2+0x188>
 8005bd6:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8005bda:	4333      	orrs	r3, r6
 8005bdc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8005be0:	4543      	cmp	r3, r8
 8005be2:	ec51 0b10 	vmov	r0, r1, d0
 8005be6:	4635      	mov	r5, r6
 8005be8:	d809      	bhi.n	8005bfe <__ieee754_atan2+0x36>
 8005bea:	4244      	negs	r4, r0
 8005bec:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005bf0:	4304      	orrs	r4, r0
 8005bf2:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8005bf6:	4544      	cmp	r4, r8
 8005bf8:	468e      	mov	lr, r1
 8005bfa:	4681      	mov	r9, r0
 8005bfc:	d907      	bls.n	8005c0e <__ieee754_atan2+0x46>
 8005bfe:	4632      	mov	r2, r6
 8005c00:	463b      	mov	r3, r7
 8005c02:	f7fa fb43 	bl	800028c <__adddf3>
 8005c06:	ec41 0b10 	vmov	d0, r0, r1
 8005c0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c0e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8005c12:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8005c16:	4334      	orrs	r4, r6
 8005c18:	d103      	bne.n	8005c22 <__ieee754_atan2+0x5a>
 8005c1a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c1e:	f7ff bd57 	b.w	80056d0 <atan>
 8005c22:	17bc      	asrs	r4, r7, #30
 8005c24:	f004 0402 	and.w	r4, r4, #2
 8005c28:	ea53 0909 	orrs.w	r9, r3, r9
 8005c2c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8005c30:	d107      	bne.n	8005c42 <__ieee754_atan2+0x7a>
 8005c32:	2c02      	cmp	r4, #2
 8005c34:	d05f      	beq.n	8005cf6 <__ieee754_atan2+0x12e>
 8005c36:	2c03      	cmp	r4, #3
 8005c38:	d1e5      	bne.n	8005c06 <__ieee754_atan2+0x3e>
 8005c3a:	a141      	add	r1, pc, #260	@ (adr r1, 8005d40 <__ieee754_atan2+0x178>)
 8005c3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c40:	e7e1      	b.n	8005c06 <__ieee754_atan2+0x3e>
 8005c42:	4315      	orrs	r5, r2
 8005c44:	d106      	bne.n	8005c54 <__ieee754_atan2+0x8c>
 8005c46:	f1be 0f00 	cmp.w	lr, #0
 8005c4a:	da5f      	bge.n	8005d0c <__ieee754_atan2+0x144>
 8005c4c:	a13e      	add	r1, pc, #248	@ (adr r1, 8005d48 <__ieee754_atan2+0x180>)
 8005c4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c52:	e7d8      	b.n	8005c06 <__ieee754_atan2+0x3e>
 8005c54:	4542      	cmp	r2, r8
 8005c56:	d10f      	bne.n	8005c78 <__ieee754_atan2+0xb0>
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	f104 34ff 	add.w	r4, r4, #4294967295
 8005c5e:	d107      	bne.n	8005c70 <__ieee754_atan2+0xa8>
 8005c60:	2c02      	cmp	r4, #2
 8005c62:	d84c      	bhi.n	8005cfe <__ieee754_atan2+0x136>
 8005c64:	4b34      	ldr	r3, [pc, #208]	@ (8005d38 <__ieee754_atan2+0x170>)
 8005c66:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005c6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005c6e:	e7ca      	b.n	8005c06 <__ieee754_atan2+0x3e>
 8005c70:	2c02      	cmp	r4, #2
 8005c72:	d848      	bhi.n	8005d06 <__ieee754_atan2+0x13e>
 8005c74:	4b31      	ldr	r3, [pc, #196]	@ (8005d3c <__ieee754_atan2+0x174>)
 8005c76:	e7f6      	b.n	8005c66 <__ieee754_atan2+0x9e>
 8005c78:	4543      	cmp	r3, r8
 8005c7a:	d0e4      	beq.n	8005c46 <__ieee754_atan2+0x7e>
 8005c7c:	1a9b      	subs	r3, r3, r2
 8005c7e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8005c82:	ea4f 5223 	mov.w	r2, r3, asr #20
 8005c86:	da1e      	bge.n	8005cc6 <__ieee754_atan2+0xfe>
 8005c88:	2f00      	cmp	r7, #0
 8005c8a:	da01      	bge.n	8005c90 <__ieee754_atan2+0xc8>
 8005c8c:	323c      	adds	r2, #60	@ 0x3c
 8005c8e:	db1e      	blt.n	8005cce <__ieee754_atan2+0x106>
 8005c90:	4632      	mov	r2, r6
 8005c92:	463b      	mov	r3, r7
 8005c94:	f7fa fdda 	bl	800084c <__aeabi_ddiv>
 8005c98:	ec41 0b10 	vmov	d0, r0, r1
 8005c9c:	f7ff feb0 	bl	8005a00 <fabs>
 8005ca0:	f7ff fd16 	bl	80056d0 <atan>
 8005ca4:	ec51 0b10 	vmov	r0, r1, d0
 8005ca8:	2c01      	cmp	r4, #1
 8005caa:	d013      	beq.n	8005cd4 <__ieee754_atan2+0x10c>
 8005cac:	2c02      	cmp	r4, #2
 8005cae:	d015      	beq.n	8005cdc <__ieee754_atan2+0x114>
 8005cb0:	2c00      	cmp	r4, #0
 8005cb2:	d0a8      	beq.n	8005c06 <__ieee754_atan2+0x3e>
 8005cb4:	a318      	add	r3, pc, #96	@ (adr r3, 8005d18 <__ieee754_atan2+0x150>)
 8005cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cba:	f7fa fae5 	bl	8000288 <__aeabi_dsub>
 8005cbe:	a318      	add	r3, pc, #96	@ (adr r3, 8005d20 <__ieee754_atan2+0x158>)
 8005cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc4:	e014      	b.n	8005cf0 <__ieee754_atan2+0x128>
 8005cc6:	a118      	add	r1, pc, #96	@ (adr r1, 8005d28 <__ieee754_atan2+0x160>)
 8005cc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ccc:	e7ec      	b.n	8005ca8 <__ieee754_atan2+0xe0>
 8005cce:	2000      	movs	r0, #0
 8005cd0:	2100      	movs	r1, #0
 8005cd2:	e7e9      	b.n	8005ca8 <__ieee754_atan2+0xe0>
 8005cd4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005cd8:	4619      	mov	r1, r3
 8005cda:	e794      	b.n	8005c06 <__ieee754_atan2+0x3e>
 8005cdc:	a30e      	add	r3, pc, #56	@ (adr r3, 8005d18 <__ieee754_atan2+0x150>)
 8005cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce2:	f7fa fad1 	bl	8000288 <__aeabi_dsub>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	460b      	mov	r3, r1
 8005cea:	a10d      	add	r1, pc, #52	@ (adr r1, 8005d20 <__ieee754_atan2+0x158>)
 8005cec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005cf0:	f7fa faca 	bl	8000288 <__aeabi_dsub>
 8005cf4:	e787      	b.n	8005c06 <__ieee754_atan2+0x3e>
 8005cf6:	a10a      	add	r1, pc, #40	@ (adr r1, 8005d20 <__ieee754_atan2+0x158>)
 8005cf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005cfc:	e783      	b.n	8005c06 <__ieee754_atan2+0x3e>
 8005cfe:	a10c      	add	r1, pc, #48	@ (adr r1, 8005d30 <__ieee754_atan2+0x168>)
 8005d00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d04:	e77f      	b.n	8005c06 <__ieee754_atan2+0x3e>
 8005d06:	2000      	movs	r0, #0
 8005d08:	2100      	movs	r1, #0
 8005d0a:	e77c      	b.n	8005c06 <__ieee754_atan2+0x3e>
 8005d0c:	a106      	add	r1, pc, #24	@ (adr r1, 8005d28 <__ieee754_atan2+0x160>)
 8005d0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d12:	e778      	b.n	8005c06 <__ieee754_atan2+0x3e>
 8005d14:	f3af 8000 	nop.w
 8005d18:	33145c07 	.word	0x33145c07
 8005d1c:	3ca1a626 	.word	0x3ca1a626
 8005d20:	54442d18 	.word	0x54442d18
 8005d24:	400921fb 	.word	0x400921fb
 8005d28:	54442d18 	.word	0x54442d18
 8005d2c:	3ff921fb 	.word	0x3ff921fb
 8005d30:	54442d18 	.word	0x54442d18
 8005d34:	3fe921fb 	.word	0x3fe921fb
 8005d38:	08005e38 	.word	0x08005e38
 8005d3c:	08005e20 	.word	0x08005e20
 8005d40:	54442d18 	.word	0x54442d18
 8005d44:	c00921fb 	.word	0xc00921fb
 8005d48:	54442d18 	.word	0x54442d18
 8005d4c:	bff921fb 	.word	0xbff921fb
 8005d50:	7ff00000 	.word	0x7ff00000

08005d54 <_init>:
 8005d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d56:	bf00      	nop
 8005d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d5a:	bc08      	pop	{r3}
 8005d5c:	469e      	mov	lr, r3
 8005d5e:	4770      	bx	lr

08005d60 <_fini>:
 8005d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d62:	bf00      	nop
 8005d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d66:	bc08      	pop	{r3}
 8005d68:	469e      	mov	lr, r3
 8005d6a:	4770      	bx	lr
