
test_uart_dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063c8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b8  08006558  08006558  00007558  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006910  08006910  000081ec  2**0
                  CONTENTS
  4 .ARM          00000008  08006910  08006910  00007910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006918  08006918  000081ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006918  08006918  00007918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800691c  0800691c  0000791c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  08006920  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000081ec  2**0
                  CONTENTS
 10 .bss          00000254  200001f0  200001f0  000081f0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000444  20000444  000081f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000081ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008f50  00000000  00000000  0000821c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b2b  00000000  00000000  0001116c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000800  00000000  00000000  00012c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000616  00000000  00000000  00013498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021c1a  00000000  00000000  00013aae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b1ce  00000000  00000000  000356c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6a84  00000000  00000000  00040896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010731a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003118  00000000  00000000  00107360  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  0010a478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006540 	.word	0x08006540

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	08006540 	.word	0x08006540

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f3e:	f000 fe2d 	bl	8001b9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f42:	f000 f855 	bl	8000ff0 <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */

  Sensor_init();
 8000f46:	f000 fa4b 	bl	80013e0 <Sensor_init>

  Lcd_init();
 8000f4a:	f000 fca9 	bl	80018a0 <Lcd_init>

  Lcd_clear();
 8000f4e:	f000 fd83 	bl	8001a58 <Lcd_clear>
  Lcd_cursor(0,0);
 8000f52:	2100      	movs	r1, #0
 8000f54:	2000      	movs	r0, #0
 8000f56:	f000 fd65 	bl	8001a24 <Lcd_cursor>
  Lcd_string("Starting...");
 8000f5a:	481e      	ldr	r0, [pc, #120]	@ (8000fd4 <main+0x9c>)
 8000f5c:	f000 fd44 	bl	80019e8 <Lcd_string>

  HAL_Delay(500);
 8000f60:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f64:	f000 fe8c 	bl	8001c80 <HAL_Delay>

  Lcd_clear();
 8000f68:	f000 fd76 	bl	8001a58 <Lcd_clear>

  HAL_UART_Receive_DMA(&huart2, raw_data, data_lgth);
 8000f6c:	2214      	movs	r2, #20
 8000f6e:	491a      	ldr	r1, [pc, #104]	@ (8000fd8 <main+0xa0>)
 8000f70:	481a      	ldr	r0, [pc, #104]	@ (8000fdc <main+0xa4>)
 8000f72:	f001 ff34 	bl	8002dde <HAL_UART_Receive_DMA>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	Decode_IMU_Data(tram_value);
 8000f76:	481a      	ldr	r0, [pc, #104]	@ (8000fe0 <main+0xa8>)
 8000f78:	f000 fa98 	bl	80014ac <Decode_IMU_Data>

	Lcd_cursor(1, 0);
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	2001      	movs	r0, #1
 8000f80:	f000 fd50 	bl	8001a24 <Lcd_cursor>
	Lcd_float(gyro[1]);
 8000f84:	4b17      	ldr	r3, [pc, #92]	@ (8000fe4 <main+0xac>)
 8000f86:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000f8a:	4610      	mov	r0, r2
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f7ff fe0b 	bl	8000ba8 <__aeabi_d2f>
 8000f92:	4603      	mov	r3, r0
 8000f94:	ee00 3a10 	vmov	s0, r3
 8000f98:	f000 fd08 	bl	80019ac <Lcd_float>

	Lcd_cursor(0, 0);
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	f000 fd40 	bl	8001a24 <Lcd_cursor>
	for(int i = 0 ; i < 11 ; i++){
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	607b      	str	r3, [r7, #4]
 8000fa8:	e00c      	b.n	8000fc4 <main+0x8c>

	  Lcd_int(tram_value[i]);
 8000faa:	4a0d      	ldr	r2, [pc, #52]	@ (8000fe0 <main+0xa8>)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4413      	add	r3, r2
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 fce4 	bl	8001980 <Lcd_int>
	  Lcd_string(" ");
 8000fb8:	480b      	ldr	r0, [pc, #44]	@ (8000fe8 <main+0xb0>)
 8000fba:	f000 fd15 	bl	80019e8 <Lcd_string>
	for(int i = 0 ; i < 11 ; i++){
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2b0a      	cmp	r3, #10
 8000fc8:	ddef      	ble.n	8000faa <main+0x72>
	}
	Lcd_string("           ");
 8000fca:	4808      	ldr	r0, [pc, #32]	@ (8000fec <main+0xb4>)
 8000fcc:	f000 fd0c 	bl	80019e8 <Lcd_string>
	Decode_IMU_Data(tram_value);
 8000fd0:	e7d1      	b.n	8000f76 <main+0x3e>
 8000fd2:	bf00      	nop
 8000fd4:	08006558 	.word	0x08006558
 8000fd8:	20000218 	.word	0x20000218
 8000fdc:	20000230 	.word	0x20000230
 8000fe0:	2000020c 	.word	0x2000020c
 8000fe4:	20000290 	.word	0x20000290
 8000fe8:	08006564 	.word	0x08006564
 8000fec:	08006568 	.word	0x08006568

08000ff0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b094      	sub	sp, #80	@ 0x50
 8000ff4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ff6:	f107 0320 	add.w	r3, r7, #32
 8000ffa:	2230      	movs	r2, #48	@ 0x30
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4618      	mov	r0, r3
 8001000:	f003 f9d5 	bl	80043ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001004:	f107 030c 	add.w	r3, r7, #12
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001014:	2300      	movs	r3, #0
 8001016:	60bb      	str	r3, [r7, #8]
 8001018:	4b22      	ldr	r3, [pc, #136]	@ (80010a4 <SystemClock_Config+0xb4>)
 800101a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101c:	4a21      	ldr	r2, [pc, #132]	@ (80010a4 <SystemClock_Config+0xb4>)
 800101e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001022:	6413      	str	r3, [r2, #64]	@ 0x40
 8001024:	4b1f      	ldr	r3, [pc, #124]	@ (80010a4 <SystemClock_Config+0xb4>)
 8001026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001028:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800102c:	60bb      	str	r3, [r7, #8]
 800102e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001030:	2300      	movs	r3, #0
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	4b1c      	ldr	r3, [pc, #112]	@ (80010a8 <SystemClock_Config+0xb8>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a1b      	ldr	r2, [pc, #108]	@ (80010a8 <SystemClock_Config+0xb8>)
 800103a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800103e:	6013      	str	r3, [r2, #0]
 8001040:	4b19      	ldr	r3, [pc, #100]	@ (80010a8 <SystemClock_Config+0xb8>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001048:	607b      	str	r3, [r7, #4]
 800104a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800104c:	2302      	movs	r3, #2
 800104e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001050:	2301      	movs	r3, #1
 8001052:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001054:	2310      	movs	r3, #16
 8001056:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001058:	2300      	movs	r3, #0
 800105a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800105c:	f107 0320 	add.w	r3, r7, #32
 8001060:	4618      	mov	r0, r3
 8001062:	f001 f97f 	bl	8002364 <HAL_RCC_OscConfig>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800106c:	f000 f858 	bl	8001120 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001070:	230f      	movs	r3, #15
 8001072:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001074:	2300      	movs	r3, #0
 8001076:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800107c:	2300      	movs	r3, #0
 800107e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001080:	2300      	movs	r3, #0
 8001082:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001084:	f107 030c 	add.w	r3, r7, #12
 8001088:	2100      	movs	r1, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f001 fbe2 	bl	8002854 <HAL_RCC_ClockConfig>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001096:	f000 f843 	bl	8001120 <Error_Handler>
  }
}
 800109a:	bf00      	nop
 800109c:	3750      	adds	r7, #80	@ 0x50
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40023800 	.word	0x40023800
 80010a8:	40007000 	.word	0x40007000

080010ac <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]

	uint8_t state = 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	73fb      	strb	r3, [r7, #15]

	for(int i = 0 ; i < data_lgth ; i++){
 80010b8:	2300      	movs	r3, #0
 80010ba:	60bb      	str	r3, [r7, #8]
 80010bc:	e021      	b.n	8001102 <HAL_UART_RxCpltCallback+0x56>

		  //if(raw_data[i] == 0x55 && raw_data[i+1] == 0x52){
		  if(raw_data[i] == 0x55 && raw_data[i+1] == 0x52){
 80010be:	4a16      	ldr	r2, [pc, #88]	@ (8001118 <HAL_UART_RxCpltCallback+0x6c>)
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	4413      	add	r3, r2
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2b55      	cmp	r3, #85	@ 0x55
 80010c8:	d107      	bne.n	80010da <HAL_UART_RxCpltCallback+0x2e>
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	3301      	adds	r3, #1
 80010ce:	4a12      	ldr	r2, [pc, #72]	@ (8001118 <HAL_UART_RxCpltCallback+0x6c>)
 80010d0:	5cd3      	ldrb	r3, [r2, r3]
 80010d2:	2b52      	cmp	r3, #82	@ 0x52
 80010d4:	d101      	bne.n	80010da <HAL_UART_RxCpltCallback+0x2e>
			  state = i;
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	73fb      	strb	r3, [r7, #15]
		  }

		  if(state > 0 && i <= state + 11){
 80010da:	7bfb      	ldrb	r3, [r7, #15]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d00d      	beq.n	80010fc <HAL_UART_RxCpltCallback+0x50>
 80010e0:	7bfb      	ldrb	r3, [r7, #15]
 80010e2:	330b      	adds	r3, #11
 80010e4:	68ba      	ldr	r2, [r7, #8]
 80010e6:	429a      	cmp	r2, r3
 80010e8:	dc08      	bgt.n	80010fc <HAL_UART_RxCpltCallback+0x50>

			  tram_value[i - state] = raw_data[i];
 80010ea:	7bfb      	ldrb	r3, [r7, #15]
 80010ec:	68ba      	ldr	r2, [r7, #8]
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	4909      	ldr	r1, [pc, #36]	@ (8001118 <HAL_UART_RxCpltCallback+0x6c>)
 80010f2:	68ba      	ldr	r2, [r7, #8]
 80010f4:	440a      	add	r2, r1
 80010f6:	7811      	ldrb	r1, [r2, #0]
 80010f8:	4a08      	ldr	r2, [pc, #32]	@ (800111c <HAL_UART_RxCpltCallback+0x70>)
 80010fa:	54d1      	strb	r1, [r2, r3]
	for(int i = 0 ; i < data_lgth ; i++){
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	3301      	adds	r3, #1
 8001100:	60bb      	str	r3, [r7, #8]
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	2b13      	cmp	r3, #19
 8001106:	ddda      	ble.n	80010be <HAL_UART_RxCpltCallback+0x12>

		  }
	  }

}
 8001108:	bf00      	nop
 800110a:	bf00      	nop
 800110c:	3714      	adds	r7, #20
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	20000218 	.word	0x20000218
 800111c:	2000020c 	.word	0x2000020c

08001120 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001124:	b672      	cpsid	i
}
 8001126:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001128:	bf00      	nop
 800112a:	e7fd      	b.n	8001128 <Error_Handler+0x8>

0800112c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	607b      	str	r3, [r7, #4]
 8001136:	4b10      	ldr	r3, [pc, #64]	@ (8001178 <HAL_MspInit+0x4c>)
 8001138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800113a:	4a0f      	ldr	r2, [pc, #60]	@ (8001178 <HAL_MspInit+0x4c>)
 800113c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001140:	6453      	str	r3, [r2, #68]	@ 0x44
 8001142:	4b0d      	ldr	r3, [pc, #52]	@ (8001178 <HAL_MspInit+0x4c>)
 8001144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001146:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	603b      	str	r3, [r7, #0]
 8001152:	4b09      	ldr	r3, [pc, #36]	@ (8001178 <HAL_MspInit+0x4c>)
 8001154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001156:	4a08      	ldr	r2, [pc, #32]	@ (8001178 <HAL_MspInit+0x4c>)
 8001158:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800115c:	6413      	str	r3, [r2, #64]	@ 0x40
 800115e:	4b06      	ldr	r3, [pc, #24]	@ (8001178 <HAL_MspInit+0x4c>)
 8001160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001162:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001166:	603b      	str	r3, [r7, #0]
 8001168:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	40023800 	.word	0x40023800

0800117c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001180:	bf00      	nop
 8001182:	e7fd      	b.n	8001180 <NMI_Handler+0x4>

08001184 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001188:	bf00      	nop
 800118a:	e7fd      	b.n	8001188 <HardFault_Handler+0x4>

0800118c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001190:	bf00      	nop
 8001192:	e7fd      	b.n	8001190 <MemManage_Handler+0x4>

08001194 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001198:	bf00      	nop
 800119a:	e7fd      	b.n	8001198 <BusFault_Handler+0x4>

0800119c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a0:	bf00      	nop
 80011a2:	e7fd      	b.n	80011a0 <UsageFault_Handler+0x4>

080011a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011d2:	f000 fd35 	bl	8001c40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}

080011da <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011da:	b480      	push	{r7}
 80011dc:	af00      	add	r7, sp, #0
  return 1;
 80011de:	2301      	movs	r3, #1
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr

080011ea <_kill>:

int _kill(int pid, int sig)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
 80011f2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80011f4:	f003 f92e 	bl	8004454 <__errno>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2216      	movs	r2, #22
 80011fc:	601a      	str	r2, [r3, #0]
  return -1;
 80011fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001202:	4618      	mov	r0, r3
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <_exit>:

void _exit (int status)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b082      	sub	sp, #8
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001212:	f04f 31ff 	mov.w	r1, #4294967295
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff ffe7 	bl	80011ea <_kill>
  while (1) {}    /* Make sure we hang here */
 800121c:	bf00      	nop
 800121e:	e7fd      	b.n	800121c <_exit+0x12>

08001220 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]
 8001230:	e00a      	b.n	8001248 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001232:	f3af 8000 	nop.w
 8001236:	4601      	mov	r1, r0
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	1c5a      	adds	r2, r3, #1
 800123c:	60ba      	str	r2, [r7, #8]
 800123e:	b2ca      	uxtb	r2, r1
 8001240:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	3301      	adds	r3, #1
 8001246:	617b      	str	r3, [r7, #20]
 8001248:	697a      	ldr	r2, [r7, #20]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	429a      	cmp	r2, r3
 800124e:	dbf0      	blt.n	8001232 <_read+0x12>
  }

  return len;
 8001250:	687b      	ldr	r3, [r7, #4]
}
 8001252:	4618      	mov	r0, r3
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b086      	sub	sp, #24
 800125e:	af00      	add	r7, sp, #0
 8001260:	60f8      	str	r0, [r7, #12]
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001266:	2300      	movs	r3, #0
 8001268:	617b      	str	r3, [r7, #20]
 800126a:	e009      	b.n	8001280 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	1c5a      	adds	r2, r3, #1
 8001270:	60ba      	str	r2, [r7, #8]
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	4618      	mov	r0, r3
 8001276:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	3301      	adds	r3, #1
 800127e:	617b      	str	r3, [r7, #20]
 8001280:	697a      	ldr	r2, [r7, #20]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	429a      	cmp	r2, r3
 8001286:	dbf1      	blt.n	800126c <_write+0x12>
  }
  return len;
 8001288:	687b      	ldr	r3, [r7, #4]
}
 800128a:	4618      	mov	r0, r3
 800128c:	3718      	adds	r7, #24
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <_close>:

int _close(int file)
{
 8001292:	b480      	push	{r7}
 8001294:	b083      	sub	sp, #12
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800129a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800129e:	4618      	mov	r0, r3
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr

080012aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012aa:	b480      	push	{r7}
 80012ac:	b083      	sub	sp, #12
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
 80012b2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012ba:	605a      	str	r2, [r3, #4]
  return 0;
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <_isatty>:

int _isatty(int file)
{
 80012ca:	b480      	push	{r7}
 80012cc:	b083      	sub	sp, #12
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012d2:	2301      	movs	r3, #1
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3714      	adds	r7, #20
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
	...

080012fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001304:	4a14      	ldr	r2, [pc, #80]	@ (8001358 <_sbrk+0x5c>)
 8001306:	4b15      	ldr	r3, [pc, #84]	@ (800135c <_sbrk+0x60>)
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001310:	4b13      	ldr	r3, [pc, #76]	@ (8001360 <_sbrk+0x64>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d102      	bne.n	800131e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001318:	4b11      	ldr	r3, [pc, #68]	@ (8001360 <_sbrk+0x64>)
 800131a:	4a12      	ldr	r2, [pc, #72]	@ (8001364 <_sbrk+0x68>)
 800131c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800131e:	4b10      	ldr	r3, [pc, #64]	@ (8001360 <_sbrk+0x64>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4413      	add	r3, r2
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	429a      	cmp	r2, r3
 800132a:	d207      	bcs.n	800133c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800132c:	f003 f892 	bl	8004454 <__errno>
 8001330:	4603      	mov	r3, r0
 8001332:	220c      	movs	r2, #12
 8001334:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001336:	f04f 33ff 	mov.w	r3, #4294967295
 800133a:	e009      	b.n	8001350 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800133c:	4b08      	ldr	r3, [pc, #32]	@ (8001360 <_sbrk+0x64>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001342:	4b07      	ldr	r3, [pc, #28]	@ (8001360 <_sbrk+0x64>)
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4413      	add	r3, r2
 800134a:	4a05      	ldr	r2, [pc, #20]	@ (8001360 <_sbrk+0x64>)
 800134c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800134e:	68fb      	ldr	r3, [r7, #12]
}
 8001350:	4618      	mov	r0, r3
 8001352:	3718      	adds	r7, #24
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20020000 	.word	0x20020000
 800135c:	00000400 	.word	0x00000400
 8001360:	2000022c 	.word	0x2000022c
 8001364:	20000448 	.word	0x20000448

08001368 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800136c:	4b06      	ldr	r3, [pc, #24]	@ (8001388 <SystemInit+0x20>)
 800136e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001372:	4a05      	ldr	r2, [pc, #20]	@ (8001388 <SystemInit+0x20>)
 8001374:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001378:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800138c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013c4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001390:	f7ff ffea 	bl	8001368 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001394:	480c      	ldr	r0, [pc, #48]	@ (80013c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001396:	490d      	ldr	r1, [pc, #52]	@ (80013cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001398:	4a0d      	ldr	r2, [pc, #52]	@ (80013d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800139a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800139c:	e002      	b.n	80013a4 <LoopCopyDataInit>

0800139e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800139e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013a2:	3304      	adds	r3, #4

080013a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013a8:	d3f9      	bcc.n	800139e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013aa:	4a0a      	ldr	r2, [pc, #40]	@ (80013d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013ac:	4c0a      	ldr	r4, [pc, #40]	@ (80013d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013b0:	e001      	b.n	80013b6 <LoopFillZerobss>

080013b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013b4:	3204      	adds	r2, #4

080013b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013b8:	d3fb      	bcc.n	80013b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013ba:	f003 f851 	bl	8004460 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013be:	f7ff fdbb 	bl	8000f38 <main>
  bx  lr    
 80013c2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80013c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013cc:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80013d0:	08006920 	.word	0x08006920
  ldr r2, =_sbss
 80013d4:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80013d8:	20000444 	.word	0x20000444

080013dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013dc:	e7fe      	b.n	80013dc <ADC_IRQHandler>
	...

080013e0 <Sensor_init>:
double gyro_offset[3] = {0};
volatile int _GyroValueUpdated = 0;
volatile int _IsGyroIntialized = 0;

// Fonctions
void Sensor_init() {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	60bb      	str	r3, [r7, #8]
 80013ea:	4b2c      	ldr	r3, [pc, #176]	@ (800149c <Sensor_init+0xbc>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ee:	4a2b      	ldr	r2, [pc, #172]	@ (800149c <Sensor_init+0xbc>)
 80013f0:	f043 0308 	orr.w	r3, r3, #8
 80013f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013f6:	4b29      	ldr	r3, [pc, #164]	@ (800149c <Sensor_init+0xbc>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fa:	f003 0308 	and.w	r3, r3, #8
 80013fe:	60bb      	str	r3, [r7, #8]
 8001400:	68bb      	ldr	r3, [r7, #8]

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	607b      	str	r3, [r7, #4]
 8001406:	4b25      	ldr	r3, [pc, #148]	@ (800149c <Sensor_init+0xbc>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140a:	4a24      	ldr	r2, [pc, #144]	@ (800149c <Sensor_init+0xbc>)
 800140c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001410:	6313      	str	r3, [r2, #48]	@ 0x30
 8001412:	4b22      	ldr	r3, [pc, #136]	@ (800149c <Sensor_init+0xbc>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001416:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800141a:	607b      	str	r3, [r7, #4]
 800141c:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800141e:	2200      	movs	r2, #0
 8001420:	2100      	movs	r1, #0
 8001422:	2010      	movs	r0, #16
 8001424:	f000 fd2b 	bl	8001e7e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001428:	2010      	movs	r0, #16
 800142a:	f000 fd44 	bl	8001eb6 <HAL_NVIC_EnableIRQ>

	/* UART2 configuration */
	huart2.Instance = USART2;
 800142e:	4b1c      	ldr	r3, [pc, #112]	@ (80014a0 <Sensor_init+0xc0>)
 8001430:	4a1c      	ldr	r2, [pc, #112]	@ (80014a4 <Sensor_init+0xc4>)
 8001432:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001434:	4b1a      	ldr	r3, [pc, #104]	@ (80014a0 <Sensor_init+0xc0>)
 8001436:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800143a:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800143c:	4b18      	ldr	r3, [pc, #96]	@ (80014a0 <Sensor_init+0xc0>)
 800143e:	2200      	movs	r2, #0
 8001440:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001442:	4b17      	ldr	r3, [pc, #92]	@ (80014a0 <Sensor_init+0xc0>)
 8001444:	2200      	movs	r2, #0
 8001446:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001448:	4b15      	ldr	r3, [pc, #84]	@ (80014a0 <Sensor_init+0xc0>)
 800144a:	2200      	movs	r2, #0
 800144c:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800144e:	4b14      	ldr	r3, [pc, #80]	@ (80014a0 <Sensor_init+0xc0>)
 8001450:	220c      	movs	r2, #12
 8001452:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001454:	4b12      	ldr	r3, [pc, #72]	@ (80014a0 <Sensor_init+0xc0>)
 8001456:	2200      	movs	r2, #0
 8001458:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800145a:	4b11      	ldr	r3, [pc, #68]	@ (80014a0 <Sensor_init+0xc0>)
 800145c:	2200      	movs	r2, #0
 800145e:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001460:	480f      	ldr	r0, [pc, #60]	@ (80014a0 <Sensor_init+0xc0>)
 8001462:	f001 fbd7 	bl	8002c14 <HAL_UART_Init>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <Sensor_init+0x90>
		Imu_Error_Handler();
 800146c:	f000 f9e4 	bl	8001838 <Imu_Error_Handler>
	}

    // Send initial commands to IMU
    char gyro_reset[3] = {0xFF, 0xAA, 0x52}; // Angle initialization Z-axis to zero
 8001470:	4a0d      	ldr	r2, [pc, #52]	@ (80014a8 <Sensor_init+0xc8>)
 8001472:	f107 030c 	add.w	r3, r7, #12
 8001476:	6812      	ldr	r2, [r2, #0]
 8001478:	4611      	mov	r1, r2
 800147a:	8019      	strh	r1, [r3, #0]
 800147c:	3302      	adds	r3, #2
 800147e:	0c12      	lsrs	r2, r2, #16
 8001480:	701a      	strb	r2, [r3, #0]

    HAL_UART_Transmit(&huart2, (uint8_t *)gyro_reset, sizeof(gyro_reset), HAL_MAX_DELAY);
 8001482:	f107 010c 	add.w	r1, r7, #12
 8001486:	f04f 33ff 	mov.w	r3, #4294967295
 800148a:	2203      	movs	r2, #3
 800148c:	4804      	ldr	r0, [pc, #16]	@ (80014a0 <Sensor_init+0xc0>)
 800148e:	f001 fc1b 	bl	8002cc8 <HAL_UART_Transmit>

}
 8001492:	bf00      	nop
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40023800 	.word	0x40023800
 80014a0:	20000230 	.word	0x20000230
 80014a4:	40004400 	.word	0x40004400
 80014a8:	08006574 	.word	0x08006574

080014ac <Decode_IMU_Data>:
        // Enable reception again
        HAL_UART_Receive_IT(&huart2, (uint8_t*)&IMU_Raw_Data_Buffer[IMU_Data_Buffer_counter], 1);
    }
}*/

void Decode_IMU_Data(uint8_t IMU_Raw_Data_Buffer[11]) {
 80014ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014b0:	b088      	sub	sp, #32
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
    if(IMU_Raw_Data_Buffer[0] == 0x55) {
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	2b55      	cmp	r3, #85	@ 0x55
 80014bc:	f040 81a3 	bne.w	8001806 <Decode_IMU_Data+0x35a>
        int16_t temp_a[3] = {0, 0, 0};
 80014c0:	2300      	movs	r3, #0
 80014c2:	833b      	strh	r3, [r7, #24]
 80014c4:	2300      	movs	r3, #0
 80014c6:	837b      	strh	r3, [r7, #26]
 80014c8:	2300      	movs	r3, #0
 80014ca:	83bb      	strh	r3, [r7, #28]
        int16_t temp_w[3] = {0, 0, 0};
 80014cc:	2300      	movs	r3, #0
 80014ce:	823b      	strh	r3, [r7, #16]
 80014d0:	2300      	movs	r3, #0
 80014d2:	827b      	strh	r3, [r7, #18]
 80014d4:	2300      	movs	r3, #0
 80014d6:	82bb      	strh	r3, [r7, #20]
        int16_t temp_angle[3] = {0, 0, 0};
 80014d8:	2300      	movs	r3, #0
 80014da:	813b      	strh	r3, [r7, #8]
 80014dc:	2300      	movs	r3, #0
 80014de:	817b      	strh	r3, [r7, #10]
 80014e0:	2300      	movs	r3, #0
 80014e2:	81bb      	strh	r3, [r7, #12]

        switch(IMU_Raw_Data_Buffer[1]) {
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	3301      	adds	r3, #1
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	2b53      	cmp	r3, #83	@ 0x53
 80014ec:	f000 8109 	beq.w	8001702 <Decode_IMU_Data+0x256>
 80014f0:	2b53      	cmp	r3, #83	@ 0x53
 80014f2:	f300 8188 	bgt.w	8001806 <Decode_IMU_Data+0x35a>
 80014f6:	2b51      	cmp	r3, #81	@ 0x51
 80014f8:	d002      	beq.n	8001500 <Decode_IMU_Data+0x54>
 80014fa:	2b52      	cmp	r3, #82	@ 0x52
 80014fc:	d06d      	beq.n	80015da <Decode_IMU_Data+0x12e>
                angle[1] = -(((double)temp_angle[1]) * 180.0 / 32768.0) + 90.0;
                angle[2] = -(((double)temp_angle[2]) * 180.0 / 32768.0) + 90.0;
                break;
        }
    }
}
 80014fe:	e182      	b.n	8001806 <Decode_IMU_Data+0x35a>
                temp_a[0] = ((int16_t)IMU_Raw_Data_Buffer[3] << 8) | (int16_t)IMU_Raw_Data_Buffer[2];
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3303      	adds	r3, #3
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	021b      	lsls	r3, r3, #8
 8001508:	b21a      	sxth	r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	3302      	adds	r3, #2
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	b21b      	sxth	r3, r3
 8001512:	4313      	orrs	r3, r2
 8001514:	b21b      	sxth	r3, r3
 8001516:	833b      	strh	r3, [r7, #24]
                temp_a[1] = ((int16_t)IMU_Raw_Data_Buffer[5] << 8) | (int16_t)IMU_Raw_Data_Buffer[4];
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3305      	adds	r3, #5
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	021b      	lsls	r3, r3, #8
 8001520:	b21a      	sxth	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	3304      	adds	r3, #4
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	b21b      	sxth	r3, r3
 800152a:	4313      	orrs	r3, r2
 800152c:	b21b      	sxth	r3, r3
 800152e:	837b      	strh	r3, [r7, #26]
                temp_a[2] = ((int16_t)IMU_Raw_Data_Buffer[7] << 8) | (int16_t)IMU_Raw_Data_Buffer[6];
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3307      	adds	r3, #7
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	021b      	lsls	r3, r3, #8
 8001538:	b21a      	sxth	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	3306      	adds	r3, #6
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	b21b      	sxth	r3, r3
 8001542:	4313      	orrs	r3, r2
 8001544:	b21b      	sxth	r3, r3
 8001546:	83bb      	strh	r3, [r7, #28]
                acc[0] = ((double)temp_a[0]) * 16 / 32768.0;
 8001548:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800154c:	4618      	mov	r0, r3
 800154e:	f7fe ffe9 	bl	8000524 <__aeabi_i2d>
 8001552:	f04f 0200 	mov.w	r2, #0
 8001556:	4bae      	ldr	r3, [pc, #696]	@ (8001810 <Decode_IMU_Data+0x364>)
 8001558:	f7ff f84e 	bl	80005f8 <__aeabi_dmul>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4610      	mov	r0, r2
 8001562:	4619      	mov	r1, r3
 8001564:	f04f 0200 	mov.w	r2, #0
 8001568:	4baa      	ldr	r3, [pc, #680]	@ (8001814 <Decode_IMU_Data+0x368>)
 800156a:	f7ff f96f 	bl	800084c <__aeabi_ddiv>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	49a9      	ldr	r1, [pc, #676]	@ (8001818 <Decode_IMU_Data+0x36c>)
 8001574:	e9c1 2300 	strd	r2, r3, [r1]
                acc[1] = ((double)temp_a[1]) * 16 / 32768.0;
 8001578:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800157c:	4618      	mov	r0, r3
 800157e:	f7fe ffd1 	bl	8000524 <__aeabi_i2d>
 8001582:	f04f 0200 	mov.w	r2, #0
 8001586:	4ba2      	ldr	r3, [pc, #648]	@ (8001810 <Decode_IMU_Data+0x364>)
 8001588:	f7ff f836 	bl	80005f8 <__aeabi_dmul>
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	4610      	mov	r0, r2
 8001592:	4619      	mov	r1, r3
 8001594:	f04f 0200 	mov.w	r2, #0
 8001598:	4b9e      	ldr	r3, [pc, #632]	@ (8001814 <Decode_IMU_Data+0x368>)
 800159a:	f7ff f957 	bl	800084c <__aeabi_ddiv>
 800159e:	4602      	mov	r2, r0
 80015a0:	460b      	mov	r3, r1
 80015a2:	499d      	ldr	r1, [pc, #628]	@ (8001818 <Decode_IMU_Data+0x36c>)
 80015a4:	e9c1 2302 	strd	r2, r3, [r1, #8]
                acc[2] = ((double)temp_a[2]) * 16 / 32768.0;
 80015a8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7fe ffb9 	bl	8000524 <__aeabi_i2d>
 80015b2:	f04f 0200 	mov.w	r2, #0
 80015b6:	4b96      	ldr	r3, [pc, #600]	@ (8001810 <Decode_IMU_Data+0x364>)
 80015b8:	f7ff f81e 	bl	80005f8 <__aeabi_dmul>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	4610      	mov	r0, r2
 80015c2:	4619      	mov	r1, r3
 80015c4:	f04f 0200 	mov.w	r2, #0
 80015c8:	4b92      	ldr	r3, [pc, #584]	@ (8001814 <Decode_IMU_Data+0x368>)
 80015ca:	f7ff f93f 	bl	800084c <__aeabi_ddiv>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	4991      	ldr	r1, [pc, #580]	@ (8001818 <Decode_IMU_Data+0x36c>)
 80015d4:	e9c1 2304 	strd	r2, r3, [r1, #16]
                break;
 80015d8:	e115      	b.n	8001806 <Decode_IMU_Data+0x35a>
                temp_w[0] = ((int16_t)IMU_Raw_Data_Buffer[3] << 8) | (int16_t)IMU_Raw_Data_Buffer[2];
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	3303      	adds	r3, #3
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	021b      	lsls	r3, r3, #8
 80015e2:	b21a      	sxth	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3302      	adds	r3, #2
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	b21b      	sxth	r3, r3
 80015ec:	4313      	orrs	r3, r2
 80015ee:	b21b      	sxth	r3, r3
 80015f0:	823b      	strh	r3, [r7, #16]
                temp_w[1] = ((int16_t)IMU_Raw_Data_Buffer[5] << 8) | (int16_t)IMU_Raw_Data_Buffer[4];
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	3305      	adds	r3, #5
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	021b      	lsls	r3, r3, #8
 80015fa:	b21a      	sxth	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3304      	adds	r3, #4
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	b21b      	sxth	r3, r3
 8001604:	4313      	orrs	r3, r2
 8001606:	b21b      	sxth	r3, r3
 8001608:	827b      	strh	r3, [r7, #18]
                temp_w[2] = ((int16_t)IMU_Raw_Data_Buffer[7] << 8) | (int16_t)IMU_Raw_Data_Buffer[6];
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	3307      	adds	r3, #7
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	021b      	lsls	r3, r3, #8
 8001612:	b21a      	sxth	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3306      	adds	r3, #6
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	b21b      	sxth	r3, r3
 800161c:	4313      	orrs	r3, r2
 800161e:	b21b      	sxth	r3, r3
 8001620:	82bb      	strh	r3, [r7, #20]
                gyro[0] = -(((double)temp_w[0]) * 2000.0 / 32768.0) - gyro_offset[0];
 8001622:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe ff7c 	bl	8000524 <__aeabi_i2d>
 800162c:	f04f 0200 	mov.w	r2, #0
 8001630:	4b7a      	ldr	r3, [pc, #488]	@ (800181c <Decode_IMU_Data+0x370>)
 8001632:	f7fe ffe1 	bl	80005f8 <__aeabi_dmul>
 8001636:	4602      	mov	r2, r0
 8001638:	460b      	mov	r3, r1
 800163a:	4610      	mov	r0, r2
 800163c:	4619      	mov	r1, r3
 800163e:	f04f 0200 	mov.w	r2, #0
 8001642:	4b74      	ldr	r3, [pc, #464]	@ (8001814 <Decode_IMU_Data+0x368>)
 8001644:	f7ff f902 	bl	800084c <__aeabi_ddiv>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	4692      	mov	sl, r2
 800164e:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
 8001652:	4b73      	ldr	r3, [pc, #460]	@ (8001820 <Decode_IMU_Data+0x374>)
 8001654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001658:	4650      	mov	r0, sl
 800165a:	4659      	mov	r1, fp
 800165c:	f7fe fe14 	bl	8000288 <__aeabi_dsub>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	496f      	ldr	r1, [pc, #444]	@ (8001824 <Decode_IMU_Data+0x378>)
 8001666:	e9c1 2300 	strd	r2, r3, [r1]
                gyro[1] = -(((double)temp_w[1]) * 2000.0 / 32768.0) - gyro_offset[1];
 800166a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800166e:	4618      	mov	r0, r3
 8001670:	f7fe ff58 	bl	8000524 <__aeabi_i2d>
 8001674:	f04f 0200 	mov.w	r2, #0
 8001678:	4b68      	ldr	r3, [pc, #416]	@ (800181c <Decode_IMU_Data+0x370>)
 800167a:	f7fe ffbd 	bl	80005f8 <__aeabi_dmul>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	4610      	mov	r0, r2
 8001684:	4619      	mov	r1, r3
 8001686:	f04f 0200 	mov.w	r2, #0
 800168a:	4b62      	ldr	r3, [pc, #392]	@ (8001814 <Decode_IMU_Data+0x368>)
 800168c:	f7ff f8de 	bl	800084c <__aeabi_ddiv>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	4690      	mov	r8, r2
 8001696:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 800169a:	4b61      	ldr	r3, [pc, #388]	@ (8001820 <Decode_IMU_Data+0x374>)
 800169c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80016a0:	4640      	mov	r0, r8
 80016a2:	4649      	mov	r1, r9
 80016a4:	f7fe fdf0 	bl	8000288 <__aeabi_dsub>
 80016a8:	4602      	mov	r2, r0
 80016aa:	460b      	mov	r3, r1
 80016ac:	495d      	ldr	r1, [pc, #372]	@ (8001824 <Decode_IMU_Data+0x378>)
 80016ae:	e9c1 2302 	strd	r2, r3, [r1, #8]
                gyro[2] = -(((double)temp_w[2]) * 2000.0 / 32768.0) - gyro_offset[2];
 80016b2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7fe ff34 	bl	8000524 <__aeabi_i2d>
 80016bc:	f04f 0200 	mov.w	r2, #0
 80016c0:	4b56      	ldr	r3, [pc, #344]	@ (800181c <Decode_IMU_Data+0x370>)
 80016c2:	f7fe ff99 	bl	80005f8 <__aeabi_dmul>
 80016c6:	4602      	mov	r2, r0
 80016c8:	460b      	mov	r3, r1
 80016ca:	4610      	mov	r0, r2
 80016cc:	4619      	mov	r1, r3
 80016ce:	f04f 0200 	mov.w	r2, #0
 80016d2:	4b50      	ldr	r3, [pc, #320]	@ (8001814 <Decode_IMU_Data+0x368>)
 80016d4:	f7ff f8ba 	bl	800084c <__aeabi_ddiv>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	4614      	mov	r4, r2
 80016de:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80016e2:	4b4f      	ldr	r3, [pc, #316]	@ (8001820 <Decode_IMU_Data+0x374>)
 80016e4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80016e8:	4620      	mov	r0, r4
 80016ea:	4629      	mov	r1, r5
 80016ec:	f7fe fdcc 	bl	8000288 <__aeabi_dsub>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	494b      	ldr	r1, [pc, #300]	@ (8001824 <Decode_IMU_Data+0x378>)
 80016f6:	e9c1 2304 	strd	r2, r3, [r1, #16]
                _GyroValueUpdated = 1;
 80016fa:	4b4b      	ldr	r3, [pc, #300]	@ (8001828 <Decode_IMU_Data+0x37c>)
 80016fc:	2201      	movs	r2, #1
 80016fe:	601a      	str	r2, [r3, #0]
                break;
 8001700:	e081      	b.n	8001806 <Decode_IMU_Data+0x35a>
                temp_angle[0] = ((int16_t)IMU_Raw_Data_Buffer[3] << 8) | (int16_t)IMU_Raw_Data_Buffer[2];
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	3303      	adds	r3, #3
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	021b      	lsls	r3, r3, #8
 800170a:	b21a      	sxth	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	3302      	adds	r3, #2
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	b21b      	sxth	r3, r3
 8001714:	4313      	orrs	r3, r2
 8001716:	b21b      	sxth	r3, r3
 8001718:	813b      	strh	r3, [r7, #8]
                temp_angle[1] = ((int16_t)IMU_Raw_Data_Buffer[5] << 8) | (int16_t)IMU_Raw_Data_Buffer[4];
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	3305      	adds	r3, #5
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	021b      	lsls	r3, r3, #8
 8001722:	b21a      	sxth	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	3304      	adds	r3, #4
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	b21b      	sxth	r3, r3
 800172c:	4313      	orrs	r3, r2
 800172e:	b21b      	sxth	r3, r3
 8001730:	817b      	strh	r3, [r7, #10]
                temp_angle[2] = ((int16_t)IMU_Raw_Data_Buffer[7] << 8) | (int16_t)IMU_Raw_Data_Buffer[6];
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	3307      	adds	r3, #7
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	021b      	lsls	r3, r3, #8
 800173a:	b21a      	sxth	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3306      	adds	r3, #6
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	b21b      	sxth	r3, r3
 8001744:	4313      	orrs	r3, r2
 8001746:	b21b      	sxth	r3, r3
 8001748:	81bb      	strh	r3, [r7, #12]
                angle[0] = -(((double)temp_angle[0]) * 180.0 / 32768.0) + 90.0;
 800174a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800174e:	4618      	mov	r0, r3
 8001750:	f7fe fee8 	bl	8000524 <__aeabi_i2d>
 8001754:	f04f 0200 	mov.w	r2, #0
 8001758:	4b34      	ldr	r3, [pc, #208]	@ (800182c <Decode_IMU_Data+0x380>)
 800175a:	f7fe ff4d 	bl	80005f8 <__aeabi_dmul>
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	4610      	mov	r0, r2
 8001764:	4619      	mov	r1, r3
 8001766:	f04f 0200 	mov.w	r2, #0
 800176a:	4b2a      	ldr	r3, [pc, #168]	@ (8001814 <Decode_IMU_Data+0x368>)
 800176c:	f7ff f86e 	bl	800084c <__aeabi_ddiv>
 8001770:	4602      	mov	r2, r0
 8001772:	460b      	mov	r3, r1
 8001774:	f04f 0000 	mov.w	r0, #0
 8001778:	492d      	ldr	r1, [pc, #180]	@ (8001830 <Decode_IMU_Data+0x384>)
 800177a:	f7fe fd85 	bl	8000288 <__aeabi_dsub>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	492c      	ldr	r1, [pc, #176]	@ (8001834 <Decode_IMU_Data+0x388>)
 8001784:	e9c1 2300 	strd	r2, r3, [r1]
                angle[1] = -(((double)temp_angle[1]) * 180.0 / 32768.0) + 90.0;
 8001788:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800178c:	4618      	mov	r0, r3
 800178e:	f7fe fec9 	bl	8000524 <__aeabi_i2d>
 8001792:	f04f 0200 	mov.w	r2, #0
 8001796:	4b25      	ldr	r3, [pc, #148]	@ (800182c <Decode_IMU_Data+0x380>)
 8001798:	f7fe ff2e 	bl	80005f8 <__aeabi_dmul>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	4610      	mov	r0, r2
 80017a2:	4619      	mov	r1, r3
 80017a4:	f04f 0200 	mov.w	r2, #0
 80017a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001814 <Decode_IMU_Data+0x368>)
 80017aa:	f7ff f84f 	bl	800084c <__aeabi_ddiv>
 80017ae:	4602      	mov	r2, r0
 80017b0:	460b      	mov	r3, r1
 80017b2:	f04f 0000 	mov.w	r0, #0
 80017b6:	491e      	ldr	r1, [pc, #120]	@ (8001830 <Decode_IMU_Data+0x384>)
 80017b8:	f7fe fd66 	bl	8000288 <__aeabi_dsub>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	491c      	ldr	r1, [pc, #112]	@ (8001834 <Decode_IMU_Data+0x388>)
 80017c2:	e9c1 2302 	strd	r2, r3, [r1, #8]
                angle[2] = -(((double)temp_angle[2]) * 180.0 / 32768.0) + 90.0;
 80017c6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7fe feaa 	bl	8000524 <__aeabi_i2d>
 80017d0:	f04f 0200 	mov.w	r2, #0
 80017d4:	4b15      	ldr	r3, [pc, #84]	@ (800182c <Decode_IMU_Data+0x380>)
 80017d6:	f7fe ff0f 	bl	80005f8 <__aeabi_dmul>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	4610      	mov	r0, r2
 80017e0:	4619      	mov	r1, r3
 80017e2:	f04f 0200 	mov.w	r2, #0
 80017e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001814 <Decode_IMU_Data+0x368>)
 80017e8:	f7ff f830 	bl	800084c <__aeabi_ddiv>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	f04f 0000 	mov.w	r0, #0
 80017f4:	490e      	ldr	r1, [pc, #56]	@ (8001830 <Decode_IMU_Data+0x384>)
 80017f6:	f7fe fd47 	bl	8000288 <__aeabi_dsub>
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	490d      	ldr	r1, [pc, #52]	@ (8001834 <Decode_IMU_Data+0x388>)
 8001800:	e9c1 2304 	strd	r2, r3, [r1, #16]
                break;
 8001804:	bf00      	nop
}
 8001806:	bf00      	nop
 8001808:	3720      	adds	r7, #32
 800180a:	46bd      	mov	sp, r7
 800180c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001810:	40300000 	.word	0x40300000
 8001814:	40e00000 	.word	0x40e00000
 8001818:	20000278 	.word	0x20000278
 800181c:	409f4000 	.word	0x409f4000
 8001820:	200002c0 	.word	0x200002c0
 8001824:	20000290 	.word	0x20000290
 8001828:	200002d8 	.word	0x200002d8
 800182c:	40668000 	.word	0x40668000
 8001830:	40568000 	.word	0x40568000
 8001834:	200002a8 	.word	0x200002a8

08001838 <Imu_Error_Handler>:

        _IsGyroIntialized = 1;
    }
}

void Imu_Error_Handler(void) {
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 800183c:	2201      	movs	r2, #1
 800183e:	2101      	movs	r1, #1
 8001840:	4802      	ldr	r0, [pc, #8]	@ (800184c <Imu_Error_Handler+0x14>)
 8001842:	f000 fd75 	bl	8002330 <HAL_GPIO_WritePin>

    while(1) {
 8001846:	bf00      	nop
 8001848:	e7fd      	b.n	8001846 <Imu_Error_Handler+0xe>
 800184a:	bf00      	nop
 800184c:	40020000 	.word	0x40020000

08001850 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8001850:	b4b0      	push	{r4, r5, r7}
 8001852:	b08b      	sub	sp, #44	@ 0x2c
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
 800185c:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 800185e:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001862:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	lcd.en_pin = en_pin;
 8001866:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800186a:	84bb      	strh	r3, [r7, #36]	@ 0x24
	lcd.en_port = en_port;
 800186c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800186e:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8001870:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001872:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	613b      	str	r3, [r7, #16]

	return lcd;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	461d      	mov	r5, r3
 8001884:	f107 0410 	add.w	r4, r7, #16
 8001888:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800188a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800188c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001890:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001894:	68f8      	ldr	r0, [r7, #12]
 8001896:	372c      	adds	r7, #44	@ 0x2c
 8001898:	46bd      	mov	sp, r7
 800189a:	bcb0      	pop	{r4, r5, r7}
 800189c:	4770      	bx	lr
	...

080018a0 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(void) {
 80018a0:	b5b0      	push	{r4, r5, r7, lr}
 80018a2:	b090      	sub	sp, #64	@ 0x40
 80018a4:	af04      	add	r7, sp, #16

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a6:	f107 031c 	add.w	r3, r7, #28
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	605a      	str	r2, [r3, #4]
 80018b0:	609a      	str	r2, [r3, #8]
 80018b2:	60da      	str	r2, [r3, #12]
 80018b4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	61bb      	str	r3, [r7, #24]
 80018ba:	4b2c      	ldr	r3, [pc, #176]	@ (800196c <Lcd_init+0xcc>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018be:	4a2b      	ldr	r2, [pc, #172]	@ (800196c <Lcd_init+0xcc>)
 80018c0:	f043 0310 	orr.w	r3, r3, #16
 80018c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018c6:	4b29      	ldr	r3, [pc, #164]	@ (800196c <Lcd_init+0xcc>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ca:	f003 0310 	and.w	r3, r3, #16
 80018ce:	61bb      	str	r3, [r7, #24]
 80018d0:	69bb      	ldr	r3, [r7, #24]

	/* Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, LCD_data7_Pin|LCD_data6_Pin|LCD_data5_Pin|LCD_data4_Pin
 80018d2:	2200      	movs	r2, #0
 80018d4:	f64a 3180 	movw	r1, #43904	@ 0xab80
 80018d8:	4825      	ldr	r0, [pc, #148]	@ (8001970 <Lcd_init+0xd0>)
 80018da:	f000 fd29 	bl	8002330 <HAL_GPIO_WritePin>
						  	|LCD_RS_Pin|LCD_EN_Pin, GPIO_PIN_RESET);

	/* Configure GPIO pins for the LCD screen */
	GPIO_InitStruct.Pin = LCD_data7_Pin|LCD_data6_Pin|LCD_data5_Pin|LCD_data4_Pin
 80018de:	f64a 3380 	movw	r3, #43904	@ 0xab80
 80018e2:	61fb      	str	r3, [r7, #28]
						  |LCD_RS_Pin|LCD_EN_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e4:	2301      	movs	r3, #1
 80018e6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ec:	2300      	movs	r3, #0
 80018ee:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018f0:	f107 031c 	add.w	r3, r7, #28
 80018f4:	4619      	mov	r1, r3
 80018f6:	481e      	ldr	r0, [pc, #120]	@ (8001970 <Lcd_init+0xd0>)
 80018f8:	f000 fb7e 	bl	8001ff8 <HAL_GPIO_Init>



	/* LCD configuration */
	lcd = Lcd_create(ports, pins, LCD_RS_GPIO_Port, LCD_RS_Pin, LCD_EN_GPIO_Port, LCD_EN_Pin, LCD_4_BIT_MODE);
 80018fc:	4c1d      	ldr	r4, [pc, #116]	@ (8001974 <Lcd_init+0xd4>)
 80018fe:	4638      	mov	r0, r7
 8001900:	2300      	movs	r3, #0
 8001902:	9303      	str	r3, [sp, #12]
 8001904:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001908:	9302      	str	r3, [sp, #8]
 800190a:	4b19      	ldr	r3, [pc, #100]	@ (8001970 <Lcd_init+0xd0>)
 800190c:	9301      	str	r3, [sp, #4]
 800190e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001912:	9300      	str	r3, [sp, #0]
 8001914:	4b16      	ldr	r3, [pc, #88]	@ (8001970 <Lcd_init+0xd0>)
 8001916:	4a18      	ldr	r2, [pc, #96]	@ (8001978 <Lcd_init+0xd8>)
 8001918:	4918      	ldr	r1, [pc, #96]	@ (800197c <Lcd_init+0xdc>)
 800191a:	f7ff ff99 	bl	8001850 <Lcd_create>
 800191e:	4625      	mov	r5, r4
 8001920:	463c      	mov	r4, r7
 8001922:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001924:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001926:	e894 0003 	ldmia.w	r4, {r0, r1}
 800192a:	e885 0003 	stmia.w	r5, {r0, r1}

	if(lcd.mode == LCD_4_BIT_MODE) {
 800192e:	4b11      	ldr	r3, [pc, #68]	@ (8001974 <Lcd_init+0xd4>)
 8001930:	7d9b      	ldrb	r3, [r3, #22]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d109      	bne.n	800194a <Lcd_init+0xaa>
		lcd_write_command(0x33);
 8001936:	2033      	movs	r0, #51	@ 0x33
 8001938:	f000 f896 	bl	8001a68 <lcd_write_command>
		lcd_write_command(0x32);
 800193c:	2032      	movs	r0, #50	@ 0x32
 800193e:	f000 f893 	bl	8001a68 <lcd_write_command>
		lcd_write_command(FUNCTION_SET | OPT_N);				// 4-bit mode
 8001942:	2028      	movs	r0, #40	@ 0x28
 8001944:	f000 f890 	bl	8001a68 <lcd_write_command>
 8001948:	e002      	b.n	8001950 <Lcd_init+0xb0>
	}
	else {
		lcd_write_command(FUNCTION_SET | OPT_DL | OPT_N);
 800194a:	2038      	movs	r0, #56	@ 0x38
 800194c:	f000 f88c 	bl	8001a68 <lcd_write_command>
	}

	lcd_write_command(CLEAR_DISPLAY);						// Clear screen
 8001950:	2001      	movs	r0, #1
 8001952:	f000 f889 	bl	8001a68 <lcd_write_command>
	lcd_write_command(DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8001956:	200c      	movs	r0, #12
 8001958:	f000 f886 	bl	8001a68 <lcd_write_command>
	lcd_write_command(ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 800195c:	2006      	movs	r0, #6
 800195e:	f000 f883 	bl	8001a68 <lcd_write_command>
}
 8001962:	bf00      	nop
 8001964:	3730      	adds	r7, #48	@ 0x30
 8001966:	46bd      	mov	sp, r7
 8001968:	bdb0      	pop	{r4, r5, r7, pc}
 800196a:	bf00      	nop
 800196c:	40023800 	.word	0x40023800
 8001970:	40021000 	.word	0x40021000
 8001974:	200002dc 	.word	0x200002dc
 8001978:	20000014 	.word	0x20000014
 800197c:	20000004 	.word	0x20000004

08001980 <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(int number) {
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
	char buffer[11];
	sprintf(buffer, "%d", number);
 8001988:	f107 030c 	add.w	r3, r7, #12
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	4906      	ldr	r1, [pc, #24]	@ (80019a8 <Lcd_int+0x28>)
 8001990:	4618      	mov	r0, r3
 8001992:	f002 fca9 	bl	80042e8 <siprintf>

	Lcd_string(buffer);
 8001996:	f107 030c 	add.w	r3, r7, #12
 800199a:	4618      	mov	r0, r3
 800199c:	f000 f824 	bl	80019e8 <Lcd_string>
}
 80019a0:	bf00      	nop
 80019a2:	3718      	adds	r7, #24
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	08006578 	.word	0x08006578

080019ac <Lcd_float>:

/**
 * Write a floating-point number on the current position
 */
void Lcd_float(float number) {
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08a      	sub	sp, #40	@ 0x28
 80019b0:	af02      	add	r7, sp, #8
 80019b2:	ed87 0a01 	vstr	s0, [r7, #4]
    char buffer[20];
    snprintf(buffer, sizeof(buffer), "%.6g", number);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f7fe fdc6 	bl	8000548 <__aeabi_f2d>
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	f107 000c 	add.w	r0, r7, #12
 80019c4:	e9cd 2300 	strd	r2, r3, [sp]
 80019c8:	4a06      	ldr	r2, [pc, #24]	@ (80019e4 <Lcd_float+0x38>)
 80019ca:	2114      	movs	r1, #20
 80019cc:	f002 fc58 	bl	8004280 <sniprintf>

    Lcd_string(buffer);
 80019d0:	f107 030c 	add.w	r3, r7, #12
 80019d4:	4618      	mov	r0, r3
 80019d6:	f000 f807 	bl	80019e8 <Lcd_string>
}
 80019da:	bf00      	nop
 80019dc:	3720      	adds	r7, #32
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	0800657c 	.word	0x0800657c

080019e8 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(char * string) {
 80019e8:	b590      	push	{r4, r7, lr}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < strlen(string); i++) {
 80019f0:	2300      	movs	r3, #0
 80019f2:	73fb      	strb	r3, [r7, #15]
 80019f4:	e009      	b.n	8001a0a <Lcd_string+0x22>
			lcd_write_data(string[i]);
 80019f6:	7bfb      	ldrb	r3, [r7, #15]
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	4413      	add	r3, r2
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f000 f85e 	bl	8001ac0 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++) {
 8001a04:	7bfb      	ldrb	r3, [r7, #15]
 8001a06:	3301      	adds	r3, #1
 8001a08:	73fb      	strb	r3, [r7, #15]
 8001a0a:	7bfc      	ldrb	r4, [r7, #15]
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f7fe fc2f 	bl	8000270 <strlen>
 8001a12:	4603      	mov	r3, r0
 8001a14:	429c      	cmp	r4, r3
 8001a16:	d3ee      	bcc.n	80019f6 <Lcd_string+0xe>
	}
}
 8001a18:	bf00      	nop
 8001a1a:	bf00      	nop
 8001a1c:	3714      	adds	r7, #20
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd90      	pop	{r4, r7, pc}
	...

08001a24 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(uint8_t row, uint8_t col) {
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	460a      	mov	r2, r1
 8001a2e:	71fb      	strb	r3, [r7, #7]
 8001a30:	4613      	mov	r3, r2
 8001a32:	71bb      	strb	r3, [r7, #6]
	#ifdef LCD20xN
	lcd_write_command(SET_DDRAM_ADDR + ROW_20[row] + col);
 8001a34:	79fb      	ldrb	r3, [r7, #7]
 8001a36:	4a07      	ldr	r2, [pc, #28]	@ (8001a54 <Lcd_cursor+0x30>)
 8001a38:	5cd2      	ldrb	r2, [r2, r3]
 8001a3a:	79bb      	ldrb	r3, [r7, #6]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	3b80      	subs	r3, #128	@ 0x80
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	4618      	mov	r0, r3
 8001a46:	f000 f80f 	bl	8001a68 <lcd_write_command>
	#endif

	#ifdef LCD16xN
	lcd_write_command(SET_DDRAM_ADDR + ROW_16[row] + col);
	#endif
}
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	0800659c 	.word	0x0800659c

08001a58 <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(void) {
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
	lcd_write_command(CLEAR_DISPLAY);
 8001a5c:	2001      	movs	r0, #1
 8001a5e:	f000 f803 	bl	8001a68 <lcd_write_command>
}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
	...

08001a68 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(uint8_t command)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(lcd.rs_port, lcd.rs_pin, LCD_COMMAND_REG);		// Write to command register
 8001a72:	4b12      	ldr	r3, [pc, #72]	@ (8001abc <lcd_write_command+0x54>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	4a11      	ldr	r2, [pc, #68]	@ (8001abc <lcd_write_command+0x54>)
 8001a78:	8991      	ldrh	r1, [r2, #12]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f000 fc57 	bl	8002330 <HAL_GPIO_WritePin>

	if(lcd.mode == LCD_4_BIT_MODE)
 8001a82:	4b0e      	ldr	r3, [pc, #56]	@ (8001abc <lcd_write_command+0x54>)
 8001a84:	7d9b      	ldrb	r3, [r3, #22]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d10f      	bne.n	8001aaa <lcd_write_command+0x42>
	{
		lcd_write((command >> 4), LCD_NIB);
 8001a8a:	79fb      	ldrb	r3, [r7, #7]
 8001a8c:	091b      	lsrs	r3, r3, #4
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	2104      	movs	r1, #4
 8001a92:	4618      	mov	r0, r3
 8001a94:	f000 f840 	bl	8001b18 <lcd_write>
		lcd_write(command & 0x0F, LCD_NIB);
 8001a98:	79fb      	ldrb	r3, [r7, #7]
 8001a9a:	f003 030f 	and.w	r3, r3, #15
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	2104      	movs	r1, #4
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f000 f838 	bl	8001b18 <lcd_write>
	else
	{
		lcd_write(command, LCD_BYTE);
	}

}
 8001aa8:	e004      	b.n	8001ab4 <lcd_write_command+0x4c>
		lcd_write(command, LCD_BYTE);
 8001aaa:	79fb      	ldrb	r3, [r7, #7]
 8001aac:	2108      	movs	r1, #8
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f000 f832 	bl	8001b18 <lcd_write>
}
 8001ab4:	bf00      	nop
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	200002dc 	.word	0x200002dc

08001ac0 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(uint8_t data)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(lcd.rs_port, lcd.rs_pin, LCD_DATA_REG);			// Write to data register
 8001aca:	4b12      	ldr	r3, [pc, #72]	@ (8001b14 <lcd_write_data+0x54>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	4a11      	ldr	r2, [pc, #68]	@ (8001b14 <lcd_write_data+0x54>)
 8001ad0:	8991      	ldrh	r1, [r2, #12]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f000 fc2b 	bl	8002330 <HAL_GPIO_WritePin>

	if(lcd.mode == LCD_4_BIT_MODE)
 8001ada:	4b0e      	ldr	r3, [pc, #56]	@ (8001b14 <lcd_write_data+0x54>)
 8001adc:	7d9b      	ldrb	r3, [r3, #22]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d10f      	bne.n	8001b02 <lcd_write_data+0x42>
	{
		lcd_write(data >> 4, LCD_NIB);
 8001ae2:	79fb      	ldrb	r3, [r7, #7]
 8001ae4:	091b      	lsrs	r3, r3, #4
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	2104      	movs	r1, #4
 8001aea:	4618      	mov	r0, r3
 8001aec:	f000 f814 	bl	8001b18 <lcd_write>
		lcd_write(data & 0x0F, LCD_NIB);
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	f003 030f 	and.w	r3, r3, #15
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	2104      	movs	r1, #4
 8001afa:	4618      	mov	r0, r3
 8001afc:	f000 f80c 	bl	8001b18 <lcd_write>
	else
	{
		lcd_write(data, LCD_BYTE);
	}

}
 8001b00:	e004      	b.n	8001b0c <lcd_write_data+0x4c>
		lcd_write(data, LCD_BYTE);
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	2108      	movs	r1, #8
 8001b06:	4618      	mov	r0, r3
 8001b08:	f000 f806 	bl	8001b18 <lcd_write>
}
 8001b0c:	bf00      	nop
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	200002dc 	.word	0x200002dc

08001b18 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(uint8_t data, uint8_t len)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	460a      	mov	r2, r1
 8001b22:	71fb      	strb	r3, [r7, #7]
 8001b24:	4613      	mov	r3, r2
 8001b26:	71bb      	strb	r3, [r7, #6]
	for(uint8_t i = 0; i < len; i++)
 8001b28:	2300      	movs	r3, #0
 8001b2a:	73fb      	strb	r3, [r7, #15]
 8001b2c:	e019      	b.n	8001b62 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd.data_port[i], lcd.data_pin[i], (data >> i) & 0x01);
 8001b2e:	4b1a      	ldr	r3, [pc, #104]	@ (8001b98 <lcd_write+0x80>)
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	7bfb      	ldrb	r3, [r7, #15]
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	4413      	add	r3, r2
 8001b38:	6818      	ldr	r0, [r3, #0]
 8001b3a:	4b17      	ldr	r3, [pc, #92]	@ (8001b98 <lcd_write+0x80>)
 8001b3c:	685a      	ldr	r2, [r3, #4]
 8001b3e:	7bfb      	ldrb	r3, [r7, #15]
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	4413      	add	r3, r2
 8001b44:	8819      	ldrh	r1, [r3, #0]
 8001b46:	79fa      	ldrb	r2, [r7, #7]
 8001b48:	7bfb      	ldrb	r3, [r7, #15]
 8001b4a:	fa42 f303 	asr.w	r3, r2, r3
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	461a      	mov	r2, r3
 8001b58:	f000 fbea 	bl	8002330 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8001b5c:	7bfb      	ldrb	r3, [r7, #15]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	73fb      	strb	r3, [r7, #15]
 8001b62:	7bfa      	ldrb	r2, [r7, #15]
 8001b64:	79bb      	ldrb	r3, [r7, #6]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d3e1      	bcc.n	8001b2e <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd.en_port, lcd.en_pin, 1);
 8001b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8001b98 <lcd_write+0x80>)
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b98 <lcd_write+0x80>)
 8001b70:	8a91      	ldrh	r1, [r2, #20]
 8001b72:	2201      	movs	r2, #1
 8001b74:	4618      	mov	r0, r3
 8001b76:	f000 fbdb 	bl	8002330 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001b7a:	2001      	movs	r0, #1
 8001b7c:	f000 f880 	bl	8001c80 <HAL_Delay>
	HAL_GPIO_WritePin(lcd.en_port, lcd.en_pin, 0); 		// Data receive on falling edge
 8001b80:	4b05      	ldr	r3, [pc, #20]	@ (8001b98 <lcd_write+0x80>)
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	4a04      	ldr	r2, [pc, #16]	@ (8001b98 <lcd_write+0x80>)
 8001b86:	8a91      	ldrh	r1, [r2, #20]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f000 fbd0 	bl	8002330 <HAL_GPIO_WritePin>
}
 8001b90:	bf00      	nop
 8001b92:	3710      	adds	r7, #16
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	200002dc 	.word	0x200002dc

08001b9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ba0:	4b0e      	ldr	r3, [pc, #56]	@ (8001bdc <HAL_Init+0x40>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a0d      	ldr	r2, [pc, #52]	@ (8001bdc <HAL_Init+0x40>)
 8001ba6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001baa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bac:	4b0b      	ldr	r3, [pc, #44]	@ (8001bdc <HAL_Init+0x40>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a0a      	ldr	r2, [pc, #40]	@ (8001bdc <HAL_Init+0x40>)
 8001bb2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bb8:	4b08      	ldr	r3, [pc, #32]	@ (8001bdc <HAL_Init+0x40>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a07      	ldr	r2, [pc, #28]	@ (8001bdc <HAL_Init+0x40>)
 8001bbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bc4:	2003      	movs	r0, #3
 8001bc6:	f000 f94f 	bl	8001e68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bca:	200f      	movs	r0, #15
 8001bcc:	f000 f808 	bl	8001be0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bd0:	f7ff faac 	bl	800112c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40023c00 	.word	0x40023c00

08001be0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001be8:	4b12      	ldr	r3, [pc, #72]	@ (8001c34 <HAL_InitTick+0x54>)
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	4b12      	ldr	r3, [pc, #72]	@ (8001c38 <HAL_InitTick+0x58>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f000 f967 	bl	8001ed2 <HAL_SYSTICK_Config>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e00e      	b.n	8001c2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2b0f      	cmp	r3, #15
 8001c12:	d80a      	bhi.n	8001c2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c14:	2200      	movs	r2, #0
 8001c16:	6879      	ldr	r1, [r7, #4]
 8001c18:	f04f 30ff 	mov.w	r0, #4294967295
 8001c1c:	f000 f92f 	bl	8001e7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c20:	4a06      	ldr	r2, [pc, #24]	@ (8001c3c <HAL_InitTick+0x5c>)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c26:	2300      	movs	r3, #0
 8001c28:	e000      	b.n	8001c2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	20000000 	.word	0x20000000
 8001c38:	20000020 	.word	0x20000020
 8001c3c:	2000001c 	.word	0x2000001c

08001c40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c44:	4b06      	ldr	r3, [pc, #24]	@ (8001c60 <HAL_IncTick+0x20>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	461a      	mov	r2, r3
 8001c4a:	4b06      	ldr	r3, [pc, #24]	@ (8001c64 <HAL_IncTick+0x24>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4413      	add	r3, r2
 8001c50:	4a04      	ldr	r2, [pc, #16]	@ (8001c64 <HAL_IncTick+0x24>)
 8001c52:	6013      	str	r3, [r2, #0]
}
 8001c54:	bf00      	nop
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	20000020 	.word	0x20000020
 8001c64:	200002f4 	.word	0x200002f4

08001c68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c6c:	4b03      	ldr	r3, [pc, #12]	@ (8001c7c <HAL_GetTick+0x14>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	200002f4 	.word	0x200002f4

08001c80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c88:	f7ff ffee 	bl	8001c68 <HAL_GetTick>
 8001c8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c98:	d005      	beq.n	8001ca6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc4 <HAL_Delay+0x44>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ca6:	bf00      	nop
 8001ca8:	f7ff ffde 	bl	8001c68 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d8f7      	bhi.n	8001ca8 <HAL_Delay+0x28>
  {
  }
}
 8001cb8:	bf00      	nop
 8001cba:	bf00      	nop
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000020 	.word	0x20000020

08001cc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8001d0c <__NVIC_SetPriorityGrouping+0x44>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cde:	68ba      	ldr	r2, [r7, #8]
 8001ce0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cf0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cf4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cfa:	4a04      	ldr	r2, [pc, #16]	@ (8001d0c <__NVIC_SetPriorityGrouping+0x44>)
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	60d3      	str	r3, [r2, #12]
}
 8001d00:	bf00      	nop
 8001d02:	3714      	adds	r7, #20
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d14:	4b04      	ldr	r3, [pc, #16]	@ (8001d28 <__NVIC_GetPriorityGrouping+0x18>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	0a1b      	lsrs	r3, r3, #8
 8001d1a:	f003 0307 	and.w	r3, r3, #7
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	e000ed00 	.word	0xe000ed00

08001d2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	db0b      	blt.n	8001d56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d3e:	79fb      	ldrb	r3, [r7, #7]
 8001d40:	f003 021f 	and.w	r2, r3, #31
 8001d44:	4907      	ldr	r1, [pc, #28]	@ (8001d64 <__NVIC_EnableIRQ+0x38>)
 8001d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4a:	095b      	lsrs	r3, r3, #5
 8001d4c:	2001      	movs	r0, #1
 8001d4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	e000e100 	.word	0xe000e100

08001d68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	6039      	str	r1, [r7, #0]
 8001d72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	db0a      	blt.n	8001d92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	b2da      	uxtb	r2, r3
 8001d80:	490c      	ldr	r1, [pc, #48]	@ (8001db4 <__NVIC_SetPriority+0x4c>)
 8001d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d86:	0112      	lsls	r2, r2, #4
 8001d88:	b2d2      	uxtb	r2, r2
 8001d8a:	440b      	add	r3, r1
 8001d8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d90:	e00a      	b.n	8001da8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	b2da      	uxtb	r2, r3
 8001d96:	4908      	ldr	r1, [pc, #32]	@ (8001db8 <__NVIC_SetPriority+0x50>)
 8001d98:	79fb      	ldrb	r3, [r7, #7]
 8001d9a:	f003 030f 	and.w	r3, r3, #15
 8001d9e:	3b04      	subs	r3, #4
 8001da0:	0112      	lsls	r2, r2, #4
 8001da2:	b2d2      	uxtb	r2, r2
 8001da4:	440b      	add	r3, r1
 8001da6:	761a      	strb	r2, [r3, #24]
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr
 8001db4:	e000e100 	.word	0xe000e100
 8001db8:	e000ed00 	.word	0xe000ed00

08001dbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b089      	sub	sp, #36	@ 0x24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	f1c3 0307 	rsb	r3, r3, #7
 8001dd6:	2b04      	cmp	r3, #4
 8001dd8:	bf28      	it	cs
 8001dda:	2304      	movcs	r3, #4
 8001ddc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	3304      	adds	r3, #4
 8001de2:	2b06      	cmp	r3, #6
 8001de4:	d902      	bls.n	8001dec <NVIC_EncodePriority+0x30>
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	3b03      	subs	r3, #3
 8001dea:	e000      	b.n	8001dee <NVIC_EncodePriority+0x32>
 8001dec:	2300      	movs	r3, #0
 8001dee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df0:	f04f 32ff 	mov.w	r2, #4294967295
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	43da      	mvns	r2, r3
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	401a      	ands	r2, r3
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e04:	f04f 31ff 	mov.w	r1, #4294967295
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0e:	43d9      	mvns	r1, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e14:	4313      	orrs	r3, r2
         );
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3724      	adds	r7, #36	@ 0x24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
	...

08001e24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e34:	d301      	bcc.n	8001e3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e36:	2301      	movs	r3, #1
 8001e38:	e00f      	b.n	8001e5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e64 <SysTick_Config+0x40>)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e42:	210f      	movs	r1, #15
 8001e44:	f04f 30ff 	mov.w	r0, #4294967295
 8001e48:	f7ff ff8e 	bl	8001d68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e4c:	4b05      	ldr	r3, [pc, #20]	@ (8001e64 <SysTick_Config+0x40>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e52:	4b04      	ldr	r3, [pc, #16]	@ (8001e64 <SysTick_Config+0x40>)
 8001e54:	2207      	movs	r2, #7
 8001e56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	e000e010 	.word	0xe000e010

08001e68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f7ff ff29 	bl	8001cc8 <__NVIC_SetPriorityGrouping>
}
 8001e76:	bf00      	nop
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b086      	sub	sp, #24
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	4603      	mov	r3, r0
 8001e86:	60b9      	str	r1, [r7, #8]
 8001e88:	607a      	str	r2, [r7, #4]
 8001e8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e90:	f7ff ff3e 	bl	8001d10 <__NVIC_GetPriorityGrouping>
 8001e94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	68b9      	ldr	r1, [r7, #8]
 8001e9a:	6978      	ldr	r0, [r7, #20]
 8001e9c:	f7ff ff8e 	bl	8001dbc <NVIC_EncodePriority>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ea6:	4611      	mov	r1, r2
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff ff5d 	bl	8001d68 <__NVIC_SetPriority>
}
 8001eae:	bf00      	nop
 8001eb0:	3718      	adds	r7, #24
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b082      	sub	sp, #8
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff ff31 	bl	8001d2c <__NVIC_EnableIRQ>
}
 8001eca:	bf00      	nop
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b082      	sub	sp, #8
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7ff ffa2 	bl	8001e24 <SysTick_Config>
 8001ee0:	4603      	mov	r3, r0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b086      	sub	sp, #24
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	60f8      	str	r0, [r7, #12]
 8001ef2:	60b9      	str	r1, [r7, #8]
 8001ef4:	607a      	str	r2, [r7, #4]
 8001ef6:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f00:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d101      	bne.n	8001f10 <HAL_DMA_Start_IT+0x26>
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	e040      	b.n	8001f92 <HAL_DMA_Start_IT+0xa8>
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d12f      	bne.n	8001f84 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2202      	movs	r2, #2
 8001f28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	68b9      	ldr	r1, [r7, #8]
 8001f38:	68f8      	ldr	r0, [r7, #12]
 8001f3a:	f000 f82e 	bl	8001f9a <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f42:	223f      	movs	r2, #63	@ 0x3f
 8001f44:	409a      	lsls	r2, r3
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f042 0216 	orr.w	r2, r2, #22
 8001f58:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d007      	beq.n	8001f72 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f042 0208 	orr.w	r2, r2, #8
 8001f70:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f042 0201 	orr.w	r2, r2, #1
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	e005      	b.n	8001f90 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f90:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3718      	adds	r7, #24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b085      	sub	sp, #20
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	60f8      	str	r0, [r7, #12]
 8001fa2:	60b9      	str	r1, [r7, #8]
 8001fa4:	607a      	str	r2, [r7, #4]
 8001fa6:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001fb6:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	683a      	ldr	r2, [r7, #0]
 8001fbe:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	2b40      	cmp	r3, #64	@ 0x40
 8001fc6:	d108      	bne.n	8001fda <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68ba      	ldr	r2, [r7, #8]
 8001fd6:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001fd8:	e007      	b.n	8001fea <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68ba      	ldr	r2, [r7, #8]
 8001fe0:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	60da      	str	r2, [r3, #12]
}
 8001fea:	bf00      	nop
 8001fec:	3714      	adds	r7, #20
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
	...

08001ff8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b089      	sub	sp, #36	@ 0x24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002002:	2300      	movs	r3, #0
 8002004:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002006:	2300      	movs	r3, #0
 8002008:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800200a:	2300      	movs	r3, #0
 800200c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800200e:	2300      	movs	r3, #0
 8002010:	61fb      	str	r3, [r7, #28]
 8002012:	e16b      	b.n	80022ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002014:	2201      	movs	r2, #1
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	697a      	ldr	r2, [r7, #20]
 8002024:	4013      	ands	r3, r2
 8002026:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	429a      	cmp	r2, r3
 800202e:	f040 815a 	bne.w	80022e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f003 0303 	and.w	r3, r3, #3
 800203a:	2b01      	cmp	r3, #1
 800203c:	d005      	beq.n	800204a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002046:	2b02      	cmp	r3, #2
 8002048:	d130      	bne.n	80020ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	2203      	movs	r2, #3
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43db      	mvns	r3, r3
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	4013      	ands	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	68da      	ldr	r2, [r3, #12]
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4313      	orrs	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002080:	2201      	movs	r2, #1
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	43db      	mvns	r3, r3
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4013      	ands	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	091b      	lsrs	r3, r3, #4
 8002096:	f003 0201 	and.w	r2, r3, #1
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f003 0303 	and.w	r3, r3, #3
 80020b4:	2b03      	cmp	r3, #3
 80020b6:	d017      	beq.n	80020e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	2203      	movs	r2, #3
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	43db      	mvns	r3, r3
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4013      	ands	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4313      	orrs	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f003 0303 	and.w	r3, r3, #3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d123      	bne.n	800213c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	08da      	lsrs	r2, r3, #3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	3208      	adds	r2, #8
 80020fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002100:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	f003 0307 	and.w	r3, r3, #7
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	220f      	movs	r2, #15
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	43db      	mvns	r3, r3
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	4013      	ands	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	691a      	ldr	r2, [r3, #16]
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	f003 0307 	and.w	r3, r3, #7
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4313      	orrs	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	08da      	lsrs	r2, r3, #3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	3208      	adds	r2, #8
 8002136:	69b9      	ldr	r1, [r7, #24]
 8002138:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	2203      	movs	r2, #3
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	43db      	mvns	r3, r3
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	4013      	ands	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f003 0203 	and.w	r2, r3, #3
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	4313      	orrs	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002178:	2b00      	cmp	r3, #0
 800217a:	f000 80b4 	beq.w	80022e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	4b60      	ldr	r3, [pc, #384]	@ (8002304 <HAL_GPIO_Init+0x30c>)
 8002184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002186:	4a5f      	ldr	r2, [pc, #380]	@ (8002304 <HAL_GPIO_Init+0x30c>)
 8002188:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800218c:	6453      	str	r3, [r2, #68]	@ 0x44
 800218e:	4b5d      	ldr	r3, [pc, #372]	@ (8002304 <HAL_GPIO_Init+0x30c>)
 8002190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002192:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800219a:	4a5b      	ldr	r2, [pc, #364]	@ (8002308 <HAL_GPIO_Init+0x310>)
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	089b      	lsrs	r3, r3, #2
 80021a0:	3302      	adds	r3, #2
 80021a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	f003 0303 	and.w	r3, r3, #3
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	220f      	movs	r2, #15
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	43db      	mvns	r3, r3
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	4013      	ands	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a52      	ldr	r2, [pc, #328]	@ (800230c <HAL_GPIO_Init+0x314>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d02b      	beq.n	800221e <HAL_GPIO_Init+0x226>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a51      	ldr	r2, [pc, #324]	@ (8002310 <HAL_GPIO_Init+0x318>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d025      	beq.n	800221a <HAL_GPIO_Init+0x222>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a50      	ldr	r2, [pc, #320]	@ (8002314 <HAL_GPIO_Init+0x31c>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d01f      	beq.n	8002216 <HAL_GPIO_Init+0x21e>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a4f      	ldr	r2, [pc, #316]	@ (8002318 <HAL_GPIO_Init+0x320>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d019      	beq.n	8002212 <HAL_GPIO_Init+0x21a>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a4e      	ldr	r2, [pc, #312]	@ (800231c <HAL_GPIO_Init+0x324>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d013      	beq.n	800220e <HAL_GPIO_Init+0x216>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a4d      	ldr	r2, [pc, #308]	@ (8002320 <HAL_GPIO_Init+0x328>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d00d      	beq.n	800220a <HAL_GPIO_Init+0x212>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a4c      	ldr	r2, [pc, #304]	@ (8002324 <HAL_GPIO_Init+0x32c>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d007      	beq.n	8002206 <HAL_GPIO_Init+0x20e>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a4b      	ldr	r2, [pc, #300]	@ (8002328 <HAL_GPIO_Init+0x330>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d101      	bne.n	8002202 <HAL_GPIO_Init+0x20a>
 80021fe:	2307      	movs	r3, #7
 8002200:	e00e      	b.n	8002220 <HAL_GPIO_Init+0x228>
 8002202:	2308      	movs	r3, #8
 8002204:	e00c      	b.n	8002220 <HAL_GPIO_Init+0x228>
 8002206:	2306      	movs	r3, #6
 8002208:	e00a      	b.n	8002220 <HAL_GPIO_Init+0x228>
 800220a:	2305      	movs	r3, #5
 800220c:	e008      	b.n	8002220 <HAL_GPIO_Init+0x228>
 800220e:	2304      	movs	r3, #4
 8002210:	e006      	b.n	8002220 <HAL_GPIO_Init+0x228>
 8002212:	2303      	movs	r3, #3
 8002214:	e004      	b.n	8002220 <HAL_GPIO_Init+0x228>
 8002216:	2302      	movs	r3, #2
 8002218:	e002      	b.n	8002220 <HAL_GPIO_Init+0x228>
 800221a:	2301      	movs	r3, #1
 800221c:	e000      	b.n	8002220 <HAL_GPIO_Init+0x228>
 800221e:	2300      	movs	r3, #0
 8002220:	69fa      	ldr	r2, [r7, #28]
 8002222:	f002 0203 	and.w	r2, r2, #3
 8002226:	0092      	lsls	r2, r2, #2
 8002228:	4093      	lsls	r3, r2
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4313      	orrs	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002230:	4935      	ldr	r1, [pc, #212]	@ (8002308 <HAL_GPIO_Init+0x310>)
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	089b      	lsrs	r3, r3, #2
 8002236:	3302      	adds	r3, #2
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800223e:	4b3b      	ldr	r3, [pc, #236]	@ (800232c <HAL_GPIO_Init+0x334>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	43db      	mvns	r3, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4013      	ands	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	4313      	orrs	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002262:	4a32      	ldr	r2, [pc, #200]	@ (800232c <HAL_GPIO_Init+0x334>)
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002268:	4b30      	ldr	r3, [pc, #192]	@ (800232c <HAL_GPIO_Init+0x334>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	43db      	mvns	r3, r3
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4013      	ands	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d003      	beq.n	800228c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	4313      	orrs	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800228c:	4a27      	ldr	r2, [pc, #156]	@ (800232c <HAL_GPIO_Init+0x334>)
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002292:	4b26      	ldr	r3, [pc, #152]	@ (800232c <HAL_GPIO_Init+0x334>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	43db      	mvns	r3, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4013      	ands	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022b6:	4a1d      	ldr	r2, [pc, #116]	@ (800232c <HAL_GPIO_Init+0x334>)
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022bc:	4b1b      	ldr	r3, [pc, #108]	@ (800232c <HAL_GPIO_Init+0x334>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	43db      	mvns	r3, r3
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	4013      	ands	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d003      	beq.n	80022e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	4313      	orrs	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022e0:	4a12      	ldr	r2, [pc, #72]	@ (800232c <HAL_GPIO_Init+0x334>)
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	3301      	adds	r3, #1
 80022ea:	61fb      	str	r3, [r7, #28]
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	2b0f      	cmp	r3, #15
 80022f0:	f67f ae90 	bls.w	8002014 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022f4:	bf00      	nop
 80022f6:	bf00      	nop
 80022f8:	3724      	adds	r7, #36	@ 0x24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	40023800 	.word	0x40023800
 8002308:	40013800 	.word	0x40013800
 800230c:	40020000 	.word	0x40020000
 8002310:	40020400 	.word	0x40020400
 8002314:	40020800 	.word	0x40020800
 8002318:	40020c00 	.word	0x40020c00
 800231c:	40021000 	.word	0x40021000
 8002320:	40021400 	.word	0x40021400
 8002324:	40021800 	.word	0x40021800
 8002328:	40021c00 	.word	0x40021c00
 800232c:	40013c00 	.word	0x40013c00

08002330 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	460b      	mov	r3, r1
 800233a:	807b      	strh	r3, [r7, #2]
 800233c:	4613      	mov	r3, r2
 800233e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002340:	787b      	ldrb	r3, [r7, #1]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002346:	887a      	ldrh	r2, [r7, #2]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800234c:	e003      	b.n	8002356 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800234e:	887b      	ldrh	r3, [r7, #2]
 8002350:	041a      	lsls	r2, r3, #16
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	619a      	str	r2, [r3, #24]
}
 8002356:	bf00      	nop
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
	...

08002364 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e267      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b00      	cmp	r3, #0
 8002380:	d075      	beq.n	800246e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002382:	4b88      	ldr	r3, [pc, #544]	@ (80025a4 <HAL_RCC_OscConfig+0x240>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f003 030c 	and.w	r3, r3, #12
 800238a:	2b04      	cmp	r3, #4
 800238c:	d00c      	beq.n	80023a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800238e:	4b85      	ldr	r3, [pc, #532]	@ (80025a4 <HAL_RCC_OscConfig+0x240>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002396:	2b08      	cmp	r3, #8
 8002398:	d112      	bne.n	80023c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800239a:	4b82      	ldr	r3, [pc, #520]	@ (80025a4 <HAL_RCC_OscConfig+0x240>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023a6:	d10b      	bne.n	80023c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a8:	4b7e      	ldr	r3, [pc, #504]	@ (80025a4 <HAL_RCC_OscConfig+0x240>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d05b      	beq.n	800246c <HAL_RCC_OscConfig+0x108>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d157      	bne.n	800246c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e242      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023c8:	d106      	bne.n	80023d8 <HAL_RCC_OscConfig+0x74>
 80023ca:	4b76      	ldr	r3, [pc, #472]	@ (80025a4 <HAL_RCC_OscConfig+0x240>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a75      	ldr	r2, [pc, #468]	@ (80025a4 <HAL_RCC_OscConfig+0x240>)
 80023d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023d4:	6013      	str	r3, [r2, #0]
 80023d6:	e01d      	b.n	8002414 <HAL_RCC_OscConfig+0xb0>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023e0:	d10c      	bne.n	80023fc <HAL_RCC_OscConfig+0x98>
 80023e2:	4b70      	ldr	r3, [pc, #448]	@ (80025a4 <HAL_RCC_OscConfig+0x240>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a6f      	ldr	r2, [pc, #444]	@ (80025a4 <HAL_RCC_OscConfig+0x240>)
 80023e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023ec:	6013      	str	r3, [r2, #0]
 80023ee:	4b6d      	ldr	r3, [pc, #436]	@ (80025a4 <HAL_RCC_OscConfig+0x240>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a6c      	ldr	r2, [pc, #432]	@ (80025a4 <HAL_RCC_OscConfig+0x240>)
 80023f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023f8:	6013      	str	r3, [r2, #0]
 80023fa:	e00b      	b.n	8002414 <HAL_RCC_OscConfig+0xb0>
 80023fc:	4b69      	ldr	r3, [pc, #420]	@ (80025a4 <HAL_RCC_OscConfig+0x240>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a68      	ldr	r2, [pc, #416]	@ (80025a4 <HAL_RCC_OscConfig+0x240>)
 8002402:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002406:	6013      	str	r3, [r2, #0]
 8002408:	4b66      	ldr	r3, [pc, #408]	@ (80025a4 <HAL_RCC_OscConfig+0x240>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a65      	ldr	r2, [pc, #404]	@ (80025a4 <HAL_RCC_OscConfig+0x240>)
 800240e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002412:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d013      	beq.n	8002444 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800241c:	f7ff fc24 	bl	8001c68 <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002422:	e008      	b.n	8002436 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002424:	f7ff fc20 	bl	8001c68 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b64      	cmp	r3, #100	@ 0x64
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e207      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002436:	4b5b      	ldr	r3, [pc, #364]	@ (80025a4 <HAL_RCC_OscConfig+0x240>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d0f0      	beq.n	8002424 <HAL_RCC_OscConfig+0xc0>
 8002442:	e014      	b.n	800246e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002444:	f7ff fc10 	bl	8001c68 <HAL_GetTick>
 8002448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800244c:	f7ff fc0c 	bl	8001c68 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b64      	cmp	r3, #100	@ 0x64
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e1f3      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800245e:	4b51      	ldr	r3, [pc, #324]	@ (80025a4 <HAL_RCC_OscConfig+0x240>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1f0      	bne.n	800244c <HAL_RCC_OscConfig+0xe8>
 800246a:	e000      	b.n	800246e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800246c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d063      	beq.n	8002542 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800247a:	4b4a      	ldr	r3, [pc, #296]	@ (80025a4 <HAL_RCC_OscConfig+0x240>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f003 030c 	and.w	r3, r3, #12
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00b      	beq.n	800249e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002486:	4b47      	ldr	r3, [pc, #284]	@ (80025a4 <HAL_RCC_OscConfig+0x240>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800248e:	2b08      	cmp	r3, #8
 8002490:	d11c      	bne.n	80024cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002492:	4b44      	ldr	r3, [pc, #272]	@ (80025a4 <HAL_RCC_OscConfig+0x240>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d116      	bne.n	80024cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800249e:	4b41      	ldr	r3, [pc, #260]	@ (80025a4 <HAL_RCC_OscConfig+0x240>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d005      	beq.n	80024b6 <HAL_RCC_OscConfig+0x152>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d001      	beq.n	80024b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e1c7      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024b6:	4b3b      	ldr	r3, [pc, #236]	@ (80025a4 <HAL_RCC_OscConfig+0x240>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	4937      	ldr	r1, [pc, #220]	@ (80025a4 <HAL_RCC_OscConfig+0x240>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ca:	e03a      	b.n	8002542 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d020      	beq.n	8002516 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024d4:	4b34      	ldr	r3, [pc, #208]	@ (80025a8 <HAL_RCC_OscConfig+0x244>)
 80024d6:	2201      	movs	r2, #1
 80024d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024da:	f7ff fbc5 	bl	8001c68 <HAL_GetTick>
 80024de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e0:	e008      	b.n	80024f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024e2:	f7ff fbc1 	bl	8001c68 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e1a8      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f4:	4b2b      	ldr	r3, [pc, #172]	@ (80025a4 <HAL_RCC_OscConfig+0x240>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d0f0      	beq.n	80024e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002500:	4b28      	ldr	r3, [pc, #160]	@ (80025a4 <HAL_RCC_OscConfig+0x240>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	00db      	lsls	r3, r3, #3
 800250e:	4925      	ldr	r1, [pc, #148]	@ (80025a4 <HAL_RCC_OscConfig+0x240>)
 8002510:	4313      	orrs	r3, r2
 8002512:	600b      	str	r3, [r1, #0]
 8002514:	e015      	b.n	8002542 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002516:	4b24      	ldr	r3, [pc, #144]	@ (80025a8 <HAL_RCC_OscConfig+0x244>)
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800251c:	f7ff fba4 	bl	8001c68 <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002524:	f7ff fba0 	bl	8001c68 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e187      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002536:	4b1b      	ldr	r3, [pc, #108]	@ (80025a4 <HAL_RCC_OscConfig+0x240>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1f0      	bne.n	8002524 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0308 	and.w	r3, r3, #8
 800254a:	2b00      	cmp	r3, #0
 800254c:	d036      	beq.n	80025bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d016      	beq.n	8002584 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002556:	4b15      	ldr	r3, [pc, #84]	@ (80025ac <HAL_RCC_OscConfig+0x248>)
 8002558:	2201      	movs	r2, #1
 800255a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800255c:	f7ff fb84 	bl	8001c68 <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002564:	f7ff fb80 	bl	8001c68 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e167      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002576:	4b0b      	ldr	r3, [pc, #44]	@ (80025a4 <HAL_RCC_OscConfig+0x240>)
 8002578:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d0f0      	beq.n	8002564 <HAL_RCC_OscConfig+0x200>
 8002582:	e01b      	b.n	80025bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002584:	4b09      	ldr	r3, [pc, #36]	@ (80025ac <HAL_RCC_OscConfig+0x248>)
 8002586:	2200      	movs	r2, #0
 8002588:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800258a:	f7ff fb6d 	bl	8001c68 <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002590:	e00e      	b.n	80025b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002592:	f7ff fb69 	bl	8001c68 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d907      	bls.n	80025b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e150      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
 80025a4:	40023800 	.word	0x40023800
 80025a8:	42470000 	.word	0x42470000
 80025ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025b0:	4b88      	ldr	r3, [pc, #544]	@ (80027d4 <HAL_RCC_OscConfig+0x470>)
 80025b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1ea      	bne.n	8002592 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f000 8097 	beq.w	80026f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ca:	2300      	movs	r3, #0
 80025cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025ce:	4b81      	ldr	r3, [pc, #516]	@ (80027d4 <HAL_RCC_OscConfig+0x470>)
 80025d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d10f      	bne.n	80025fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025da:	2300      	movs	r3, #0
 80025dc:	60bb      	str	r3, [r7, #8]
 80025de:	4b7d      	ldr	r3, [pc, #500]	@ (80027d4 <HAL_RCC_OscConfig+0x470>)
 80025e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e2:	4a7c      	ldr	r2, [pc, #496]	@ (80027d4 <HAL_RCC_OscConfig+0x470>)
 80025e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80025ea:	4b7a      	ldr	r3, [pc, #488]	@ (80027d4 <HAL_RCC_OscConfig+0x470>)
 80025ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025f2:	60bb      	str	r3, [r7, #8]
 80025f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025f6:	2301      	movs	r3, #1
 80025f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025fa:	4b77      	ldr	r3, [pc, #476]	@ (80027d8 <HAL_RCC_OscConfig+0x474>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002602:	2b00      	cmp	r3, #0
 8002604:	d118      	bne.n	8002638 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002606:	4b74      	ldr	r3, [pc, #464]	@ (80027d8 <HAL_RCC_OscConfig+0x474>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a73      	ldr	r2, [pc, #460]	@ (80027d8 <HAL_RCC_OscConfig+0x474>)
 800260c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002610:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002612:	f7ff fb29 	bl	8001c68 <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002618:	e008      	b.n	800262c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800261a:	f7ff fb25 	bl	8001c68 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e10c      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800262c:	4b6a      	ldr	r3, [pc, #424]	@ (80027d8 <HAL_RCC_OscConfig+0x474>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002634:	2b00      	cmp	r3, #0
 8002636:	d0f0      	beq.n	800261a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d106      	bne.n	800264e <HAL_RCC_OscConfig+0x2ea>
 8002640:	4b64      	ldr	r3, [pc, #400]	@ (80027d4 <HAL_RCC_OscConfig+0x470>)
 8002642:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002644:	4a63      	ldr	r2, [pc, #396]	@ (80027d4 <HAL_RCC_OscConfig+0x470>)
 8002646:	f043 0301 	orr.w	r3, r3, #1
 800264a:	6713      	str	r3, [r2, #112]	@ 0x70
 800264c:	e01c      	b.n	8002688 <HAL_RCC_OscConfig+0x324>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	2b05      	cmp	r3, #5
 8002654:	d10c      	bne.n	8002670 <HAL_RCC_OscConfig+0x30c>
 8002656:	4b5f      	ldr	r3, [pc, #380]	@ (80027d4 <HAL_RCC_OscConfig+0x470>)
 8002658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800265a:	4a5e      	ldr	r2, [pc, #376]	@ (80027d4 <HAL_RCC_OscConfig+0x470>)
 800265c:	f043 0304 	orr.w	r3, r3, #4
 8002660:	6713      	str	r3, [r2, #112]	@ 0x70
 8002662:	4b5c      	ldr	r3, [pc, #368]	@ (80027d4 <HAL_RCC_OscConfig+0x470>)
 8002664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002666:	4a5b      	ldr	r2, [pc, #364]	@ (80027d4 <HAL_RCC_OscConfig+0x470>)
 8002668:	f043 0301 	orr.w	r3, r3, #1
 800266c:	6713      	str	r3, [r2, #112]	@ 0x70
 800266e:	e00b      	b.n	8002688 <HAL_RCC_OscConfig+0x324>
 8002670:	4b58      	ldr	r3, [pc, #352]	@ (80027d4 <HAL_RCC_OscConfig+0x470>)
 8002672:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002674:	4a57      	ldr	r2, [pc, #348]	@ (80027d4 <HAL_RCC_OscConfig+0x470>)
 8002676:	f023 0301 	bic.w	r3, r3, #1
 800267a:	6713      	str	r3, [r2, #112]	@ 0x70
 800267c:	4b55      	ldr	r3, [pc, #340]	@ (80027d4 <HAL_RCC_OscConfig+0x470>)
 800267e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002680:	4a54      	ldr	r2, [pc, #336]	@ (80027d4 <HAL_RCC_OscConfig+0x470>)
 8002682:	f023 0304 	bic.w	r3, r3, #4
 8002686:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d015      	beq.n	80026bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002690:	f7ff faea 	bl	8001c68 <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002696:	e00a      	b.n	80026ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002698:	f7ff fae6 	bl	8001c68 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e0cb      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ae:	4b49      	ldr	r3, [pc, #292]	@ (80027d4 <HAL_RCC_OscConfig+0x470>)
 80026b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d0ee      	beq.n	8002698 <HAL_RCC_OscConfig+0x334>
 80026ba:	e014      	b.n	80026e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026bc:	f7ff fad4 	bl	8001c68 <HAL_GetTick>
 80026c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026c2:	e00a      	b.n	80026da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026c4:	f7ff fad0 	bl	8001c68 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e0b5      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026da:	4b3e      	ldr	r3, [pc, #248]	@ (80027d4 <HAL_RCC_OscConfig+0x470>)
 80026dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1ee      	bne.n	80026c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026e6:	7dfb      	ldrb	r3, [r7, #23]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d105      	bne.n	80026f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026ec:	4b39      	ldr	r3, [pc, #228]	@ (80027d4 <HAL_RCC_OscConfig+0x470>)
 80026ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f0:	4a38      	ldr	r2, [pc, #224]	@ (80027d4 <HAL_RCC_OscConfig+0x470>)
 80026f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026f6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 80a1 	beq.w	8002844 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002702:	4b34      	ldr	r3, [pc, #208]	@ (80027d4 <HAL_RCC_OscConfig+0x470>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f003 030c 	and.w	r3, r3, #12
 800270a:	2b08      	cmp	r3, #8
 800270c:	d05c      	beq.n	80027c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	2b02      	cmp	r3, #2
 8002714:	d141      	bne.n	800279a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002716:	4b31      	ldr	r3, [pc, #196]	@ (80027dc <HAL_RCC_OscConfig+0x478>)
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800271c:	f7ff faa4 	bl	8001c68 <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002724:	f7ff faa0 	bl	8001c68 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b02      	cmp	r3, #2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e087      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002736:	4b27      	ldr	r3, [pc, #156]	@ (80027d4 <HAL_RCC_OscConfig+0x470>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1f0      	bne.n	8002724 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	69da      	ldr	r2, [r3, #28]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	431a      	orrs	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002750:	019b      	lsls	r3, r3, #6
 8002752:	431a      	orrs	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002758:	085b      	lsrs	r3, r3, #1
 800275a:	3b01      	subs	r3, #1
 800275c:	041b      	lsls	r3, r3, #16
 800275e:	431a      	orrs	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002764:	061b      	lsls	r3, r3, #24
 8002766:	491b      	ldr	r1, [pc, #108]	@ (80027d4 <HAL_RCC_OscConfig+0x470>)
 8002768:	4313      	orrs	r3, r2
 800276a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800276c:	4b1b      	ldr	r3, [pc, #108]	@ (80027dc <HAL_RCC_OscConfig+0x478>)
 800276e:	2201      	movs	r2, #1
 8002770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002772:	f7ff fa79 	bl	8001c68 <HAL_GetTick>
 8002776:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002778:	e008      	b.n	800278c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800277a:	f7ff fa75 	bl	8001c68 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e05c      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800278c:	4b11      	ldr	r3, [pc, #68]	@ (80027d4 <HAL_RCC_OscConfig+0x470>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d0f0      	beq.n	800277a <HAL_RCC_OscConfig+0x416>
 8002798:	e054      	b.n	8002844 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800279a:	4b10      	ldr	r3, [pc, #64]	@ (80027dc <HAL_RCC_OscConfig+0x478>)
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a0:	f7ff fa62 	bl	8001c68 <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027a8:	f7ff fa5e 	bl	8001c68 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e045      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ba:	4b06      	ldr	r3, [pc, #24]	@ (80027d4 <HAL_RCC_OscConfig+0x470>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1f0      	bne.n	80027a8 <HAL_RCC_OscConfig+0x444>
 80027c6:	e03d      	b.n	8002844 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d107      	bne.n	80027e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e038      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
 80027d4:	40023800 	.word	0x40023800
 80027d8:	40007000 	.word	0x40007000
 80027dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002850 <HAL_RCC_OscConfig+0x4ec>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d028      	beq.n	8002840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d121      	bne.n	8002840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002806:	429a      	cmp	r2, r3
 8002808:	d11a      	bne.n	8002840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002810:	4013      	ands	r3, r2
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002816:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002818:	4293      	cmp	r3, r2
 800281a:	d111      	bne.n	8002840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002826:	085b      	lsrs	r3, r3, #1
 8002828:	3b01      	subs	r3, #1
 800282a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800282c:	429a      	cmp	r2, r3
 800282e:	d107      	bne.n	8002840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800283a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800283c:	429a      	cmp	r2, r3
 800283e:	d001      	beq.n	8002844 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e000      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3718      	adds	r7, #24
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	40023800 	.word	0x40023800

08002854 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d101      	bne.n	8002868 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e0cc      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002868:	4b68      	ldr	r3, [pc, #416]	@ (8002a0c <HAL_RCC_ClockConfig+0x1b8>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0307 	and.w	r3, r3, #7
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	429a      	cmp	r2, r3
 8002874:	d90c      	bls.n	8002890 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002876:	4b65      	ldr	r3, [pc, #404]	@ (8002a0c <HAL_RCC_ClockConfig+0x1b8>)
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800287e:	4b63      	ldr	r3, [pc, #396]	@ (8002a0c <HAL_RCC_ClockConfig+0x1b8>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0307 	and.w	r3, r3, #7
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	429a      	cmp	r2, r3
 800288a:	d001      	beq.n	8002890 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e0b8      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d020      	beq.n	80028de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d005      	beq.n	80028b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028a8:	4b59      	ldr	r3, [pc, #356]	@ (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	4a58      	ldr	r2, [pc, #352]	@ (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80028ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80028b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0308 	and.w	r3, r3, #8
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d005      	beq.n	80028cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028c0:	4b53      	ldr	r3, [pc, #332]	@ (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	4a52      	ldr	r2, [pc, #328]	@ (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80028c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80028ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028cc:	4b50      	ldr	r3, [pc, #320]	@ (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	494d      	ldr	r1, [pc, #308]	@ (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d044      	beq.n	8002974 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d107      	bne.n	8002902 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028f2:	4b47      	ldr	r3, [pc, #284]	@ (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d119      	bne.n	8002932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e07f      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	2b02      	cmp	r3, #2
 8002908:	d003      	beq.n	8002912 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800290e:	2b03      	cmp	r3, #3
 8002910:	d107      	bne.n	8002922 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002912:	4b3f      	ldr	r3, [pc, #252]	@ (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d109      	bne.n	8002932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e06f      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002922:	4b3b      	ldr	r3, [pc, #236]	@ (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e067      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002932:	4b37      	ldr	r3, [pc, #220]	@ (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f023 0203 	bic.w	r2, r3, #3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	4934      	ldr	r1, [pc, #208]	@ (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 8002940:	4313      	orrs	r3, r2
 8002942:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002944:	f7ff f990 	bl	8001c68 <HAL_GetTick>
 8002948:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800294a:	e00a      	b.n	8002962 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800294c:	f7ff f98c 	bl	8001c68 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	f241 3288 	movw	r2, #5000	@ 0x1388
 800295a:	4293      	cmp	r3, r2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e04f      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002962:	4b2b      	ldr	r3, [pc, #172]	@ (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f003 020c 	and.w	r2, r3, #12
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	429a      	cmp	r2, r3
 8002972:	d1eb      	bne.n	800294c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002974:	4b25      	ldr	r3, [pc, #148]	@ (8002a0c <HAL_RCC_ClockConfig+0x1b8>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0307 	and.w	r3, r3, #7
 800297c:	683a      	ldr	r2, [r7, #0]
 800297e:	429a      	cmp	r2, r3
 8002980:	d20c      	bcs.n	800299c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002982:	4b22      	ldr	r3, [pc, #136]	@ (8002a0c <HAL_RCC_ClockConfig+0x1b8>)
 8002984:	683a      	ldr	r2, [r7, #0]
 8002986:	b2d2      	uxtb	r2, r2
 8002988:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800298a:	4b20      	ldr	r3, [pc, #128]	@ (8002a0c <HAL_RCC_ClockConfig+0x1b8>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0307 	and.w	r3, r3, #7
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	429a      	cmp	r2, r3
 8002996:	d001      	beq.n	800299c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e032      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0304 	and.w	r3, r3, #4
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d008      	beq.n	80029ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029a8:	4b19      	ldr	r3, [pc, #100]	@ (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	4916      	ldr	r1, [pc, #88]	@ (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0308 	and.w	r3, r3, #8
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d009      	beq.n	80029da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029c6:	4b12      	ldr	r3, [pc, #72]	@ (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	490e      	ldr	r1, [pc, #56]	@ (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029da:	f000 f821 	bl	8002a20 <HAL_RCC_GetSysClockFreq>
 80029de:	4602      	mov	r2, r0
 80029e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	091b      	lsrs	r3, r3, #4
 80029e6:	f003 030f 	and.w	r3, r3, #15
 80029ea:	490a      	ldr	r1, [pc, #40]	@ (8002a14 <HAL_RCC_ClockConfig+0x1c0>)
 80029ec:	5ccb      	ldrb	r3, [r1, r3]
 80029ee:	fa22 f303 	lsr.w	r3, r2, r3
 80029f2:	4a09      	ldr	r2, [pc, #36]	@ (8002a18 <HAL_RCC_ClockConfig+0x1c4>)
 80029f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029f6:	4b09      	ldr	r3, [pc, #36]	@ (8002a1c <HAL_RCC_ClockConfig+0x1c8>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff f8f0 	bl	8001be0 <HAL_InitTick>

  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3710      	adds	r7, #16
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	40023c00 	.word	0x40023c00
 8002a10:	40023800 	.word	0x40023800
 8002a14:	08006584 	.word	0x08006584
 8002a18:	20000000 	.word	0x20000000
 8002a1c:	2000001c 	.word	0x2000001c

08002a20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a24:	b090      	sub	sp, #64	@ 0x40
 8002a26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a30:	2300      	movs	r3, #0
 8002a32:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002a34:	2300      	movs	r3, #0
 8002a36:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a38:	4b59      	ldr	r3, [pc, #356]	@ (8002ba0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f003 030c 	and.w	r3, r3, #12
 8002a40:	2b08      	cmp	r3, #8
 8002a42:	d00d      	beq.n	8002a60 <HAL_RCC_GetSysClockFreq+0x40>
 8002a44:	2b08      	cmp	r3, #8
 8002a46:	f200 80a1 	bhi.w	8002b8c <HAL_RCC_GetSysClockFreq+0x16c>
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d002      	beq.n	8002a54 <HAL_RCC_GetSysClockFreq+0x34>
 8002a4e:	2b04      	cmp	r3, #4
 8002a50:	d003      	beq.n	8002a5a <HAL_RCC_GetSysClockFreq+0x3a>
 8002a52:	e09b      	b.n	8002b8c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a54:	4b53      	ldr	r3, [pc, #332]	@ (8002ba4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a56:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002a58:	e09b      	b.n	8002b92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a5a:	4b53      	ldr	r3, [pc, #332]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a5c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a5e:	e098      	b.n	8002b92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a60:	4b4f      	ldr	r3, [pc, #316]	@ (8002ba0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a68:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a6a:	4b4d      	ldr	r3, [pc, #308]	@ (8002ba0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d028      	beq.n	8002ac8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a76:	4b4a      	ldr	r3, [pc, #296]	@ (8002ba0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	099b      	lsrs	r3, r3, #6
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	623b      	str	r3, [r7, #32]
 8002a80:	627a      	str	r2, [r7, #36]	@ 0x24
 8002a82:	6a3b      	ldr	r3, [r7, #32]
 8002a84:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002a88:	2100      	movs	r1, #0
 8002a8a:	4b47      	ldr	r3, [pc, #284]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a8c:	fb03 f201 	mul.w	r2, r3, r1
 8002a90:	2300      	movs	r3, #0
 8002a92:	fb00 f303 	mul.w	r3, r0, r3
 8002a96:	4413      	add	r3, r2
 8002a98:	4a43      	ldr	r2, [pc, #268]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a9a:	fba0 1202 	umull	r1, r2, r0, r2
 8002a9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002aa0:	460a      	mov	r2, r1
 8002aa2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002aa4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002aa6:	4413      	add	r3, r2
 8002aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002aaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002aac:	2200      	movs	r2, #0
 8002aae:	61bb      	str	r3, [r7, #24]
 8002ab0:	61fa      	str	r2, [r7, #28]
 8002ab2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ab6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002aba:	f7fe f8c5 	bl	8000c48 <__aeabi_uldivmod>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ac6:	e053      	b.n	8002b70 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ac8:	4b35      	ldr	r3, [pc, #212]	@ (8002ba0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	099b      	lsrs	r3, r3, #6
 8002ace:	2200      	movs	r2, #0
 8002ad0:	613b      	str	r3, [r7, #16]
 8002ad2:	617a      	str	r2, [r7, #20]
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002ada:	f04f 0b00 	mov.w	fp, #0
 8002ade:	4652      	mov	r2, sl
 8002ae0:	465b      	mov	r3, fp
 8002ae2:	f04f 0000 	mov.w	r0, #0
 8002ae6:	f04f 0100 	mov.w	r1, #0
 8002aea:	0159      	lsls	r1, r3, #5
 8002aec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002af0:	0150      	lsls	r0, r2, #5
 8002af2:	4602      	mov	r2, r0
 8002af4:	460b      	mov	r3, r1
 8002af6:	ebb2 080a 	subs.w	r8, r2, sl
 8002afa:	eb63 090b 	sbc.w	r9, r3, fp
 8002afe:	f04f 0200 	mov.w	r2, #0
 8002b02:	f04f 0300 	mov.w	r3, #0
 8002b06:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002b0a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002b0e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002b12:	ebb2 0408 	subs.w	r4, r2, r8
 8002b16:	eb63 0509 	sbc.w	r5, r3, r9
 8002b1a:	f04f 0200 	mov.w	r2, #0
 8002b1e:	f04f 0300 	mov.w	r3, #0
 8002b22:	00eb      	lsls	r3, r5, #3
 8002b24:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b28:	00e2      	lsls	r2, r4, #3
 8002b2a:	4614      	mov	r4, r2
 8002b2c:	461d      	mov	r5, r3
 8002b2e:	eb14 030a 	adds.w	r3, r4, sl
 8002b32:	603b      	str	r3, [r7, #0]
 8002b34:	eb45 030b 	adc.w	r3, r5, fp
 8002b38:	607b      	str	r3, [r7, #4]
 8002b3a:	f04f 0200 	mov.w	r2, #0
 8002b3e:	f04f 0300 	mov.w	r3, #0
 8002b42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b46:	4629      	mov	r1, r5
 8002b48:	028b      	lsls	r3, r1, #10
 8002b4a:	4621      	mov	r1, r4
 8002b4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b50:	4621      	mov	r1, r4
 8002b52:	028a      	lsls	r2, r1, #10
 8002b54:	4610      	mov	r0, r2
 8002b56:	4619      	mov	r1, r3
 8002b58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	60bb      	str	r3, [r7, #8]
 8002b5e:	60fa      	str	r2, [r7, #12]
 8002b60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b64:	f7fe f870 	bl	8000c48 <__aeabi_uldivmod>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b70:	4b0b      	ldr	r3, [pc, #44]	@ (8002ba0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	0c1b      	lsrs	r3, r3, #16
 8002b76:	f003 0303 	and.w	r3, r3, #3
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002b80:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b88:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002b8a:	e002      	b.n	8002b92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b8c:	4b05      	ldr	r3, [pc, #20]	@ (8002ba4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b8e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002b90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3740      	adds	r7, #64	@ 0x40
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b9e:	bf00      	nop
 8002ba0:	40023800 	.word	0x40023800
 8002ba4:	00f42400 	.word	0x00f42400
 8002ba8:	017d7840 	.word	0x017d7840

08002bac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bb0:	4b03      	ldr	r3, [pc, #12]	@ (8002bc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	20000000 	.word	0x20000000

08002bc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002bc8:	f7ff fff0 	bl	8002bac <HAL_RCC_GetHCLKFreq>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	4b05      	ldr	r3, [pc, #20]	@ (8002be4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	0a9b      	lsrs	r3, r3, #10
 8002bd4:	f003 0307 	and.w	r3, r3, #7
 8002bd8:	4903      	ldr	r1, [pc, #12]	@ (8002be8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bda:	5ccb      	ldrb	r3, [r1, r3]
 8002bdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	40023800 	.word	0x40023800
 8002be8:	08006594 	.word	0x08006594

08002bec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002bf0:	f7ff ffdc 	bl	8002bac <HAL_RCC_GetHCLKFreq>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	4b05      	ldr	r3, [pc, #20]	@ (8002c0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	0b5b      	lsrs	r3, r3, #13
 8002bfc:	f003 0307 	and.w	r3, r3, #7
 8002c00:	4903      	ldr	r1, [pc, #12]	@ (8002c10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c02:	5ccb      	ldrb	r3, [r1, r3]
 8002c04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	40023800 	.word	0x40023800
 8002c10:	08006594 	.word	0x08006594

08002c14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e042      	b.n	8002cac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d106      	bne.n	8002c40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 f83a 	bl	8002cb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2224      	movs	r2, #36	@ 0x24
 8002c44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68da      	ldr	r2, [r3, #12]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 fb83 	bl	8003364 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	691a      	ldr	r2, [r3, #16]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002c6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	695a      	ldr	r2, [r3, #20]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002c7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68da      	ldr	r2, [r3, #12]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2220      	movs	r2, #32
 8002c98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3708      	adds	r7, #8
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b08a      	sub	sp, #40	@ 0x28
 8002ccc:	af02      	add	r7, sp, #8
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	603b      	str	r3, [r7, #0]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b20      	cmp	r3, #32
 8002ce6:	d175      	bne.n	8002dd4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d002      	beq.n	8002cf4 <HAL_UART_Transmit+0x2c>
 8002cee:	88fb      	ldrh	r3, [r7, #6]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d101      	bne.n	8002cf8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e06e      	b.n	8002dd6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2221      	movs	r2, #33	@ 0x21
 8002d02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d06:	f7fe ffaf 	bl	8001c68 <HAL_GetTick>
 8002d0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	88fa      	ldrh	r2, [r7, #6]
 8002d10:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	88fa      	ldrh	r2, [r7, #6]
 8002d16:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d20:	d108      	bne.n	8002d34 <HAL_UART_Transmit+0x6c>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d104      	bne.n	8002d34 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	61bb      	str	r3, [r7, #24]
 8002d32:	e003      	b.n	8002d3c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d3c:	e02e      	b.n	8002d9c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	9300      	str	r3, [sp, #0]
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	2200      	movs	r2, #0
 8002d46:	2180      	movs	r1, #128	@ 0x80
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f000 f98b 	bl	8003064 <UART_WaitOnFlagUntilTimeout>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d005      	beq.n	8002d60 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2220      	movs	r2, #32
 8002d58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e03a      	b.n	8002dd6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10b      	bne.n	8002d7e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	881b      	ldrh	r3, [r3, #0]
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d74:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	3302      	adds	r3, #2
 8002d7a:	61bb      	str	r3, [r7, #24]
 8002d7c:	e007      	b.n	8002d8e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	781a      	ldrb	r2, [r3, #0]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	3b01      	subs	r3, #1
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1cb      	bne.n	8002d3e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	2200      	movs	r2, #0
 8002dae:	2140      	movs	r1, #64	@ 0x40
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f000 f957 	bl	8003064 <UART_WaitOnFlagUntilTimeout>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d005      	beq.n	8002dc8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e006      	b.n	8002dd6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2220      	movs	r2, #32
 8002dcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	e000      	b.n	8002dd6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002dd4:	2302      	movs	r3, #2
  }
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3720      	adds	r7, #32
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b084      	sub	sp, #16
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	60f8      	str	r0, [r7, #12]
 8002de6:	60b9      	str	r1, [r7, #8]
 8002de8:	4613      	mov	r3, r2
 8002dea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	2b20      	cmp	r3, #32
 8002df6:	d112      	bne.n	8002e1e <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d002      	beq.n	8002e04 <HAL_UART_Receive_DMA+0x26>
 8002dfe:	88fb      	ldrh	r3, [r7, #6]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d101      	bne.n	8002e08 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e00b      	b.n	8002e20 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002e0e:	88fb      	ldrh	r3, [r7, #6]
 8002e10:	461a      	mov	r2, r3
 8002e12:	68b9      	ldr	r1, [r7, #8]
 8002e14:	68f8      	ldr	r0, [r7, #12]
 8002e16:	f000 f97f 	bl	8003118 <UART_Start_Receive_DMA>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	e000      	b.n	8002e20 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002e1e:	2302      	movs	r3, #2
  }
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3710      	adds	r7, #16
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	460b      	mov	r3, r1
 8002e5a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b09c      	sub	sp, #112	@ 0x70
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e74:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d172      	bne.n	8002f6a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002e84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e86:	2200      	movs	r2, #0
 8002e88:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	330c      	adds	r3, #12
 8002e90:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e94:	e853 3f00 	ldrex	r3, [r3]
 8002e98:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002e9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ea0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002ea2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	330c      	adds	r3, #12
 8002ea8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002eaa:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002eac:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002eb0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002eb2:	e841 2300 	strex	r3, r2, [r1]
 8002eb6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002eb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1e5      	bne.n	8002e8a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ebe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	3314      	adds	r3, #20
 8002ec4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ec8:	e853 3f00 	ldrex	r3, [r3]
 8002ecc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002ece:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ed0:	f023 0301 	bic.w	r3, r3, #1
 8002ed4:	667b      	str	r3, [r7, #100]	@ 0x64
 8002ed6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	3314      	adds	r3, #20
 8002edc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002ede:	647a      	str	r2, [r7, #68]	@ 0x44
 8002ee0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ee2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002ee4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002ee6:	e841 2300 	strex	r3, r2, [r1]
 8002eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002eec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1e5      	bne.n	8002ebe <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ef2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	3314      	adds	r3, #20
 8002ef8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002efc:	e853 3f00 	ldrex	r3, [r3]
 8002f00:	623b      	str	r3, [r7, #32]
   return(result);
 8002f02:	6a3b      	ldr	r3, [r7, #32]
 8002f04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f08:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	3314      	adds	r3, #20
 8002f10:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002f12:	633a      	str	r2, [r7, #48]	@ 0x30
 8002f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002f18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f1a:	e841 2300 	strex	r3, r2, [r1]
 8002f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1e5      	bne.n	8002ef2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002f26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f28:	2220      	movs	r2, #32
 8002f2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d119      	bne.n	8002f6a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	330c      	adds	r3, #12
 8002f3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	e853 3f00 	ldrex	r3, [r3]
 8002f44:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f023 0310 	bic.w	r3, r3, #16
 8002f4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002f4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	330c      	adds	r3, #12
 8002f54:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002f56:	61fa      	str	r2, [r7, #28]
 8002f58:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f5a:	69b9      	ldr	r1, [r7, #24]
 8002f5c:	69fa      	ldr	r2, [r7, #28]
 8002f5e:	e841 2300 	strex	r3, r2, [r1]
 8002f62:	617b      	str	r3, [r7, #20]
   return(result);
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1e5      	bne.n	8002f36 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d106      	bne.n	8002f86 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f7a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002f80:	f7ff ff66 	bl	8002e50 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002f84:	e002      	b.n	8002f8c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8002f86:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002f88:	f7fe f890 	bl	80010ac <HAL_UART_RxCpltCallback>
}
 8002f8c:	bf00      	nop
 8002f8e:	3770      	adds	r7, #112	@ 0x70
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fa0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d108      	bne.n	8002fc2 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002fb4:	085b      	lsrs	r3, r3, #1
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	4619      	mov	r1, r3
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f7ff ff48 	bl	8002e50 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002fc0:	e002      	b.n	8002fc8 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f7ff ff30 	bl	8002e28 <HAL_UART_RxHalfCpltCallback>
}
 8002fc8:	bf00      	nop
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fe0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	695b      	ldr	r3, [r3, #20]
 8002fe8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fec:	2b80      	cmp	r3, #128	@ 0x80
 8002fee:	bf0c      	ite	eq
 8002ff0:	2301      	moveq	r3, #1
 8002ff2:	2300      	movne	r3, #0
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b21      	cmp	r3, #33	@ 0x21
 8003002:	d108      	bne.n	8003016 <UART_DMAError+0x46>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d005      	beq.n	8003016 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	2200      	movs	r2, #0
 800300e:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8003010:	68b8      	ldr	r0, [r7, #8]
 8003012:	f000 f91b 	bl	800324c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003020:	2b40      	cmp	r3, #64	@ 0x40
 8003022:	bf0c      	ite	eq
 8003024:	2301      	moveq	r3, #1
 8003026:	2300      	movne	r3, #0
 8003028:	b2db      	uxtb	r3, r3
 800302a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003032:	b2db      	uxtb	r3, r3
 8003034:	2b22      	cmp	r3, #34	@ 0x22
 8003036:	d108      	bne.n	800304a <UART_DMAError+0x7a>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d005      	beq.n	800304a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	2200      	movs	r2, #0
 8003042:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8003044:	68b8      	ldr	r0, [r7, #8]
 8003046:	f000 f929 	bl	800329c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800304e:	f043 0210 	orr.w	r2, r3, #16
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003056:	68b8      	ldr	r0, [r7, #8]
 8003058:	f7ff fef0 	bl	8002e3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800305c:	bf00      	nop
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	603b      	str	r3, [r7, #0]
 8003070:	4613      	mov	r3, r2
 8003072:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003074:	e03b      	b.n	80030ee <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003076:	6a3b      	ldr	r3, [r7, #32]
 8003078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800307c:	d037      	beq.n	80030ee <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800307e:	f7fe fdf3 	bl	8001c68 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	6a3a      	ldr	r2, [r7, #32]
 800308a:	429a      	cmp	r2, r3
 800308c:	d302      	bcc.n	8003094 <UART_WaitOnFlagUntilTimeout+0x30>
 800308e:	6a3b      	ldr	r3, [r7, #32]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d101      	bne.n	8003098 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e03a      	b.n	800310e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	f003 0304 	and.w	r3, r3, #4
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d023      	beq.n	80030ee <UART_WaitOnFlagUntilTimeout+0x8a>
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	2b80      	cmp	r3, #128	@ 0x80
 80030aa:	d020      	beq.n	80030ee <UART_WaitOnFlagUntilTimeout+0x8a>
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	2b40      	cmp	r3, #64	@ 0x40
 80030b0:	d01d      	beq.n	80030ee <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0308 	and.w	r3, r3, #8
 80030bc:	2b08      	cmp	r3, #8
 80030be:	d116      	bne.n	80030ee <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80030c0:	2300      	movs	r3, #0
 80030c2:	617b      	str	r3, [r7, #20]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	617b      	str	r3, [r7, #20]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	617b      	str	r3, [r7, #20]
 80030d4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f000 f8e0 	bl	800329c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2208      	movs	r2, #8
 80030e0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e00f      	b.n	800310e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	4013      	ands	r3, r2
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	bf0c      	ite	eq
 80030fe:	2301      	moveq	r3, #1
 8003100:	2300      	movne	r3, #0
 8003102:	b2db      	uxtb	r3, r3
 8003104:	461a      	mov	r2, r3
 8003106:	79fb      	ldrb	r3, [r7, #7]
 8003108:	429a      	cmp	r2, r3
 800310a:	d0b4      	beq.n	8003076 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3718      	adds	r7, #24
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
	...

08003118 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b098      	sub	sp, #96	@ 0x60
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	4613      	mov	r3, r2
 8003124:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003126:	68ba      	ldr	r2, [r7, #8]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	88fa      	ldrh	r2, [r7, #6]
 8003130:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2222      	movs	r2, #34	@ 0x22
 800313c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003144:	4a3e      	ldr	r2, [pc, #248]	@ (8003240 <UART_Start_Receive_DMA+0x128>)
 8003146:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800314c:	4a3d      	ldr	r2, [pc, #244]	@ (8003244 <UART_Start_Receive_DMA+0x12c>)
 800314e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003154:	4a3c      	ldr	r2, [pc, #240]	@ (8003248 <UART_Start_Receive_DMA+0x130>)
 8003156:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800315c:	2200      	movs	r2, #0
 800315e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003160:	f107 0308 	add.w	r3, r7, #8
 8003164:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	3304      	adds	r3, #4
 8003170:	4619      	mov	r1, r3
 8003172:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	88fb      	ldrh	r3, [r7, #6]
 8003178:	f7fe feb7 	bl	8001eea <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800317c:	2300      	movs	r3, #0
 800317e:	613b      	str	r3, [r7, #16]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	613b      	str	r3, [r7, #16]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	613b      	str	r3, [r7, #16]
 8003190:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d019      	beq.n	80031ce <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	330c      	adds	r3, #12
 80031a0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031a4:	e853 3f00 	ldrex	r3, [r3]
 80031a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80031aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	330c      	adds	r3, #12
 80031b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80031ba:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80031bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031be:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80031c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80031c2:	e841 2300 	strex	r3, r2, [r1]
 80031c6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80031c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1e5      	bne.n	800319a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	3314      	adds	r3, #20
 80031d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031d8:	e853 3f00 	ldrex	r3, [r3]
 80031dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80031de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031e0:	f043 0301 	orr.w	r3, r3, #1
 80031e4:	657b      	str	r3, [r7, #84]	@ 0x54
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	3314      	adds	r3, #20
 80031ec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80031ee:	63ba      	str	r2, [r7, #56]	@ 0x38
 80031f0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80031f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80031f6:	e841 2300 	strex	r3, r2, [r1]
 80031fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80031fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1e5      	bne.n	80031ce <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	3314      	adds	r3, #20
 8003208:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	e853 3f00 	ldrex	r3, [r3]
 8003210:	617b      	str	r3, [r7, #20]
   return(result);
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003218:	653b      	str	r3, [r7, #80]	@ 0x50
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	3314      	adds	r3, #20
 8003220:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003222:	627a      	str	r2, [r7, #36]	@ 0x24
 8003224:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003226:	6a39      	ldr	r1, [r7, #32]
 8003228:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800322a:	e841 2300 	strex	r3, r2, [r1]
 800322e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1e5      	bne.n	8003202 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3760      	adds	r7, #96	@ 0x60
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	08002e69 	.word	0x08002e69
 8003244:	08002f95 	.word	0x08002f95
 8003248:	08002fd1 	.word	0x08002fd1

0800324c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800324c:	b480      	push	{r7}
 800324e:	b089      	sub	sp, #36	@ 0x24
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	330c      	adds	r3, #12
 800325a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	e853 3f00 	ldrex	r3, [r3]
 8003262:	60bb      	str	r3, [r7, #8]
   return(result);
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800326a:	61fb      	str	r3, [r7, #28]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	330c      	adds	r3, #12
 8003272:	69fa      	ldr	r2, [r7, #28]
 8003274:	61ba      	str	r2, [r7, #24]
 8003276:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003278:	6979      	ldr	r1, [r7, #20]
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	e841 2300 	strex	r3, r2, [r1]
 8003280:	613b      	str	r3, [r7, #16]
   return(result);
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d1e5      	bne.n	8003254 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2220      	movs	r2, #32
 800328c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8003290:	bf00      	nop
 8003292:	3724      	adds	r7, #36	@ 0x24
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800329c:	b480      	push	{r7}
 800329e:	b095      	sub	sp, #84	@ 0x54
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	330c      	adds	r3, #12
 80032aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032ae:	e853 3f00 	ldrex	r3, [r3]
 80032b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80032b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80032ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	330c      	adds	r3, #12
 80032c2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80032c4:	643a      	str	r2, [r7, #64]	@ 0x40
 80032c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80032ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80032cc:	e841 2300 	strex	r3, r2, [r1]
 80032d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80032d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d1e5      	bne.n	80032a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	3314      	adds	r3, #20
 80032de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032e0:	6a3b      	ldr	r3, [r7, #32]
 80032e2:	e853 3f00 	ldrex	r3, [r3]
 80032e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	f023 0301 	bic.w	r3, r3, #1
 80032ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	3314      	adds	r3, #20
 80032f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80032f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80032fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80032fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003300:	e841 2300 	strex	r3, r2, [r1]
 8003304:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003308:	2b00      	cmp	r3, #0
 800330a:	d1e5      	bne.n	80032d8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003310:	2b01      	cmp	r3, #1
 8003312:	d119      	bne.n	8003348 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	330c      	adds	r3, #12
 800331a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	e853 3f00 	ldrex	r3, [r3]
 8003322:	60bb      	str	r3, [r7, #8]
   return(result);
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	f023 0310 	bic.w	r3, r3, #16
 800332a:	647b      	str	r3, [r7, #68]	@ 0x44
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	330c      	adds	r3, #12
 8003332:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003334:	61ba      	str	r2, [r7, #24]
 8003336:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003338:	6979      	ldr	r1, [r7, #20]
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	e841 2300 	strex	r3, r2, [r1]
 8003340:	613b      	str	r3, [r7, #16]
   return(result);
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d1e5      	bne.n	8003314 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2220      	movs	r2, #32
 800334c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003356:	bf00      	nop
 8003358:	3754      	adds	r7, #84	@ 0x54
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
	...

08003364 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003364:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003368:	b0c0      	sub	sp, #256	@ 0x100
 800336a:	af00      	add	r7, sp, #0
 800336c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800337c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003380:	68d9      	ldr	r1, [r3, #12]
 8003382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	ea40 0301 	orr.w	r3, r0, r1
 800338c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800338e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003392:	689a      	ldr	r2, [r3, #8]
 8003394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	431a      	orrs	r2, r3
 800339c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	431a      	orrs	r2, r3
 80033a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80033b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80033bc:	f021 010c 	bic.w	r1, r1, #12
 80033c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80033ca:	430b      	orrs	r3, r1
 80033cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80033da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033de:	6999      	ldr	r1, [r3, #24]
 80033e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	ea40 0301 	orr.w	r3, r0, r1
 80033ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	4b8f      	ldr	r3, [pc, #572]	@ (8003630 <UART_SetConfig+0x2cc>)
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d005      	beq.n	8003404 <UART_SetConfig+0xa0>
 80033f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	4b8d      	ldr	r3, [pc, #564]	@ (8003634 <UART_SetConfig+0x2d0>)
 8003400:	429a      	cmp	r2, r3
 8003402:	d104      	bne.n	800340e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003404:	f7ff fbf2 	bl	8002bec <HAL_RCC_GetPCLK2Freq>
 8003408:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800340c:	e003      	b.n	8003416 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800340e:	f7ff fbd9 	bl	8002bc4 <HAL_RCC_GetPCLK1Freq>
 8003412:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800341a:	69db      	ldr	r3, [r3, #28]
 800341c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003420:	f040 810c 	bne.w	800363c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003424:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003428:	2200      	movs	r2, #0
 800342a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800342e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003432:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003436:	4622      	mov	r2, r4
 8003438:	462b      	mov	r3, r5
 800343a:	1891      	adds	r1, r2, r2
 800343c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800343e:	415b      	adcs	r3, r3
 8003440:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003442:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003446:	4621      	mov	r1, r4
 8003448:	eb12 0801 	adds.w	r8, r2, r1
 800344c:	4629      	mov	r1, r5
 800344e:	eb43 0901 	adc.w	r9, r3, r1
 8003452:	f04f 0200 	mov.w	r2, #0
 8003456:	f04f 0300 	mov.w	r3, #0
 800345a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800345e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003462:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003466:	4690      	mov	r8, r2
 8003468:	4699      	mov	r9, r3
 800346a:	4623      	mov	r3, r4
 800346c:	eb18 0303 	adds.w	r3, r8, r3
 8003470:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003474:	462b      	mov	r3, r5
 8003476:	eb49 0303 	adc.w	r3, r9, r3
 800347a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800347e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800348a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800348e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003492:	460b      	mov	r3, r1
 8003494:	18db      	adds	r3, r3, r3
 8003496:	653b      	str	r3, [r7, #80]	@ 0x50
 8003498:	4613      	mov	r3, r2
 800349a:	eb42 0303 	adc.w	r3, r2, r3
 800349e:	657b      	str	r3, [r7, #84]	@ 0x54
 80034a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80034a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80034a8:	f7fd fbce 	bl	8000c48 <__aeabi_uldivmod>
 80034ac:	4602      	mov	r2, r0
 80034ae:	460b      	mov	r3, r1
 80034b0:	4b61      	ldr	r3, [pc, #388]	@ (8003638 <UART_SetConfig+0x2d4>)
 80034b2:	fba3 2302 	umull	r2, r3, r3, r2
 80034b6:	095b      	lsrs	r3, r3, #5
 80034b8:	011c      	lsls	r4, r3, #4
 80034ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034be:	2200      	movs	r2, #0
 80034c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80034c4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80034c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80034cc:	4642      	mov	r2, r8
 80034ce:	464b      	mov	r3, r9
 80034d0:	1891      	adds	r1, r2, r2
 80034d2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80034d4:	415b      	adcs	r3, r3
 80034d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80034dc:	4641      	mov	r1, r8
 80034de:	eb12 0a01 	adds.w	sl, r2, r1
 80034e2:	4649      	mov	r1, r9
 80034e4:	eb43 0b01 	adc.w	fp, r3, r1
 80034e8:	f04f 0200 	mov.w	r2, #0
 80034ec:	f04f 0300 	mov.w	r3, #0
 80034f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80034f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80034f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034fc:	4692      	mov	sl, r2
 80034fe:	469b      	mov	fp, r3
 8003500:	4643      	mov	r3, r8
 8003502:	eb1a 0303 	adds.w	r3, sl, r3
 8003506:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800350a:	464b      	mov	r3, r9
 800350c:	eb4b 0303 	adc.w	r3, fp, r3
 8003510:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003520:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003524:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003528:	460b      	mov	r3, r1
 800352a:	18db      	adds	r3, r3, r3
 800352c:	643b      	str	r3, [r7, #64]	@ 0x40
 800352e:	4613      	mov	r3, r2
 8003530:	eb42 0303 	adc.w	r3, r2, r3
 8003534:	647b      	str	r3, [r7, #68]	@ 0x44
 8003536:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800353a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800353e:	f7fd fb83 	bl	8000c48 <__aeabi_uldivmod>
 8003542:	4602      	mov	r2, r0
 8003544:	460b      	mov	r3, r1
 8003546:	4611      	mov	r1, r2
 8003548:	4b3b      	ldr	r3, [pc, #236]	@ (8003638 <UART_SetConfig+0x2d4>)
 800354a:	fba3 2301 	umull	r2, r3, r3, r1
 800354e:	095b      	lsrs	r3, r3, #5
 8003550:	2264      	movs	r2, #100	@ 0x64
 8003552:	fb02 f303 	mul.w	r3, r2, r3
 8003556:	1acb      	subs	r3, r1, r3
 8003558:	00db      	lsls	r3, r3, #3
 800355a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800355e:	4b36      	ldr	r3, [pc, #216]	@ (8003638 <UART_SetConfig+0x2d4>)
 8003560:	fba3 2302 	umull	r2, r3, r3, r2
 8003564:	095b      	lsrs	r3, r3, #5
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800356c:	441c      	add	r4, r3
 800356e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003572:	2200      	movs	r2, #0
 8003574:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003578:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800357c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003580:	4642      	mov	r2, r8
 8003582:	464b      	mov	r3, r9
 8003584:	1891      	adds	r1, r2, r2
 8003586:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003588:	415b      	adcs	r3, r3
 800358a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800358c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003590:	4641      	mov	r1, r8
 8003592:	1851      	adds	r1, r2, r1
 8003594:	6339      	str	r1, [r7, #48]	@ 0x30
 8003596:	4649      	mov	r1, r9
 8003598:	414b      	adcs	r3, r1
 800359a:	637b      	str	r3, [r7, #52]	@ 0x34
 800359c:	f04f 0200 	mov.w	r2, #0
 80035a0:	f04f 0300 	mov.w	r3, #0
 80035a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80035a8:	4659      	mov	r1, fp
 80035aa:	00cb      	lsls	r3, r1, #3
 80035ac:	4651      	mov	r1, sl
 80035ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035b2:	4651      	mov	r1, sl
 80035b4:	00ca      	lsls	r2, r1, #3
 80035b6:	4610      	mov	r0, r2
 80035b8:	4619      	mov	r1, r3
 80035ba:	4603      	mov	r3, r0
 80035bc:	4642      	mov	r2, r8
 80035be:	189b      	adds	r3, r3, r2
 80035c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80035c4:	464b      	mov	r3, r9
 80035c6:	460a      	mov	r2, r1
 80035c8:	eb42 0303 	adc.w	r3, r2, r3
 80035cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80035d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80035dc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80035e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80035e4:	460b      	mov	r3, r1
 80035e6:	18db      	adds	r3, r3, r3
 80035e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035ea:	4613      	mov	r3, r2
 80035ec:	eb42 0303 	adc.w	r3, r2, r3
 80035f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80035f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80035fa:	f7fd fb25 	bl	8000c48 <__aeabi_uldivmod>
 80035fe:	4602      	mov	r2, r0
 8003600:	460b      	mov	r3, r1
 8003602:	4b0d      	ldr	r3, [pc, #52]	@ (8003638 <UART_SetConfig+0x2d4>)
 8003604:	fba3 1302 	umull	r1, r3, r3, r2
 8003608:	095b      	lsrs	r3, r3, #5
 800360a:	2164      	movs	r1, #100	@ 0x64
 800360c:	fb01 f303 	mul.w	r3, r1, r3
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	3332      	adds	r3, #50	@ 0x32
 8003616:	4a08      	ldr	r2, [pc, #32]	@ (8003638 <UART_SetConfig+0x2d4>)
 8003618:	fba2 2303 	umull	r2, r3, r2, r3
 800361c:	095b      	lsrs	r3, r3, #5
 800361e:	f003 0207 	and.w	r2, r3, #7
 8003622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4422      	add	r2, r4
 800362a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800362c:	e106      	b.n	800383c <UART_SetConfig+0x4d8>
 800362e:	bf00      	nop
 8003630:	40011000 	.word	0x40011000
 8003634:	40011400 	.word	0x40011400
 8003638:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800363c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003640:	2200      	movs	r2, #0
 8003642:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003646:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800364a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800364e:	4642      	mov	r2, r8
 8003650:	464b      	mov	r3, r9
 8003652:	1891      	adds	r1, r2, r2
 8003654:	6239      	str	r1, [r7, #32]
 8003656:	415b      	adcs	r3, r3
 8003658:	627b      	str	r3, [r7, #36]	@ 0x24
 800365a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800365e:	4641      	mov	r1, r8
 8003660:	1854      	adds	r4, r2, r1
 8003662:	4649      	mov	r1, r9
 8003664:	eb43 0501 	adc.w	r5, r3, r1
 8003668:	f04f 0200 	mov.w	r2, #0
 800366c:	f04f 0300 	mov.w	r3, #0
 8003670:	00eb      	lsls	r3, r5, #3
 8003672:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003676:	00e2      	lsls	r2, r4, #3
 8003678:	4614      	mov	r4, r2
 800367a:	461d      	mov	r5, r3
 800367c:	4643      	mov	r3, r8
 800367e:	18e3      	adds	r3, r4, r3
 8003680:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003684:	464b      	mov	r3, r9
 8003686:	eb45 0303 	adc.w	r3, r5, r3
 800368a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800368e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800369a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800369e:	f04f 0200 	mov.w	r2, #0
 80036a2:	f04f 0300 	mov.w	r3, #0
 80036a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80036aa:	4629      	mov	r1, r5
 80036ac:	008b      	lsls	r3, r1, #2
 80036ae:	4621      	mov	r1, r4
 80036b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036b4:	4621      	mov	r1, r4
 80036b6:	008a      	lsls	r2, r1, #2
 80036b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80036bc:	f7fd fac4 	bl	8000c48 <__aeabi_uldivmod>
 80036c0:	4602      	mov	r2, r0
 80036c2:	460b      	mov	r3, r1
 80036c4:	4b60      	ldr	r3, [pc, #384]	@ (8003848 <UART_SetConfig+0x4e4>)
 80036c6:	fba3 2302 	umull	r2, r3, r3, r2
 80036ca:	095b      	lsrs	r3, r3, #5
 80036cc:	011c      	lsls	r4, r3, #4
 80036ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036d2:	2200      	movs	r2, #0
 80036d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80036d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80036dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80036e0:	4642      	mov	r2, r8
 80036e2:	464b      	mov	r3, r9
 80036e4:	1891      	adds	r1, r2, r2
 80036e6:	61b9      	str	r1, [r7, #24]
 80036e8:	415b      	adcs	r3, r3
 80036ea:	61fb      	str	r3, [r7, #28]
 80036ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036f0:	4641      	mov	r1, r8
 80036f2:	1851      	adds	r1, r2, r1
 80036f4:	6139      	str	r1, [r7, #16]
 80036f6:	4649      	mov	r1, r9
 80036f8:	414b      	adcs	r3, r1
 80036fa:	617b      	str	r3, [r7, #20]
 80036fc:	f04f 0200 	mov.w	r2, #0
 8003700:	f04f 0300 	mov.w	r3, #0
 8003704:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003708:	4659      	mov	r1, fp
 800370a:	00cb      	lsls	r3, r1, #3
 800370c:	4651      	mov	r1, sl
 800370e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003712:	4651      	mov	r1, sl
 8003714:	00ca      	lsls	r2, r1, #3
 8003716:	4610      	mov	r0, r2
 8003718:	4619      	mov	r1, r3
 800371a:	4603      	mov	r3, r0
 800371c:	4642      	mov	r2, r8
 800371e:	189b      	adds	r3, r3, r2
 8003720:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003724:	464b      	mov	r3, r9
 8003726:	460a      	mov	r2, r1
 8003728:	eb42 0303 	adc.w	r3, r2, r3
 800372c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	67bb      	str	r3, [r7, #120]	@ 0x78
 800373a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800373c:	f04f 0200 	mov.w	r2, #0
 8003740:	f04f 0300 	mov.w	r3, #0
 8003744:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003748:	4649      	mov	r1, r9
 800374a:	008b      	lsls	r3, r1, #2
 800374c:	4641      	mov	r1, r8
 800374e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003752:	4641      	mov	r1, r8
 8003754:	008a      	lsls	r2, r1, #2
 8003756:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800375a:	f7fd fa75 	bl	8000c48 <__aeabi_uldivmod>
 800375e:	4602      	mov	r2, r0
 8003760:	460b      	mov	r3, r1
 8003762:	4611      	mov	r1, r2
 8003764:	4b38      	ldr	r3, [pc, #224]	@ (8003848 <UART_SetConfig+0x4e4>)
 8003766:	fba3 2301 	umull	r2, r3, r3, r1
 800376a:	095b      	lsrs	r3, r3, #5
 800376c:	2264      	movs	r2, #100	@ 0x64
 800376e:	fb02 f303 	mul.w	r3, r2, r3
 8003772:	1acb      	subs	r3, r1, r3
 8003774:	011b      	lsls	r3, r3, #4
 8003776:	3332      	adds	r3, #50	@ 0x32
 8003778:	4a33      	ldr	r2, [pc, #204]	@ (8003848 <UART_SetConfig+0x4e4>)
 800377a:	fba2 2303 	umull	r2, r3, r2, r3
 800377e:	095b      	lsrs	r3, r3, #5
 8003780:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003784:	441c      	add	r4, r3
 8003786:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800378a:	2200      	movs	r2, #0
 800378c:	673b      	str	r3, [r7, #112]	@ 0x70
 800378e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003790:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003794:	4642      	mov	r2, r8
 8003796:	464b      	mov	r3, r9
 8003798:	1891      	adds	r1, r2, r2
 800379a:	60b9      	str	r1, [r7, #8]
 800379c:	415b      	adcs	r3, r3
 800379e:	60fb      	str	r3, [r7, #12]
 80037a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037a4:	4641      	mov	r1, r8
 80037a6:	1851      	adds	r1, r2, r1
 80037a8:	6039      	str	r1, [r7, #0]
 80037aa:	4649      	mov	r1, r9
 80037ac:	414b      	adcs	r3, r1
 80037ae:	607b      	str	r3, [r7, #4]
 80037b0:	f04f 0200 	mov.w	r2, #0
 80037b4:	f04f 0300 	mov.w	r3, #0
 80037b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80037bc:	4659      	mov	r1, fp
 80037be:	00cb      	lsls	r3, r1, #3
 80037c0:	4651      	mov	r1, sl
 80037c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037c6:	4651      	mov	r1, sl
 80037c8:	00ca      	lsls	r2, r1, #3
 80037ca:	4610      	mov	r0, r2
 80037cc:	4619      	mov	r1, r3
 80037ce:	4603      	mov	r3, r0
 80037d0:	4642      	mov	r2, r8
 80037d2:	189b      	adds	r3, r3, r2
 80037d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80037d6:	464b      	mov	r3, r9
 80037d8:	460a      	mov	r2, r1
 80037da:	eb42 0303 	adc.w	r3, r2, r3
 80037de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80037e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80037ea:	667a      	str	r2, [r7, #100]	@ 0x64
 80037ec:	f04f 0200 	mov.w	r2, #0
 80037f0:	f04f 0300 	mov.w	r3, #0
 80037f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80037f8:	4649      	mov	r1, r9
 80037fa:	008b      	lsls	r3, r1, #2
 80037fc:	4641      	mov	r1, r8
 80037fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003802:	4641      	mov	r1, r8
 8003804:	008a      	lsls	r2, r1, #2
 8003806:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800380a:	f7fd fa1d 	bl	8000c48 <__aeabi_uldivmod>
 800380e:	4602      	mov	r2, r0
 8003810:	460b      	mov	r3, r1
 8003812:	4b0d      	ldr	r3, [pc, #52]	@ (8003848 <UART_SetConfig+0x4e4>)
 8003814:	fba3 1302 	umull	r1, r3, r3, r2
 8003818:	095b      	lsrs	r3, r3, #5
 800381a:	2164      	movs	r1, #100	@ 0x64
 800381c:	fb01 f303 	mul.w	r3, r1, r3
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	011b      	lsls	r3, r3, #4
 8003824:	3332      	adds	r3, #50	@ 0x32
 8003826:	4a08      	ldr	r2, [pc, #32]	@ (8003848 <UART_SetConfig+0x4e4>)
 8003828:	fba2 2303 	umull	r2, r3, r2, r3
 800382c:	095b      	lsrs	r3, r3, #5
 800382e:	f003 020f 	and.w	r2, r3, #15
 8003832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4422      	add	r2, r4
 800383a:	609a      	str	r2, [r3, #8]
}
 800383c:	bf00      	nop
 800383e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003842:	46bd      	mov	sp, r7
 8003844:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003848:	51eb851f 	.word	0x51eb851f

0800384c <__cvt>:
 800384c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003850:	ec57 6b10 	vmov	r6, r7, d0
 8003854:	2f00      	cmp	r7, #0
 8003856:	460c      	mov	r4, r1
 8003858:	4619      	mov	r1, r3
 800385a:	463b      	mov	r3, r7
 800385c:	bfbb      	ittet	lt
 800385e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8003862:	461f      	movlt	r7, r3
 8003864:	2300      	movge	r3, #0
 8003866:	232d      	movlt	r3, #45	@ 0x2d
 8003868:	700b      	strb	r3, [r1, #0]
 800386a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800386c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8003870:	4691      	mov	r9, r2
 8003872:	f023 0820 	bic.w	r8, r3, #32
 8003876:	bfbc      	itt	lt
 8003878:	4632      	movlt	r2, r6
 800387a:	4616      	movlt	r6, r2
 800387c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003880:	d005      	beq.n	800388e <__cvt+0x42>
 8003882:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003886:	d100      	bne.n	800388a <__cvt+0x3e>
 8003888:	3401      	adds	r4, #1
 800388a:	2102      	movs	r1, #2
 800388c:	e000      	b.n	8003890 <__cvt+0x44>
 800388e:	2103      	movs	r1, #3
 8003890:	ab03      	add	r3, sp, #12
 8003892:	9301      	str	r3, [sp, #4]
 8003894:	ab02      	add	r3, sp, #8
 8003896:	9300      	str	r3, [sp, #0]
 8003898:	ec47 6b10 	vmov	d0, r6, r7
 800389c:	4653      	mov	r3, sl
 800389e:	4622      	mov	r2, r4
 80038a0:	f000 fe8e 	bl	80045c0 <_dtoa_r>
 80038a4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80038a8:	4605      	mov	r5, r0
 80038aa:	d119      	bne.n	80038e0 <__cvt+0x94>
 80038ac:	f019 0f01 	tst.w	r9, #1
 80038b0:	d00e      	beq.n	80038d0 <__cvt+0x84>
 80038b2:	eb00 0904 	add.w	r9, r0, r4
 80038b6:	2200      	movs	r2, #0
 80038b8:	2300      	movs	r3, #0
 80038ba:	4630      	mov	r0, r6
 80038bc:	4639      	mov	r1, r7
 80038be:	f7fd f903 	bl	8000ac8 <__aeabi_dcmpeq>
 80038c2:	b108      	cbz	r0, 80038c8 <__cvt+0x7c>
 80038c4:	f8cd 900c 	str.w	r9, [sp, #12]
 80038c8:	2230      	movs	r2, #48	@ 0x30
 80038ca:	9b03      	ldr	r3, [sp, #12]
 80038cc:	454b      	cmp	r3, r9
 80038ce:	d31e      	bcc.n	800390e <__cvt+0xc2>
 80038d0:	9b03      	ldr	r3, [sp, #12]
 80038d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80038d4:	1b5b      	subs	r3, r3, r5
 80038d6:	4628      	mov	r0, r5
 80038d8:	6013      	str	r3, [r2, #0]
 80038da:	b004      	add	sp, #16
 80038dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038e0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80038e4:	eb00 0904 	add.w	r9, r0, r4
 80038e8:	d1e5      	bne.n	80038b6 <__cvt+0x6a>
 80038ea:	7803      	ldrb	r3, [r0, #0]
 80038ec:	2b30      	cmp	r3, #48	@ 0x30
 80038ee:	d10a      	bne.n	8003906 <__cvt+0xba>
 80038f0:	2200      	movs	r2, #0
 80038f2:	2300      	movs	r3, #0
 80038f4:	4630      	mov	r0, r6
 80038f6:	4639      	mov	r1, r7
 80038f8:	f7fd f8e6 	bl	8000ac8 <__aeabi_dcmpeq>
 80038fc:	b918      	cbnz	r0, 8003906 <__cvt+0xba>
 80038fe:	f1c4 0401 	rsb	r4, r4, #1
 8003902:	f8ca 4000 	str.w	r4, [sl]
 8003906:	f8da 3000 	ldr.w	r3, [sl]
 800390a:	4499      	add	r9, r3
 800390c:	e7d3      	b.n	80038b6 <__cvt+0x6a>
 800390e:	1c59      	adds	r1, r3, #1
 8003910:	9103      	str	r1, [sp, #12]
 8003912:	701a      	strb	r2, [r3, #0]
 8003914:	e7d9      	b.n	80038ca <__cvt+0x7e>

08003916 <__exponent>:
 8003916:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003918:	2900      	cmp	r1, #0
 800391a:	bfba      	itte	lt
 800391c:	4249      	neglt	r1, r1
 800391e:	232d      	movlt	r3, #45	@ 0x2d
 8003920:	232b      	movge	r3, #43	@ 0x2b
 8003922:	2909      	cmp	r1, #9
 8003924:	7002      	strb	r2, [r0, #0]
 8003926:	7043      	strb	r3, [r0, #1]
 8003928:	dd29      	ble.n	800397e <__exponent+0x68>
 800392a:	f10d 0307 	add.w	r3, sp, #7
 800392e:	461d      	mov	r5, r3
 8003930:	270a      	movs	r7, #10
 8003932:	461a      	mov	r2, r3
 8003934:	fbb1 f6f7 	udiv	r6, r1, r7
 8003938:	fb07 1416 	mls	r4, r7, r6, r1
 800393c:	3430      	adds	r4, #48	@ 0x30
 800393e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003942:	460c      	mov	r4, r1
 8003944:	2c63      	cmp	r4, #99	@ 0x63
 8003946:	f103 33ff 	add.w	r3, r3, #4294967295
 800394a:	4631      	mov	r1, r6
 800394c:	dcf1      	bgt.n	8003932 <__exponent+0x1c>
 800394e:	3130      	adds	r1, #48	@ 0x30
 8003950:	1e94      	subs	r4, r2, #2
 8003952:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003956:	1c41      	adds	r1, r0, #1
 8003958:	4623      	mov	r3, r4
 800395a:	42ab      	cmp	r3, r5
 800395c:	d30a      	bcc.n	8003974 <__exponent+0x5e>
 800395e:	f10d 0309 	add.w	r3, sp, #9
 8003962:	1a9b      	subs	r3, r3, r2
 8003964:	42ac      	cmp	r4, r5
 8003966:	bf88      	it	hi
 8003968:	2300      	movhi	r3, #0
 800396a:	3302      	adds	r3, #2
 800396c:	4403      	add	r3, r0
 800396e:	1a18      	subs	r0, r3, r0
 8003970:	b003      	add	sp, #12
 8003972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003974:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003978:	f801 6f01 	strb.w	r6, [r1, #1]!
 800397c:	e7ed      	b.n	800395a <__exponent+0x44>
 800397e:	2330      	movs	r3, #48	@ 0x30
 8003980:	3130      	adds	r1, #48	@ 0x30
 8003982:	7083      	strb	r3, [r0, #2]
 8003984:	70c1      	strb	r1, [r0, #3]
 8003986:	1d03      	adds	r3, r0, #4
 8003988:	e7f1      	b.n	800396e <__exponent+0x58>
	...

0800398c <_printf_float>:
 800398c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003990:	b08d      	sub	sp, #52	@ 0x34
 8003992:	460c      	mov	r4, r1
 8003994:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003998:	4616      	mov	r6, r2
 800399a:	461f      	mov	r7, r3
 800399c:	4605      	mov	r5, r0
 800399e:	f000 fd0f 	bl	80043c0 <_localeconv_r>
 80039a2:	6803      	ldr	r3, [r0, #0]
 80039a4:	9304      	str	r3, [sp, #16]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7fc fc62 	bl	8000270 <strlen>
 80039ac:	2300      	movs	r3, #0
 80039ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80039b0:	f8d8 3000 	ldr.w	r3, [r8]
 80039b4:	9005      	str	r0, [sp, #20]
 80039b6:	3307      	adds	r3, #7
 80039b8:	f023 0307 	bic.w	r3, r3, #7
 80039bc:	f103 0208 	add.w	r2, r3, #8
 80039c0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80039c4:	f8d4 b000 	ldr.w	fp, [r4]
 80039c8:	f8c8 2000 	str.w	r2, [r8]
 80039cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80039d0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80039d4:	9307      	str	r3, [sp, #28]
 80039d6:	f8cd 8018 	str.w	r8, [sp, #24]
 80039da:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80039de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80039e2:	4b9c      	ldr	r3, [pc, #624]	@ (8003c54 <_printf_float+0x2c8>)
 80039e4:	f04f 32ff 	mov.w	r2, #4294967295
 80039e8:	f7fd f8a0 	bl	8000b2c <__aeabi_dcmpun>
 80039ec:	bb70      	cbnz	r0, 8003a4c <_printf_float+0xc0>
 80039ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80039f2:	4b98      	ldr	r3, [pc, #608]	@ (8003c54 <_printf_float+0x2c8>)
 80039f4:	f04f 32ff 	mov.w	r2, #4294967295
 80039f8:	f7fd f87a 	bl	8000af0 <__aeabi_dcmple>
 80039fc:	bb30      	cbnz	r0, 8003a4c <_printf_float+0xc0>
 80039fe:	2200      	movs	r2, #0
 8003a00:	2300      	movs	r3, #0
 8003a02:	4640      	mov	r0, r8
 8003a04:	4649      	mov	r1, r9
 8003a06:	f7fd f869 	bl	8000adc <__aeabi_dcmplt>
 8003a0a:	b110      	cbz	r0, 8003a12 <_printf_float+0x86>
 8003a0c:	232d      	movs	r3, #45	@ 0x2d
 8003a0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a12:	4a91      	ldr	r2, [pc, #580]	@ (8003c58 <_printf_float+0x2cc>)
 8003a14:	4b91      	ldr	r3, [pc, #580]	@ (8003c5c <_printf_float+0x2d0>)
 8003a16:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003a1a:	bf94      	ite	ls
 8003a1c:	4690      	movls	r8, r2
 8003a1e:	4698      	movhi	r8, r3
 8003a20:	2303      	movs	r3, #3
 8003a22:	6123      	str	r3, [r4, #16]
 8003a24:	f02b 0304 	bic.w	r3, fp, #4
 8003a28:	6023      	str	r3, [r4, #0]
 8003a2a:	f04f 0900 	mov.w	r9, #0
 8003a2e:	9700      	str	r7, [sp, #0]
 8003a30:	4633      	mov	r3, r6
 8003a32:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003a34:	4621      	mov	r1, r4
 8003a36:	4628      	mov	r0, r5
 8003a38:	f000 f9d2 	bl	8003de0 <_printf_common>
 8003a3c:	3001      	adds	r0, #1
 8003a3e:	f040 808d 	bne.w	8003b5c <_printf_float+0x1d0>
 8003a42:	f04f 30ff 	mov.w	r0, #4294967295
 8003a46:	b00d      	add	sp, #52	@ 0x34
 8003a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a4c:	4642      	mov	r2, r8
 8003a4e:	464b      	mov	r3, r9
 8003a50:	4640      	mov	r0, r8
 8003a52:	4649      	mov	r1, r9
 8003a54:	f7fd f86a 	bl	8000b2c <__aeabi_dcmpun>
 8003a58:	b140      	cbz	r0, 8003a6c <_printf_float+0xe0>
 8003a5a:	464b      	mov	r3, r9
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	bfbc      	itt	lt
 8003a60:	232d      	movlt	r3, #45	@ 0x2d
 8003a62:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003a66:	4a7e      	ldr	r2, [pc, #504]	@ (8003c60 <_printf_float+0x2d4>)
 8003a68:	4b7e      	ldr	r3, [pc, #504]	@ (8003c64 <_printf_float+0x2d8>)
 8003a6a:	e7d4      	b.n	8003a16 <_printf_float+0x8a>
 8003a6c:	6863      	ldr	r3, [r4, #4]
 8003a6e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8003a72:	9206      	str	r2, [sp, #24]
 8003a74:	1c5a      	adds	r2, r3, #1
 8003a76:	d13b      	bne.n	8003af0 <_printf_float+0x164>
 8003a78:	2306      	movs	r3, #6
 8003a7a:	6063      	str	r3, [r4, #4]
 8003a7c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8003a80:	2300      	movs	r3, #0
 8003a82:	6022      	str	r2, [r4, #0]
 8003a84:	9303      	str	r3, [sp, #12]
 8003a86:	ab0a      	add	r3, sp, #40	@ 0x28
 8003a88:	e9cd a301 	strd	sl, r3, [sp, #4]
 8003a8c:	ab09      	add	r3, sp, #36	@ 0x24
 8003a8e:	9300      	str	r3, [sp, #0]
 8003a90:	6861      	ldr	r1, [r4, #4]
 8003a92:	ec49 8b10 	vmov	d0, r8, r9
 8003a96:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8003a9a:	4628      	mov	r0, r5
 8003a9c:	f7ff fed6 	bl	800384c <__cvt>
 8003aa0:	9b06      	ldr	r3, [sp, #24]
 8003aa2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003aa4:	2b47      	cmp	r3, #71	@ 0x47
 8003aa6:	4680      	mov	r8, r0
 8003aa8:	d129      	bne.n	8003afe <_printf_float+0x172>
 8003aaa:	1cc8      	adds	r0, r1, #3
 8003aac:	db02      	blt.n	8003ab4 <_printf_float+0x128>
 8003aae:	6863      	ldr	r3, [r4, #4]
 8003ab0:	4299      	cmp	r1, r3
 8003ab2:	dd41      	ble.n	8003b38 <_printf_float+0x1ac>
 8003ab4:	f1aa 0a02 	sub.w	sl, sl, #2
 8003ab8:	fa5f fa8a 	uxtb.w	sl, sl
 8003abc:	3901      	subs	r1, #1
 8003abe:	4652      	mov	r2, sl
 8003ac0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003ac4:	9109      	str	r1, [sp, #36]	@ 0x24
 8003ac6:	f7ff ff26 	bl	8003916 <__exponent>
 8003aca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003acc:	1813      	adds	r3, r2, r0
 8003ace:	2a01      	cmp	r2, #1
 8003ad0:	4681      	mov	r9, r0
 8003ad2:	6123      	str	r3, [r4, #16]
 8003ad4:	dc02      	bgt.n	8003adc <_printf_float+0x150>
 8003ad6:	6822      	ldr	r2, [r4, #0]
 8003ad8:	07d2      	lsls	r2, r2, #31
 8003ada:	d501      	bpl.n	8003ae0 <_printf_float+0x154>
 8003adc:	3301      	adds	r3, #1
 8003ade:	6123      	str	r3, [r4, #16]
 8003ae0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d0a2      	beq.n	8003a2e <_printf_float+0xa2>
 8003ae8:	232d      	movs	r3, #45	@ 0x2d
 8003aea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003aee:	e79e      	b.n	8003a2e <_printf_float+0xa2>
 8003af0:	9a06      	ldr	r2, [sp, #24]
 8003af2:	2a47      	cmp	r2, #71	@ 0x47
 8003af4:	d1c2      	bne.n	8003a7c <_printf_float+0xf0>
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d1c0      	bne.n	8003a7c <_printf_float+0xf0>
 8003afa:	2301      	movs	r3, #1
 8003afc:	e7bd      	b.n	8003a7a <_printf_float+0xee>
 8003afe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003b02:	d9db      	bls.n	8003abc <_printf_float+0x130>
 8003b04:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003b08:	d118      	bne.n	8003b3c <_printf_float+0x1b0>
 8003b0a:	2900      	cmp	r1, #0
 8003b0c:	6863      	ldr	r3, [r4, #4]
 8003b0e:	dd0b      	ble.n	8003b28 <_printf_float+0x19c>
 8003b10:	6121      	str	r1, [r4, #16]
 8003b12:	b913      	cbnz	r3, 8003b1a <_printf_float+0x18e>
 8003b14:	6822      	ldr	r2, [r4, #0]
 8003b16:	07d0      	lsls	r0, r2, #31
 8003b18:	d502      	bpl.n	8003b20 <_printf_float+0x194>
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	440b      	add	r3, r1
 8003b1e:	6123      	str	r3, [r4, #16]
 8003b20:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003b22:	f04f 0900 	mov.w	r9, #0
 8003b26:	e7db      	b.n	8003ae0 <_printf_float+0x154>
 8003b28:	b913      	cbnz	r3, 8003b30 <_printf_float+0x1a4>
 8003b2a:	6822      	ldr	r2, [r4, #0]
 8003b2c:	07d2      	lsls	r2, r2, #31
 8003b2e:	d501      	bpl.n	8003b34 <_printf_float+0x1a8>
 8003b30:	3302      	adds	r3, #2
 8003b32:	e7f4      	b.n	8003b1e <_printf_float+0x192>
 8003b34:	2301      	movs	r3, #1
 8003b36:	e7f2      	b.n	8003b1e <_printf_float+0x192>
 8003b38:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003b3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003b3e:	4299      	cmp	r1, r3
 8003b40:	db05      	blt.n	8003b4e <_printf_float+0x1c2>
 8003b42:	6823      	ldr	r3, [r4, #0]
 8003b44:	6121      	str	r1, [r4, #16]
 8003b46:	07d8      	lsls	r0, r3, #31
 8003b48:	d5ea      	bpl.n	8003b20 <_printf_float+0x194>
 8003b4a:	1c4b      	adds	r3, r1, #1
 8003b4c:	e7e7      	b.n	8003b1e <_printf_float+0x192>
 8003b4e:	2900      	cmp	r1, #0
 8003b50:	bfd4      	ite	le
 8003b52:	f1c1 0202 	rsble	r2, r1, #2
 8003b56:	2201      	movgt	r2, #1
 8003b58:	4413      	add	r3, r2
 8003b5a:	e7e0      	b.n	8003b1e <_printf_float+0x192>
 8003b5c:	6823      	ldr	r3, [r4, #0]
 8003b5e:	055a      	lsls	r2, r3, #21
 8003b60:	d407      	bmi.n	8003b72 <_printf_float+0x1e6>
 8003b62:	6923      	ldr	r3, [r4, #16]
 8003b64:	4642      	mov	r2, r8
 8003b66:	4631      	mov	r1, r6
 8003b68:	4628      	mov	r0, r5
 8003b6a:	47b8      	blx	r7
 8003b6c:	3001      	adds	r0, #1
 8003b6e:	d12b      	bne.n	8003bc8 <_printf_float+0x23c>
 8003b70:	e767      	b.n	8003a42 <_printf_float+0xb6>
 8003b72:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003b76:	f240 80dd 	bls.w	8003d34 <_printf_float+0x3a8>
 8003b7a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003b7e:	2200      	movs	r2, #0
 8003b80:	2300      	movs	r3, #0
 8003b82:	f7fc ffa1 	bl	8000ac8 <__aeabi_dcmpeq>
 8003b86:	2800      	cmp	r0, #0
 8003b88:	d033      	beq.n	8003bf2 <_printf_float+0x266>
 8003b8a:	4a37      	ldr	r2, [pc, #220]	@ (8003c68 <_printf_float+0x2dc>)
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	4631      	mov	r1, r6
 8003b90:	4628      	mov	r0, r5
 8003b92:	47b8      	blx	r7
 8003b94:	3001      	adds	r0, #1
 8003b96:	f43f af54 	beq.w	8003a42 <_printf_float+0xb6>
 8003b9a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8003b9e:	4543      	cmp	r3, r8
 8003ba0:	db02      	blt.n	8003ba8 <_printf_float+0x21c>
 8003ba2:	6823      	ldr	r3, [r4, #0]
 8003ba4:	07d8      	lsls	r0, r3, #31
 8003ba6:	d50f      	bpl.n	8003bc8 <_printf_float+0x23c>
 8003ba8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003bac:	4631      	mov	r1, r6
 8003bae:	4628      	mov	r0, r5
 8003bb0:	47b8      	blx	r7
 8003bb2:	3001      	adds	r0, #1
 8003bb4:	f43f af45 	beq.w	8003a42 <_printf_float+0xb6>
 8003bb8:	f04f 0900 	mov.w	r9, #0
 8003bbc:	f108 38ff 	add.w	r8, r8, #4294967295
 8003bc0:	f104 0a1a 	add.w	sl, r4, #26
 8003bc4:	45c8      	cmp	r8, r9
 8003bc6:	dc09      	bgt.n	8003bdc <_printf_float+0x250>
 8003bc8:	6823      	ldr	r3, [r4, #0]
 8003bca:	079b      	lsls	r3, r3, #30
 8003bcc:	f100 8103 	bmi.w	8003dd6 <_printf_float+0x44a>
 8003bd0:	68e0      	ldr	r0, [r4, #12]
 8003bd2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003bd4:	4298      	cmp	r0, r3
 8003bd6:	bfb8      	it	lt
 8003bd8:	4618      	movlt	r0, r3
 8003bda:	e734      	b.n	8003a46 <_printf_float+0xba>
 8003bdc:	2301      	movs	r3, #1
 8003bde:	4652      	mov	r2, sl
 8003be0:	4631      	mov	r1, r6
 8003be2:	4628      	mov	r0, r5
 8003be4:	47b8      	blx	r7
 8003be6:	3001      	adds	r0, #1
 8003be8:	f43f af2b 	beq.w	8003a42 <_printf_float+0xb6>
 8003bec:	f109 0901 	add.w	r9, r9, #1
 8003bf0:	e7e8      	b.n	8003bc4 <_printf_float+0x238>
 8003bf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	dc39      	bgt.n	8003c6c <_printf_float+0x2e0>
 8003bf8:	4a1b      	ldr	r2, [pc, #108]	@ (8003c68 <_printf_float+0x2dc>)
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	4631      	mov	r1, r6
 8003bfe:	4628      	mov	r0, r5
 8003c00:	47b8      	blx	r7
 8003c02:	3001      	adds	r0, #1
 8003c04:	f43f af1d 	beq.w	8003a42 <_printf_float+0xb6>
 8003c08:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8003c0c:	ea59 0303 	orrs.w	r3, r9, r3
 8003c10:	d102      	bne.n	8003c18 <_printf_float+0x28c>
 8003c12:	6823      	ldr	r3, [r4, #0]
 8003c14:	07d9      	lsls	r1, r3, #31
 8003c16:	d5d7      	bpl.n	8003bc8 <_printf_float+0x23c>
 8003c18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003c1c:	4631      	mov	r1, r6
 8003c1e:	4628      	mov	r0, r5
 8003c20:	47b8      	blx	r7
 8003c22:	3001      	adds	r0, #1
 8003c24:	f43f af0d 	beq.w	8003a42 <_printf_float+0xb6>
 8003c28:	f04f 0a00 	mov.w	sl, #0
 8003c2c:	f104 0b1a 	add.w	fp, r4, #26
 8003c30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c32:	425b      	negs	r3, r3
 8003c34:	4553      	cmp	r3, sl
 8003c36:	dc01      	bgt.n	8003c3c <_printf_float+0x2b0>
 8003c38:	464b      	mov	r3, r9
 8003c3a:	e793      	b.n	8003b64 <_printf_float+0x1d8>
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	465a      	mov	r2, fp
 8003c40:	4631      	mov	r1, r6
 8003c42:	4628      	mov	r0, r5
 8003c44:	47b8      	blx	r7
 8003c46:	3001      	adds	r0, #1
 8003c48:	f43f aefb 	beq.w	8003a42 <_printf_float+0xb6>
 8003c4c:	f10a 0a01 	add.w	sl, sl, #1
 8003c50:	e7ee      	b.n	8003c30 <_printf_float+0x2a4>
 8003c52:	bf00      	nop
 8003c54:	7fefffff 	.word	0x7fefffff
 8003c58:	080065a0 	.word	0x080065a0
 8003c5c:	080065a4 	.word	0x080065a4
 8003c60:	080065a8 	.word	0x080065a8
 8003c64:	080065ac 	.word	0x080065ac
 8003c68:	080065b0 	.word	0x080065b0
 8003c6c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003c6e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003c72:	4553      	cmp	r3, sl
 8003c74:	bfa8      	it	ge
 8003c76:	4653      	movge	r3, sl
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	4699      	mov	r9, r3
 8003c7c:	dc36      	bgt.n	8003cec <_printf_float+0x360>
 8003c7e:	f04f 0b00 	mov.w	fp, #0
 8003c82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003c86:	f104 021a 	add.w	r2, r4, #26
 8003c8a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003c8c:	9306      	str	r3, [sp, #24]
 8003c8e:	eba3 0309 	sub.w	r3, r3, r9
 8003c92:	455b      	cmp	r3, fp
 8003c94:	dc31      	bgt.n	8003cfa <_printf_float+0x36e>
 8003c96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c98:	459a      	cmp	sl, r3
 8003c9a:	dc3a      	bgt.n	8003d12 <_printf_float+0x386>
 8003c9c:	6823      	ldr	r3, [r4, #0]
 8003c9e:	07da      	lsls	r2, r3, #31
 8003ca0:	d437      	bmi.n	8003d12 <_printf_float+0x386>
 8003ca2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ca4:	ebaa 0903 	sub.w	r9, sl, r3
 8003ca8:	9b06      	ldr	r3, [sp, #24]
 8003caa:	ebaa 0303 	sub.w	r3, sl, r3
 8003cae:	4599      	cmp	r9, r3
 8003cb0:	bfa8      	it	ge
 8003cb2:	4699      	movge	r9, r3
 8003cb4:	f1b9 0f00 	cmp.w	r9, #0
 8003cb8:	dc33      	bgt.n	8003d22 <_printf_float+0x396>
 8003cba:	f04f 0800 	mov.w	r8, #0
 8003cbe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003cc2:	f104 0b1a 	add.w	fp, r4, #26
 8003cc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003cc8:	ebaa 0303 	sub.w	r3, sl, r3
 8003ccc:	eba3 0309 	sub.w	r3, r3, r9
 8003cd0:	4543      	cmp	r3, r8
 8003cd2:	f77f af79 	ble.w	8003bc8 <_printf_float+0x23c>
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	465a      	mov	r2, fp
 8003cda:	4631      	mov	r1, r6
 8003cdc:	4628      	mov	r0, r5
 8003cde:	47b8      	blx	r7
 8003ce0:	3001      	adds	r0, #1
 8003ce2:	f43f aeae 	beq.w	8003a42 <_printf_float+0xb6>
 8003ce6:	f108 0801 	add.w	r8, r8, #1
 8003cea:	e7ec      	b.n	8003cc6 <_printf_float+0x33a>
 8003cec:	4642      	mov	r2, r8
 8003cee:	4631      	mov	r1, r6
 8003cf0:	4628      	mov	r0, r5
 8003cf2:	47b8      	blx	r7
 8003cf4:	3001      	adds	r0, #1
 8003cf6:	d1c2      	bne.n	8003c7e <_printf_float+0x2f2>
 8003cf8:	e6a3      	b.n	8003a42 <_printf_float+0xb6>
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	4631      	mov	r1, r6
 8003cfe:	4628      	mov	r0, r5
 8003d00:	9206      	str	r2, [sp, #24]
 8003d02:	47b8      	blx	r7
 8003d04:	3001      	adds	r0, #1
 8003d06:	f43f ae9c 	beq.w	8003a42 <_printf_float+0xb6>
 8003d0a:	9a06      	ldr	r2, [sp, #24]
 8003d0c:	f10b 0b01 	add.w	fp, fp, #1
 8003d10:	e7bb      	b.n	8003c8a <_printf_float+0x2fe>
 8003d12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003d16:	4631      	mov	r1, r6
 8003d18:	4628      	mov	r0, r5
 8003d1a:	47b8      	blx	r7
 8003d1c:	3001      	adds	r0, #1
 8003d1e:	d1c0      	bne.n	8003ca2 <_printf_float+0x316>
 8003d20:	e68f      	b.n	8003a42 <_printf_float+0xb6>
 8003d22:	9a06      	ldr	r2, [sp, #24]
 8003d24:	464b      	mov	r3, r9
 8003d26:	4442      	add	r2, r8
 8003d28:	4631      	mov	r1, r6
 8003d2a:	4628      	mov	r0, r5
 8003d2c:	47b8      	blx	r7
 8003d2e:	3001      	adds	r0, #1
 8003d30:	d1c3      	bne.n	8003cba <_printf_float+0x32e>
 8003d32:	e686      	b.n	8003a42 <_printf_float+0xb6>
 8003d34:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003d38:	f1ba 0f01 	cmp.w	sl, #1
 8003d3c:	dc01      	bgt.n	8003d42 <_printf_float+0x3b6>
 8003d3e:	07db      	lsls	r3, r3, #31
 8003d40:	d536      	bpl.n	8003db0 <_printf_float+0x424>
 8003d42:	2301      	movs	r3, #1
 8003d44:	4642      	mov	r2, r8
 8003d46:	4631      	mov	r1, r6
 8003d48:	4628      	mov	r0, r5
 8003d4a:	47b8      	blx	r7
 8003d4c:	3001      	adds	r0, #1
 8003d4e:	f43f ae78 	beq.w	8003a42 <_printf_float+0xb6>
 8003d52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003d56:	4631      	mov	r1, r6
 8003d58:	4628      	mov	r0, r5
 8003d5a:	47b8      	blx	r7
 8003d5c:	3001      	adds	r0, #1
 8003d5e:	f43f ae70 	beq.w	8003a42 <_printf_float+0xb6>
 8003d62:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003d66:	2200      	movs	r2, #0
 8003d68:	2300      	movs	r3, #0
 8003d6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003d6e:	f7fc feab 	bl	8000ac8 <__aeabi_dcmpeq>
 8003d72:	b9c0      	cbnz	r0, 8003da6 <_printf_float+0x41a>
 8003d74:	4653      	mov	r3, sl
 8003d76:	f108 0201 	add.w	r2, r8, #1
 8003d7a:	4631      	mov	r1, r6
 8003d7c:	4628      	mov	r0, r5
 8003d7e:	47b8      	blx	r7
 8003d80:	3001      	adds	r0, #1
 8003d82:	d10c      	bne.n	8003d9e <_printf_float+0x412>
 8003d84:	e65d      	b.n	8003a42 <_printf_float+0xb6>
 8003d86:	2301      	movs	r3, #1
 8003d88:	465a      	mov	r2, fp
 8003d8a:	4631      	mov	r1, r6
 8003d8c:	4628      	mov	r0, r5
 8003d8e:	47b8      	blx	r7
 8003d90:	3001      	adds	r0, #1
 8003d92:	f43f ae56 	beq.w	8003a42 <_printf_float+0xb6>
 8003d96:	f108 0801 	add.w	r8, r8, #1
 8003d9a:	45d0      	cmp	r8, sl
 8003d9c:	dbf3      	blt.n	8003d86 <_printf_float+0x3fa>
 8003d9e:	464b      	mov	r3, r9
 8003da0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003da4:	e6df      	b.n	8003b66 <_printf_float+0x1da>
 8003da6:	f04f 0800 	mov.w	r8, #0
 8003daa:	f104 0b1a 	add.w	fp, r4, #26
 8003dae:	e7f4      	b.n	8003d9a <_printf_float+0x40e>
 8003db0:	2301      	movs	r3, #1
 8003db2:	4642      	mov	r2, r8
 8003db4:	e7e1      	b.n	8003d7a <_printf_float+0x3ee>
 8003db6:	2301      	movs	r3, #1
 8003db8:	464a      	mov	r2, r9
 8003dba:	4631      	mov	r1, r6
 8003dbc:	4628      	mov	r0, r5
 8003dbe:	47b8      	blx	r7
 8003dc0:	3001      	adds	r0, #1
 8003dc2:	f43f ae3e 	beq.w	8003a42 <_printf_float+0xb6>
 8003dc6:	f108 0801 	add.w	r8, r8, #1
 8003dca:	68e3      	ldr	r3, [r4, #12]
 8003dcc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003dce:	1a5b      	subs	r3, r3, r1
 8003dd0:	4543      	cmp	r3, r8
 8003dd2:	dcf0      	bgt.n	8003db6 <_printf_float+0x42a>
 8003dd4:	e6fc      	b.n	8003bd0 <_printf_float+0x244>
 8003dd6:	f04f 0800 	mov.w	r8, #0
 8003dda:	f104 0919 	add.w	r9, r4, #25
 8003dde:	e7f4      	b.n	8003dca <_printf_float+0x43e>

08003de0 <_printf_common>:
 8003de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003de4:	4616      	mov	r6, r2
 8003de6:	4698      	mov	r8, r3
 8003de8:	688a      	ldr	r2, [r1, #8]
 8003dea:	690b      	ldr	r3, [r1, #16]
 8003dec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003df0:	4293      	cmp	r3, r2
 8003df2:	bfb8      	it	lt
 8003df4:	4613      	movlt	r3, r2
 8003df6:	6033      	str	r3, [r6, #0]
 8003df8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003dfc:	4607      	mov	r7, r0
 8003dfe:	460c      	mov	r4, r1
 8003e00:	b10a      	cbz	r2, 8003e06 <_printf_common+0x26>
 8003e02:	3301      	adds	r3, #1
 8003e04:	6033      	str	r3, [r6, #0]
 8003e06:	6823      	ldr	r3, [r4, #0]
 8003e08:	0699      	lsls	r1, r3, #26
 8003e0a:	bf42      	ittt	mi
 8003e0c:	6833      	ldrmi	r3, [r6, #0]
 8003e0e:	3302      	addmi	r3, #2
 8003e10:	6033      	strmi	r3, [r6, #0]
 8003e12:	6825      	ldr	r5, [r4, #0]
 8003e14:	f015 0506 	ands.w	r5, r5, #6
 8003e18:	d106      	bne.n	8003e28 <_printf_common+0x48>
 8003e1a:	f104 0a19 	add.w	sl, r4, #25
 8003e1e:	68e3      	ldr	r3, [r4, #12]
 8003e20:	6832      	ldr	r2, [r6, #0]
 8003e22:	1a9b      	subs	r3, r3, r2
 8003e24:	42ab      	cmp	r3, r5
 8003e26:	dc26      	bgt.n	8003e76 <_printf_common+0x96>
 8003e28:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003e2c:	6822      	ldr	r2, [r4, #0]
 8003e2e:	3b00      	subs	r3, #0
 8003e30:	bf18      	it	ne
 8003e32:	2301      	movne	r3, #1
 8003e34:	0692      	lsls	r2, r2, #26
 8003e36:	d42b      	bmi.n	8003e90 <_printf_common+0xb0>
 8003e38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003e3c:	4641      	mov	r1, r8
 8003e3e:	4638      	mov	r0, r7
 8003e40:	47c8      	blx	r9
 8003e42:	3001      	adds	r0, #1
 8003e44:	d01e      	beq.n	8003e84 <_printf_common+0xa4>
 8003e46:	6823      	ldr	r3, [r4, #0]
 8003e48:	6922      	ldr	r2, [r4, #16]
 8003e4a:	f003 0306 	and.w	r3, r3, #6
 8003e4e:	2b04      	cmp	r3, #4
 8003e50:	bf02      	ittt	eq
 8003e52:	68e5      	ldreq	r5, [r4, #12]
 8003e54:	6833      	ldreq	r3, [r6, #0]
 8003e56:	1aed      	subeq	r5, r5, r3
 8003e58:	68a3      	ldr	r3, [r4, #8]
 8003e5a:	bf0c      	ite	eq
 8003e5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e60:	2500      	movne	r5, #0
 8003e62:	4293      	cmp	r3, r2
 8003e64:	bfc4      	itt	gt
 8003e66:	1a9b      	subgt	r3, r3, r2
 8003e68:	18ed      	addgt	r5, r5, r3
 8003e6a:	2600      	movs	r6, #0
 8003e6c:	341a      	adds	r4, #26
 8003e6e:	42b5      	cmp	r5, r6
 8003e70:	d11a      	bne.n	8003ea8 <_printf_common+0xc8>
 8003e72:	2000      	movs	r0, #0
 8003e74:	e008      	b.n	8003e88 <_printf_common+0xa8>
 8003e76:	2301      	movs	r3, #1
 8003e78:	4652      	mov	r2, sl
 8003e7a:	4641      	mov	r1, r8
 8003e7c:	4638      	mov	r0, r7
 8003e7e:	47c8      	blx	r9
 8003e80:	3001      	adds	r0, #1
 8003e82:	d103      	bne.n	8003e8c <_printf_common+0xac>
 8003e84:	f04f 30ff 	mov.w	r0, #4294967295
 8003e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e8c:	3501      	adds	r5, #1
 8003e8e:	e7c6      	b.n	8003e1e <_printf_common+0x3e>
 8003e90:	18e1      	adds	r1, r4, r3
 8003e92:	1c5a      	adds	r2, r3, #1
 8003e94:	2030      	movs	r0, #48	@ 0x30
 8003e96:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003e9a:	4422      	add	r2, r4
 8003e9c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003ea0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003ea4:	3302      	adds	r3, #2
 8003ea6:	e7c7      	b.n	8003e38 <_printf_common+0x58>
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	4622      	mov	r2, r4
 8003eac:	4641      	mov	r1, r8
 8003eae:	4638      	mov	r0, r7
 8003eb0:	47c8      	blx	r9
 8003eb2:	3001      	adds	r0, #1
 8003eb4:	d0e6      	beq.n	8003e84 <_printf_common+0xa4>
 8003eb6:	3601      	adds	r6, #1
 8003eb8:	e7d9      	b.n	8003e6e <_printf_common+0x8e>
	...

08003ebc <_printf_i>:
 8003ebc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ec0:	7e0f      	ldrb	r7, [r1, #24]
 8003ec2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003ec4:	2f78      	cmp	r7, #120	@ 0x78
 8003ec6:	4691      	mov	r9, r2
 8003ec8:	4680      	mov	r8, r0
 8003eca:	460c      	mov	r4, r1
 8003ecc:	469a      	mov	sl, r3
 8003ece:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003ed2:	d807      	bhi.n	8003ee4 <_printf_i+0x28>
 8003ed4:	2f62      	cmp	r7, #98	@ 0x62
 8003ed6:	d80a      	bhi.n	8003eee <_printf_i+0x32>
 8003ed8:	2f00      	cmp	r7, #0
 8003eda:	f000 80d2 	beq.w	8004082 <_printf_i+0x1c6>
 8003ede:	2f58      	cmp	r7, #88	@ 0x58
 8003ee0:	f000 80b9 	beq.w	8004056 <_printf_i+0x19a>
 8003ee4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ee8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003eec:	e03a      	b.n	8003f64 <_printf_i+0xa8>
 8003eee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003ef2:	2b15      	cmp	r3, #21
 8003ef4:	d8f6      	bhi.n	8003ee4 <_printf_i+0x28>
 8003ef6:	a101      	add	r1, pc, #4	@ (adr r1, 8003efc <_printf_i+0x40>)
 8003ef8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003efc:	08003f55 	.word	0x08003f55
 8003f00:	08003f69 	.word	0x08003f69
 8003f04:	08003ee5 	.word	0x08003ee5
 8003f08:	08003ee5 	.word	0x08003ee5
 8003f0c:	08003ee5 	.word	0x08003ee5
 8003f10:	08003ee5 	.word	0x08003ee5
 8003f14:	08003f69 	.word	0x08003f69
 8003f18:	08003ee5 	.word	0x08003ee5
 8003f1c:	08003ee5 	.word	0x08003ee5
 8003f20:	08003ee5 	.word	0x08003ee5
 8003f24:	08003ee5 	.word	0x08003ee5
 8003f28:	08004069 	.word	0x08004069
 8003f2c:	08003f93 	.word	0x08003f93
 8003f30:	08004023 	.word	0x08004023
 8003f34:	08003ee5 	.word	0x08003ee5
 8003f38:	08003ee5 	.word	0x08003ee5
 8003f3c:	0800408b 	.word	0x0800408b
 8003f40:	08003ee5 	.word	0x08003ee5
 8003f44:	08003f93 	.word	0x08003f93
 8003f48:	08003ee5 	.word	0x08003ee5
 8003f4c:	08003ee5 	.word	0x08003ee5
 8003f50:	0800402b 	.word	0x0800402b
 8003f54:	6833      	ldr	r3, [r6, #0]
 8003f56:	1d1a      	adds	r2, r3, #4
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	6032      	str	r2, [r6, #0]
 8003f5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f60:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003f64:	2301      	movs	r3, #1
 8003f66:	e09d      	b.n	80040a4 <_printf_i+0x1e8>
 8003f68:	6833      	ldr	r3, [r6, #0]
 8003f6a:	6820      	ldr	r0, [r4, #0]
 8003f6c:	1d19      	adds	r1, r3, #4
 8003f6e:	6031      	str	r1, [r6, #0]
 8003f70:	0606      	lsls	r6, r0, #24
 8003f72:	d501      	bpl.n	8003f78 <_printf_i+0xbc>
 8003f74:	681d      	ldr	r5, [r3, #0]
 8003f76:	e003      	b.n	8003f80 <_printf_i+0xc4>
 8003f78:	0645      	lsls	r5, r0, #25
 8003f7a:	d5fb      	bpl.n	8003f74 <_printf_i+0xb8>
 8003f7c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003f80:	2d00      	cmp	r5, #0
 8003f82:	da03      	bge.n	8003f8c <_printf_i+0xd0>
 8003f84:	232d      	movs	r3, #45	@ 0x2d
 8003f86:	426d      	negs	r5, r5
 8003f88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f8c:	4859      	ldr	r0, [pc, #356]	@ (80040f4 <_printf_i+0x238>)
 8003f8e:	230a      	movs	r3, #10
 8003f90:	e011      	b.n	8003fb6 <_printf_i+0xfa>
 8003f92:	6821      	ldr	r1, [r4, #0]
 8003f94:	6833      	ldr	r3, [r6, #0]
 8003f96:	0608      	lsls	r0, r1, #24
 8003f98:	f853 5b04 	ldr.w	r5, [r3], #4
 8003f9c:	d402      	bmi.n	8003fa4 <_printf_i+0xe8>
 8003f9e:	0649      	lsls	r1, r1, #25
 8003fa0:	bf48      	it	mi
 8003fa2:	b2ad      	uxthmi	r5, r5
 8003fa4:	2f6f      	cmp	r7, #111	@ 0x6f
 8003fa6:	4853      	ldr	r0, [pc, #332]	@ (80040f4 <_printf_i+0x238>)
 8003fa8:	6033      	str	r3, [r6, #0]
 8003faa:	bf14      	ite	ne
 8003fac:	230a      	movne	r3, #10
 8003fae:	2308      	moveq	r3, #8
 8003fb0:	2100      	movs	r1, #0
 8003fb2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003fb6:	6866      	ldr	r6, [r4, #4]
 8003fb8:	60a6      	str	r6, [r4, #8]
 8003fba:	2e00      	cmp	r6, #0
 8003fbc:	bfa2      	ittt	ge
 8003fbe:	6821      	ldrge	r1, [r4, #0]
 8003fc0:	f021 0104 	bicge.w	r1, r1, #4
 8003fc4:	6021      	strge	r1, [r4, #0]
 8003fc6:	b90d      	cbnz	r5, 8003fcc <_printf_i+0x110>
 8003fc8:	2e00      	cmp	r6, #0
 8003fca:	d04b      	beq.n	8004064 <_printf_i+0x1a8>
 8003fcc:	4616      	mov	r6, r2
 8003fce:	fbb5 f1f3 	udiv	r1, r5, r3
 8003fd2:	fb03 5711 	mls	r7, r3, r1, r5
 8003fd6:	5dc7      	ldrb	r7, [r0, r7]
 8003fd8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003fdc:	462f      	mov	r7, r5
 8003fde:	42bb      	cmp	r3, r7
 8003fe0:	460d      	mov	r5, r1
 8003fe2:	d9f4      	bls.n	8003fce <_printf_i+0x112>
 8003fe4:	2b08      	cmp	r3, #8
 8003fe6:	d10b      	bne.n	8004000 <_printf_i+0x144>
 8003fe8:	6823      	ldr	r3, [r4, #0]
 8003fea:	07df      	lsls	r7, r3, #31
 8003fec:	d508      	bpl.n	8004000 <_printf_i+0x144>
 8003fee:	6923      	ldr	r3, [r4, #16]
 8003ff0:	6861      	ldr	r1, [r4, #4]
 8003ff2:	4299      	cmp	r1, r3
 8003ff4:	bfde      	ittt	le
 8003ff6:	2330      	movle	r3, #48	@ 0x30
 8003ff8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003ffc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004000:	1b92      	subs	r2, r2, r6
 8004002:	6122      	str	r2, [r4, #16]
 8004004:	f8cd a000 	str.w	sl, [sp]
 8004008:	464b      	mov	r3, r9
 800400a:	aa03      	add	r2, sp, #12
 800400c:	4621      	mov	r1, r4
 800400e:	4640      	mov	r0, r8
 8004010:	f7ff fee6 	bl	8003de0 <_printf_common>
 8004014:	3001      	adds	r0, #1
 8004016:	d14a      	bne.n	80040ae <_printf_i+0x1f2>
 8004018:	f04f 30ff 	mov.w	r0, #4294967295
 800401c:	b004      	add	sp, #16
 800401e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004022:	6823      	ldr	r3, [r4, #0]
 8004024:	f043 0320 	orr.w	r3, r3, #32
 8004028:	6023      	str	r3, [r4, #0]
 800402a:	4833      	ldr	r0, [pc, #204]	@ (80040f8 <_printf_i+0x23c>)
 800402c:	2778      	movs	r7, #120	@ 0x78
 800402e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004032:	6823      	ldr	r3, [r4, #0]
 8004034:	6831      	ldr	r1, [r6, #0]
 8004036:	061f      	lsls	r7, r3, #24
 8004038:	f851 5b04 	ldr.w	r5, [r1], #4
 800403c:	d402      	bmi.n	8004044 <_printf_i+0x188>
 800403e:	065f      	lsls	r7, r3, #25
 8004040:	bf48      	it	mi
 8004042:	b2ad      	uxthmi	r5, r5
 8004044:	6031      	str	r1, [r6, #0]
 8004046:	07d9      	lsls	r1, r3, #31
 8004048:	bf44      	itt	mi
 800404a:	f043 0320 	orrmi.w	r3, r3, #32
 800404e:	6023      	strmi	r3, [r4, #0]
 8004050:	b11d      	cbz	r5, 800405a <_printf_i+0x19e>
 8004052:	2310      	movs	r3, #16
 8004054:	e7ac      	b.n	8003fb0 <_printf_i+0xf4>
 8004056:	4827      	ldr	r0, [pc, #156]	@ (80040f4 <_printf_i+0x238>)
 8004058:	e7e9      	b.n	800402e <_printf_i+0x172>
 800405a:	6823      	ldr	r3, [r4, #0]
 800405c:	f023 0320 	bic.w	r3, r3, #32
 8004060:	6023      	str	r3, [r4, #0]
 8004062:	e7f6      	b.n	8004052 <_printf_i+0x196>
 8004064:	4616      	mov	r6, r2
 8004066:	e7bd      	b.n	8003fe4 <_printf_i+0x128>
 8004068:	6833      	ldr	r3, [r6, #0]
 800406a:	6825      	ldr	r5, [r4, #0]
 800406c:	6961      	ldr	r1, [r4, #20]
 800406e:	1d18      	adds	r0, r3, #4
 8004070:	6030      	str	r0, [r6, #0]
 8004072:	062e      	lsls	r6, r5, #24
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	d501      	bpl.n	800407c <_printf_i+0x1c0>
 8004078:	6019      	str	r1, [r3, #0]
 800407a:	e002      	b.n	8004082 <_printf_i+0x1c6>
 800407c:	0668      	lsls	r0, r5, #25
 800407e:	d5fb      	bpl.n	8004078 <_printf_i+0x1bc>
 8004080:	8019      	strh	r1, [r3, #0]
 8004082:	2300      	movs	r3, #0
 8004084:	6123      	str	r3, [r4, #16]
 8004086:	4616      	mov	r6, r2
 8004088:	e7bc      	b.n	8004004 <_printf_i+0x148>
 800408a:	6833      	ldr	r3, [r6, #0]
 800408c:	1d1a      	adds	r2, r3, #4
 800408e:	6032      	str	r2, [r6, #0]
 8004090:	681e      	ldr	r6, [r3, #0]
 8004092:	6862      	ldr	r2, [r4, #4]
 8004094:	2100      	movs	r1, #0
 8004096:	4630      	mov	r0, r6
 8004098:	f7fc f89a 	bl	80001d0 <memchr>
 800409c:	b108      	cbz	r0, 80040a2 <_printf_i+0x1e6>
 800409e:	1b80      	subs	r0, r0, r6
 80040a0:	6060      	str	r0, [r4, #4]
 80040a2:	6863      	ldr	r3, [r4, #4]
 80040a4:	6123      	str	r3, [r4, #16]
 80040a6:	2300      	movs	r3, #0
 80040a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80040ac:	e7aa      	b.n	8004004 <_printf_i+0x148>
 80040ae:	6923      	ldr	r3, [r4, #16]
 80040b0:	4632      	mov	r2, r6
 80040b2:	4649      	mov	r1, r9
 80040b4:	4640      	mov	r0, r8
 80040b6:	47d0      	blx	sl
 80040b8:	3001      	adds	r0, #1
 80040ba:	d0ad      	beq.n	8004018 <_printf_i+0x15c>
 80040bc:	6823      	ldr	r3, [r4, #0]
 80040be:	079b      	lsls	r3, r3, #30
 80040c0:	d413      	bmi.n	80040ea <_printf_i+0x22e>
 80040c2:	68e0      	ldr	r0, [r4, #12]
 80040c4:	9b03      	ldr	r3, [sp, #12]
 80040c6:	4298      	cmp	r0, r3
 80040c8:	bfb8      	it	lt
 80040ca:	4618      	movlt	r0, r3
 80040cc:	e7a6      	b.n	800401c <_printf_i+0x160>
 80040ce:	2301      	movs	r3, #1
 80040d0:	4632      	mov	r2, r6
 80040d2:	4649      	mov	r1, r9
 80040d4:	4640      	mov	r0, r8
 80040d6:	47d0      	blx	sl
 80040d8:	3001      	adds	r0, #1
 80040da:	d09d      	beq.n	8004018 <_printf_i+0x15c>
 80040dc:	3501      	adds	r5, #1
 80040de:	68e3      	ldr	r3, [r4, #12]
 80040e0:	9903      	ldr	r1, [sp, #12]
 80040e2:	1a5b      	subs	r3, r3, r1
 80040e4:	42ab      	cmp	r3, r5
 80040e6:	dcf2      	bgt.n	80040ce <_printf_i+0x212>
 80040e8:	e7eb      	b.n	80040c2 <_printf_i+0x206>
 80040ea:	2500      	movs	r5, #0
 80040ec:	f104 0619 	add.w	r6, r4, #25
 80040f0:	e7f5      	b.n	80040de <_printf_i+0x222>
 80040f2:	bf00      	nop
 80040f4:	080065b2 	.word	0x080065b2
 80040f8:	080065c3 	.word	0x080065c3

080040fc <std>:
 80040fc:	2300      	movs	r3, #0
 80040fe:	b510      	push	{r4, lr}
 8004100:	4604      	mov	r4, r0
 8004102:	e9c0 3300 	strd	r3, r3, [r0]
 8004106:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800410a:	6083      	str	r3, [r0, #8]
 800410c:	8181      	strh	r1, [r0, #12]
 800410e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004110:	81c2      	strh	r2, [r0, #14]
 8004112:	6183      	str	r3, [r0, #24]
 8004114:	4619      	mov	r1, r3
 8004116:	2208      	movs	r2, #8
 8004118:	305c      	adds	r0, #92	@ 0x5c
 800411a:	f000 f948 	bl	80043ae <memset>
 800411e:	4b0d      	ldr	r3, [pc, #52]	@ (8004154 <std+0x58>)
 8004120:	6263      	str	r3, [r4, #36]	@ 0x24
 8004122:	4b0d      	ldr	r3, [pc, #52]	@ (8004158 <std+0x5c>)
 8004124:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004126:	4b0d      	ldr	r3, [pc, #52]	@ (800415c <std+0x60>)
 8004128:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800412a:	4b0d      	ldr	r3, [pc, #52]	@ (8004160 <std+0x64>)
 800412c:	6323      	str	r3, [r4, #48]	@ 0x30
 800412e:	4b0d      	ldr	r3, [pc, #52]	@ (8004164 <std+0x68>)
 8004130:	6224      	str	r4, [r4, #32]
 8004132:	429c      	cmp	r4, r3
 8004134:	d006      	beq.n	8004144 <std+0x48>
 8004136:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800413a:	4294      	cmp	r4, r2
 800413c:	d002      	beq.n	8004144 <std+0x48>
 800413e:	33d0      	adds	r3, #208	@ 0xd0
 8004140:	429c      	cmp	r4, r3
 8004142:	d105      	bne.n	8004150 <std+0x54>
 8004144:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800414c:	f000 b9ac 	b.w	80044a8 <__retarget_lock_init_recursive>
 8004150:	bd10      	pop	{r4, pc}
 8004152:	bf00      	nop
 8004154:	08004329 	.word	0x08004329
 8004158:	0800434b 	.word	0x0800434b
 800415c:	08004383 	.word	0x08004383
 8004160:	080043a7 	.word	0x080043a7
 8004164:	200002f8 	.word	0x200002f8

08004168 <stdio_exit_handler>:
 8004168:	4a02      	ldr	r2, [pc, #8]	@ (8004174 <stdio_exit_handler+0xc>)
 800416a:	4903      	ldr	r1, [pc, #12]	@ (8004178 <stdio_exit_handler+0x10>)
 800416c:	4803      	ldr	r0, [pc, #12]	@ (800417c <stdio_exit_handler+0x14>)
 800416e:	f000 b869 	b.w	8004244 <_fwalk_sglue>
 8004172:	bf00      	nop
 8004174:	20000024 	.word	0x20000024
 8004178:	08005e05 	.word	0x08005e05
 800417c:	20000034 	.word	0x20000034

08004180 <cleanup_stdio>:
 8004180:	6841      	ldr	r1, [r0, #4]
 8004182:	4b0c      	ldr	r3, [pc, #48]	@ (80041b4 <cleanup_stdio+0x34>)
 8004184:	4299      	cmp	r1, r3
 8004186:	b510      	push	{r4, lr}
 8004188:	4604      	mov	r4, r0
 800418a:	d001      	beq.n	8004190 <cleanup_stdio+0x10>
 800418c:	f001 fe3a 	bl	8005e04 <_fflush_r>
 8004190:	68a1      	ldr	r1, [r4, #8]
 8004192:	4b09      	ldr	r3, [pc, #36]	@ (80041b8 <cleanup_stdio+0x38>)
 8004194:	4299      	cmp	r1, r3
 8004196:	d002      	beq.n	800419e <cleanup_stdio+0x1e>
 8004198:	4620      	mov	r0, r4
 800419a:	f001 fe33 	bl	8005e04 <_fflush_r>
 800419e:	68e1      	ldr	r1, [r4, #12]
 80041a0:	4b06      	ldr	r3, [pc, #24]	@ (80041bc <cleanup_stdio+0x3c>)
 80041a2:	4299      	cmp	r1, r3
 80041a4:	d004      	beq.n	80041b0 <cleanup_stdio+0x30>
 80041a6:	4620      	mov	r0, r4
 80041a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041ac:	f001 be2a 	b.w	8005e04 <_fflush_r>
 80041b0:	bd10      	pop	{r4, pc}
 80041b2:	bf00      	nop
 80041b4:	200002f8 	.word	0x200002f8
 80041b8:	20000360 	.word	0x20000360
 80041bc:	200003c8 	.word	0x200003c8

080041c0 <global_stdio_init.part.0>:
 80041c0:	b510      	push	{r4, lr}
 80041c2:	4b0b      	ldr	r3, [pc, #44]	@ (80041f0 <global_stdio_init.part.0+0x30>)
 80041c4:	4c0b      	ldr	r4, [pc, #44]	@ (80041f4 <global_stdio_init.part.0+0x34>)
 80041c6:	4a0c      	ldr	r2, [pc, #48]	@ (80041f8 <global_stdio_init.part.0+0x38>)
 80041c8:	601a      	str	r2, [r3, #0]
 80041ca:	4620      	mov	r0, r4
 80041cc:	2200      	movs	r2, #0
 80041ce:	2104      	movs	r1, #4
 80041d0:	f7ff ff94 	bl	80040fc <std>
 80041d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80041d8:	2201      	movs	r2, #1
 80041da:	2109      	movs	r1, #9
 80041dc:	f7ff ff8e 	bl	80040fc <std>
 80041e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80041e4:	2202      	movs	r2, #2
 80041e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041ea:	2112      	movs	r1, #18
 80041ec:	f7ff bf86 	b.w	80040fc <std>
 80041f0:	20000430 	.word	0x20000430
 80041f4:	200002f8 	.word	0x200002f8
 80041f8:	08004169 	.word	0x08004169

080041fc <__sfp_lock_acquire>:
 80041fc:	4801      	ldr	r0, [pc, #4]	@ (8004204 <__sfp_lock_acquire+0x8>)
 80041fe:	f000 b954 	b.w	80044aa <__retarget_lock_acquire_recursive>
 8004202:	bf00      	nop
 8004204:	20000439 	.word	0x20000439

08004208 <__sfp_lock_release>:
 8004208:	4801      	ldr	r0, [pc, #4]	@ (8004210 <__sfp_lock_release+0x8>)
 800420a:	f000 b94f 	b.w	80044ac <__retarget_lock_release_recursive>
 800420e:	bf00      	nop
 8004210:	20000439 	.word	0x20000439

08004214 <__sinit>:
 8004214:	b510      	push	{r4, lr}
 8004216:	4604      	mov	r4, r0
 8004218:	f7ff fff0 	bl	80041fc <__sfp_lock_acquire>
 800421c:	6a23      	ldr	r3, [r4, #32]
 800421e:	b11b      	cbz	r3, 8004228 <__sinit+0x14>
 8004220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004224:	f7ff bff0 	b.w	8004208 <__sfp_lock_release>
 8004228:	4b04      	ldr	r3, [pc, #16]	@ (800423c <__sinit+0x28>)
 800422a:	6223      	str	r3, [r4, #32]
 800422c:	4b04      	ldr	r3, [pc, #16]	@ (8004240 <__sinit+0x2c>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1f5      	bne.n	8004220 <__sinit+0xc>
 8004234:	f7ff ffc4 	bl	80041c0 <global_stdio_init.part.0>
 8004238:	e7f2      	b.n	8004220 <__sinit+0xc>
 800423a:	bf00      	nop
 800423c:	08004181 	.word	0x08004181
 8004240:	20000430 	.word	0x20000430

08004244 <_fwalk_sglue>:
 8004244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004248:	4607      	mov	r7, r0
 800424a:	4688      	mov	r8, r1
 800424c:	4614      	mov	r4, r2
 800424e:	2600      	movs	r6, #0
 8004250:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004254:	f1b9 0901 	subs.w	r9, r9, #1
 8004258:	d505      	bpl.n	8004266 <_fwalk_sglue+0x22>
 800425a:	6824      	ldr	r4, [r4, #0]
 800425c:	2c00      	cmp	r4, #0
 800425e:	d1f7      	bne.n	8004250 <_fwalk_sglue+0xc>
 8004260:	4630      	mov	r0, r6
 8004262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004266:	89ab      	ldrh	r3, [r5, #12]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d907      	bls.n	800427c <_fwalk_sglue+0x38>
 800426c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004270:	3301      	adds	r3, #1
 8004272:	d003      	beq.n	800427c <_fwalk_sglue+0x38>
 8004274:	4629      	mov	r1, r5
 8004276:	4638      	mov	r0, r7
 8004278:	47c0      	blx	r8
 800427a:	4306      	orrs	r6, r0
 800427c:	3568      	adds	r5, #104	@ 0x68
 800427e:	e7e9      	b.n	8004254 <_fwalk_sglue+0x10>

08004280 <sniprintf>:
 8004280:	b40c      	push	{r2, r3}
 8004282:	b530      	push	{r4, r5, lr}
 8004284:	4b17      	ldr	r3, [pc, #92]	@ (80042e4 <sniprintf+0x64>)
 8004286:	1e0c      	subs	r4, r1, #0
 8004288:	681d      	ldr	r5, [r3, #0]
 800428a:	b09d      	sub	sp, #116	@ 0x74
 800428c:	da08      	bge.n	80042a0 <sniprintf+0x20>
 800428e:	238b      	movs	r3, #139	@ 0x8b
 8004290:	602b      	str	r3, [r5, #0]
 8004292:	f04f 30ff 	mov.w	r0, #4294967295
 8004296:	b01d      	add	sp, #116	@ 0x74
 8004298:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800429c:	b002      	add	sp, #8
 800429e:	4770      	bx	lr
 80042a0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80042a4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80042a8:	bf14      	ite	ne
 80042aa:	f104 33ff 	addne.w	r3, r4, #4294967295
 80042ae:	4623      	moveq	r3, r4
 80042b0:	9304      	str	r3, [sp, #16]
 80042b2:	9307      	str	r3, [sp, #28]
 80042b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80042b8:	9002      	str	r0, [sp, #8]
 80042ba:	9006      	str	r0, [sp, #24]
 80042bc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80042c0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80042c2:	ab21      	add	r3, sp, #132	@ 0x84
 80042c4:	a902      	add	r1, sp, #8
 80042c6:	4628      	mov	r0, r5
 80042c8:	9301      	str	r3, [sp, #4]
 80042ca:	f001 fc1b 	bl	8005b04 <_svfiprintf_r>
 80042ce:	1c43      	adds	r3, r0, #1
 80042d0:	bfbc      	itt	lt
 80042d2:	238b      	movlt	r3, #139	@ 0x8b
 80042d4:	602b      	strlt	r3, [r5, #0]
 80042d6:	2c00      	cmp	r4, #0
 80042d8:	d0dd      	beq.n	8004296 <sniprintf+0x16>
 80042da:	9b02      	ldr	r3, [sp, #8]
 80042dc:	2200      	movs	r2, #0
 80042de:	701a      	strb	r2, [r3, #0]
 80042e0:	e7d9      	b.n	8004296 <sniprintf+0x16>
 80042e2:	bf00      	nop
 80042e4:	20000030 	.word	0x20000030

080042e8 <siprintf>:
 80042e8:	b40e      	push	{r1, r2, r3}
 80042ea:	b500      	push	{lr}
 80042ec:	b09c      	sub	sp, #112	@ 0x70
 80042ee:	ab1d      	add	r3, sp, #116	@ 0x74
 80042f0:	9002      	str	r0, [sp, #8]
 80042f2:	9006      	str	r0, [sp, #24]
 80042f4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80042f8:	4809      	ldr	r0, [pc, #36]	@ (8004320 <siprintf+0x38>)
 80042fa:	9107      	str	r1, [sp, #28]
 80042fc:	9104      	str	r1, [sp, #16]
 80042fe:	4909      	ldr	r1, [pc, #36]	@ (8004324 <siprintf+0x3c>)
 8004300:	f853 2b04 	ldr.w	r2, [r3], #4
 8004304:	9105      	str	r1, [sp, #20]
 8004306:	6800      	ldr	r0, [r0, #0]
 8004308:	9301      	str	r3, [sp, #4]
 800430a:	a902      	add	r1, sp, #8
 800430c:	f001 fbfa 	bl	8005b04 <_svfiprintf_r>
 8004310:	9b02      	ldr	r3, [sp, #8]
 8004312:	2200      	movs	r2, #0
 8004314:	701a      	strb	r2, [r3, #0]
 8004316:	b01c      	add	sp, #112	@ 0x70
 8004318:	f85d eb04 	ldr.w	lr, [sp], #4
 800431c:	b003      	add	sp, #12
 800431e:	4770      	bx	lr
 8004320:	20000030 	.word	0x20000030
 8004324:	ffff0208 	.word	0xffff0208

08004328 <__sread>:
 8004328:	b510      	push	{r4, lr}
 800432a:	460c      	mov	r4, r1
 800432c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004330:	f000 f86c 	bl	800440c <_read_r>
 8004334:	2800      	cmp	r0, #0
 8004336:	bfab      	itete	ge
 8004338:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800433a:	89a3      	ldrhlt	r3, [r4, #12]
 800433c:	181b      	addge	r3, r3, r0
 800433e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004342:	bfac      	ite	ge
 8004344:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004346:	81a3      	strhlt	r3, [r4, #12]
 8004348:	bd10      	pop	{r4, pc}

0800434a <__swrite>:
 800434a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800434e:	461f      	mov	r7, r3
 8004350:	898b      	ldrh	r3, [r1, #12]
 8004352:	05db      	lsls	r3, r3, #23
 8004354:	4605      	mov	r5, r0
 8004356:	460c      	mov	r4, r1
 8004358:	4616      	mov	r6, r2
 800435a:	d505      	bpl.n	8004368 <__swrite+0x1e>
 800435c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004360:	2302      	movs	r3, #2
 8004362:	2200      	movs	r2, #0
 8004364:	f000 f840 	bl	80043e8 <_lseek_r>
 8004368:	89a3      	ldrh	r3, [r4, #12]
 800436a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800436e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004372:	81a3      	strh	r3, [r4, #12]
 8004374:	4632      	mov	r2, r6
 8004376:	463b      	mov	r3, r7
 8004378:	4628      	mov	r0, r5
 800437a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800437e:	f000 b857 	b.w	8004430 <_write_r>

08004382 <__sseek>:
 8004382:	b510      	push	{r4, lr}
 8004384:	460c      	mov	r4, r1
 8004386:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800438a:	f000 f82d 	bl	80043e8 <_lseek_r>
 800438e:	1c43      	adds	r3, r0, #1
 8004390:	89a3      	ldrh	r3, [r4, #12]
 8004392:	bf15      	itete	ne
 8004394:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004396:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800439a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800439e:	81a3      	strheq	r3, [r4, #12]
 80043a0:	bf18      	it	ne
 80043a2:	81a3      	strhne	r3, [r4, #12]
 80043a4:	bd10      	pop	{r4, pc}

080043a6 <__sclose>:
 80043a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043aa:	f000 b80d 	b.w	80043c8 <_close_r>

080043ae <memset>:
 80043ae:	4402      	add	r2, r0
 80043b0:	4603      	mov	r3, r0
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d100      	bne.n	80043b8 <memset+0xa>
 80043b6:	4770      	bx	lr
 80043b8:	f803 1b01 	strb.w	r1, [r3], #1
 80043bc:	e7f9      	b.n	80043b2 <memset+0x4>
	...

080043c0 <_localeconv_r>:
 80043c0:	4800      	ldr	r0, [pc, #0]	@ (80043c4 <_localeconv_r+0x4>)
 80043c2:	4770      	bx	lr
 80043c4:	20000170 	.word	0x20000170

080043c8 <_close_r>:
 80043c8:	b538      	push	{r3, r4, r5, lr}
 80043ca:	4d06      	ldr	r5, [pc, #24]	@ (80043e4 <_close_r+0x1c>)
 80043cc:	2300      	movs	r3, #0
 80043ce:	4604      	mov	r4, r0
 80043d0:	4608      	mov	r0, r1
 80043d2:	602b      	str	r3, [r5, #0]
 80043d4:	f7fc ff5d 	bl	8001292 <_close>
 80043d8:	1c43      	adds	r3, r0, #1
 80043da:	d102      	bne.n	80043e2 <_close_r+0x1a>
 80043dc:	682b      	ldr	r3, [r5, #0]
 80043de:	b103      	cbz	r3, 80043e2 <_close_r+0x1a>
 80043e0:	6023      	str	r3, [r4, #0]
 80043e2:	bd38      	pop	{r3, r4, r5, pc}
 80043e4:	20000434 	.word	0x20000434

080043e8 <_lseek_r>:
 80043e8:	b538      	push	{r3, r4, r5, lr}
 80043ea:	4d07      	ldr	r5, [pc, #28]	@ (8004408 <_lseek_r+0x20>)
 80043ec:	4604      	mov	r4, r0
 80043ee:	4608      	mov	r0, r1
 80043f0:	4611      	mov	r1, r2
 80043f2:	2200      	movs	r2, #0
 80043f4:	602a      	str	r2, [r5, #0]
 80043f6:	461a      	mov	r2, r3
 80043f8:	f7fc ff72 	bl	80012e0 <_lseek>
 80043fc:	1c43      	adds	r3, r0, #1
 80043fe:	d102      	bne.n	8004406 <_lseek_r+0x1e>
 8004400:	682b      	ldr	r3, [r5, #0]
 8004402:	b103      	cbz	r3, 8004406 <_lseek_r+0x1e>
 8004404:	6023      	str	r3, [r4, #0]
 8004406:	bd38      	pop	{r3, r4, r5, pc}
 8004408:	20000434 	.word	0x20000434

0800440c <_read_r>:
 800440c:	b538      	push	{r3, r4, r5, lr}
 800440e:	4d07      	ldr	r5, [pc, #28]	@ (800442c <_read_r+0x20>)
 8004410:	4604      	mov	r4, r0
 8004412:	4608      	mov	r0, r1
 8004414:	4611      	mov	r1, r2
 8004416:	2200      	movs	r2, #0
 8004418:	602a      	str	r2, [r5, #0]
 800441a:	461a      	mov	r2, r3
 800441c:	f7fc ff00 	bl	8001220 <_read>
 8004420:	1c43      	adds	r3, r0, #1
 8004422:	d102      	bne.n	800442a <_read_r+0x1e>
 8004424:	682b      	ldr	r3, [r5, #0]
 8004426:	b103      	cbz	r3, 800442a <_read_r+0x1e>
 8004428:	6023      	str	r3, [r4, #0]
 800442a:	bd38      	pop	{r3, r4, r5, pc}
 800442c:	20000434 	.word	0x20000434

08004430 <_write_r>:
 8004430:	b538      	push	{r3, r4, r5, lr}
 8004432:	4d07      	ldr	r5, [pc, #28]	@ (8004450 <_write_r+0x20>)
 8004434:	4604      	mov	r4, r0
 8004436:	4608      	mov	r0, r1
 8004438:	4611      	mov	r1, r2
 800443a:	2200      	movs	r2, #0
 800443c:	602a      	str	r2, [r5, #0]
 800443e:	461a      	mov	r2, r3
 8004440:	f7fc ff0b 	bl	800125a <_write>
 8004444:	1c43      	adds	r3, r0, #1
 8004446:	d102      	bne.n	800444e <_write_r+0x1e>
 8004448:	682b      	ldr	r3, [r5, #0]
 800444a:	b103      	cbz	r3, 800444e <_write_r+0x1e>
 800444c:	6023      	str	r3, [r4, #0]
 800444e:	bd38      	pop	{r3, r4, r5, pc}
 8004450:	20000434 	.word	0x20000434

08004454 <__errno>:
 8004454:	4b01      	ldr	r3, [pc, #4]	@ (800445c <__errno+0x8>)
 8004456:	6818      	ldr	r0, [r3, #0]
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	20000030 	.word	0x20000030

08004460 <__libc_init_array>:
 8004460:	b570      	push	{r4, r5, r6, lr}
 8004462:	4d0d      	ldr	r5, [pc, #52]	@ (8004498 <__libc_init_array+0x38>)
 8004464:	4c0d      	ldr	r4, [pc, #52]	@ (800449c <__libc_init_array+0x3c>)
 8004466:	1b64      	subs	r4, r4, r5
 8004468:	10a4      	asrs	r4, r4, #2
 800446a:	2600      	movs	r6, #0
 800446c:	42a6      	cmp	r6, r4
 800446e:	d109      	bne.n	8004484 <__libc_init_array+0x24>
 8004470:	4d0b      	ldr	r5, [pc, #44]	@ (80044a0 <__libc_init_array+0x40>)
 8004472:	4c0c      	ldr	r4, [pc, #48]	@ (80044a4 <__libc_init_array+0x44>)
 8004474:	f002 f864 	bl	8006540 <_init>
 8004478:	1b64      	subs	r4, r4, r5
 800447a:	10a4      	asrs	r4, r4, #2
 800447c:	2600      	movs	r6, #0
 800447e:	42a6      	cmp	r6, r4
 8004480:	d105      	bne.n	800448e <__libc_init_array+0x2e>
 8004482:	bd70      	pop	{r4, r5, r6, pc}
 8004484:	f855 3b04 	ldr.w	r3, [r5], #4
 8004488:	4798      	blx	r3
 800448a:	3601      	adds	r6, #1
 800448c:	e7ee      	b.n	800446c <__libc_init_array+0xc>
 800448e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004492:	4798      	blx	r3
 8004494:	3601      	adds	r6, #1
 8004496:	e7f2      	b.n	800447e <__libc_init_array+0x1e>
 8004498:	08006918 	.word	0x08006918
 800449c:	08006918 	.word	0x08006918
 80044a0:	08006918 	.word	0x08006918
 80044a4:	0800691c 	.word	0x0800691c

080044a8 <__retarget_lock_init_recursive>:
 80044a8:	4770      	bx	lr

080044aa <__retarget_lock_acquire_recursive>:
 80044aa:	4770      	bx	lr

080044ac <__retarget_lock_release_recursive>:
 80044ac:	4770      	bx	lr

080044ae <quorem>:
 80044ae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044b2:	6903      	ldr	r3, [r0, #16]
 80044b4:	690c      	ldr	r4, [r1, #16]
 80044b6:	42a3      	cmp	r3, r4
 80044b8:	4607      	mov	r7, r0
 80044ba:	db7e      	blt.n	80045ba <quorem+0x10c>
 80044bc:	3c01      	subs	r4, #1
 80044be:	f101 0814 	add.w	r8, r1, #20
 80044c2:	00a3      	lsls	r3, r4, #2
 80044c4:	f100 0514 	add.w	r5, r0, #20
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80044ce:	9301      	str	r3, [sp, #4]
 80044d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80044d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80044d8:	3301      	adds	r3, #1
 80044da:	429a      	cmp	r2, r3
 80044dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80044e0:	fbb2 f6f3 	udiv	r6, r2, r3
 80044e4:	d32e      	bcc.n	8004544 <quorem+0x96>
 80044e6:	f04f 0a00 	mov.w	sl, #0
 80044ea:	46c4      	mov	ip, r8
 80044ec:	46ae      	mov	lr, r5
 80044ee:	46d3      	mov	fp, sl
 80044f0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80044f4:	b298      	uxth	r0, r3
 80044f6:	fb06 a000 	mla	r0, r6, r0, sl
 80044fa:	0c02      	lsrs	r2, r0, #16
 80044fc:	0c1b      	lsrs	r3, r3, #16
 80044fe:	fb06 2303 	mla	r3, r6, r3, r2
 8004502:	f8de 2000 	ldr.w	r2, [lr]
 8004506:	b280      	uxth	r0, r0
 8004508:	b292      	uxth	r2, r2
 800450a:	1a12      	subs	r2, r2, r0
 800450c:	445a      	add	r2, fp
 800450e:	f8de 0000 	ldr.w	r0, [lr]
 8004512:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004516:	b29b      	uxth	r3, r3
 8004518:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800451c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004520:	b292      	uxth	r2, r2
 8004522:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004526:	45e1      	cmp	r9, ip
 8004528:	f84e 2b04 	str.w	r2, [lr], #4
 800452c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004530:	d2de      	bcs.n	80044f0 <quorem+0x42>
 8004532:	9b00      	ldr	r3, [sp, #0]
 8004534:	58eb      	ldr	r3, [r5, r3]
 8004536:	b92b      	cbnz	r3, 8004544 <quorem+0x96>
 8004538:	9b01      	ldr	r3, [sp, #4]
 800453a:	3b04      	subs	r3, #4
 800453c:	429d      	cmp	r5, r3
 800453e:	461a      	mov	r2, r3
 8004540:	d32f      	bcc.n	80045a2 <quorem+0xf4>
 8004542:	613c      	str	r4, [r7, #16]
 8004544:	4638      	mov	r0, r7
 8004546:	f001 f979 	bl	800583c <__mcmp>
 800454a:	2800      	cmp	r0, #0
 800454c:	db25      	blt.n	800459a <quorem+0xec>
 800454e:	4629      	mov	r1, r5
 8004550:	2000      	movs	r0, #0
 8004552:	f858 2b04 	ldr.w	r2, [r8], #4
 8004556:	f8d1 c000 	ldr.w	ip, [r1]
 800455a:	fa1f fe82 	uxth.w	lr, r2
 800455e:	fa1f f38c 	uxth.w	r3, ip
 8004562:	eba3 030e 	sub.w	r3, r3, lr
 8004566:	4403      	add	r3, r0
 8004568:	0c12      	lsrs	r2, r2, #16
 800456a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800456e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004572:	b29b      	uxth	r3, r3
 8004574:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004578:	45c1      	cmp	r9, r8
 800457a:	f841 3b04 	str.w	r3, [r1], #4
 800457e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004582:	d2e6      	bcs.n	8004552 <quorem+0xa4>
 8004584:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004588:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800458c:	b922      	cbnz	r2, 8004598 <quorem+0xea>
 800458e:	3b04      	subs	r3, #4
 8004590:	429d      	cmp	r5, r3
 8004592:	461a      	mov	r2, r3
 8004594:	d30b      	bcc.n	80045ae <quorem+0x100>
 8004596:	613c      	str	r4, [r7, #16]
 8004598:	3601      	adds	r6, #1
 800459a:	4630      	mov	r0, r6
 800459c:	b003      	add	sp, #12
 800459e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045a2:	6812      	ldr	r2, [r2, #0]
 80045a4:	3b04      	subs	r3, #4
 80045a6:	2a00      	cmp	r2, #0
 80045a8:	d1cb      	bne.n	8004542 <quorem+0x94>
 80045aa:	3c01      	subs	r4, #1
 80045ac:	e7c6      	b.n	800453c <quorem+0x8e>
 80045ae:	6812      	ldr	r2, [r2, #0]
 80045b0:	3b04      	subs	r3, #4
 80045b2:	2a00      	cmp	r2, #0
 80045b4:	d1ef      	bne.n	8004596 <quorem+0xe8>
 80045b6:	3c01      	subs	r4, #1
 80045b8:	e7ea      	b.n	8004590 <quorem+0xe2>
 80045ba:	2000      	movs	r0, #0
 80045bc:	e7ee      	b.n	800459c <quorem+0xee>
	...

080045c0 <_dtoa_r>:
 80045c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045c4:	69c7      	ldr	r7, [r0, #28]
 80045c6:	b099      	sub	sp, #100	@ 0x64
 80045c8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80045cc:	ec55 4b10 	vmov	r4, r5, d0
 80045d0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80045d2:	9109      	str	r1, [sp, #36]	@ 0x24
 80045d4:	4683      	mov	fp, r0
 80045d6:	920e      	str	r2, [sp, #56]	@ 0x38
 80045d8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80045da:	b97f      	cbnz	r7, 80045fc <_dtoa_r+0x3c>
 80045dc:	2010      	movs	r0, #16
 80045de:	f000 fdfd 	bl	80051dc <malloc>
 80045e2:	4602      	mov	r2, r0
 80045e4:	f8cb 001c 	str.w	r0, [fp, #28]
 80045e8:	b920      	cbnz	r0, 80045f4 <_dtoa_r+0x34>
 80045ea:	4ba7      	ldr	r3, [pc, #668]	@ (8004888 <_dtoa_r+0x2c8>)
 80045ec:	21ef      	movs	r1, #239	@ 0xef
 80045ee:	48a7      	ldr	r0, [pc, #668]	@ (800488c <_dtoa_r+0x2cc>)
 80045f0:	f001 fc68 	bl	8005ec4 <__assert_func>
 80045f4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80045f8:	6007      	str	r7, [r0, #0]
 80045fa:	60c7      	str	r7, [r0, #12]
 80045fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004600:	6819      	ldr	r1, [r3, #0]
 8004602:	b159      	cbz	r1, 800461c <_dtoa_r+0x5c>
 8004604:	685a      	ldr	r2, [r3, #4]
 8004606:	604a      	str	r2, [r1, #4]
 8004608:	2301      	movs	r3, #1
 800460a:	4093      	lsls	r3, r2
 800460c:	608b      	str	r3, [r1, #8]
 800460e:	4658      	mov	r0, fp
 8004610:	f000 feda 	bl	80053c8 <_Bfree>
 8004614:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004618:	2200      	movs	r2, #0
 800461a:	601a      	str	r2, [r3, #0]
 800461c:	1e2b      	subs	r3, r5, #0
 800461e:	bfb9      	ittee	lt
 8004620:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004624:	9303      	strlt	r3, [sp, #12]
 8004626:	2300      	movge	r3, #0
 8004628:	6033      	strge	r3, [r6, #0]
 800462a:	9f03      	ldr	r7, [sp, #12]
 800462c:	4b98      	ldr	r3, [pc, #608]	@ (8004890 <_dtoa_r+0x2d0>)
 800462e:	bfbc      	itt	lt
 8004630:	2201      	movlt	r2, #1
 8004632:	6032      	strlt	r2, [r6, #0]
 8004634:	43bb      	bics	r3, r7
 8004636:	d112      	bne.n	800465e <_dtoa_r+0x9e>
 8004638:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800463a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800463e:	6013      	str	r3, [r2, #0]
 8004640:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004644:	4323      	orrs	r3, r4
 8004646:	f000 854d 	beq.w	80050e4 <_dtoa_r+0xb24>
 800464a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800464c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80048a4 <_dtoa_r+0x2e4>
 8004650:	2b00      	cmp	r3, #0
 8004652:	f000 854f 	beq.w	80050f4 <_dtoa_r+0xb34>
 8004656:	f10a 0303 	add.w	r3, sl, #3
 800465a:	f000 bd49 	b.w	80050f0 <_dtoa_r+0xb30>
 800465e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004662:	2200      	movs	r2, #0
 8004664:	ec51 0b17 	vmov	r0, r1, d7
 8004668:	2300      	movs	r3, #0
 800466a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800466e:	f7fc fa2b 	bl	8000ac8 <__aeabi_dcmpeq>
 8004672:	4680      	mov	r8, r0
 8004674:	b158      	cbz	r0, 800468e <_dtoa_r+0xce>
 8004676:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004678:	2301      	movs	r3, #1
 800467a:	6013      	str	r3, [r2, #0]
 800467c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800467e:	b113      	cbz	r3, 8004686 <_dtoa_r+0xc6>
 8004680:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8004682:	4b84      	ldr	r3, [pc, #528]	@ (8004894 <_dtoa_r+0x2d4>)
 8004684:	6013      	str	r3, [r2, #0]
 8004686:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80048a8 <_dtoa_r+0x2e8>
 800468a:	f000 bd33 	b.w	80050f4 <_dtoa_r+0xb34>
 800468e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8004692:	aa16      	add	r2, sp, #88	@ 0x58
 8004694:	a917      	add	r1, sp, #92	@ 0x5c
 8004696:	4658      	mov	r0, fp
 8004698:	f001 f980 	bl	800599c <__d2b>
 800469c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80046a0:	4681      	mov	r9, r0
 80046a2:	2e00      	cmp	r6, #0
 80046a4:	d077      	beq.n	8004796 <_dtoa_r+0x1d6>
 80046a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80046a8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80046ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80046b4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80046b8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80046bc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80046c0:	4619      	mov	r1, r3
 80046c2:	2200      	movs	r2, #0
 80046c4:	4b74      	ldr	r3, [pc, #464]	@ (8004898 <_dtoa_r+0x2d8>)
 80046c6:	f7fb fddf 	bl	8000288 <__aeabi_dsub>
 80046ca:	a369      	add	r3, pc, #420	@ (adr r3, 8004870 <_dtoa_r+0x2b0>)
 80046cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d0:	f7fb ff92 	bl	80005f8 <__aeabi_dmul>
 80046d4:	a368      	add	r3, pc, #416	@ (adr r3, 8004878 <_dtoa_r+0x2b8>)
 80046d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046da:	f7fb fdd7 	bl	800028c <__adddf3>
 80046de:	4604      	mov	r4, r0
 80046e0:	4630      	mov	r0, r6
 80046e2:	460d      	mov	r5, r1
 80046e4:	f7fb ff1e 	bl	8000524 <__aeabi_i2d>
 80046e8:	a365      	add	r3, pc, #404	@ (adr r3, 8004880 <_dtoa_r+0x2c0>)
 80046ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ee:	f7fb ff83 	bl	80005f8 <__aeabi_dmul>
 80046f2:	4602      	mov	r2, r0
 80046f4:	460b      	mov	r3, r1
 80046f6:	4620      	mov	r0, r4
 80046f8:	4629      	mov	r1, r5
 80046fa:	f7fb fdc7 	bl	800028c <__adddf3>
 80046fe:	4604      	mov	r4, r0
 8004700:	460d      	mov	r5, r1
 8004702:	f7fc fa29 	bl	8000b58 <__aeabi_d2iz>
 8004706:	2200      	movs	r2, #0
 8004708:	4607      	mov	r7, r0
 800470a:	2300      	movs	r3, #0
 800470c:	4620      	mov	r0, r4
 800470e:	4629      	mov	r1, r5
 8004710:	f7fc f9e4 	bl	8000adc <__aeabi_dcmplt>
 8004714:	b140      	cbz	r0, 8004728 <_dtoa_r+0x168>
 8004716:	4638      	mov	r0, r7
 8004718:	f7fb ff04 	bl	8000524 <__aeabi_i2d>
 800471c:	4622      	mov	r2, r4
 800471e:	462b      	mov	r3, r5
 8004720:	f7fc f9d2 	bl	8000ac8 <__aeabi_dcmpeq>
 8004724:	b900      	cbnz	r0, 8004728 <_dtoa_r+0x168>
 8004726:	3f01      	subs	r7, #1
 8004728:	2f16      	cmp	r7, #22
 800472a:	d851      	bhi.n	80047d0 <_dtoa_r+0x210>
 800472c:	4b5b      	ldr	r3, [pc, #364]	@ (800489c <_dtoa_r+0x2dc>)
 800472e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004736:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800473a:	f7fc f9cf 	bl	8000adc <__aeabi_dcmplt>
 800473e:	2800      	cmp	r0, #0
 8004740:	d048      	beq.n	80047d4 <_dtoa_r+0x214>
 8004742:	3f01      	subs	r7, #1
 8004744:	2300      	movs	r3, #0
 8004746:	9312      	str	r3, [sp, #72]	@ 0x48
 8004748:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800474a:	1b9b      	subs	r3, r3, r6
 800474c:	1e5a      	subs	r2, r3, #1
 800474e:	bf44      	itt	mi
 8004750:	f1c3 0801 	rsbmi	r8, r3, #1
 8004754:	2300      	movmi	r3, #0
 8004756:	9208      	str	r2, [sp, #32]
 8004758:	bf54      	ite	pl
 800475a:	f04f 0800 	movpl.w	r8, #0
 800475e:	9308      	strmi	r3, [sp, #32]
 8004760:	2f00      	cmp	r7, #0
 8004762:	db39      	blt.n	80047d8 <_dtoa_r+0x218>
 8004764:	9b08      	ldr	r3, [sp, #32]
 8004766:	970f      	str	r7, [sp, #60]	@ 0x3c
 8004768:	443b      	add	r3, r7
 800476a:	9308      	str	r3, [sp, #32]
 800476c:	2300      	movs	r3, #0
 800476e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004770:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004772:	2b09      	cmp	r3, #9
 8004774:	d864      	bhi.n	8004840 <_dtoa_r+0x280>
 8004776:	2b05      	cmp	r3, #5
 8004778:	bfc4      	itt	gt
 800477a:	3b04      	subgt	r3, #4
 800477c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800477e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004780:	f1a3 0302 	sub.w	r3, r3, #2
 8004784:	bfcc      	ite	gt
 8004786:	2400      	movgt	r4, #0
 8004788:	2401      	movle	r4, #1
 800478a:	2b03      	cmp	r3, #3
 800478c:	d863      	bhi.n	8004856 <_dtoa_r+0x296>
 800478e:	e8df f003 	tbb	[pc, r3]
 8004792:	372a      	.short	0x372a
 8004794:	5535      	.short	0x5535
 8004796:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800479a:	441e      	add	r6, r3
 800479c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80047a0:	2b20      	cmp	r3, #32
 80047a2:	bfc1      	itttt	gt
 80047a4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80047a8:	409f      	lslgt	r7, r3
 80047aa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80047ae:	fa24 f303 	lsrgt.w	r3, r4, r3
 80047b2:	bfd6      	itet	le
 80047b4:	f1c3 0320 	rsble	r3, r3, #32
 80047b8:	ea47 0003 	orrgt.w	r0, r7, r3
 80047bc:	fa04 f003 	lslle.w	r0, r4, r3
 80047c0:	f7fb fea0 	bl	8000504 <__aeabi_ui2d>
 80047c4:	2201      	movs	r2, #1
 80047c6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80047ca:	3e01      	subs	r6, #1
 80047cc:	9214      	str	r2, [sp, #80]	@ 0x50
 80047ce:	e777      	b.n	80046c0 <_dtoa_r+0x100>
 80047d0:	2301      	movs	r3, #1
 80047d2:	e7b8      	b.n	8004746 <_dtoa_r+0x186>
 80047d4:	9012      	str	r0, [sp, #72]	@ 0x48
 80047d6:	e7b7      	b.n	8004748 <_dtoa_r+0x188>
 80047d8:	427b      	negs	r3, r7
 80047da:	930a      	str	r3, [sp, #40]	@ 0x28
 80047dc:	2300      	movs	r3, #0
 80047de:	eba8 0807 	sub.w	r8, r8, r7
 80047e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80047e4:	e7c4      	b.n	8004770 <_dtoa_r+0x1b0>
 80047e6:	2300      	movs	r3, #0
 80047e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80047ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	dc35      	bgt.n	800485c <_dtoa_r+0x29c>
 80047f0:	2301      	movs	r3, #1
 80047f2:	9300      	str	r3, [sp, #0]
 80047f4:	9307      	str	r3, [sp, #28]
 80047f6:	461a      	mov	r2, r3
 80047f8:	920e      	str	r2, [sp, #56]	@ 0x38
 80047fa:	e00b      	b.n	8004814 <_dtoa_r+0x254>
 80047fc:	2301      	movs	r3, #1
 80047fe:	e7f3      	b.n	80047e8 <_dtoa_r+0x228>
 8004800:	2300      	movs	r3, #0
 8004802:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004804:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004806:	18fb      	adds	r3, r7, r3
 8004808:	9300      	str	r3, [sp, #0]
 800480a:	3301      	adds	r3, #1
 800480c:	2b01      	cmp	r3, #1
 800480e:	9307      	str	r3, [sp, #28]
 8004810:	bfb8      	it	lt
 8004812:	2301      	movlt	r3, #1
 8004814:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004818:	2100      	movs	r1, #0
 800481a:	2204      	movs	r2, #4
 800481c:	f102 0514 	add.w	r5, r2, #20
 8004820:	429d      	cmp	r5, r3
 8004822:	d91f      	bls.n	8004864 <_dtoa_r+0x2a4>
 8004824:	6041      	str	r1, [r0, #4]
 8004826:	4658      	mov	r0, fp
 8004828:	f000 fd8e 	bl	8005348 <_Balloc>
 800482c:	4682      	mov	sl, r0
 800482e:	2800      	cmp	r0, #0
 8004830:	d13c      	bne.n	80048ac <_dtoa_r+0x2ec>
 8004832:	4b1b      	ldr	r3, [pc, #108]	@ (80048a0 <_dtoa_r+0x2e0>)
 8004834:	4602      	mov	r2, r0
 8004836:	f240 11af 	movw	r1, #431	@ 0x1af
 800483a:	e6d8      	b.n	80045ee <_dtoa_r+0x2e>
 800483c:	2301      	movs	r3, #1
 800483e:	e7e0      	b.n	8004802 <_dtoa_r+0x242>
 8004840:	2401      	movs	r4, #1
 8004842:	2300      	movs	r3, #0
 8004844:	9309      	str	r3, [sp, #36]	@ 0x24
 8004846:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004848:	f04f 33ff 	mov.w	r3, #4294967295
 800484c:	9300      	str	r3, [sp, #0]
 800484e:	9307      	str	r3, [sp, #28]
 8004850:	2200      	movs	r2, #0
 8004852:	2312      	movs	r3, #18
 8004854:	e7d0      	b.n	80047f8 <_dtoa_r+0x238>
 8004856:	2301      	movs	r3, #1
 8004858:	930b      	str	r3, [sp, #44]	@ 0x2c
 800485a:	e7f5      	b.n	8004848 <_dtoa_r+0x288>
 800485c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800485e:	9300      	str	r3, [sp, #0]
 8004860:	9307      	str	r3, [sp, #28]
 8004862:	e7d7      	b.n	8004814 <_dtoa_r+0x254>
 8004864:	3101      	adds	r1, #1
 8004866:	0052      	lsls	r2, r2, #1
 8004868:	e7d8      	b.n	800481c <_dtoa_r+0x25c>
 800486a:	bf00      	nop
 800486c:	f3af 8000 	nop.w
 8004870:	636f4361 	.word	0x636f4361
 8004874:	3fd287a7 	.word	0x3fd287a7
 8004878:	8b60c8b3 	.word	0x8b60c8b3
 800487c:	3fc68a28 	.word	0x3fc68a28
 8004880:	509f79fb 	.word	0x509f79fb
 8004884:	3fd34413 	.word	0x3fd34413
 8004888:	080065e1 	.word	0x080065e1
 800488c:	080065f8 	.word	0x080065f8
 8004890:	7ff00000 	.word	0x7ff00000
 8004894:	080065b1 	.word	0x080065b1
 8004898:	3ff80000 	.word	0x3ff80000
 800489c:	080066f0 	.word	0x080066f0
 80048a0:	08006650 	.word	0x08006650
 80048a4:	080065dd 	.word	0x080065dd
 80048a8:	080065b0 	.word	0x080065b0
 80048ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 80048b0:	6018      	str	r0, [r3, #0]
 80048b2:	9b07      	ldr	r3, [sp, #28]
 80048b4:	2b0e      	cmp	r3, #14
 80048b6:	f200 80a4 	bhi.w	8004a02 <_dtoa_r+0x442>
 80048ba:	2c00      	cmp	r4, #0
 80048bc:	f000 80a1 	beq.w	8004a02 <_dtoa_r+0x442>
 80048c0:	2f00      	cmp	r7, #0
 80048c2:	dd33      	ble.n	800492c <_dtoa_r+0x36c>
 80048c4:	4bad      	ldr	r3, [pc, #692]	@ (8004b7c <_dtoa_r+0x5bc>)
 80048c6:	f007 020f 	and.w	r2, r7, #15
 80048ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80048ce:	ed93 7b00 	vldr	d7, [r3]
 80048d2:	05f8      	lsls	r0, r7, #23
 80048d4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80048d8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80048dc:	d516      	bpl.n	800490c <_dtoa_r+0x34c>
 80048de:	4ba8      	ldr	r3, [pc, #672]	@ (8004b80 <_dtoa_r+0x5c0>)
 80048e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80048e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80048e8:	f7fb ffb0 	bl	800084c <__aeabi_ddiv>
 80048ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80048f0:	f004 040f 	and.w	r4, r4, #15
 80048f4:	2603      	movs	r6, #3
 80048f6:	4da2      	ldr	r5, [pc, #648]	@ (8004b80 <_dtoa_r+0x5c0>)
 80048f8:	b954      	cbnz	r4, 8004910 <_dtoa_r+0x350>
 80048fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80048fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004902:	f7fb ffa3 	bl	800084c <__aeabi_ddiv>
 8004906:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800490a:	e028      	b.n	800495e <_dtoa_r+0x39e>
 800490c:	2602      	movs	r6, #2
 800490e:	e7f2      	b.n	80048f6 <_dtoa_r+0x336>
 8004910:	07e1      	lsls	r1, r4, #31
 8004912:	d508      	bpl.n	8004926 <_dtoa_r+0x366>
 8004914:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004918:	e9d5 2300 	ldrd	r2, r3, [r5]
 800491c:	f7fb fe6c 	bl	80005f8 <__aeabi_dmul>
 8004920:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004924:	3601      	adds	r6, #1
 8004926:	1064      	asrs	r4, r4, #1
 8004928:	3508      	adds	r5, #8
 800492a:	e7e5      	b.n	80048f8 <_dtoa_r+0x338>
 800492c:	f000 80d2 	beq.w	8004ad4 <_dtoa_r+0x514>
 8004930:	427c      	negs	r4, r7
 8004932:	4b92      	ldr	r3, [pc, #584]	@ (8004b7c <_dtoa_r+0x5bc>)
 8004934:	4d92      	ldr	r5, [pc, #584]	@ (8004b80 <_dtoa_r+0x5c0>)
 8004936:	f004 020f 	and.w	r2, r4, #15
 800493a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800493e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004942:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004946:	f7fb fe57 	bl	80005f8 <__aeabi_dmul>
 800494a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800494e:	1124      	asrs	r4, r4, #4
 8004950:	2300      	movs	r3, #0
 8004952:	2602      	movs	r6, #2
 8004954:	2c00      	cmp	r4, #0
 8004956:	f040 80b2 	bne.w	8004abe <_dtoa_r+0x4fe>
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1d3      	bne.n	8004906 <_dtoa_r+0x346>
 800495e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004960:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004964:	2b00      	cmp	r3, #0
 8004966:	f000 80b7 	beq.w	8004ad8 <_dtoa_r+0x518>
 800496a:	4b86      	ldr	r3, [pc, #536]	@ (8004b84 <_dtoa_r+0x5c4>)
 800496c:	2200      	movs	r2, #0
 800496e:	4620      	mov	r0, r4
 8004970:	4629      	mov	r1, r5
 8004972:	f7fc f8b3 	bl	8000adc <__aeabi_dcmplt>
 8004976:	2800      	cmp	r0, #0
 8004978:	f000 80ae 	beq.w	8004ad8 <_dtoa_r+0x518>
 800497c:	9b07      	ldr	r3, [sp, #28]
 800497e:	2b00      	cmp	r3, #0
 8004980:	f000 80aa 	beq.w	8004ad8 <_dtoa_r+0x518>
 8004984:	9b00      	ldr	r3, [sp, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	dd37      	ble.n	80049fa <_dtoa_r+0x43a>
 800498a:	1e7b      	subs	r3, r7, #1
 800498c:	9304      	str	r3, [sp, #16]
 800498e:	4620      	mov	r0, r4
 8004990:	4b7d      	ldr	r3, [pc, #500]	@ (8004b88 <_dtoa_r+0x5c8>)
 8004992:	2200      	movs	r2, #0
 8004994:	4629      	mov	r1, r5
 8004996:	f7fb fe2f 	bl	80005f8 <__aeabi_dmul>
 800499a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800499e:	9c00      	ldr	r4, [sp, #0]
 80049a0:	3601      	adds	r6, #1
 80049a2:	4630      	mov	r0, r6
 80049a4:	f7fb fdbe 	bl	8000524 <__aeabi_i2d>
 80049a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80049ac:	f7fb fe24 	bl	80005f8 <__aeabi_dmul>
 80049b0:	4b76      	ldr	r3, [pc, #472]	@ (8004b8c <_dtoa_r+0x5cc>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	f7fb fc6a 	bl	800028c <__adddf3>
 80049b8:	4605      	mov	r5, r0
 80049ba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80049be:	2c00      	cmp	r4, #0
 80049c0:	f040 808d 	bne.w	8004ade <_dtoa_r+0x51e>
 80049c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80049c8:	4b71      	ldr	r3, [pc, #452]	@ (8004b90 <_dtoa_r+0x5d0>)
 80049ca:	2200      	movs	r2, #0
 80049cc:	f7fb fc5c 	bl	8000288 <__aeabi_dsub>
 80049d0:	4602      	mov	r2, r0
 80049d2:	460b      	mov	r3, r1
 80049d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80049d8:	462a      	mov	r2, r5
 80049da:	4633      	mov	r3, r6
 80049dc:	f7fc f89c 	bl	8000b18 <__aeabi_dcmpgt>
 80049e0:	2800      	cmp	r0, #0
 80049e2:	f040 828b 	bne.w	8004efc <_dtoa_r+0x93c>
 80049e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80049ea:	462a      	mov	r2, r5
 80049ec:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80049f0:	f7fc f874 	bl	8000adc <__aeabi_dcmplt>
 80049f4:	2800      	cmp	r0, #0
 80049f6:	f040 8128 	bne.w	8004c4a <_dtoa_r+0x68a>
 80049fa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80049fe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004a02:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f2c0 815a 	blt.w	8004cbe <_dtoa_r+0x6fe>
 8004a0a:	2f0e      	cmp	r7, #14
 8004a0c:	f300 8157 	bgt.w	8004cbe <_dtoa_r+0x6fe>
 8004a10:	4b5a      	ldr	r3, [pc, #360]	@ (8004b7c <_dtoa_r+0x5bc>)
 8004a12:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004a16:	ed93 7b00 	vldr	d7, [r3]
 8004a1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	ed8d 7b00 	vstr	d7, [sp]
 8004a22:	da03      	bge.n	8004a2c <_dtoa_r+0x46c>
 8004a24:	9b07      	ldr	r3, [sp, #28]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	f340 8101 	ble.w	8004c2e <_dtoa_r+0x66e>
 8004a2c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004a30:	4656      	mov	r6, sl
 8004a32:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004a36:	4620      	mov	r0, r4
 8004a38:	4629      	mov	r1, r5
 8004a3a:	f7fb ff07 	bl	800084c <__aeabi_ddiv>
 8004a3e:	f7fc f88b 	bl	8000b58 <__aeabi_d2iz>
 8004a42:	4680      	mov	r8, r0
 8004a44:	f7fb fd6e 	bl	8000524 <__aeabi_i2d>
 8004a48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004a4c:	f7fb fdd4 	bl	80005f8 <__aeabi_dmul>
 8004a50:	4602      	mov	r2, r0
 8004a52:	460b      	mov	r3, r1
 8004a54:	4620      	mov	r0, r4
 8004a56:	4629      	mov	r1, r5
 8004a58:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004a5c:	f7fb fc14 	bl	8000288 <__aeabi_dsub>
 8004a60:	f806 4b01 	strb.w	r4, [r6], #1
 8004a64:	9d07      	ldr	r5, [sp, #28]
 8004a66:	eba6 040a 	sub.w	r4, r6, sl
 8004a6a:	42a5      	cmp	r5, r4
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	460b      	mov	r3, r1
 8004a70:	f040 8117 	bne.w	8004ca2 <_dtoa_r+0x6e2>
 8004a74:	f7fb fc0a 	bl	800028c <__adddf3>
 8004a78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004a7c:	4604      	mov	r4, r0
 8004a7e:	460d      	mov	r5, r1
 8004a80:	f7fc f84a 	bl	8000b18 <__aeabi_dcmpgt>
 8004a84:	2800      	cmp	r0, #0
 8004a86:	f040 80f9 	bne.w	8004c7c <_dtoa_r+0x6bc>
 8004a8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004a8e:	4620      	mov	r0, r4
 8004a90:	4629      	mov	r1, r5
 8004a92:	f7fc f819 	bl	8000ac8 <__aeabi_dcmpeq>
 8004a96:	b118      	cbz	r0, 8004aa0 <_dtoa_r+0x4e0>
 8004a98:	f018 0f01 	tst.w	r8, #1
 8004a9c:	f040 80ee 	bne.w	8004c7c <_dtoa_r+0x6bc>
 8004aa0:	4649      	mov	r1, r9
 8004aa2:	4658      	mov	r0, fp
 8004aa4:	f000 fc90 	bl	80053c8 <_Bfree>
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	7033      	strb	r3, [r6, #0]
 8004aac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004aae:	3701      	adds	r7, #1
 8004ab0:	601f      	str	r7, [r3, #0]
 8004ab2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	f000 831d 	beq.w	80050f4 <_dtoa_r+0xb34>
 8004aba:	601e      	str	r6, [r3, #0]
 8004abc:	e31a      	b.n	80050f4 <_dtoa_r+0xb34>
 8004abe:	07e2      	lsls	r2, r4, #31
 8004ac0:	d505      	bpl.n	8004ace <_dtoa_r+0x50e>
 8004ac2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004ac6:	f7fb fd97 	bl	80005f8 <__aeabi_dmul>
 8004aca:	3601      	adds	r6, #1
 8004acc:	2301      	movs	r3, #1
 8004ace:	1064      	asrs	r4, r4, #1
 8004ad0:	3508      	adds	r5, #8
 8004ad2:	e73f      	b.n	8004954 <_dtoa_r+0x394>
 8004ad4:	2602      	movs	r6, #2
 8004ad6:	e742      	b.n	800495e <_dtoa_r+0x39e>
 8004ad8:	9c07      	ldr	r4, [sp, #28]
 8004ada:	9704      	str	r7, [sp, #16]
 8004adc:	e761      	b.n	80049a2 <_dtoa_r+0x3e2>
 8004ade:	4b27      	ldr	r3, [pc, #156]	@ (8004b7c <_dtoa_r+0x5bc>)
 8004ae0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004ae2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004ae6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004aea:	4454      	add	r4, sl
 8004aec:	2900      	cmp	r1, #0
 8004aee:	d053      	beq.n	8004b98 <_dtoa_r+0x5d8>
 8004af0:	4928      	ldr	r1, [pc, #160]	@ (8004b94 <_dtoa_r+0x5d4>)
 8004af2:	2000      	movs	r0, #0
 8004af4:	f7fb feaa 	bl	800084c <__aeabi_ddiv>
 8004af8:	4633      	mov	r3, r6
 8004afa:	462a      	mov	r2, r5
 8004afc:	f7fb fbc4 	bl	8000288 <__aeabi_dsub>
 8004b00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004b04:	4656      	mov	r6, sl
 8004b06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b0a:	f7fc f825 	bl	8000b58 <__aeabi_d2iz>
 8004b0e:	4605      	mov	r5, r0
 8004b10:	f7fb fd08 	bl	8000524 <__aeabi_i2d>
 8004b14:	4602      	mov	r2, r0
 8004b16:	460b      	mov	r3, r1
 8004b18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b1c:	f7fb fbb4 	bl	8000288 <__aeabi_dsub>
 8004b20:	3530      	adds	r5, #48	@ 0x30
 8004b22:	4602      	mov	r2, r0
 8004b24:	460b      	mov	r3, r1
 8004b26:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004b2a:	f806 5b01 	strb.w	r5, [r6], #1
 8004b2e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004b32:	f7fb ffd3 	bl	8000adc <__aeabi_dcmplt>
 8004b36:	2800      	cmp	r0, #0
 8004b38:	d171      	bne.n	8004c1e <_dtoa_r+0x65e>
 8004b3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004b3e:	4911      	ldr	r1, [pc, #68]	@ (8004b84 <_dtoa_r+0x5c4>)
 8004b40:	2000      	movs	r0, #0
 8004b42:	f7fb fba1 	bl	8000288 <__aeabi_dsub>
 8004b46:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004b4a:	f7fb ffc7 	bl	8000adc <__aeabi_dcmplt>
 8004b4e:	2800      	cmp	r0, #0
 8004b50:	f040 8095 	bne.w	8004c7e <_dtoa_r+0x6be>
 8004b54:	42a6      	cmp	r6, r4
 8004b56:	f43f af50 	beq.w	80049fa <_dtoa_r+0x43a>
 8004b5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004b5e:	4b0a      	ldr	r3, [pc, #40]	@ (8004b88 <_dtoa_r+0x5c8>)
 8004b60:	2200      	movs	r2, #0
 8004b62:	f7fb fd49 	bl	80005f8 <__aeabi_dmul>
 8004b66:	4b08      	ldr	r3, [pc, #32]	@ (8004b88 <_dtoa_r+0x5c8>)
 8004b68:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b72:	f7fb fd41 	bl	80005f8 <__aeabi_dmul>
 8004b76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b7a:	e7c4      	b.n	8004b06 <_dtoa_r+0x546>
 8004b7c:	080066f0 	.word	0x080066f0
 8004b80:	080066c8 	.word	0x080066c8
 8004b84:	3ff00000 	.word	0x3ff00000
 8004b88:	40240000 	.word	0x40240000
 8004b8c:	401c0000 	.word	0x401c0000
 8004b90:	40140000 	.word	0x40140000
 8004b94:	3fe00000 	.word	0x3fe00000
 8004b98:	4631      	mov	r1, r6
 8004b9a:	4628      	mov	r0, r5
 8004b9c:	f7fb fd2c 	bl	80005f8 <__aeabi_dmul>
 8004ba0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004ba4:	9415      	str	r4, [sp, #84]	@ 0x54
 8004ba6:	4656      	mov	r6, sl
 8004ba8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004bac:	f7fb ffd4 	bl	8000b58 <__aeabi_d2iz>
 8004bb0:	4605      	mov	r5, r0
 8004bb2:	f7fb fcb7 	bl	8000524 <__aeabi_i2d>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	460b      	mov	r3, r1
 8004bba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004bbe:	f7fb fb63 	bl	8000288 <__aeabi_dsub>
 8004bc2:	3530      	adds	r5, #48	@ 0x30
 8004bc4:	f806 5b01 	strb.w	r5, [r6], #1
 8004bc8:	4602      	mov	r2, r0
 8004bca:	460b      	mov	r3, r1
 8004bcc:	42a6      	cmp	r6, r4
 8004bce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004bd2:	f04f 0200 	mov.w	r2, #0
 8004bd6:	d124      	bne.n	8004c22 <_dtoa_r+0x662>
 8004bd8:	4bac      	ldr	r3, [pc, #688]	@ (8004e8c <_dtoa_r+0x8cc>)
 8004bda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004bde:	f7fb fb55 	bl	800028c <__adddf3>
 8004be2:	4602      	mov	r2, r0
 8004be4:	460b      	mov	r3, r1
 8004be6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004bea:	f7fb ff95 	bl	8000b18 <__aeabi_dcmpgt>
 8004bee:	2800      	cmp	r0, #0
 8004bf0:	d145      	bne.n	8004c7e <_dtoa_r+0x6be>
 8004bf2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004bf6:	49a5      	ldr	r1, [pc, #660]	@ (8004e8c <_dtoa_r+0x8cc>)
 8004bf8:	2000      	movs	r0, #0
 8004bfa:	f7fb fb45 	bl	8000288 <__aeabi_dsub>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	460b      	mov	r3, r1
 8004c02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c06:	f7fb ff69 	bl	8000adc <__aeabi_dcmplt>
 8004c0a:	2800      	cmp	r0, #0
 8004c0c:	f43f aef5 	beq.w	80049fa <_dtoa_r+0x43a>
 8004c10:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8004c12:	1e73      	subs	r3, r6, #1
 8004c14:	9315      	str	r3, [sp, #84]	@ 0x54
 8004c16:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004c1a:	2b30      	cmp	r3, #48	@ 0x30
 8004c1c:	d0f8      	beq.n	8004c10 <_dtoa_r+0x650>
 8004c1e:	9f04      	ldr	r7, [sp, #16]
 8004c20:	e73e      	b.n	8004aa0 <_dtoa_r+0x4e0>
 8004c22:	4b9b      	ldr	r3, [pc, #620]	@ (8004e90 <_dtoa_r+0x8d0>)
 8004c24:	f7fb fce8 	bl	80005f8 <__aeabi_dmul>
 8004c28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c2c:	e7bc      	b.n	8004ba8 <_dtoa_r+0x5e8>
 8004c2e:	d10c      	bne.n	8004c4a <_dtoa_r+0x68a>
 8004c30:	4b98      	ldr	r3, [pc, #608]	@ (8004e94 <_dtoa_r+0x8d4>)
 8004c32:	2200      	movs	r2, #0
 8004c34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004c38:	f7fb fcde 	bl	80005f8 <__aeabi_dmul>
 8004c3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004c40:	f7fb ff60 	bl	8000b04 <__aeabi_dcmpge>
 8004c44:	2800      	cmp	r0, #0
 8004c46:	f000 8157 	beq.w	8004ef8 <_dtoa_r+0x938>
 8004c4a:	2400      	movs	r4, #0
 8004c4c:	4625      	mov	r5, r4
 8004c4e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004c50:	43db      	mvns	r3, r3
 8004c52:	9304      	str	r3, [sp, #16]
 8004c54:	4656      	mov	r6, sl
 8004c56:	2700      	movs	r7, #0
 8004c58:	4621      	mov	r1, r4
 8004c5a:	4658      	mov	r0, fp
 8004c5c:	f000 fbb4 	bl	80053c8 <_Bfree>
 8004c60:	2d00      	cmp	r5, #0
 8004c62:	d0dc      	beq.n	8004c1e <_dtoa_r+0x65e>
 8004c64:	b12f      	cbz	r7, 8004c72 <_dtoa_r+0x6b2>
 8004c66:	42af      	cmp	r7, r5
 8004c68:	d003      	beq.n	8004c72 <_dtoa_r+0x6b2>
 8004c6a:	4639      	mov	r1, r7
 8004c6c:	4658      	mov	r0, fp
 8004c6e:	f000 fbab 	bl	80053c8 <_Bfree>
 8004c72:	4629      	mov	r1, r5
 8004c74:	4658      	mov	r0, fp
 8004c76:	f000 fba7 	bl	80053c8 <_Bfree>
 8004c7a:	e7d0      	b.n	8004c1e <_dtoa_r+0x65e>
 8004c7c:	9704      	str	r7, [sp, #16]
 8004c7e:	4633      	mov	r3, r6
 8004c80:	461e      	mov	r6, r3
 8004c82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004c86:	2a39      	cmp	r2, #57	@ 0x39
 8004c88:	d107      	bne.n	8004c9a <_dtoa_r+0x6da>
 8004c8a:	459a      	cmp	sl, r3
 8004c8c:	d1f8      	bne.n	8004c80 <_dtoa_r+0x6c0>
 8004c8e:	9a04      	ldr	r2, [sp, #16]
 8004c90:	3201      	adds	r2, #1
 8004c92:	9204      	str	r2, [sp, #16]
 8004c94:	2230      	movs	r2, #48	@ 0x30
 8004c96:	f88a 2000 	strb.w	r2, [sl]
 8004c9a:	781a      	ldrb	r2, [r3, #0]
 8004c9c:	3201      	adds	r2, #1
 8004c9e:	701a      	strb	r2, [r3, #0]
 8004ca0:	e7bd      	b.n	8004c1e <_dtoa_r+0x65e>
 8004ca2:	4b7b      	ldr	r3, [pc, #492]	@ (8004e90 <_dtoa_r+0x8d0>)
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f7fb fca7 	bl	80005f8 <__aeabi_dmul>
 8004caa:	2200      	movs	r2, #0
 8004cac:	2300      	movs	r3, #0
 8004cae:	4604      	mov	r4, r0
 8004cb0:	460d      	mov	r5, r1
 8004cb2:	f7fb ff09 	bl	8000ac8 <__aeabi_dcmpeq>
 8004cb6:	2800      	cmp	r0, #0
 8004cb8:	f43f aebb 	beq.w	8004a32 <_dtoa_r+0x472>
 8004cbc:	e6f0      	b.n	8004aa0 <_dtoa_r+0x4e0>
 8004cbe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004cc0:	2a00      	cmp	r2, #0
 8004cc2:	f000 80db 	beq.w	8004e7c <_dtoa_r+0x8bc>
 8004cc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004cc8:	2a01      	cmp	r2, #1
 8004cca:	f300 80bf 	bgt.w	8004e4c <_dtoa_r+0x88c>
 8004cce:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8004cd0:	2a00      	cmp	r2, #0
 8004cd2:	f000 80b7 	beq.w	8004e44 <_dtoa_r+0x884>
 8004cd6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004cda:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004cdc:	4646      	mov	r6, r8
 8004cde:	9a08      	ldr	r2, [sp, #32]
 8004ce0:	2101      	movs	r1, #1
 8004ce2:	441a      	add	r2, r3
 8004ce4:	4658      	mov	r0, fp
 8004ce6:	4498      	add	r8, r3
 8004ce8:	9208      	str	r2, [sp, #32]
 8004cea:	f000 fc21 	bl	8005530 <__i2b>
 8004cee:	4605      	mov	r5, r0
 8004cf0:	b15e      	cbz	r6, 8004d0a <_dtoa_r+0x74a>
 8004cf2:	9b08      	ldr	r3, [sp, #32]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	dd08      	ble.n	8004d0a <_dtoa_r+0x74a>
 8004cf8:	42b3      	cmp	r3, r6
 8004cfa:	9a08      	ldr	r2, [sp, #32]
 8004cfc:	bfa8      	it	ge
 8004cfe:	4633      	movge	r3, r6
 8004d00:	eba8 0803 	sub.w	r8, r8, r3
 8004d04:	1af6      	subs	r6, r6, r3
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	9308      	str	r3, [sp, #32]
 8004d0a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d0c:	b1f3      	cbz	r3, 8004d4c <_dtoa_r+0x78c>
 8004d0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 80b7 	beq.w	8004e84 <_dtoa_r+0x8c4>
 8004d16:	b18c      	cbz	r4, 8004d3c <_dtoa_r+0x77c>
 8004d18:	4629      	mov	r1, r5
 8004d1a:	4622      	mov	r2, r4
 8004d1c:	4658      	mov	r0, fp
 8004d1e:	f000 fcc7 	bl	80056b0 <__pow5mult>
 8004d22:	464a      	mov	r2, r9
 8004d24:	4601      	mov	r1, r0
 8004d26:	4605      	mov	r5, r0
 8004d28:	4658      	mov	r0, fp
 8004d2a:	f000 fc17 	bl	800555c <__multiply>
 8004d2e:	4649      	mov	r1, r9
 8004d30:	9004      	str	r0, [sp, #16]
 8004d32:	4658      	mov	r0, fp
 8004d34:	f000 fb48 	bl	80053c8 <_Bfree>
 8004d38:	9b04      	ldr	r3, [sp, #16]
 8004d3a:	4699      	mov	r9, r3
 8004d3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d3e:	1b1a      	subs	r2, r3, r4
 8004d40:	d004      	beq.n	8004d4c <_dtoa_r+0x78c>
 8004d42:	4649      	mov	r1, r9
 8004d44:	4658      	mov	r0, fp
 8004d46:	f000 fcb3 	bl	80056b0 <__pow5mult>
 8004d4a:	4681      	mov	r9, r0
 8004d4c:	2101      	movs	r1, #1
 8004d4e:	4658      	mov	r0, fp
 8004d50:	f000 fbee 	bl	8005530 <__i2b>
 8004d54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004d56:	4604      	mov	r4, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	f000 81cf 	beq.w	80050fc <_dtoa_r+0xb3c>
 8004d5e:	461a      	mov	r2, r3
 8004d60:	4601      	mov	r1, r0
 8004d62:	4658      	mov	r0, fp
 8004d64:	f000 fca4 	bl	80056b0 <__pow5mult>
 8004d68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	4604      	mov	r4, r0
 8004d6e:	f300 8095 	bgt.w	8004e9c <_dtoa_r+0x8dc>
 8004d72:	9b02      	ldr	r3, [sp, #8]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	f040 8087 	bne.w	8004e88 <_dtoa_r+0x8c8>
 8004d7a:	9b03      	ldr	r3, [sp, #12]
 8004d7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	f040 8089 	bne.w	8004e98 <_dtoa_r+0x8d8>
 8004d86:	9b03      	ldr	r3, [sp, #12]
 8004d88:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004d8c:	0d1b      	lsrs	r3, r3, #20
 8004d8e:	051b      	lsls	r3, r3, #20
 8004d90:	b12b      	cbz	r3, 8004d9e <_dtoa_r+0x7de>
 8004d92:	9b08      	ldr	r3, [sp, #32]
 8004d94:	3301      	adds	r3, #1
 8004d96:	9308      	str	r3, [sp, #32]
 8004d98:	f108 0801 	add.w	r8, r8, #1
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004da0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	f000 81b0 	beq.w	8005108 <_dtoa_r+0xb48>
 8004da8:	6923      	ldr	r3, [r4, #16]
 8004daa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004dae:	6918      	ldr	r0, [r3, #16]
 8004db0:	f000 fb72 	bl	8005498 <__hi0bits>
 8004db4:	f1c0 0020 	rsb	r0, r0, #32
 8004db8:	9b08      	ldr	r3, [sp, #32]
 8004dba:	4418      	add	r0, r3
 8004dbc:	f010 001f 	ands.w	r0, r0, #31
 8004dc0:	d077      	beq.n	8004eb2 <_dtoa_r+0x8f2>
 8004dc2:	f1c0 0320 	rsb	r3, r0, #32
 8004dc6:	2b04      	cmp	r3, #4
 8004dc8:	dd6b      	ble.n	8004ea2 <_dtoa_r+0x8e2>
 8004dca:	9b08      	ldr	r3, [sp, #32]
 8004dcc:	f1c0 001c 	rsb	r0, r0, #28
 8004dd0:	4403      	add	r3, r0
 8004dd2:	4480      	add	r8, r0
 8004dd4:	4406      	add	r6, r0
 8004dd6:	9308      	str	r3, [sp, #32]
 8004dd8:	f1b8 0f00 	cmp.w	r8, #0
 8004ddc:	dd05      	ble.n	8004dea <_dtoa_r+0x82a>
 8004dde:	4649      	mov	r1, r9
 8004de0:	4642      	mov	r2, r8
 8004de2:	4658      	mov	r0, fp
 8004de4:	f000 fcbe 	bl	8005764 <__lshift>
 8004de8:	4681      	mov	r9, r0
 8004dea:	9b08      	ldr	r3, [sp, #32]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	dd05      	ble.n	8004dfc <_dtoa_r+0x83c>
 8004df0:	4621      	mov	r1, r4
 8004df2:	461a      	mov	r2, r3
 8004df4:	4658      	mov	r0, fp
 8004df6:	f000 fcb5 	bl	8005764 <__lshift>
 8004dfa:	4604      	mov	r4, r0
 8004dfc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d059      	beq.n	8004eb6 <_dtoa_r+0x8f6>
 8004e02:	4621      	mov	r1, r4
 8004e04:	4648      	mov	r0, r9
 8004e06:	f000 fd19 	bl	800583c <__mcmp>
 8004e0a:	2800      	cmp	r0, #0
 8004e0c:	da53      	bge.n	8004eb6 <_dtoa_r+0x8f6>
 8004e0e:	1e7b      	subs	r3, r7, #1
 8004e10:	9304      	str	r3, [sp, #16]
 8004e12:	4649      	mov	r1, r9
 8004e14:	2300      	movs	r3, #0
 8004e16:	220a      	movs	r2, #10
 8004e18:	4658      	mov	r0, fp
 8004e1a:	f000 faf7 	bl	800540c <__multadd>
 8004e1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004e20:	4681      	mov	r9, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	f000 8172 	beq.w	800510c <_dtoa_r+0xb4c>
 8004e28:	2300      	movs	r3, #0
 8004e2a:	4629      	mov	r1, r5
 8004e2c:	220a      	movs	r2, #10
 8004e2e:	4658      	mov	r0, fp
 8004e30:	f000 faec 	bl	800540c <__multadd>
 8004e34:	9b00      	ldr	r3, [sp, #0]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	4605      	mov	r5, r0
 8004e3a:	dc67      	bgt.n	8004f0c <_dtoa_r+0x94c>
 8004e3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	dc41      	bgt.n	8004ec6 <_dtoa_r+0x906>
 8004e42:	e063      	b.n	8004f0c <_dtoa_r+0x94c>
 8004e44:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004e46:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004e4a:	e746      	b.n	8004cda <_dtoa_r+0x71a>
 8004e4c:	9b07      	ldr	r3, [sp, #28]
 8004e4e:	1e5c      	subs	r4, r3, #1
 8004e50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004e52:	42a3      	cmp	r3, r4
 8004e54:	bfbf      	itttt	lt
 8004e56:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004e58:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8004e5a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8004e5c:	1ae3      	sublt	r3, r4, r3
 8004e5e:	bfb4      	ite	lt
 8004e60:	18d2      	addlt	r2, r2, r3
 8004e62:	1b1c      	subge	r4, r3, r4
 8004e64:	9b07      	ldr	r3, [sp, #28]
 8004e66:	bfbc      	itt	lt
 8004e68:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8004e6a:	2400      	movlt	r4, #0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	bfb5      	itete	lt
 8004e70:	eba8 0603 	sublt.w	r6, r8, r3
 8004e74:	9b07      	ldrge	r3, [sp, #28]
 8004e76:	2300      	movlt	r3, #0
 8004e78:	4646      	movge	r6, r8
 8004e7a:	e730      	b.n	8004cde <_dtoa_r+0x71e>
 8004e7c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004e7e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004e80:	4646      	mov	r6, r8
 8004e82:	e735      	b.n	8004cf0 <_dtoa_r+0x730>
 8004e84:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004e86:	e75c      	b.n	8004d42 <_dtoa_r+0x782>
 8004e88:	2300      	movs	r3, #0
 8004e8a:	e788      	b.n	8004d9e <_dtoa_r+0x7de>
 8004e8c:	3fe00000 	.word	0x3fe00000
 8004e90:	40240000 	.word	0x40240000
 8004e94:	40140000 	.word	0x40140000
 8004e98:	9b02      	ldr	r3, [sp, #8]
 8004e9a:	e780      	b.n	8004d9e <_dtoa_r+0x7de>
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004ea0:	e782      	b.n	8004da8 <_dtoa_r+0x7e8>
 8004ea2:	d099      	beq.n	8004dd8 <_dtoa_r+0x818>
 8004ea4:	9a08      	ldr	r2, [sp, #32]
 8004ea6:	331c      	adds	r3, #28
 8004ea8:	441a      	add	r2, r3
 8004eaa:	4498      	add	r8, r3
 8004eac:	441e      	add	r6, r3
 8004eae:	9208      	str	r2, [sp, #32]
 8004eb0:	e792      	b.n	8004dd8 <_dtoa_r+0x818>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	e7f6      	b.n	8004ea4 <_dtoa_r+0x8e4>
 8004eb6:	9b07      	ldr	r3, [sp, #28]
 8004eb8:	9704      	str	r7, [sp, #16]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	dc20      	bgt.n	8004f00 <_dtoa_r+0x940>
 8004ebe:	9300      	str	r3, [sp, #0]
 8004ec0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	dd1e      	ble.n	8004f04 <_dtoa_r+0x944>
 8004ec6:	9b00      	ldr	r3, [sp, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f47f aec0 	bne.w	8004c4e <_dtoa_r+0x68e>
 8004ece:	4621      	mov	r1, r4
 8004ed0:	2205      	movs	r2, #5
 8004ed2:	4658      	mov	r0, fp
 8004ed4:	f000 fa9a 	bl	800540c <__multadd>
 8004ed8:	4601      	mov	r1, r0
 8004eda:	4604      	mov	r4, r0
 8004edc:	4648      	mov	r0, r9
 8004ede:	f000 fcad 	bl	800583c <__mcmp>
 8004ee2:	2800      	cmp	r0, #0
 8004ee4:	f77f aeb3 	ble.w	8004c4e <_dtoa_r+0x68e>
 8004ee8:	4656      	mov	r6, sl
 8004eea:	2331      	movs	r3, #49	@ 0x31
 8004eec:	f806 3b01 	strb.w	r3, [r6], #1
 8004ef0:	9b04      	ldr	r3, [sp, #16]
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	9304      	str	r3, [sp, #16]
 8004ef6:	e6ae      	b.n	8004c56 <_dtoa_r+0x696>
 8004ef8:	9c07      	ldr	r4, [sp, #28]
 8004efa:	9704      	str	r7, [sp, #16]
 8004efc:	4625      	mov	r5, r4
 8004efe:	e7f3      	b.n	8004ee8 <_dtoa_r+0x928>
 8004f00:	9b07      	ldr	r3, [sp, #28]
 8004f02:	9300      	str	r3, [sp, #0]
 8004f04:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	f000 8104 	beq.w	8005114 <_dtoa_r+0xb54>
 8004f0c:	2e00      	cmp	r6, #0
 8004f0e:	dd05      	ble.n	8004f1c <_dtoa_r+0x95c>
 8004f10:	4629      	mov	r1, r5
 8004f12:	4632      	mov	r2, r6
 8004f14:	4658      	mov	r0, fp
 8004f16:	f000 fc25 	bl	8005764 <__lshift>
 8004f1a:	4605      	mov	r5, r0
 8004f1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d05a      	beq.n	8004fd8 <_dtoa_r+0xa18>
 8004f22:	6869      	ldr	r1, [r5, #4]
 8004f24:	4658      	mov	r0, fp
 8004f26:	f000 fa0f 	bl	8005348 <_Balloc>
 8004f2a:	4606      	mov	r6, r0
 8004f2c:	b928      	cbnz	r0, 8004f3a <_dtoa_r+0x97a>
 8004f2e:	4b84      	ldr	r3, [pc, #528]	@ (8005140 <_dtoa_r+0xb80>)
 8004f30:	4602      	mov	r2, r0
 8004f32:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004f36:	f7ff bb5a 	b.w	80045ee <_dtoa_r+0x2e>
 8004f3a:	692a      	ldr	r2, [r5, #16]
 8004f3c:	3202      	adds	r2, #2
 8004f3e:	0092      	lsls	r2, r2, #2
 8004f40:	f105 010c 	add.w	r1, r5, #12
 8004f44:	300c      	adds	r0, #12
 8004f46:	f000 ffaf 	bl	8005ea8 <memcpy>
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	4631      	mov	r1, r6
 8004f4e:	4658      	mov	r0, fp
 8004f50:	f000 fc08 	bl	8005764 <__lshift>
 8004f54:	f10a 0301 	add.w	r3, sl, #1
 8004f58:	9307      	str	r3, [sp, #28]
 8004f5a:	9b00      	ldr	r3, [sp, #0]
 8004f5c:	4453      	add	r3, sl
 8004f5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004f60:	9b02      	ldr	r3, [sp, #8]
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	462f      	mov	r7, r5
 8004f68:	930a      	str	r3, [sp, #40]	@ 0x28
 8004f6a:	4605      	mov	r5, r0
 8004f6c:	9b07      	ldr	r3, [sp, #28]
 8004f6e:	4621      	mov	r1, r4
 8004f70:	3b01      	subs	r3, #1
 8004f72:	4648      	mov	r0, r9
 8004f74:	9300      	str	r3, [sp, #0]
 8004f76:	f7ff fa9a 	bl	80044ae <quorem>
 8004f7a:	4639      	mov	r1, r7
 8004f7c:	9002      	str	r0, [sp, #8]
 8004f7e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004f82:	4648      	mov	r0, r9
 8004f84:	f000 fc5a 	bl	800583c <__mcmp>
 8004f88:	462a      	mov	r2, r5
 8004f8a:	9008      	str	r0, [sp, #32]
 8004f8c:	4621      	mov	r1, r4
 8004f8e:	4658      	mov	r0, fp
 8004f90:	f000 fc70 	bl	8005874 <__mdiff>
 8004f94:	68c2      	ldr	r2, [r0, #12]
 8004f96:	4606      	mov	r6, r0
 8004f98:	bb02      	cbnz	r2, 8004fdc <_dtoa_r+0xa1c>
 8004f9a:	4601      	mov	r1, r0
 8004f9c:	4648      	mov	r0, r9
 8004f9e:	f000 fc4d 	bl	800583c <__mcmp>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	4631      	mov	r1, r6
 8004fa6:	4658      	mov	r0, fp
 8004fa8:	920e      	str	r2, [sp, #56]	@ 0x38
 8004faa:	f000 fa0d 	bl	80053c8 <_Bfree>
 8004fae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fb0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004fb2:	9e07      	ldr	r6, [sp, #28]
 8004fb4:	ea43 0102 	orr.w	r1, r3, r2
 8004fb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004fba:	4319      	orrs	r1, r3
 8004fbc:	d110      	bne.n	8004fe0 <_dtoa_r+0xa20>
 8004fbe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004fc2:	d029      	beq.n	8005018 <_dtoa_r+0xa58>
 8004fc4:	9b08      	ldr	r3, [sp, #32]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	dd02      	ble.n	8004fd0 <_dtoa_r+0xa10>
 8004fca:	9b02      	ldr	r3, [sp, #8]
 8004fcc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8004fd0:	9b00      	ldr	r3, [sp, #0]
 8004fd2:	f883 8000 	strb.w	r8, [r3]
 8004fd6:	e63f      	b.n	8004c58 <_dtoa_r+0x698>
 8004fd8:	4628      	mov	r0, r5
 8004fda:	e7bb      	b.n	8004f54 <_dtoa_r+0x994>
 8004fdc:	2201      	movs	r2, #1
 8004fde:	e7e1      	b.n	8004fa4 <_dtoa_r+0x9e4>
 8004fe0:	9b08      	ldr	r3, [sp, #32]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	db04      	blt.n	8004ff0 <_dtoa_r+0xa30>
 8004fe6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004fe8:	430b      	orrs	r3, r1
 8004fea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004fec:	430b      	orrs	r3, r1
 8004fee:	d120      	bne.n	8005032 <_dtoa_r+0xa72>
 8004ff0:	2a00      	cmp	r2, #0
 8004ff2:	dded      	ble.n	8004fd0 <_dtoa_r+0xa10>
 8004ff4:	4649      	mov	r1, r9
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	4658      	mov	r0, fp
 8004ffa:	f000 fbb3 	bl	8005764 <__lshift>
 8004ffe:	4621      	mov	r1, r4
 8005000:	4681      	mov	r9, r0
 8005002:	f000 fc1b 	bl	800583c <__mcmp>
 8005006:	2800      	cmp	r0, #0
 8005008:	dc03      	bgt.n	8005012 <_dtoa_r+0xa52>
 800500a:	d1e1      	bne.n	8004fd0 <_dtoa_r+0xa10>
 800500c:	f018 0f01 	tst.w	r8, #1
 8005010:	d0de      	beq.n	8004fd0 <_dtoa_r+0xa10>
 8005012:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005016:	d1d8      	bne.n	8004fca <_dtoa_r+0xa0a>
 8005018:	9a00      	ldr	r2, [sp, #0]
 800501a:	2339      	movs	r3, #57	@ 0x39
 800501c:	7013      	strb	r3, [r2, #0]
 800501e:	4633      	mov	r3, r6
 8005020:	461e      	mov	r6, r3
 8005022:	3b01      	subs	r3, #1
 8005024:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005028:	2a39      	cmp	r2, #57	@ 0x39
 800502a:	d052      	beq.n	80050d2 <_dtoa_r+0xb12>
 800502c:	3201      	adds	r2, #1
 800502e:	701a      	strb	r2, [r3, #0]
 8005030:	e612      	b.n	8004c58 <_dtoa_r+0x698>
 8005032:	2a00      	cmp	r2, #0
 8005034:	dd07      	ble.n	8005046 <_dtoa_r+0xa86>
 8005036:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800503a:	d0ed      	beq.n	8005018 <_dtoa_r+0xa58>
 800503c:	9a00      	ldr	r2, [sp, #0]
 800503e:	f108 0301 	add.w	r3, r8, #1
 8005042:	7013      	strb	r3, [r2, #0]
 8005044:	e608      	b.n	8004c58 <_dtoa_r+0x698>
 8005046:	9b07      	ldr	r3, [sp, #28]
 8005048:	9a07      	ldr	r2, [sp, #28]
 800504a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800504e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005050:	4293      	cmp	r3, r2
 8005052:	d028      	beq.n	80050a6 <_dtoa_r+0xae6>
 8005054:	4649      	mov	r1, r9
 8005056:	2300      	movs	r3, #0
 8005058:	220a      	movs	r2, #10
 800505a:	4658      	mov	r0, fp
 800505c:	f000 f9d6 	bl	800540c <__multadd>
 8005060:	42af      	cmp	r7, r5
 8005062:	4681      	mov	r9, r0
 8005064:	f04f 0300 	mov.w	r3, #0
 8005068:	f04f 020a 	mov.w	r2, #10
 800506c:	4639      	mov	r1, r7
 800506e:	4658      	mov	r0, fp
 8005070:	d107      	bne.n	8005082 <_dtoa_r+0xac2>
 8005072:	f000 f9cb 	bl	800540c <__multadd>
 8005076:	4607      	mov	r7, r0
 8005078:	4605      	mov	r5, r0
 800507a:	9b07      	ldr	r3, [sp, #28]
 800507c:	3301      	adds	r3, #1
 800507e:	9307      	str	r3, [sp, #28]
 8005080:	e774      	b.n	8004f6c <_dtoa_r+0x9ac>
 8005082:	f000 f9c3 	bl	800540c <__multadd>
 8005086:	4629      	mov	r1, r5
 8005088:	4607      	mov	r7, r0
 800508a:	2300      	movs	r3, #0
 800508c:	220a      	movs	r2, #10
 800508e:	4658      	mov	r0, fp
 8005090:	f000 f9bc 	bl	800540c <__multadd>
 8005094:	4605      	mov	r5, r0
 8005096:	e7f0      	b.n	800507a <_dtoa_r+0xaba>
 8005098:	9b00      	ldr	r3, [sp, #0]
 800509a:	2b00      	cmp	r3, #0
 800509c:	bfcc      	ite	gt
 800509e:	461e      	movgt	r6, r3
 80050a0:	2601      	movle	r6, #1
 80050a2:	4456      	add	r6, sl
 80050a4:	2700      	movs	r7, #0
 80050a6:	4649      	mov	r1, r9
 80050a8:	2201      	movs	r2, #1
 80050aa:	4658      	mov	r0, fp
 80050ac:	f000 fb5a 	bl	8005764 <__lshift>
 80050b0:	4621      	mov	r1, r4
 80050b2:	4681      	mov	r9, r0
 80050b4:	f000 fbc2 	bl	800583c <__mcmp>
 80050b8:	2800      	cmp	r0, #0
 80050ba:	dcb0      	bgt.n	800501e <_dtoa_r+0xa5e>
 80050bc:	d102      	bne.n	80050c4 <_dtoa_r+0xb04>
 80050be:	f018 0f01 	tst.w	r8, #1
 80050c2:	d1ac      	bne.n	800501e <_dtoa_r+0xa5e>
 80050c4:	4633      	mov	r3, r6
 80050c6:	461e      	mov	r6, r3
 80050c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80050cc:	2a30      	cmp	r2, #48	@ 0x30
 80050ce:	d0fa      	beq.n	80050c6 <_dtoa_r+0xb06>
 80050d0:	e5c2      	b.n	8004c58 <_dtoa_r+0x698>
 80050d2:	459a      	cmp	sl, r3
 80050d4:	d1a4      	bne.n	8005020 <_dtoa_r+0xa60>
 80050d6:	9b04      	ldr	r3, [sp, #16]
 80050d8:	3301      	adds	r3, #1
 80050da:	9304      	str	r3, [sp, #16]
 80050dc:	2331      	movs	r3, #49	@ 0x31
 80050de:	f88a 3000 	strb.w	r3, [sl]
 80050e2:	e5b9      	b.n	8004c58 <_dtoa_r+0x698>
 80050e4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80050e6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005144 <_dtoa_r+0xb84>
 80050ea:	b11b      	cbz	r3, 80050f4 <_dtoa_r+0xb34>
 80050ec:	f10a 0308 	add.w	r3, sl, #8
 80050f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80050f2:	6013      	str	r3, [r2, #0]
 80050f4:	4650      	mov	r0, sl
 80050f6:	b019      	add	sp, #100	@ 0x64
 80050f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050fe:	2b01      	cmp	r3, #1
 8005100:	f77f ae37 	ble.w	8004d72 <_dtoa_r+0x7b2>
 8005104:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005106:	930a      	str	r3, [sp, #40]	@ 0x28
 8005108:	2001      	movs	r0, #1
 800510a:	e655      	b.n	8004db8 <_dtoa_r+0x7f8>
 800510c:	9b00      	ldr	r3, [sp, #0]
 800510e:	2b00      	cmp	r3, #0
 8005110:	f77f aed6 	ble.w	8004ec0 <_dtoa_r+0x900>
 8005114:	4656      	mov	r6, sl
 8005116:	4621      	mov	r1, r4
 8005118:	4648      	mov	r0, r9
 800511a:	f7ff f9c8 	bl	80044ae <quorem>
 800511e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005122:	f806 8b01 	strb.w	r8, [r6], #1
 8005126:	9b00      	ldr	r3, [sp, #0]
 8005128:	eba6 020a 	sub.w	r2, r6, sl
 800512c:	4293      	cmp	r3, r2
 800512e:	ddb3      	ble.n	8005098 <_dtoa_r+0xad8>
 8005130:	4649      	mov	r1, r9
 8005132:	2300      	movs	r3, #0
 8005134:	220a      	movs	r2, #10
 8005136:	4658      	mov	r0, fp
 8005138:	f000 f968 	bl	800540c <__multadd>
 800513c:	4681      	mov	r9, r0
 800513e:	e7ea      	b.n	8005116 <_dtoa_r+0xb56>
 8005140:	08006650 	.word	0x08006650
 8005144:	080065d4 	.word	0x080065d4

08005148 <_free_r>:
 8005148:	b538      	push	{r3, r4, r5, lr}
 800514a:	4605      	mov	r5, r0
 800514c:	2900      	cmp	r1, #0
 800514e:	d041      	beq.n	80051d4 <_free_r+0x8c>
 8005150:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005154:	1f0c      	subs	r4, r1, #4
 8005156:	2b00      	cmp	r3, #0
 8005158:	bfb8      	it	lt
 800515a:	18e4      	addlt	r4, r4, r3
 800515c:	f000 f8e8 	bl	8005330 <__malloc_lock>
 8005160:	4a1d      	ldr	r2, [pc, #116]	@ (80051d8 <_free_r+0x90>)
 8005162:	6813      	ldr	r3, [r2, #0]
 8005164:	b933      	cbnz	r3, 8005174 <_free_r+0x2c>
 8005166:	6063      	str	r3, [r4, #4]
 8005168:	6014      	str	r4, [r2, #0]
 800516a:	4628      	mov	r0, r5
 800516c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005170:	f000 b8e4 	b.w	800533c <__malloc_unlock>
 8005174:	42a3      	cmp	r3, r4
 8005176:	d908      	bls.n	800518a <_free_r+0x42>
 8005178:	6820      	ldr	r0, [r4, #0]
 800517a:	1821      	adds	r1, r4, r0
 800517c:	428b      	cmp	r3, r1
 800517e:	bf01      	itttt	eq
 8005180:	6819      	ldreq	r1, [r3, #0]
 8005182:	685b      	ldreq	r3, [r3, #4]
 8005184:	1809      	addeq	r1, r1, r0
 8005186:	6021      	streq	r1, [r4, #0]
 8005188:	e7ed      	b.n	8005166 <_free_r+0x1e>
 800518a:	461a      	mov	r2, r3
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	b10b      	cbz	r3, 8005194 <_free_r+0x4c>
 8005190:	42a3      	cmp	r3, r4
 8005192:	d9fa      	bls.n	800518a <_free_r+0x42>
 8005194:	6811      	ldr	r1, [r2, #0]
 8005196:	1850      	adds	r0, r2, r1
 8005198:	42a0      	cmp	r0, r4
 800519a:	d10b      	bne.n	80051b4 <_free_r+0x6c>
 800519c:	6820      	ldr	r0, [r4, #0]
 800519e:	4401      	add	r1, r0
 80051a0:	1850      	adds	r0, r2, r1
 80051a2:	4283      	cmp	r3, r0
 80051a4:	6011      	str	r1, [r2, #0]
 80051a6:	d1e0      	bne.n	800516a <_free_r+0x22>
 80051a8:	6818      	ldr	r0, [r3, #0]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	6053      	str	r3, [r2, #4]
 80051ae:	4408      	add	r0, r1
 80051b0:	6010      	str	r0, [r2, #0]
 80051b2:	e7da      	b.n	800516a <_free_r+0x22>
 80051b4:	d902      	bls.n	80051bc <_free_r+0x74>
 80051b6:	230c      	movs	r3, #12
 80051b8:	602b      	str	r3, [r5, #0]
 80051ba:	e7d6      	b.n	800516a <_free_r+0x22>
 80051bc:	6820      	ldr	r0, [r4, #0]
 80051be:	1821      	adds	r1, r4, r0
 80051c0:	428b      	cmp	r3, r1
 80051c2:	bf04      	itt	eq
 80051c4:	6819      	ldreq	r1, [r3, #0]
 80051c6:	685b      	ldreq	r3, [r3, #4]
 80051c8:	6063      	str	r3, [r4, #4]
 80051ca:	bf04      	itt	eq
 80051cc:	1809      	addeq	r1, r1, r0
 80051ce:	6021      	streq	r1, [r4, #0]
 80051d0:	6054      	str	r4, [r2, #4]
 80051d2:	e7ca      	b.n	800516a <_free_r+0x22>
 80051d4:	bd38      	pop	{r3, r4, r5, pc}
 80051d6:	bf00      	nop
 80051d8:	20000440 	.word	0x20000440

080051dc <malloc>:
 80051dc:	4b02      	ldr	r3, [pc, #8]	@ (80051e8 <malloc+0xc>)
 80051de:	4601      	mov	r1, r0
 80051e0:	6818      	ldr	r0, [r3, #0]
 80051e2:	f000 b825 	b.w	8005230 <_malloc_r>
 80051e6:	bf00      	nop
 80051e8:	20000030 	.word	0x20000030

080051ec <sbrk_aligned>:
 80051ec:	b570      	push	{r4, r5, r6, lr}
 80051ee:	4e0f      	ldr	r6, [pc, #60]	@ (800522c <sbrk_aligned+0x40>)
 80051f0:	460c      	mov	r4, r1
 80051f2:	6831      	ldr	r1, [r6, #0]
 80051f4:	4605      	mov	r5, r0
 80051f6:	b911      	cbnz	r1, 80051fe <sbrk_aligned+0x12>
 80051f8:	f000 fe46 	bl	8005e88 <_sbrk_r>
 80051fc:	6030      	str	r0, [r6, #0]
 80051fe:	4621      	mov	r1, r4
 8005200:	4628      	mov	r0, r5
 8005202:	f000 fe41 	bl	8005e88 <_sbrk_r>
 8005206:	1c43      	adds	r3, r0, #1
 8005208:	d103      	bne.n	8005212 <sbrk_aligned+0x26>
 800520a:	f04f 34ff 	mov.w	r4, #4294967295
 800520e:	4620      	mov	r0, r4
 8005210:	bd70      	pop	{r4, r5, r6, pc}
 8005212:	1cc4      	adds	r4, r0, #3
 8005214:	f024 0403 	bic.w	r4, r4, #3
 8005218:	42a0      	cmp	r0, r4
 800521a:	d0f8      	beq.n	800520e <sbrk_aligned+0x22>
 800521c:	1a21      	subs	r1, r4, r0
 800521e:	4628      	mov	r0, r5
 8005220:	f000 fe32 	bl	8005e88 <_sbrk_r>
 8005224:	3001      	adds	r0, #1
 8005226:	d1f2      	bne.n	800520e <sbrk_aligned+0x22>
 8005228:	e7ef      	b.n	800520a <sbrk_aligned+0x1e>
 800522a:	bf00      	nop
 800522c:	2000043c 	.word	0x2000043c

08005230 <_malloc_r>:
 8005230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005234:	1ccd      	adds	r5, r1, #3
 8005236:	f025 0503 	bic.w	r5, r5, #3
 800523a:	3508      	adds	r5, #8
 800523c:	2d0c      	cmp	r5, #12
 800523e:	bf38      	it	cc
 8005240:	250c      	movcc	r5, #12
 8005242:	2d00      	cmp	r5, #0
 8005244:	4606      	mov	r6, r0
 8005246:	db01      	blt.n	800524c <_malloc_r+0x1c>
 8005248:	42a9      	cmp	r1, r5
 800524a:	d904      	bls.n	8005256 <_malloc_r+0x26>
 800524c:	230c      	movs	r3, #12
 800524e:	6033      	str	r3, [r6, #0]
 8005250:	2000      	movs	r0, #0
 8005252:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005256:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800532c <_malloc_r+0xfc>
 800525a:	f000 f869 	bl	8005330 <__malloc_lock>
 800525e:	f8d8 3000 	ldr.w	r3, [r8]
 8005262:	461c      	mov	r4, r3
 8005264:	bb44      	cbnz	r4, 80052b8 <_malloc_r+0x88>
 8005266:	4629      	mov	r1, r5
 8005268:	4630      	mov	r0, r6
 800526a:	f7ff ffbf 	bl	80051ec <sbrk_aligned>
 800526e:	1c43      	adds	r3, r0, #1
 8005270:	4604      	mov	r4, r0
 8005272:	d158      	bne.n	8005326 <_malloc_r+0xf6>
 8005274:	f8d8 4000 	ldr.w	r4, [r8]
 8005278:	4627      	mov	r7, r4
 800527a:	2f00      	cmp	r7, #0
 800527c:	d143      	bne.n	8005306 <_malloc_r+0xd6>
 800527e:	2c00      	cmp	r4, #0
 8005280:	d04b      	beq.n	800531a <_malloc_r+0xea>
 8005282:	6823      	ldr	r3, [r4, #0]
 8005284:	4639      	mov	r1, r7
 8005286:	4630      	mov	r0, r6
 8005288:	eb04 0903 	add.w	r9, r4, r3
 800528c:	f000 fdfc 	bl	8005e88 <_sbrk_r>
 8005290:	4581      	cmp	r9, r0
 8005292:	d142      	bne.n	800531a <_malloc_r+0xea>
 8005294:	6821      	ldr	r1, [r4, #0]
 8005296:	1a6d      	subs	r5, r5, r1
 8005298:	4629      	mov	r1, r5
 800529a:	4630      	mov	r0, r6
 800529c:	f7ff ffa6 	bl	80051ec <sbrk_aligned>
 80052a0:	3001      	adds	r0, #1
 80052a2:	d03a      	beq.n	800531a <_malloc_r+0xea>
 80052a4:	6823      	ldr	r3, [r4, #0]
 80052a6:	442b      	add	r3, r5
 80052a8:	6023      	str	r3, [r4, #0]
 80052aa:	f8d8 3000 	ldr.w	r3, [r8]
 80052ae:	685a      	ldr	r2, [r3, #4]
 80052b0:	bb62      	cbnz	r2, 800530c <_malloc_r+0xdc>
 80052b2:	f8c8 7000 	str.w	r7, [r8]
 80052b6:	e00f      	b.n	80052d8 <_malloc_r+0xa8>
 80052b8:	6822      	ldr	r2, [r4, #0]
 80052ba:	1b52      	subs	r2, r2, r5
 80052bc:	d420      	bmi.n	8005300 <_malloc_r+0xd0>
 80052be:	2a0b      	cmp	r2, #11
 80052c0:	d917      	bls.n	80052f2 <_malloc_r+0xc2>
 80052c2:	1961      	adds	r1, r4, r5
 80052c4:	42a3      	cmp	r3, r4
 80052c6:	6025      	str	r5, [r4, #0]
 80052c8:	bf18      	it	ne
 80052ca:	6059      	strne	r1, [r3, #4]
 80052cc:	6863      	ldr	r3, [r4, #4]
 80052ce:	bf08      	it	eq
 80052d0:	f8c8 1000 	streq.w	r1, [r8]
 80052d4:	5162      	str	r2, [r4, r5]
 80052d6:	604b      	str	r3, [r1, #4]
 80052d8:	4630      	mov	r0, r6
 80052da:	f000 f82f 	bl	800533c <__malloc_unlock>
 80052de:	f104 000b 	add.w	r0, r4, #11
 80052e2:	1d23      	adds	r3, r4, #4
 80052e4:	f020 0007 	bic.w	r0, r0, #7
 80052e8:	1ac2      	subs	r2, r0, r3
 80052ea:	bf1c      	itt	ne
 80052ec:	1a1b      	subne	r3, r3, r0
 80052ee:	50a3      	strne	r3, [r4, r2]
 80052f0:	e7af      	b.n	8005252 <_malloc_r+0x22>
 80052f2:	6862      	ldr	r2, [r4, #4]
 80052f4:	42a3      	cmp	r3, r4
 80052f6:	bf0c      	ite	eq
 80052f8:	f8c8 2000 	streq.w	r2, [r8]
 80052fc:	605a      	strne	r2, [r3, #4]
 80052fe:	e7eb      	b.n	80052d8 <_malloc_r+0xa8>
 8005300:	4623      	mov	r3, r4
 8005302:	6864      	ldr	r4, [r4, #4]
 8005304:	e7ae      	b.n	8005264 <_malloc_r+0x34>
 8005306:	463c      	mov	r4, r7
 8005308:	687f      	ldr	r7, [r7, #4]
 800530a:	e7b6      	b.n	800527a <_malloc_r+0x4a>
 800530c:	461a      	mov	r2, r3
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	42a3      	cmp	r3, r4
 8005312:	d1fb      	bne.n	800530c <_malloc_r+0xdc>
 8005314:	2300      	movs	r3, #0
 8005316:	6053      	str	r3, [r2, #4]
 8005318:	e7de      	b.n	80052d8 <_malloc_r+0xa8>
 800531a:	230c      	movs	r3, #12
 800531c:	6033      	str	r3, [r6, #0]
 800531e:	4630      	mov	r0, r6
 8005320:	f000 f80c 	bl	800533c <__malloc_unlock>
 8005324:	e794      	b.n	8005250 <_malloc_r+0x20>
 8005326:	6005      	str	r5, [r0, #0]
 8005328:	e7d6      	b.n	80052d8 <_malloc_r+0xa8>
 800532a:	bf00      	nop
 800532c:	20000440 	.word	0x20000440

08005330 <__malloc_lock>:
 8005330:	4801      	ldr	r0, [pc, #4]	@ (8005338 <__malloc_lock+0x8>)
 8005332:	f7ff b8ba 	b.w	80044aa <__retarget_lock_acquire_recursive>
 8005336:	bf00      	nop
 8005338:	20000438 	.word	0x20000438

0800533c <__malloc_unlock>:
 800533c:	4801      	ldr	r0, [pc, #4]	@ (8005344 <__malloc_unlock+0x8>)
 800533e:	f7ff b8b5 	b.w	80044ac <__retarget_lock_release_recursive>
 8005342:	bf00      	nop
 8005344:	20000438 	.word	0x20000438

08005348 <_Balloc>:
 8005348:	b570      	push	{r4, r5, r6, lr}
 800534a:	69c6      	ldr	r6, [r0, #28]
 800534c:	4604      	mov	r4, r0
 800534e:	460d      	mov	r5, r1
 8005350:	b976      	cbnz	r6, 8005370 <_Balloc+0x28>
 8005352:	2010      	movs	r0, #16
 8005354:	f7ff ff42 	bl	80051dc <malloc>
 8005358:	4602      	mov	r2, r0
 800535a:	61e0      	str	r0, [r4, #28]
 800535c:	b920      	cbnz	r0, 8005368 <_Balloc+0x20>
 800535e:	4b18      	ldr	r3, [pc, #96]	@ (80053c0 <_Balloc+0x78>)
 8005360:	4818      	ldr	r0, [pc, #96]	@ (80053c4 <_Balloc+0x7c>)
 8005362:	216b      	movs	r1, #107	@ 0x6b
 8005364:	f000 fdae 	bl	8005ec4 <__assert_func>
 8005368:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800536c:	6006      	str	r6, [r0, #0]
 800536e:	60c6      	str	r6, [r0, #12]
 8005370:	69e6      	ldr	r6, [r4, #28]
 8005372:	68f3      	ldr	r3, [r6, #12]
 8005374:	b183      	cbz	r3, 8005398 <_Balloc+0x50>
 8005376:	69e3      	ldr	r3, [r4, #28]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800537e:	b9b8      	cbnz	r0, 80053b0 <_Balloc+0x68>
 8005380:	2101      	movs	r1, #1
 8005382:	fa01 f605 	lsl.w	r6, r1, r5
 8005386:	1d72      	adds	r2, r6, #5
 8005388:	0092      	lsls	r2, r2, #2
 800538a:	4620      	mov	r0, r4
 800538c:	f000 fdb8 	bl	8005f00 <_calloc_r>
 8005390:	b160      	cbz	r0, 80053ac <_Balloc+0x64>
 8005392:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005396:	e00e      	b.n	80053b6 <_Balloc+0x6e>
 8005398:	2221      	movs	r2, #33	@ 0x21
 800539a:	2104      	movs	r1, #4
 800539c:	4620      	mov	r0, r4
 800539e:	f000 fdaf 	bl	8005f00 <_calloc_r>
 80053a2:	69e3      	ldr	r3, [r4, #28]
 80053a4:	60f0      	str	r0, [r6, #12]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d1e4      	bne.n	8005376 <_Balloc+0x2e>
 80053ac:	2000      	movs	r0, #0
 80053ae:	bd70      	pop	{r4, r5, r6, pc}
 80053b0:	6802      	ldr	r2, [r0, #0]
 80053b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80053b6:	2300      	movs	r3, #0
 80053b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80053bc:	e7f7      	b.n	80053ae <_Balloc+0x66>
 80053be:	bf00      	nop
 80053c0:	080065e1 	.word	0x080065e1
 80053c4:	08006661 	.word	0x08006661

080053c8 <_Bfree>:
 80053c8:	b570      	push	{r4, r5, r6, lr}
 80053ca:	69c6      	ldr	r6, [r0, #28]
 80053cc:	4605      	mov	r5, r0
 80053ce:	460c      	mov	r4, r1
 80053d0:	b976      	cbnz	r6, 80053f0 <_Bfree+0x28>
 80053d2:	2010      	movs	r0, #16
 80053d4:	f7ff ff02 	bl	80051dc <malloc>
 80053d8:	4602      	mov	r2, r0
 80053da:	61e8      	str	r0, [r5, #28]
 80053dc:	b920      	cbnz	r0, 80053e8 <_Bfree+0x20>
 80053de:	4b09      	ldr	r3, [pc, #36]	@ (8005404 <_Bfree+0x3c>)
 80053e0:	4809      	ldr	r0, [pc, #36]	@ (8005408 <_Bfree+0x40>)
 80053e2:	218f      	movs	r1, #143	@ 0x8f
 80053e4:	f000 fd6e 	bl	8005ec4 <__assert_func>
 80053e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80053ec:	6006      	str	r6, [r0, #0]
 80053ee:	60c6      	str	r6, [r0, #12]
 80053f0:	b13c      	cbz	r4, 8005402 <_Bfree+0x3a>
 80053f2:	69eb      	ldr	r3, [r5, #28]
 80053f4:	6862      	ldr	r2, [r4, #4]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80053fc:	6021      	str	r1, [r4, #0]
 80053fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005402:	bd70      	pop	{r4, r5, r6, pc}
 8005404:	080065e1 	.word	0x080065e1
 8005408:	08006661 	.word	0x08006661

0800540c <__multadd>:
 800540c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005410:	690d      	ldr	r5, [r1, #16]
 8005412:	4607      	mov	r7, r0
 8005414:	460c      	mov	r4, r1
 8005416:	461e      	mov	r6, r3
 8005418:	f101 0c14 	add.w	ip, r1, #20
 800541c:	2000      	movs	r0, #0
 800541e:	f8dc 3000 	ldr.w	r3, [ip]
 8005422:	b299      	uxth	r1, r3
 8005424:	fb02 6101 	mla	r1, r2, r1, r6
 8005428:	0c1e      	lsrs	r6, r3, #16
 800542a:	0c0b      	lsrs	r3, r1, #16
 800542c:	fb02 3306 	mla	r3, r2, r6, r3
 8005430:	b289      	uxth	r1, r1
 8005432:	3001      	adds	r0, #1
 8005434:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005438:	4285      	cmp	r5, r0
 800543a:	f84c 1b04 	str.w	r1, [ip], #4
 800543e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005442:	dcec      	bgt.n	800541e <__multadd+0x12>
 8005444:	b30e      	cbz	r6, 800548a <__multadd+0x7e>
 8005446:	68a3      	ldr	r3, [r4, #8]
 8005448:	42ab      	cmp	r3, r5
 800544a:	dc19      	bgt.n	8005480 <__multadd+0x74>
 800544c:	6861      	ldr	r1, [r4, #4]
 800544e:	4638      	mov	r0, r7
 8005450:	3101      	adds	r1, #1
 8005452:	f7ff ff79 	bl	8005348 <_Balloc>
 8005456:	4680      	mov	r8, r0
 8005458:	b928      	cbnz	r0, 8005466 <__multadd+0x5a>
 800545a:	4602      	mov	r2, r0
 800545c:	4b0c      	ldr	r3, [pc, #48]	@ (8005490 <__multadd+0x84>)
 800545e:	480d      	ldr	r0, [pc, #52]	@ (8005494 <__multadd+0x88>)
 8005460:	21ba      	movs	r1, #186	@ 0xba
 8005462:	f000 fd2f 	bl	8005ec4 <__assert_func>
 8005466:	6922      	ldr	r2, [r4, #16]
 8005468:	3202      	adds	r2, #2
 800546a:	f104 010c 	add.w	r1, r4, #12
 800546e:	0092      	lsls	r2, r2, #2
 8005470:	300c      	adds	r0, #12
 8005472:	f000 fd19 	bl	8005ea8 <memcpy>
 8005476:	4621      	mov	r1, r4
 8005478:	4638      	mov	r0, r7
 800547a:	f7ff ffa5 	bl	80053c8 <_Bfree>
 800547e:	4644      	mov	r4, r8
 8005480:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005484:	3501      	adds	r5, #1
 8005486:	615e      	str	r6, [r3, #20]
 8005488:	6125      	str	r5, [r4, #16]
 800548a:	4620      	mov	r0, r4
 800548c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005490:	08006650 	.word	0x08006650
 8005494:	08006661 	.word	0x08006661

08005498 <__hi0bits>:
 8005498:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800549c:	4603      	mov	r3, r0
 800549e:	bf36      	itet	cc
 80054a0:	0403      	lslcc	r3, r0, #16
 80054a2:	2000      	movcs	r0, #0
 80054a4:	2010      	movcc	r0, #16
 80054a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80054aa:	bf3c      	itt	cc
 80054ac:	021b      	lslcc	r3, r3, #8
 80054ae:	3008      	addcc	r0, #8
 80054b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80054b4:	bf3c      	itt	cc
 80054b6:	011b      	lslcc	r3, r3, #4
 80054b8:	3004      	addcc	r0, #4
 80054ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054be:	bf3c      	itt	cc
 80054c0:	009b      	lslcc	r3, r3, #2
 80054c2:	3002      	addcc	r0, #2
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	db05      	blt.n	80054d4 <__hi0bits+0x3c>
 80054c8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80054cc:	f100 0001 	add.w	r0, r0, #1
 80054d0:	bf08      	it	eq
 80054d2:	2020      	moveq	r0, #32
 80054d4:	4770      	bx	lr

080054d6 <__lo0bits>:
 80054d6:	6803      	ldr	r3, [r0, #0]
 80054d8:	4602      	mov	r2, r0
 80054da:	f013 0007 	ands.w	r0, r3, #7
 80054de:	d00b      	beq.n	80054f8 <__lo0bits+0x22>
 80054e0:	07d9      	lsls	r1, r3, #31
 80054e2:	d421      	bmi.n	8005528 <__lo0bits+0x52>
 80054e4:	0798      	lsls	r0, r3, #30
 80054e6:	bf49      	itett	mi
 80054e8:	085b      	lsrmi	r3, r3, #1
 80054ea:	089b      	lsrpl	r3, r3, #2
 80054ec:	2001      	movmi	r0, #1
 80054ee:	6013      	strmi	r3, [r2, #0]
 80054f0:	bf5c      	itt	pl
 80054f2:	6013      	strpl	r3, [r2, #0]
 80054f4:	2002      	movpl	r0, #2
 80054f6:	4770      	bx	lr
 80054f8:	b299      	uxth	r1, r3
 80054fa:	b909      	cbnz	r1, 8005500 <__lo0bits+0x2a>
 80054fc:	0c1b      	lsrs	r3, r3, #16
 80054fe:	2010      	movs	r0, #16
 8005500:	b2d9      	uxtb	r1, r3
 8005502:	b909      	cbnz	r1, 8005508 <__lo0bits+0x32>
 8005504:	3008      	adds	r0, #8
 8005506:	0a1b      	lsrs	r3, r3, #8
 8005508:	0719      	lsls	r1, r3, #28
 800550a:	bf04      	itt	eq
 800550c:	091b      	lsreq	r3, r3, #4
 800550e:	3004      	addeq	r0, #4
 8005510:	0799      	lsls	r1, r3, #30
 8005512:	bf04      	itt	eq
 8005514:	089b      	lsreq	r3, r3, #2
 8005516:	3002      	addeq	r0, #2
 8005518:	07d9      	lsls	r1, r3, #31
 800551a:	d403      	bmi.n	8005524 <__lo0bits+0x4e>
 800551c:	085b      	lsrs	r3, r3, #1
 800551e:	f100 0001 	add.w	r0, r0, #1
 8005522:	d003      	beq.n	800552c <__lo0bits+0x56>
 8005524:	6013      	str	r3, [r2, #0]
 8005526:	4770      	bx	lr
 8005528:	2000      	movs	r0, #0
 800552a:	4770      	bx	lr
 800552c:	2020      	movs	r0, #32
 800552e:	4770      	bx	lr

08005530 <__i2b>:
 8005530:	b510      	push	{r4, lr}
 8005532:	460c      	mov	r4, r1
 8005534:	2101      	movs	r1, #1
 8005536:	f7ff ff07 	bl	8005348 <_Balloc>
 800553a:	4602      	mov	r2, r0
 800553c:	b928      	cbnz	r0, 800554a <__i2b+0x1a>
 800553e:	4b05      	ldr	r3, [pc, #20]	@ (8005554 <__i2b+0x24>)
 8005540:	4805      	ldr	r0, [pc, #20]	@ (8005558 <__i2b+0x28>)
 8005542:	f240 1145 	movw	r1, #325	@ 0x145
 8005546:	f000 fcbd 	bl	8005ec4 <__assert_func>
 800554a:	2301      	movs	r3, #1
 800554c:	6144      	str	r4, [r0, #20]
 800554e:	6103      	str	r3, [r0, #16]
 8005550:	bd10      	pop	{r4, pc}
 8005552:	bf00      	nop
 8005554:	08006650 	.word	0x08006650
 8005558:	08006661 	.word	0x08006661

0800555c <__multiply>:
 800555c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005560:	4614      	mov	r4, r2
 8005562:	690a      	ldr	r2, [r1, #16]
 8005564:	6923      	ldr	r3, [r4, #16]
 8005566:	429a      	cmp	r2, r3
 8005568:	bfa8      	it	ge
 800556a:	4623      	movge	r3, r4
 800556c:	460f      	mov	r7, r1
 800556e:	bfa4      	itt	ge
 8005570:	460c      	movge	r4, r1
 8005572:	461f      	movge	r7, r3
 8005574:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005578:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800557c:	68a3      	ldr	r3, [r4, #8]
 800557e:	6861      	ldr	r1, [r4, #4]
 8005580:	eb0a 0609 	add.w	r6, sl, r9
 8005584:	42b3      	cmp	r3, r6
 8005586:	b085      	sub	sp, #20
 8005588:	bfb8      	it	lt
 800558a:	3101      	addlt	r1, #1
 800558c:	f7ff fedc 	bl	8005348 <_Balloc>
 8005590:	b930      	cbnz	r0, 80055a0 <__multiply+0x44>
 8005592:	4602      	mov	r2, r0
 8005594:	4b44      	ldr	r3, [pc, #272]	@ (80056a8 <__multiply+0x14c>)
 8005596:	4845      	ldr	r0, [pc, #276]	@ (80056ac <__multiply+0x150>)
 8005598:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800559c:	f000 fc92 	bl	8005ec4 <__assert_func>
 80055a0:	f100 0514 	add.w	r5, r0, #20
 80055a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80055a8:	462b      	mov	r3, r5
 80055aa:	2200      	movs	r2, #0
 80055ac:	4543      	cmp	r3, r8
 80055ae:	d321      	bcc.n	80055f4 <__multiply+0x98>
 80055b0:	f107 0114 	add.w	r1, r7, #20
 80055b4:	f104 0214 	add.w	r2, r4, #20
 80055b8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80055bc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80055c0:	9302      	str	r3, [sp, #8]
 80055c2:	1b13      	subs	r3, r2, r4
 80055c4:	3b15      	subs	r3, #21
 80055c6:	f023 0303 	bic.w	r3, r3, #3
 80055ca:	3304      	adds	r3, #4
 80055cc:	f104 0715 	add.w	r7, r4, #21
 80055d0:	42ba      	cmp	r2, r7
 80055d2:	bf38      	it	cc
 80055d4:	2304      	movcc	r3, #4
 80055d6:	9301      	str	r3, [sp, #4]
 80055d8:	9b02      	ldr	r3, [sp, #8]
 80055da:	9103      	str	r1, [sp, #12]
 80055dc:	428b      	cmp	r3, r1
 80055de:	d80c      	bhi.n	80055fa <__multiply+0x9e>
 80055e0:	2e00      	cmp	r6, #0
 80055e2:	dd03      	ble.n	80055ec <__multiply+0x90>
 80055e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d05b      	beq.n	80056a4 <__multiply+0x148>
 80055ec:	6106      	str	r6, [r0, #16]
 80055ee:	b005      	add	sp, #20
 80055f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055f4:	f843 2b04 	str.w	r2, [r3], #4
 80055f8:	e7d8      	b.n	80055ac <__multiply+0x50>
 80055fa:	f8b1 a000 	ldrh.w	sl, [r1]
 80055fe:	f1ba 0f00 	cmp.w	sl, #0
 8005602:	d024      	beq.n	800564e <__multiply+0xf2>
 8005604:	f104 0e14 	add.w	lr, r4, #20
 8005608:	46a9      	mov	r9, r5
 800560a:	f04f 0c00 	mov.w	ip, #0
 800560e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005612:	f8d9 3000 	ldr.w	r3, [r9]
 8005616:	fa1f fb87 	uxth.w	fp, r7
 800561a:	b29b      	uxth	r3, r3
 800561c:	fb0a 330b 	mla	r3, sl, fp, r3
 8005620:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8005624:	f8d9 7000 	ldr.w	r7, [r9]
 8005628:	4463      	add	r3, ip
 800562a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800562e:	fb0a c70b 	mla	r7, sl, fp, ip
 8005632:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005636:	b29b      	uxth	r3, r3
 8005638:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800563c:	4572      	cmp	r2, lr
 800563e:	f849 3b04 	str.w	r3, [r9], #4
 8005642:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005646:	d8e2      	bhi.n	800560e <__multiply+0xb2>
 8005648:	9b01      	ldr	r3, [sp, #4]
 800564a:	f845 c003 	str.w	ip, [r5, r3]
 800564e:	9b03      	ldr	r3, [sp, #12]
 8005650:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005654:	3104      	adds	r1, #4
 8005656:	f1b9 0f00 	cmp.w	r9, #0
 800565a:	d021      	beq.n	80056a0 <__multiply+0x144>
 800565c:	682b      	ldr	r3, [r5, #0]
 800565e:	f104 0c14 	add.w	ip, r4, #20
 8005662:	46ae      	mov	lr, r5
 8005664:	f04f 0a00 	mov.w	sl, #0
 8005668:	f8bc b000 	ldrh.w	fp, [ip]
 800566c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005670:	fb09 770b 	mla	r7, r9, fp, r7
 8005674:	4457      	add	r7, sl
 8005676:	b29b      	uxth	r3, r3
 8005678:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800567c:	f84e 3b04 	str.w	r3, [lr], #4
 8005680:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005684:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005688:	f8be 3000 	ldrh.w	r3, [lr]
 800568c:	fb09 330a 	mla	r3, r9, sl, r3
 8005690:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005694:	4562      	cmp	r2, ip
 8005696:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800569a:	d8e5      	bhi.n	8005668 <__multiply+0x10c>
 800569c:	9f01      	ldr	r7, [sp, #4]
 800569e:	51eb      	str	r3, [r5, r7]
 80056a0:	3504      	adds	r5, #4
 80056a2:	e799      	b.n	80055d8 <__multiply+0x7c>
 80056a4:	3e01      	subs	r6, #1
 80056a6:	e79b      	b.n	80055e0 <__multiply+0x84>
 80056a8:	08006650 	.word	0x08006650
 80056ac:	08006661 	.word	0x08006661

080056b0 <__pow5mult>:
 80056b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056b4:	4615      	mov	r5, r2
 80056b6:	f012 0203 	ands.w	r2, r2, #3
 80056ba:	4607      	mov	r7, r0
 80056bc:	460e      	mov	r6, r1
 80056be:	d007      	beq.n	80056d0 <__pow5mult+0x20>
 80056c0:	4c25      	ldr	r4, [pc, #148]	@ (8005758 <__pow5mult+0xa8>)
 80056c2:	3a01      	subs	r2, #1
 80056c4:	2300      	movs	r3, #0
 80056c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80056ca:	f7ff fe9f 	bl	800540c <__multadd>
 80056ce:	4606      	mov	r6, r0
 80056d0:	10ad      	asrs	r5, r5, #2
 80056d2:	d03d      	beq.n	8005750 <__pow5mult+0xa0>
 80056d4:	69fc      	ldr	r4, [r7, #28]
 80056d6:	b97c      	cbnz	r4, 80056f8 <__pow5mult+0x48>
 80056d8:	2010      	movs	r0, #16
 80056da:	f7ff fd7f 	bl	80051dc <malloc>
 80056de:	4602      	mov	r2, r0
 80056e0:	61f8      	str	r0, [r7, #28]
 80056e2:	b928      	cbnz	r0, 80056f0 <__pow5mult+0x40>
 80056e4:	4b1d      	ldr	r3, [pc, #116]	@ (800575c <__pow5mult+0xac>)
 80056e6:	481e      	ldr	r0, [pc, #120]	@ (8005760 <__pow5mult+0xb0>)
 80056e8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80056ec:	f000 fbea 	bl	8005ec4 <__assert_func>
 80056f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80056f4:	6004      	str	r4, [r0, #0]
 80056f6:	60c4      	str	r4, [r0, #12]
 80056f8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80056fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005700:	b94c      	cbnz	r4, 8005716 <__pow5mult+0x66>
 8005702:	f240 2171 	movw	r1, #625	@ 0x271
 8005706:	4638      	mov	r0, r7
 8005708:	f7ff ff12 	bl	8005530 <__i2b>
 800570c:	2300      	movs	r3, #0
 800570e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005712:	4604      	mov	r4, r0
 8005714:	6003      	str	r3, [r0, #0]
 8005716:	f04f 0900 	mov.w	r9, #0
 800571a:	07eb      	lsls	r3, r5, #31
 800571c:	d50a      	bpl.n	8005734 <__pow5mult+0x84>
 800571e:	4631      	mov	r1, r6
 8005720:	4622      	mov	r2, r4
 8005722:	4638      	mov	r0, r7
 8005724:	f7ff ff1a 	bl	800555c <__multiply>
 8005728:	4631      	mov	r1, r6
 800572a:	4680      	mov	r8, r0
 800572c:	4638      	mov	r0, r7
 800572e:	f7ff fe4b 	bl	80053c8 <_Bfree>
 8005732:	4646      	mov	r6, r8
 8005734:	106d      	asrs	r5, r5, #1
 8005736:	d00b      	beq.n	8005750 <__pow5mult+0xa0>
 8005738:	6820      	ldr	r0, [r4, #0]
 800573a:	b938      	cbnz	r0, 800574c <__pow5mult+0x9c>
 800573c:	4622      	mov	r2, r4
 800573e:	4621      	mov	r1, r4
 8005740:	4638      	mov	r0, r7
 8005742:	f7ff ff0b 	bl	800555c <__multiply>
 8005746:	6020      	str	r0, [r4, #0]
 8005748:	f8c0 9000 	str.w	r9, [r0]
 800574c:	4604      	mov	r4, r0
 800574e:	e7e4      	b.n	800571a <__pow5mult+0x6a>
 8005750:	4630      	mov	r0, r6
 8005752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005756:	bf00      	nop
 8005758:	080066bc 	.word	0x080066bc
 800575c:	080065e1 	.word	0x080065e1
 8005760:	08006661 	.word	0x08006661

08005764 <__lshift>:
 8005764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005768:	460c      	mov	r4, r1
 800576a:	6849      	ldr	r1, [r1, #4]
 800576c:	6923      	ldr	r3, [r4, #16]
 800576e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005772:	68a3      	ldr	r3, [r4, #8]
 8005774:	4607      	mov	r7, r0
 8005776:	4691      	mov	r9, r2
 8005778:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800577c:	f108 0601 	add.w	r6, r8, #1
 8005780:	42b3      	cmp	r3, r6
 8005782:	db0b      	blt.n	800579c <__lshift+0x38>
 8005784:	4638      	mov	r0, r7
 8005786:	f7ff fddf 	bl	8005348 <_Balloc>
 800578a:	4605      	mov	r5, r0
 800578c:	b948      	cbnz	r0, 80057a2 <__lshift+0x3e>
 800578e:	4602      	mov	r2, r0
 8005790:	4b28      	ldr	r3, [pc, #160]	@ (8005834 <__lshift+0xd0>)
 8005792:	4829      	ldr	r0, [pc, #164]	@ (8005838 <__lshift+0xd4>)
 8005794:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005798:	f000 fb94 	bl	8005ec4 <__assert_func>
 800579c:	3101      	adds	r1, #1
 800579e:	005b      	lsls	r3, r3, #1
 80057a0:	e7ee      	b.n	8005780 <__lshift+0x1c>
 80057a2:	2300      	movs	r3, #0
 80057a4:	f100 0114 	add.w	r1, r0, #20
 80057a8:	f100 0210 	add.w	r2, r0, #16
 80057ac:	4618      	mov	r0, r3
 80057ae:	4553      	cmp	r3, sl
 80057b0:	db33      	blt.n	800581a <__lshift+0xb6>
 80057b2:	6920      	ldr	r0, [r4, #16]
 80057b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80057b8:	f104 0314 	add.w	r3, r4, #20
 80057bc:	f019 091f 	ands.w	r9, r9, #31
 80057c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80057c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80057c8:	d02b      	beq.n	8005822 <__lshift+0xbe>
 80057ca:	f1c9 0e20 	rsb	lr, r9, #32
 80057ce:	468a      	mov	sl, r1
 80057d0:	2200      	movs	r2, #0
 80057d2:	6818      	ldr	r0, [r3, #0]
 80057d4:	fa00 f009 	lsl.w	r0, r0, r9
 80057d8:	4310      	orrs	r0, r2
 80057da:	f84a 0b04 	str.w	r0, [sl], #4
 80057de:	f853 2b04 	ldr.w	r2, [r3], #4
 80057e2:	459c      	cmp	ip, r3
 80057e4:	fa22 f20e 	lsr.w	r2, r2, lr
 80057e8:	d8f3      	bhi.n	80057d2 <__lshift+0x6e>
 80057ea:	ebac 0304 	sub.w	r3, ip, r4
 80057ee:	3b15      	subs	r3, #21
 80057f0:	f023 0303 	bic.w	r3, r3, #3
 80057f4:	3304      	adds	r3, #4
 80057f6:	f104 0015 	add.w	r0, r4, #21
 80057fa:	4584      	cmp	ip, r0
 80057fc:	bf38      	it	cc
 80057fe:	2304      	movcc	r3, #4
 8005800:	50ca      	str	r2, [r1, r3]
 8005802:	b10a      	cbz	r2, 8005808 <__lshift+0xa4>
 8005804:	f108 0602 	add.w	r6, r8, #2
 8005808:	3e01      	subs	r6, #1
 800580a:	4638      	mov	r0, r7
 800580c:	612e      	str	r6, [r5, #16]
 800580e:	4621      	mov	r1, r4
 8005810:	f7ff fdda 	bl	80053c8 <_Bfree>
 8005814:	4628      	mov	r0, r5
 8005816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800581a:	f842 0f04 	str.w	r0, [r2, #4]!
 800581e:	3301      	adds	r3, #1
 8005820:	e7c5      	b.n	80057ae <__lshift+0x4a>
 8005822:	3904      	subs	r1, #4
 8005824:	f853 2b04 	ldr.w	r2, [r3], #4
 8005828:	f841 2f04 	str.w	r2, [r1, #4]!
 800582c:	459c      	cmp	ip, r3
 800582e:	d8f9      	bhi.n	8005824 <__lshift+0xc0>
 8005830:	e7ea      	b.n	8005808 <__lshift+0xa4>
 8005832:	bf00      	nop
 8005834:	08006650 	.word	0x08006650
 8005838:	08006661 	.word	0x08006661

0800583c <__mcmp>:
 800583c:	690a      	ldr	r2, [r1, #16]
 800583e:	4603      	mov	r3, r0
 8005840:	6900      	ldr	r0, [r0, #16]
 8005842:	1a80      	subs	r0, r0, r2
 8005844:	b530      	push	{r4, r5, lr}
 8005846:	d10e      	bne.n	8005866 <__mcmp+0x2a>
 8005848:	3314      	adds	r3, #20
 800584a:	3114      	adds	r1, #20
 800584c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005850:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005854:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005858:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800585c:	4295      	cmp	r5, r2
 800585e:	d003      	beq.n	8005868 <__mcmp+0x2c>
 8005860:	d205      	bcs.n	800586e <__mcmp+0x32>
 8005862:	f04f 30ff 	mov.w	r0, #4294967295
 8005866:	bd30      	pop	{r4, r5, pc}
 8005868:	42a3      	cmp	r3, r4
 800586a:	d3f3      	bcc.n	8005854 <__mcmp+0x18>
 800586c:	e7fb      	b.n	8005866 <__mcmp+0x2a>
 800586e:	2001      	movs	r0, #1
 8005870:	e7f9      	b.n	8005866 <__mcmp+0x2a>
	...

08005874 <__mdiff>:
 8005874:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005878:	4689      	mov	r9, r1
 800587a:	4606      	mov	r6, r0
 800587c:	4611      	mov	r1, r2
 800587e:	4648      	mov	r0, r9
 8005880:	4614      	mov	r4, r2
 8005882:	f7ff ffdb 	bl	800583c <__mcmp>
 8005886:	1e05      	subs	r5, r0, #0
 8005888:	d112      	bne.n	80058b0 <__mdiff+0x3c>
 800588a:	4629      	mov	r1, r5
 800588c:	4630      	mov	r0, r6
 800588e:	f7ff fd5b 	bl	8005348 <_Balloc>
 8005892:	4602      	mov	r2, r0
 8005894:	b928      	cbnz	r0, 80058a2 <__mdiff+0x2e>
 8005896:	4b3f      	ldr	r3, [pc, #252]	@ (8005994 <__mdiff+0x120>)
 8005898:	f240 2137 	movw	r1, #567	@ 0x237
 800589c:	483e      	ldr	r0, [pc, #248]	@ (8005998 <__mdiff+0x124>)
 800589e:	f000 fb11 	bl	8005ec4 <__assert_func>
 80058a2:	2301      	movs	r3, #1
 80058a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80058a8:	4610      	mov	r0, r2
 80058aa:	b003      	add	sp, #12
 80058ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058b0:	bfbc      	itt	lt
 80058b2:	464b      	movlt	r3, r9
 80058b4:	46a1      	movlt	r9, r4
 80058b6:	4630      	mov	r0, r6
 80058b8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80058bc:	bfba      	itte	lt
 80058be:	461c      	movlt	r4, r3
 80058c0:	2501      	movlt	r5, #1
 80058c2:	2500      	movge	r5, #0
 80058c4:	f7ff fd40 	bl	8005348 <_Balloc>
 80058c8:	4602      	mov	r2, r0
 80058ca:	b918      	cbnz	r0, 80058d4 <__mdiff+0x60>
 80058cc:	4b31      	ldr	r3, [pc, #196]	@ (8005994 <__mdiff+0x120>)
 80058ce:	f240 2145 	movw	r1, #581	@ 0x245
 80058d2:	e7e3      	b.n	800589c <__mdiff+0x28>
 80058d4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80058d8:	6926      	ldr	r6, [r4, #16]
 80058da:	60c5      	str	r5, [r0, #12]
 80058dc:	f109 0310 	add.w	r3, r9, #16
 80058e0:	f109 0514 	add.w	r5, r9, #20
 80058e4:	f104 0e14 	add.w	lr, r4, #20
 80058e8:	f100 0b14 	add.w	fp, r0, #20
 80058ec:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80058f0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80058f4:	9301      	str	r3, [sp, #4]
 80058f6:	46d9      	mov	r9, fp
 80058f8:	f04f 0c00 	mov.w	ip, #0
 80058fc:	9b01      	ldr	r3, [sp, #4]
 80058fe:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005902:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005906:	9301      	str	r3, [sp, #4]
 8005908:	fa1f f38a 	uxth.w	r3, sl
 800590c:	4619      	mov	r1, r3
 800590e:	b283      	uxth	r3, r0
 8005910:	1acb      	subs	r3, r1, r3
 8005912:	0c00      	lsrs	r0, r0, #16
 8005914:	4463      	add	r3, ip
 8005916:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800591a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800591e:	b29b      	uxth	r3, r3
 8005920:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005924:	4576      	cmp	r6, lr
 8005926:	f849 3b04 	str.w	r3, [r9], #4
 800592a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800592e:	d8e5      	bhi.n	80058fc <__mdiff+0x88>
 8005930:	1b33      	subs	r3, r6, r4
 8005932:	3b15      	subs	r3, #21
 8005934:	f023 0303 	bic.w	r3, r3, #3
 8005938:	3415      	adds	r4, #21
 800593a:	3304      	adds	r3, #4
 800593c:	42a6      	cmp	r6, r4
 800593e:	bf38      	it	cc
 8005940:	2304      	movcc	r3, #4
 8005942:	441d      	add	r5, r3
 8005944:	445b      	add	r3, fp
 8005946:	461e      	mov	r6, r3
 8005948:	462c      	mov	r4, r5
 800594a:	4544      	cmp	r4, r8
 800594c:	d30e      	bcc.n	800596c <__mdiff+0xf8>
 800594e:	f108 0103 	add.w	r1, r8, #3
 8005952:	1b49      	subs	r1, r1, r5
 8005954:	f021 0103 	bic.w	r1, r1, #3
 8005958:	3d03      	subs	r5, #3
 800595a:	45a8      	cmp	r8, r5
 800595c:	bf38      	it	cc
 800595e:	2100      	movcc	r1, #0
 8005960:	440b      	add	r3, r1
 8005962:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005966:	b191      	cbz	r1, 800598e <__mdiff+0x11a>
 8005968:	6117      	str	r7, [r2, #16]
 800596a:	e79d      	b.n	80058a8 <__mdiff+0x34>
 800596c:	f854 1b04 	ldr.w	r1, [r4], #4
 8005970:	46e6      	mov	lr, ip
 8005972:	0c08      	lsrs	r0, r1, #16
 8005974:	fa1c fc81 	uxtah	ip, ip, r1
 8005978:	4471      	add	r1, lr
 800597a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800597e:	b289      	uxth	r1, r1
 8005980:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005984:	f846 1b04 	str.w	r1, [r6], #4
 8005988:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800598c:	e7dd      	b.n	800594a <__mdiff+0xd6>
 800598e:	3f01      	subs	r7, #1
 8005990:	e7e7      	b.n	8005962 <__mdiff+0xee>
 8005992:	bf00      	nop
 8005994:	08006650 	.word	0x08006650
 8005998:	08006661 	.word	0x08006661

0800599c <__d2b>:
 800599c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80059a0:	460f      	mov	r7, r1
 80059a2:	2101      	movs	r1, #1
 80059a4:	ec59 8b10 	vmov	r8, r9, d0
 80059a8:	4616      	mov	r6, r2
 80059aa:	f7ff fccd 	bl	8005348 <_Balloc>
 80059ae:	4604      	mov	r4, r0
 80059b0:	b930      	cbnz	r0, 80059c0 <__d2b+0x24>
 80059b2:	4602      	mov	r2, r0
 80059b4:	4b23      	ldr	r3, [pc, #140]	@ (8005a44 <__d2b+0xa8>)
 80059b6:	4824      	ldr	r0, [pc, #144]	@ (8005a48 <__d2b+0xac>)
 80059b8:	f240 310f 	movw	r1, #783	@ 0x30f
 80059bc:	f000 fa82 	bl	8005ec4 <__assert_func>
 80059c0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80059c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80059c8:	b10d      	cbz	r5, 80059ce <__d2b+0x32>
 80059ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80059ce:	9301      	str	r3, [sp, #4]
 80059d0:	f1b8 0300 	subs.w	r3, r8, #0
 80059d4:	d023      	beq.n	8005a1e <__d2b+0x82>
 80059d6:	4668      	mov	r0, sp
 80059d8:	9300      	str	r3, [sp, #0]
 80059da:	f7ff fd7c 	bl	80054d6 <__lo0bits>
 80059de:	e9dd 1200 	ldrd	r1, r2, [sp]
 80059e2:	b1d0      	cbz	r0, 8005a1a <__d2b+0x7e>
 80059e4:	f1c0 0320 	rsb	r3, r0, #32
 80059e8:	fa02 f303 	lsl.w	r3, r2, r3
 80059ec:	430b      	orrs	r3, r1
 80059ee:	40c2      	lsrs	r2, r0
 80059f0:	6163      	str	r3, [r4, #20]
 80059f2:	9201      	str	r2, [sp, #4]
 80059f4:	9b01      	ldr	r3, [sp, #4]
 80059f6:	61a3      	str	r3, [r4, #24]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	bf0c      	ite	eq
 80059fc:	2201      	moveq	r2, #1
 80059fe:	2202      	movne	r2, #2
 8005a00:	6122      	str	r2, [r4, #16]
 8005a02:	b1a5      	cbz	r5, 8005a2e <__d2b+0x92>
 8005a04:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005a08:	4405      	add	r5, r0
 8005a0a:	603d      	str	r5, [r7, #0]
 8005a0c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005a10:	6030      	str	r0, [r6, #0]
 8005a12:	4620      	mov	r0, r4
 8005a14:	b003      	add	sp, #12
 8005a16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005a1a:	6161      	str	r1, [r4, #20]
 8005a1c:	e7ea      	b.n	80059f4 <__d2b+0x58>
 8005a1e:	a801      	add	r0, sp, #4
 8005a20:	f7ff fd59 	bl	80054d6 <__lo0bits>
 8005a24:	9b01      	ldr	r3, [sp, #4]
 8005a26:	6163      	str	r3, [r4, #20]
 8005a28:	3020      	adds	r0, #32
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	e7e8      	b.n	8005a00 <__d2b+0x64>
 8005a2e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005a32:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005a36:	6038      	str	r0, [r7, #0]
 8005a38:	6918      	ldr	r0, [r3, #16]
 8005a3a:	f7ff fd2d 	bl	8005498 <__hi0bits>
 8005a3e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005a42:	e7e5      	b.n	8005a10 <__d2b+0x74>
 8005a44:	08006650 	.word	0x08006650
 8005a48:	08006661 	.word	0x08006661

08005a4c <__ssputs_r>:
 8005a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a50:	688e      	ldr	r6, [r1, #8]
 8005a52:	461f      	mov	r7, r3
 8005a54:	42be      	cmp	r6, r7
 8005a56:	680b      	ldr	r3, [r1, #0]
 8005a58:	4682      	mov	sl, r0
 8005a5a:	460c      	mov	r4, r1
 8005a5c:	4690      	mov	r8, r2
 8005a5e:	d82d      	bhi.n	8005abc <__ssputs_r+0x70>
 8005a60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005a64:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005a68:	d026      	beq.n	8005ab8 <__ssputs_r+0x6c>
 8005a6a:	6965      	ldr	r5, [r4, #20]
 8005a6c:	6909      	ldr	r1, [r1, #16]
 8005a6e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a72:	eba3 0901 	sub.w	r9, r3, r1
 8005a76:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005a7a:	1c7b      	adds	r3, r7, #1
 8005a7c:	444b      	add	r3, r9
 8005a7e:	106d      	asrs	r5, r5, #1
 8005a80:	429d      	cmp	r5, r3
 8005a82:	bf38      	it	cc
 8005a84:	461d      	movcc	r5, r3
 8005a86:	0553      	lsls	r3, r2, #21
 8005a88:	d527      	bpl.n	8005ada <__ssputs_r+0x8e>
 8005a8a:	4629      	mov	r1, r5
 8005a8c:	f7ff fbd0 	bl	8005230 <_malloc_r>
 8005a90:	4606      	mov	r6, r0
 8005a92:	b360      	cbz	r0, 8005aee <__ssputs_r+0xa2>
 8005a94:	6921      	ldr	r1, [r4, #16]
 8005a96:	464a      	mov	r2, r9
 8005a98:	f000 fa06 	bl	8005ea8 <memcpy>
 8005a9c:	89a3      	ldrh	r3, [r4, #12]
 8005a9e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005aa2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005aa6:	81a3      	strh	r3, [r4, #12]
 8005aa8:	6126      	str	r6, [r4, #16]
 8005aaa:	6165      	str	r5, [r4, #20]
 8005aac:	444e      	add	r6, r9
 8005aae:	eba5 0509 	sub.w	r5, r5, r9
 8005ab2:	6026      	str	r6, [r4, #0]
 8005ab4:	60a5      	str	r5, [r4, #8]
 8005ab6:	463e      	mov	r6, r7
 8005ab8:	42be      	cmp	r6, r7
 8005aba:	d900      	bls.n	8005abe <__ssputs_r+0x72>
 8005abc:	463e      	mov	r6, r7
 8005abe:	6820      	ldr	r0, [r4, #0]
 8005ac0:	4632      	mov	r2, r6
 8005ac2:	4641      	mov	r1, r8
 8005ac4:	f000 f9c6 	bl	8005e54 <memmove>
 8005ac8:	68a3      	ldr	r3, [r4, #8]
 8005aca:	1b9b      	subs	r3, r3, r6
 8005acc:	60a3      	str	r3, [r4, #8]
 8005ace:	6823      	ldr	r3, [r4, #0]
 8005ad0:	4433      	add	r3, r6
 8005ad2:	6023      	str	r3, [r4, #0]
 8005ad4:	2000      	movs	r0, #0
 8005ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ada:	462a      	mov	r2, r5
 8005adc:	f000 fa36 	bl	8005f4c <_realloc_r>
 8005ae0:	4606      	mov	r6, r0
 8005ae2:	2800      	cmp	r0, #0
 8005ae4:	d1e0      	bne.n	8005aa8 <__ssputs_r+0x5c>
 8005ae6:	6921      	ldr	r1, [r4, #16]
 8005ae8:	4650      	mov	r0, sl
 8005aea:	f7ff fb2d 	bl	8005148 <_free_r>
 8005aee:	230c      	movs	r3, #12
 8005af0:	f8ca 3000 	str.w	r3, [sl]
 8005af4:	89a3      	ldrh	r3, [r4, #12]
 8005af6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005afa:	81a3      	strh	r3, [r4, #12]
 8005afc:	f04f 30ff 	mov.w	r0, #4294967295
 8005b00:	e7e9      	b.n	8005ad6 <__ssputs_r+0x8a>
	...

08005b04 <_svfiprintf_r>:
 8005b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b08:	4698      	mov	r8, r3
 8005b0a:	898b      	ldrh	r3, [r1, #12]
 8005b0c:	061b      	lsls	r3, r3, #24
 8005b0e:	b09d      	sub	sp, #116	@ 0x74
 8005b10:	4607      	mov	r7, r0
 8005b12:	460d      	mov	r5, r1
 8005b14:	4614      	mov	r4, r2
 8005b16:	d510      	bpl.n	8005b3a <_svfiprintf_r+0x36>
 8005b18:	690b      	ldr	r3, [r1, #16]
 8005b1a:	b973      	cbnz	r3, 8005b3a <_svfiprintf_r+0x36>
 8005b1c:	2140      	movs	r1, #64	@ 0x40
 8005b1e:	f7ff fb87 	bl	8005230 <_malloc_r>
 8005b22:	6028      	str	r0, [r5, #0]
 8005b24:	6128      	str	r0, [r5, #16]
 8005b26:	b930      	cbnz	r0, 8005b36 <_svfiprintf_r+0x32>
 8005b28:	230c      	movs	r3, #12
 8005b2a:	603b      	str	r3, [r7, #0]
 8005b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b30:	b01d      	add	sp, #116	@ 0x74
 8005b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b36:	2340      	movs	r3, #64	@ 0x40
 8005b38:	616b      	str	r3, [r5, #20]
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b3e:	2320      	movs	r3, #32
 8005b40:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005b44:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b48:	2330      	movs	r3, #48	@ 0x30
 8005b4a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005ce8 <_svfiprintf_r+0x1e4>
 8005b4e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005b52:	f04f 0901 	mov.w	r9, #1
 8005b56:	4623      	mov	r3, r4
 8005b58:	469a      	mov	sl, r3
 8005b5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b5e:	b10a      	cbz	r2, 8005b64 <_svfiprintf_r+0x60>
 8005b60:	2a25      	cmp	r2, #37	@ 0x25
 8005b62:	d1f9      	bne.n	8005b58 <_svfiprintf_r+0x54>
 8005b64:	ebba 0b04 	subs.w	fp, sl, r4
 8005b68:	d00b      	beq.n	8005b82 <_svfiprintf_r+0x7e>
 8005b6a:	465b      	mov	r3, fp
 8005b6c:	4622      	mov	r2, r4
 8005b6e:	4629      	mov	r1, r5
 8005b70:	4638      	mov	r0, r7
 8005b72:	f7ff ff6b 	bl	8005a4c <__ssputs_r>
 8005b76:	3001      	adds	r0, #1
 8005b78:	f000 80a7 	beq.w	8005cca <_svfiprintf_r+0x1c6>
 8005b7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b7e:	445a      	add	r2, fp
 8005b80:	9209      	str	r2, [sp, #36]	@ 0x24
 8005b82:	f89a 3000 	ldrb.w	r3, [sl]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	f000 809f 	beq.w	8005cca <_svfiprintf_r+0x1c6>
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	f04f 32ff 	mov.w	r2, #4294967295
 8005b92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b96:	f10a 0a01 	add.w	sl, sl, #1
 8005b9a:	9304      	str	r3, [sp, #16]
 8005b9c:	9307      	str	r3, [sp, #28]
 8005b9e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005ba2:	931a      	str	r3, [sp, #104]	@ 0x68
 8005ba4:	4654      	mov	r4, sl
 8005ba6:	2205      	movs	r2, #5
 8005ba8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bac:	484e      	ldr	r0, [pc, #312]	@ (8005ce8 <_svfiprintf_r+0x1e4>)
 8005bae:	f7fa fb0f 	bl	80001d0 <memchr>
 8005bb2:	9a04      	ldr	r2, [sp, #16]
 8005bb4:	b9d8      	cbnz	r0, 8005bee <_svfiprintf_r+0xea>
 8005bb6:	06d0      	lsls	r0, r2, #27
 8005bb8:	bf44      	itt	mi
 8005bba:	2320      	movmi	r3, #32
 8005bbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005bc0:	0711      	lsls	r1, r2, #28
 8005bc2:	bf44      	itt	mi
 8005bc4:	232b      	movmi	r3, #43	@ 0x2b
 8005bc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005bca:	f89a 3000 	ldrb.w	r3, [sl]
 8005bce:	2b2a      	cmp	r3, #42	@ 0x2a
 8005bd0:	d015      	beq.n	8005bfe <_svfiprintf_r+0xfa>
 8005bd2:	9a07      	ldr	r2, [sp, #28]
 8005bd4:	4654      	mov	r4, sl
 8005bd6:	2000      	movs	r0, #0
 8005bd8:	f04f 0c0a 	mov.w	ip, #10
 8005bdc:	4621      	mov	r1, r4
 8005bde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005be2:	3b30      	subs	r3, #48	@ 0x30
 8005be4:	2b09      	cmp	r3, #9
 8005be6:	d94b      	bls.n	8005c80 <_svfiprintf_r+0x17c>
 8005be8:	b1b0      	cbz	r0, 8005c18 <_svfiprintf_r+0x114>
 8005bea:	9207      	str	r2, [sp, #28]
 8005bec:	e014      	b.n	8005c18 <_svfiprintf_r+0x114>
 8005bee:	eba0 0308 	sub.w	r3, r0, r8
 8005bf2:	fa09 f303 	lsl.w	r3, r9, r3
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	9304      	str	r3, [sp, #16]
 8005bfa:	46a2      	mov	sl, r4
 8005bfc:	e7d2      	b.n	8005ba4 <_svfiprintf_r+0xa0>
 8005bfe:	9b03      	ldr	r3, [sp, #12]
 8005c00:	1d19      	adds	r1, r3, #4
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	9103      	str	r1, [sp, #12]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	bfbb      	ittet	lt
 8005c0a:	425b      	neglt	r3, r3
 8005c0c:	f042 0202 	orrlt.w	r2, r2, #2
 8005c10:	9307      	strge	r3, [sp, #28]
 8005c12:	9307      	strlt	r3, [sp, #28]
 8005c14:	bfb8      	it	lt
 8005c16:	9204      	strlt	r2, [sp, #16]
 8005c18:	7823      	ldrb	r3, [r4, #0]
 8005c1a:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c1c:	d10a      	bne.n	8005c34 <_svfiprintf_r+0x130>
 8005c1e:	7863      	ldrb	r3, [r4, #1]
 8005c20:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c22:	d132      	bne.n	8005c8a <_svfiprintf_r+0x186>
 8005c24:	9b03      	ldr	r3, [sp, #12]
 8005c26:	1d1a      	adds	r2, r3, #4
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	9203      	str	r2, [sp, #12]
 8005c2c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005c30:	3402      	adds	r4, #2
 8005c32:	9305      	str	r3, [sp, #20]
 8005c34:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005cf8 <_svfiprintf_r+0x1f4>
 8005c38:	7821      	ldrb	r1, [r4, #0]
 8005c3a:	2203      	movs	r2, #3
 8005c3c:	4650      	mov	r0, sl
 8005c3e:	f7fa fac7 	bl	80001d0 <memchr>
 8005c42:	b138      	cbz	r0, 8005c54 <_svfiprintf_r+0x150>
 8005c44:	9b04      	ldr	r3, [sp, #16]
 8005c46:	eba0 000a 	sub.w	r0, r0, sl
 8005c4a:	2240      	movs	r2, #64	@ 0x40
 8005c4c:	4082      	lsls	r2, r0
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	3401      	adds	r4, #1
 8005c52:	9304      	str	r3, [sp, #16]
 8005c54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c58:	4824      	ldr	r0, [pc, #144]	@ (8005cec <_svfiprintf_r+0x1e8>)
 8005c5a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005c5e:	2206      	movs	r2, #6
 8005c60:	f7fa fab6 	bl	80001d0 <memchr>
 8005c64:	2800      	cmp	r0, #0
 8005c66:	d036      	beq.n	8005cd6 <_svfiprintf_r+0x1d2>
 8005c68:	4b21      	ldr	r3, [pc, #132]	@ (8005cf0 <_svfiprintf_r+0x1ec>)
 8005c6a:	bb1b      	cbnz	r3, 8005cb4 <_svfiprintf_r+0x1b0>
 8005c6c:	9b03      	ldr	r3, [sp, #12]
 8005c6e:	3307      	adds	r3, #7
 8005c70:	f023 0307 	bic.w	r3, r3, #7
 8005c74:	3308      	adds	r3, #8
 8005c76:	9303      	str	r3, [sp, #12]
 8005c78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c7a:	4433      	add	r3, r6
 8005c7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c7e:	e76a      	b.n	8005b56 <_svfiprintf_r+0x52>
 8005c80:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c84:	460c      	mov	r4, r1
 8005c86:	2001      	movs	r0, #1
 8005c88:	e7a8      	b.n	8005bdc <_svfiprintf_r+0xd8>
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	3401      	adds	r4, #1
 8005c8e:	9305      	str	r3, [sp, #20]
 8005c90:	4619      	mov	r1, r3
 8005c92:	f04f 0c0a 	mov.w	ip, #10
 8005c96:	4620      	mov	r0, r4
 8005c98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c9c:	3a30      	subs	r2, #48	@ 0x30
 8005c9e:	2a09      	cmp	r2, #9
 8005ca0:	d903      	bls.n	8005caa <_svfiprintf_r+0x1a6>
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d0c6      	beq.n	8005c34 <_svfiprintf_r+0x130>
 8005ca6:	9105      	str	r1, [sp, #20]
 8005ca8:	e7c4      	b.n	8005c34 <_svfiprintf_r+0x130>
 8005caa:	fb0c 2101 	mla	r1, ip, r1, r2
 8005cae:	4604      	mov	r4, r0
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e7f0      	b.n	8005c96 <_svfiprintf_r+0x192>
 8005cb4:	ab03      	add	r3, sp, #12
 8005cb6:	9300      	str	r3, [sp, #0]
 8005cb8:	462a      	mov	r2, r5
 8005cba:	4b0e      	ldr	r3, [pc, #56]	@ (8005cf4 <_svfiprintf_r+0x1f0>)
 8005cbc:	a904      	add	r1, sp, #16
 8005cbe:	4638      	mov	r0, r7
 8005cc0:	f7fd fe64 	bl	800398c <_printf_float>
 8005cc4:	1c42      	adds	r2, r0, #1
 8005cc6:	4606      	mov	r6, r0
 8005cc8:	d1d6      	bne.n	8005c78 <_svfiprintf_r+0x174>
 8005cca:	89ab      	ldrh	r3, [r5, #12]
 8005ccc:	065b      	lsls	r3, r3, #25
 8005cce:	f53f af2d 	bmi.w	8005b2c <_svfiprintf_r+0x28>
 8005cd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005cd4:	e72c      	b.n	8005b30 <_svfiprintf_r+0x2c>
 8005cd6:	ab03      	add	r3, sp, #12
 8005cd8:	9300      	str	r3, [sp, #0]
 8005cda:	462a      	mov	r2, r5
 8005cdc:	4b05      	ldr	r3, [pc, #20]	@ (8005cf4 <_svfiprintf_r+0x1f0>)
 8005cde:	a904      	add	r1, sp, #16
 8005ce0:	4638      	mov	r0, r7
 8005ce2:	f7fe f8eb 	bl	8003ebc <_printf_i>
 8005ce6:	e7ed      	b.n	8005cc4 <_svfiprintf_r+0x1c0>
 8005ce8:	080067b8 	.word	0x080067b8
 8005cec:	080067c2 	.word	0x080067c2
 8005cf0:	0800398d 	.word	0x0800398d
 8005cf4:	08005a4d 	.word	0x08005a4d
 8005cf8:	080067be 	.word	0x080067be

08005cfc <__sflush_r>:
 8005cfc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d04:	0716      	lsls	r6, r2, #28
 8005d06:	4605      	mov	r5, r0
 8005d08:	460c      	mov	r4, r1
 8005d0a:	d454      	bmi.n	8005db6 <__sflush_r+0xba>
 8005d0c:	684b      	ldr	r3, [r1, #4]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	dc02      	bgt.n	8005d18 <__sflush_r+0x1c>
 8005d12:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	dd48      	ble.n	8005daa <__sflush_r+0xae>
 8005d18:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005d1a:	2e00      	cmp	r6, #0
 8005d1c:	d045      	beq.n	8005daa <__sflush_r+0xae>
 8005d1e:	2300      	movs	r3, #0
 8005d20:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005d24:	682f      	ldr	r7, [r5, #0]
 8005d26:	6a21      	ldr	r1, [r4, #32]
 8005d28:	602b      	str	r3, [r5, #0]
 8005d2a:	d030      	beq.n	8005d8e <__sflush_r+0x92>
 8005d2c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005d2e:	89a3      	ldrh	r3, [r4, #12]
 8005d30:	0759      	lsls	r1, r3, #29
 8005d32:	d505      	bpl.n	8005d40 <__sflush_r+0x44>
 8005d34:	6863      	ldr	r3, [r4, #4]
 8005d36:	1ad2      	subs	r2, r2, r3
 8005d38:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005d3a:	b10b      	cbz	r3, 8005d40 <__sflush_r+0x44>
 8005d3c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005d3e:	1ad2      	subs	r2, r2, r3
 8005d40:	2300      	movs	r3, #0
 8005d42:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005d44:	6a21      	ldr	r1, [r4, #32]
 8005d46:	4628      	mov	r0, r5
 8005d48:	47b0      	blx	r6
 8005d4a:	1c43      	adds	r3, r0, #1
 8005d4c:	89a3      	ldrh	r3, [r4, #12]
 8005d4e:	d106      	bne.n	8005d5e <__sflush_r+0x62>
 8005d50:	6829      	ldr	r1, [r5, #0]
 8005d52:	291d      	cmp	r1, #29
 8005d54:	d82b      	bhi.n	8005dae <__sflush_r+0xb2>
 8005d56:	4a2a      	ldr	r2, [pc, #168]	@ (8005e00 <__sflush_r+0x104>)
 8005d58:	410a      	asrs	r2, r1
 8005d5a:	07d6      	lsls	r6, r2, #31
 8005d5c:	d427      	bmi.n	8005dae <__sflush_r+0xb2>
 8005d5e:	2200      	movs	r2, #0
 8005d60:	6062      	str	r2, [r4, #4]
 8005d62:	04d9      	lsls	r1, r3, #19
 8005d64:	6922      	ldr	r2, [r4, #16]
 8005d66:	6022      	str	r2, [r4, #0]
 8005d68:	d504      	bpl.n	8005d74 <__sflush_r+0x78>
 8005d6a:	1c42      	adds	r2, r0, #1
 8005d6c:	d101      	bne.n	8005d72 <__sflush_r+0x76>
 8005d6e:	682b      	ldr	r3, [r5, #0]
 8005d70:	b903      	cbnz	r3, 8005d74 <__sflush_r+0x78>
 8005d72:	6560      	str	r0, [r4, #84]	@ 0x54
 8005d74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005d76:	602f      	str	r7, [r5, #0]
 8005d78:	b1b9      	cbz	r1, 8005daa <__sflush_r+0xae>
 8005d7a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005d7e:	4299      	cmp	r1, r3
 8005d80:	d002      	beq.n	8005d88 <__sflush_r+0x8c>
 8005d82:	4628      	mov	r0, r5
 8005d84:	f7ff f9e0 	bl	8005148 <_free_r>
 8005d88:	2300      	movs	r3, #0
 8005d8a:	6363      	str	r3, [r4, #52]	@ 0x34
 8005d8c:	e00d      	b.n	8005daa <__sflush_r+0xae>
 8005d8e:	2301      	movs	r3, #1
 8005d90:	4628      	mov	r0, r5
 8005d92:	47b0      	blx	r6
 8005d94:	4602      	mov	r2, r0
 8005d96:	1c50      	adds	r0, r2, #1
 8005d98:	d1c9      	bne.n	8005d2e <__sflush_r+0x32>
 8005d9a:	682b      	ldr	r3, [r5, #0]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d0c6      	beq.n	8005d2e <__sflush_r+0x32>
 8005da0:	2b1d      	cmp	r3, #29
 8005da2:	d001      	beq.n	8005da8 <__sflush_r+0xac>
 8005da4:	2b16      	cmp	r3, #22
 8005da6:	d11e      	bne.n	8005de6 <__sflush_r+0xea>
 8005da8:	602f      	str	r7, [r5, #0]
 8005daa:	2000      	movs	r0, #0
 8005dac:	e022      	b.n	8005df4 <__sflush_r+0xf8>
 8005dae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005db2:	b21b      	sxth	r3, r3
 8005db4:	e01b      	b.n	8005dee <__sflush_r+0xf2>
 8005db6:	690f      	ldr	r7, [r1, #16]
 8005db8:	2f00      	cmp	r7, #0
 8005dba:	d0f6      	beq.n	8005daa <__sflush_r+0xae>
 8005dbc:	0793      	lsls	r3, r2, #30
 8005dbe:	680e      	ldr	r6, [r1, #0]
 8005dc0:	bf08      	it	eq
 8005dc2:	694b      	ldreq	r3, [r1, #20]
 8005dc4:	600f      	str	r7, [r1, #0]
 8005dc6:	bf18      	it	ne
 8005dc8:	2300      	movne	r3, #0
 8005dca:	eba6 0807 	sub.w	r8, r6, r7
 8005dce:	608b      	str	r3, [r1, #8]
 8005dd0:	f1b8 0f00 	cmp.w	r8, #0
 8005dd4:	dde9      	ble.n	8005daa <__sflush_r+0xae>
 8005dd6:	6a21      	ldr	r1, [r4, #32]
 8005dd8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005dda:	4643      	mov	r3, r8
 8005ddc:	463a      	mov	r2, r7
 8005dde:	4628      	mov	r0, r5
 8005de0:	47b0      	blx	r6
 8005de2:	2800      	cmp	r0, #0
 8005de4:	dc08      	bgt.n	8005df8 <__sflush_r+0xfc>
 8005de6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005dee:	81a3      	strh	r3, [r4, #12]
 8005df0:	f04f 30ff 	mov.w	r0, #4294967295
 8005df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005df8:	4407      	add	r7, r0
 8005dfa:	eba8 0800 	sub.w	r8, r8, r0
 8005dfe:	e7e7      	b.n	8005dd0 <__sflush_r+0xd4>
 8005e00:	dfbffffe 	.word	0xdfbffffe

08005e04 <_fflush_r>:
 8005e04:	b538      	push	{r3, r4, r5, lr}
 8005e06:	690b      	ldr	r3, [r1, #16]
 8005e08:	4605      	mov	r5, r0
 8005e0a:	460c      	mov	r4, r1
 8005e0c:	b913      	cbnz	r3, 8005e14 <_fflush_r+0x10>
 8005e0e:	2500      	movs	r5, #0
 8005e10:	4628      	mov	r0, r5
 8005e12:	bd38      	pop	{r3, r4, r5, pc}
 8005e14:	b118      	cbz	r0, 8005e1e <_fflush_r+0x1a>
 8005e16:	6a03      	ldr	r3, [r0, #32]
 8005e18:	b90b      	cbnz	r3, 8005e1e <_fflush_r+0x1a>
 8005e1a:	f7fe f9fb 	bl	8004214 <__sinit>
 8005e1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d0f3      	beq.n	8005e0e <_fflush_r+0xa>
 8005e26:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005e28:	07d0      	lsls	r0, r2, #31
 8005e2a:	d404      	bmi.n	8005e36 <_fflush_r+0x32>
 8005e2c:	0599      	lsls	r1, r3, #22
 8005e2e:	d402      	bmi.n	8005e36 <_fflush_r+0x32>
 8005e30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e32:	f7fe fb3a 	bl	80044aa <__retarget_lock_acquire_recursive>
 8005e36:	4628      	mov	r0, r5
 8005e38:	4621      	mov	r1, r4
 8005e3a:	f7ff ff5f 	bl	8005cfc <__sflush_r>
 8005e3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005e40:	07da      	lsls	r2, r3, #31
 8005e42:	4605      	mov	r5, r0
 8005e44:	d4e4      	bmi.n	8005e10 <_fflush_r+0xc>
 8005e46:	89a3      	ldrh	r3, [r4, #12]
 8005e48:	059b      	lsls	r3, r3, #22
 8005e4a:	d4e1      	bmi.n	8005e10 <_fflush_r+0xc>
 8005e4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e4e:	f7fe fb2d 	bl	80044ac <__retarget_lock_release_recursive>
 8005e52:	e7dd      	b.n	8005e10 <_fflush_r+0xc>

08005e54 <memmove>:
 8005e54:	4288      	cmp	r0, r1
 8005e56:	b510      	push	{r4, lr}
 8005e58:	eb01 0402 	add.w	r4, r1, r2
 8005e5c:	d902      	bls.n	8005e64 <memmove+0x10>
 8005e5e:	4284      	cmp	r4, r0
 8005e60:	4623      	mov	r3, r4
 8005e62:	d807      	bhi.n	8005e74 <memmove+0x20>
 8005e64:	1e43      	subs	r3, r0, #1
 8005e66:	42a1      	cmp	r1, r4
 8005e68:	d008      	beq.n	8005e7c <memmove+0x28>
 8005e6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005e72:	e7f8      	b.n	8005e66 <memmove+0x12>
 8005e74:	4402      	add	r2, r0
 8005e76:	4601      	mov	r1, r0
 8005e78:	428a      	cmp	r2, r1
 8005e7a:	d100      	bne.n	8005e7e <memmove+0x2a>
 8005e7c:	bd10      	pop	{r4, pc}
 8005e7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005e86:	e7f7      	b.n	8005e78 <memmove+0x24>

08005e88 <_sbrk_r>:
 8005e88:	b538      	push	{r3, r4, r5, lr}
 8005e8a:	4d06      	ldr	r5, [pc, #24]	@ (8005ea4 <_sbrk_r+0x1c>)
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	4604      	mov	r4, r0
 8005e90:	4608      	mov	r0, r1
 8005e92:	602b      	str	r3, [r5, #0]
 8005e94:	f7fb fa32 	bl	80012fc <_sbrk>
 8005e98:	1c43      	adds	r3, r0, #1
 8005e9a:	d102      	bne.n	8005ea2 <_sbrk_r+0x1a>
 8005e9c:	682b      	ldr	r3, [r5, #0]
 8005e9e:	b103      	cbz	r3, 8005ea2 <_sbrk_r+0x1a>
 8005ea0:	6023      	str	r3, [r4, #0]
 8005ea2:	bd38      	pop	{r3, r4, r5, pc}
 8005ea4:	20000434 	.word	0x20000434

08005ea8 <memcpy>:
 8005ea8:	440a      	add	r2, r1
 8005eaa:	4291      	cmp	r1, r2
 8005eac:	f100 33ff 	add.w	r3, r0, #4294967295
 8005eb0:	d100      	bne.n	8005eb4 <memcpy+0xc>
 8005eb2:	4770      	bx	lr
 8005eb4:	b510      	push	{r4, lr}
 8005eb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005eba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ebe:	4291      	cmp	r1, r2
 8005ec0:	d1f9      	bne.n	8005eb6 <memcpy+0xe>
 8005ec2:	bd10      	pop	{r4, pc}

08005ec4 <__assert_func>:
 8005ec4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005ec6:	4614      	mov	r4, r2
 8005ec8:	461a      	mov	r2, r3
 8005eca:	4b09      	ldr	r3, [pc, #36]	@ (8005ef0 <__assert_func+0x2c>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4605      	mov	r5, r0
 8005ed0:	68d8      	ldr	r0, [r3, #12]
 8005ed2:	b954      	cbnz	r4, 8005eea <__assert_func+0x26>
 8005ed4:	4b07      	ldr	r3, [pc, #28]	@ (8005ef4 <__assert_func+0x30>)
 8005ed6:	461c      	mov	r4, r3
 8005ed8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005edc:	9100      	str	r1, [sp, #0]
 8005ede:	462b      	mov	r3, r5
 8005ee0:	4905      	ldr	r1, [pc, #20]	@ (8005ef8 <__assert_func+0x34>)
 8005ee2:	f000 f86f 	bl	8005fc4 <fiprintf>
 8005ee6:	f000 f87f 	bl	8005fe8 <abort>
 8005eea:	4b04      	ldr	r3, [pc, #16]	@ (8005efc <__assert_func+0x38>)
 8005eec:	e7f4      	b.n	8005ed8 <__assert_func+0x14>
 8005eee:	bf00      	nop
 8005ef0:	20000030 	.word	0x20000030
 8005ef4:	0800680e 	.word	0x0800680e
 8005ef8:	080067e0 	.word	0x080067e0
 8005efc:	080067d3 	.word	0x080067d3

08005f00 <_calloc_r>:
 8005f00:	b570      	push	{r4, r5, r6, lr}
 8005f02:	fba1 5402 	umull	r5, r4, r1, r2
 8005f06:	b93c      	cbnz	r4, 8005f18 <_calloc_r+0x18>
 8005f08:	4629      	mov	r1, r5
 8005f0a:	f7ff f991 	bl	8005230 <_malloc_r>
 8005f0e:	4606      	mov	r6, r0
 8005f10:	b928      	cbnz	r0, 8005f1e <_calloc_r+0x1e>
 8005f12:	2600      	movs	r6, #0
 8005f14:	4630      	mov	r0, r6
 8005f16:	bd70      	pop	{r4, r5, r6, pc}
 8005f18:	220c      	movs	r2, #12
 8005f1a:	6002      	str	r2, [r0, #0]
 8005f1c:	e7f9      	b.n	8005f12 <_calloc_r+0x12>
 8005f1e:	462a      	mov	r2, r5
 8005f20:	4621      	mov	r1, r4
 8005f22:	f7fe fa44 	bl	80043ae <memset>
 8005f26:	e7f5      	b.n	8005f14 <_calloc_r+0x14>

08005f28 <__ascii_mbtowc>:
 8005f28:	b082      	sub	sp, #8
 8005f2a:	b901      	cbnz	r1, 8005f2e <__ascii_mbtowc+0x6>
 8005f2c:	a901      	add	r1, sp, #4
 8005f2e:	b142      	cbz	r2, 8005f42 <__ascii_mbtowc+0x1a>
 8005f30:	b14b      	cbz	r3, 8005f46 <__ascii_mbtowc+0x1e>
 8005f32:	7813      	ldrb	r3, [r2, #0]
 8005f34:	600b      	str	r3, [r1, #0]
 8005f36:	7812      	ldrb	r2, [r2, #0]
 8005f38:	1e10      	subs	r0, r2, #0
 8005f3a:	bf18      	it	ne
 8005f3c:	2001      	movne	r0, #1
 8005f3e:	b002      	add	sp, #8
 8005f40:	4770      	bx	lr
 8005f42:	4610      	mov	r0, r2
 8005f44:	e7fb      	b.n	8005f3e <__ascii_mbtowc+0x16>
 8005f46:	f06f 0001 	mvn.w	r0, #1
 8005f4a:	e7f8      	b.n	8005f3e <__ascii_mbtowc+0x16>

08005f4c <_realloc_r>:
 8005f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f50:	4680      	mov	r8, r0
 8005f52:	4615      	mov	r5, r2
 8005f54:	460c      	mov	r4, r1
 8005f56:	b921      	cbnz	r1, 8005f62 <_realloc_r+0x16>
 8005f58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f5c:	4611      	mov	r1, r2
 8005f5e:	f7ff b967 	b.w	8005230 <_malloc_r>
 8005f62:	b92a      	cbnz	r2, 8005f70 <_realloc_r+0x24>
 8005f64:	f7ff f8f0 	bl	8005148 <_free_r>
 8005f68:	2400      	movs	r4, #0
 8005f6a:	4620      	mov	r0, r4
 8005f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f70:	f000 f841 	bl	8005ff6 <_malloc_usable_size_r>
 8005f74:	4285      	cmp	r5, r0
 8005f76:	4606      	mov	r6, r0
 8005f78:	d802      	bhi.n	8005f80 <_realloc_r+0x34>
 8005f7a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005f7e:	d8f4      	bhi.n	8005f6a <_realloc_r+0x1e>
 8005f80:	4629      	mov	r1, r5
 8005f82:	4640      	mov	r0, r8
 8005f84:	f7ff f954 	bl	8005230 <_malloc_r>
 8005f88:	4607      	mov	r7, r0
 8005f8a:	2800      	cmp	r0, #0
 8005f8c:	d0ec      	beq.n	8005f68 <_realloc_r+0x1c>
 8005f8e:	42b5      	cmp	r5, r6
 8005f90:	462a      	mov	r2, r5
 8005f92:	4621      	mov	r1, r4
 8005f94:	bf28      	it	cs
 8005f96:	4632      	movcs	r2, r6
 8005f98:	f7ff ff86 	bl	8005ea8 <memcpy>
 8005f9c:	4621      	mov	r1, r4
 8005f9e:	4640      	mov	r0, r8
 8005fa0:	f7ff f8d2 	bl	8005148 <_free_r>
 8005fa4:	463c      	mov	r4, r7
 8005fa6:	e7e0      	b.n	8005f6a <_realloc_r+0x1e>

08005fa8 <__ascii_wctomb>:
 8005fa8:	4603      	mov	r3, r0
 8005faa:	4608      	mov	r0, r1
 8005fac:	b141      	cbz	r1, 8005fc0 <__ascii_wctomb+0x18>
 8005fae:	2aff      	cmp	r2, #255	@ 0xff
 8005fb0:	d904      	bls.n	8005fbc <__ascii_wctomb+0x14>
 8005fb2:	228a      	movs	r2, #138	@ 0x8a
 8005fb4:	601a      	str	r2, [r3, #0]
 8005fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8005fba:	4770      	bx	lr
 8005fbc:	700a      	strb	r2, [r1, #0]
 8005fbe:	2001      	movs	r0, #1
 8005fc0:	4770      	bx	lr
	...

08005fc4 <fiprintf>:
 8005fc4:	b40e      	push	{r1, r2, r3}
 8005fc6:	b503      	push	{r0, r1, lr}
 8005fc8:	4601      	mov	r1, r0
 8005fca:	ab03      	add	r3, sp, #12
 8005fcc:	4805      	ldr	r0, [pc, #20]	@ (8005fe4 <fiprintf+0x20>)
 8005fce:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fd2:	6800      	ldr	r0, [r0, #0]
 8005fd4:	9301      	str	r3, [sp, #4]
 8005fd6:	f000 f83f 	bl	8006058 <_vfiprintf_r>
 8005fda:	b002      	add	sp, #8
 8005fdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005fe0:	b003      	add	sp, #12
 8005fe2:	4770      	bx	lr
 8005fe4:	20000030 	.word	0x20000030

08005fe8 <abort>:
 8005fe8:	b508      	push	{r3, lr}
 8005fea:	2006      	movs	r0, #6
 8005fec:	f000 fa08 	bl	8006400 <raise>
 8005ff0:	2001      	movs	r0, #1
 8005ff2:	f7fb f90a 	bl	800120a <_exit>

08005ff6 <_malloc_usable_size_r>:
 8005ff6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ffa:	1f18      	subs	r0, r3, #4
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	bfbc      	itt	lt
 8006000:	580b      	ldrlt	r3, [r1, r0]
 8006002:	18c0      	addlt	r0, r0, r3
 8006004:	4770      	bx	lr

08006006 <__sfputc_r>:
 8006006:	6893      	ldr	r3, [r2, #8]
 8006008:	3b01      	subs	r3, #1
 800600a:	2b00      	cmp	r3, #0
 800600c:	b410      	push	{r4}
 800600e:	6093      	str	r3, [r2, #8]
 8006010:	da08      	bge.n	8006024 <__sfputc_r+0x1e>
 8006012:	6994      	ldr	r4, [r2, #24]
 8006014:	42a3      	cmp	r3, r4
 8006016:	db01      	blt.n	800601c <__sfputc_r+0x16>
 8006018:	290a      	cmp	r1, #10
 800601a:	d103      	bne.n	8006024 <__sfputc_r+0x1e>
 800601c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006020:	f000 b932 	b.w	8006288 <__swbuf_r>
 8006024:	6813      	ldr	r3, [r2, #0]
 8006026:	1c58      	adds	r0, r3, #1
 8006028:	6010      	str	r0, [r2, #0]
 800602a:	7019      	strb	r1, [r3, #0]
 800602c:	4608      	mov	r0, r1
 800602e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006032:	4770      	bx	lr

08006034 <__sfputs_r>:
 8006034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006036:	4606      	mov	r6, r0
 8006038:	460f      	mov	r7, r1
 800603a:	4614      	mov	r4, r2
 800603c:	18d5      	adds	r5, r2, r3
 800603e:	42ac      	cmp	r4, r5
 8006040:	d101      	bne.n	8006046 <__sfputs_r+0x12>
 8006042:	2000      	movs	r0, #0
 8006044:	e007      	b.n	8006056 <__sfputs_r+0x22>
 8006046:	f814 1b01 	ldrb.w	r1, [r4], #1
 800604a:	463a      	mov	r2, r7
 800604c:	4630      	mov	r0, r6
 800604e:	f7ff ffda 	bl	8006006 <__sfputc_r>
 8006052:	1c43      	adds	r3, r0, #1
 8006054:	d1f3      	bne.n	800603e <__sfputs_r+0xa>
 8006056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006058 <_vfiprintf_r>:
 8006058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800605c:	460d      	mov	r5, r1
 800605e:	b09d      	sub	sp, #116	@ 0x74
 8006060:	4614      	mov	r4, r2
 8006062:	4698      	mov	r8, r3
 8006064:	4606      	mov	r6, r0
 8006066:	b118      	cbz	r0, 8006070 <_vfiprintf_r+0x18>
 8006068:	6a03      	ldr	r3, [r0, #32]
 800606a:	b90b      	cbnz	r3, 8006070 <_vfiprintf_r+0x18>
 800606c:	f7fe f8d2 	bl	8004214 <__sinit>
 8006070:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006072:	07d9      	lsls	r1, r3, #31
 8006074:	d405      	bmi.n	8006082 <_vfiprintf_r+0x2a>
 8006076:	89ab      	ldrh	r3, [r5, #12]
 8006078:	059a      	lsls	r2, r3, #22
 800607a:	d402      	bmi.n	8006082 <_vfiprintf_r+0x2a>
 800607c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800607e:	f7fe fa14 	bl	80044aa <__retarget_lock_acquire_recursive>
 8006082:	89ab      	ldrh	r3, [r5, #12]
 8006084:	071b      	lsls	r3, r3, #28
 8006086:	d501      	bpl.n	800608c <_vfiprintf_r+0x34>
 8006088:	692b      	ldr	r3, [r5, #16]
 800608a:	b99b      	cbnz	r3, 80060b4 <_vfiprintf_r+0x5c>
 800608c:	4629      	mov	r1, r5
 800608e:	4630      	mov	r0, r6
 8006090:	f000 f938 	bl	8006304 <__swsetup_r>
 8006094:	b170      	cbz	r0, 80060b4 <_vfiprintf_r+0x5c>
 8006096:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006098:	07dc      	lsls	r4, r3, #31
 800609a:	d504      	bpl.n	80060a6 <_vfiprintf_r+0x4e>
 800609c:	f04f 30ff 	mov.w	r0, #4294967295
 80060a0:	b01d      	add	sp, #116	@ 0x74
 80060a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060a6:	89ab      	ldrh	r3, [r5, #12]
 80060a8:	0598      	lsls	r0, r3, #22
 80060aa:	d4f7      	bmi.n	800609c <_vfiprintf_r+0x44>
 80060ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80060ae:	f7fe f9fd 	bl	80044ac <__retarget_lock_release_recursive>
 80060b2:	e7f3      	b.n	800609c <_vfiprintf_r+0x44>
 80060b4:	2300      	movs	r3, #0
 80060b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80060b8:	2320      	movs	r3, #32
 80060ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80060be:	f8cd 800c 	str.w	r8, [sp, #12]
 80060c2:	2330      	movs	r3, #48	@ 0x30
 80060c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006274 <_vfiprintf_r+0x21c>
 80060c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80060cc:	f04f 0901 	mov.w	r9, #1
 80060d0:	4623      	mov	r3, r4
 80060d2:	469a      	mov	sl, r3
 80060d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060d8:	b10a      	cbz	r2, 80060de <_vfiprintf_r+0x86>
 80060da:	2a25      	cmp	r2, #37	@ 0x25
 80060dc:	d1f9      	bne.n	80060d2 <_vfiprintf_r+0x7a>
 80060de:	ebba 0b04 	subs.w	fp, sl, r4
 80060e2:	d00b      	beq.n	80060fc <_vfiprintf_r+0xa4>
 80060e4:	465b      	mov	r3, fp
 80060e6:	4622      	mov	r2, r4
 80060e8:	4629      	mov	r1, r5
 80060ea:	4630      	mov	r0, r6
 80060ec:	f7ff ffa2 	bl	8006034 <__sfputs_r>
 80060f0:	3001      	adds	r0, #1
 80060f2:	f000 80a7 	beq.w	8006244 <_vfiprintf_r+0x1ec>
 80060f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80060f8:	445a      	add	r2, fp
 80060fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80060fc:	f89a 3000 	ldrb.w	r3, [sl]
 8006100:	2b00      	cmp	r3, #0
 8006102:	f000 809f 	beq.w	8006244 <_vfiprintf_r+0x1ec>
 8006106:	2300      	movs	r3, #0
 8006108:	f04f 32ff 	mov.w	r2, #4294967295
 800610c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006110:	f10a 0a01 	add.w	sl, sl, #1
 8006114:	9304      	str	r3, [sp, #16]
 8006116:	9307      	str	r3, [sp, #28]
 8006118:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800611c:	931a      	str	r3, [sp, #104]	@ 0x68
 800611e:	4654      	mov	r4, sl
 8006120:	2205      	movs	r2, #5
 8006122:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006126:	4853      	ldr	r0, [pc, #332]	@ (8006274 <_vfiprintf_r+0x21c>)
 8006128:	f7fa f852 	bl	80001d0 <memchr>
 800612c:	9a04      	ldr	r2, [sp, #16]
 800612e:	b9d8      	cbnz	r0, 8006168 <_vfiprintf_r+0x110>
 8006130:	06d1      	lsls	r1, r2, #27
 8006132:	bf44      	itt	mi
 8006134:	2320      	movmi	r3, #32
 8006136:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800613a:	0713      	lsls	r3, r2, #28
 800613c:	bf44      	itt	mi
 800613e:	232b      	movmi	r3, #43	@ 0x2b
 8006140:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006144:	f89a 3000 	ldrb.w	r3, [sl]
 8006148:	2b2a      	cmp	r3, #42	@ 0x2a
 800614a:	d015      	beq.n	8006178 <_vfiprintf_r+0x120>
 800614c:	9a07      	ldr	r2, [sp, #28]
 800614e:	4654      	mov	r4, sl
 8006150:	2000      	movs	r0, #0
 8006152:	f04f 0c0a 	mov.w	ip, #10
 8006156:	4621      	mov	r1, r4
 8006158:	f811 3b01 	ldrb.w	r3, [r1], #1
 800615c:	3b30      	subs	r3, #48	@ 0x30
 800615e:	2b09      	cmp	r3, #9
 8006160:	d94b      	bls.n	80061fa <_vfiprintf_r+0x1a2>
 8006162:	b1b0      	cbz	r0, 8006192 <_vfiprintf_r+0x13a>
 8006164:	9207      	str	r2, [sp, #28]
 8006166:	e014      	b.n	8006192 <_vfiprintf_r+0x13a>
 8006168:	eba0 0308 	sub.w	r3, r0, r8
 800616c:	fa09 f303 	lsl.w	r3, r9, r3
 8006170:	4313      	orrs	r3, r2
 8006172:	9304      	str	r3, [sp, #16]
 8006174:	46a2      	mov	sl, r4
 8006176:	e7d2      	b.n	800611e <_vfiprintf_r+0xc6>
 8006178:	9b03      	ldr	r3, [sp, #12]
 800617a:	1d19      	adds	r1, r3, #4
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	9103      	str	r1, [sp, #12]
 8006180:	2b00      	cmp	r3, #0
 8006182:	bfbb      	ittet	lt
 8006184:	425b      	neglt	r3, r3
 8006186:	f042 0202 	orrlt.w	r2, r2, #2
 800618a:	9307      	strge	r3, [sp, #28]
 800618c:	9307      	strlt	r3, [sp, #28]
 800618e:	bfb8      	it	lt
 8006190:	9204      	strlt	r2, [sp, #16]
 8006192:	7823      	ldrb	r3, [r4, #0]
 8006194:	2b2e      	cmp	r3, #46	@ 0x2e
 8006196:	d10a      	bne.n	80061ae <_vfiprintf_r+0x156>
 8006198:	7863      	ldrb	r3, [r4, #1]
 800619a:	2b2a      	cmp	r3, #42	@ 0x2a
 800619c:	d132      	bne.n	8006204 <_vfiprintf_r+0x1ac>
 800619e:	9b03      	ldr	r3, [sp, #12]
 80061a0:	1d1a      	adds	r2, r3, #4
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	9203      	str	r2, [sp, #12]
 80061a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80061aa:	3402      	adds	r4, #2
 80061ac:	9305      	str	r3, [sp, #20]
 80061ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006284 <_vfiprintf_r+0x22c>
 80061b2:	7821      	ldrb	r1, [r4, #0]
 80061b4:	2203      	movs	r2, #3
 80061b6:	4650      	mov	r0, sl
 80061b8:	f7fa f80a 	bl	80001d0 <memchr>
 80061bc:	b138      	cbz	r0, 80061ce <_vfiprintf_r+0x176>
 80061be:	9b04      	ldr	r3, [sp, #16]
 80061c0:	eba0 000a 	sub.w	r0, r0, sl
 80061c4:	2240      	movs	r2, #64	@ 0x40
 80061c6:	4082      	lsls	r2, r0
 80061c8:	4313      	orrs	r3, r2
 80061ca:	3401      	adds	r4, #1
 80061cc:	9304      	str	r3, [sp, #16]
 80061ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061d2:	4829      	ldr	r0, [pc, #164]	@ (8006278 <_vfiprintf_r+0x220>)
 80061d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80061d8:	2206      	movs	r2, #6
 80061da:	f7f9 fff9 	bl	80001d0 <memchr>
 80061de:	2800      	cmp	r0, #0
 80061e0:	d03f      	beq.n	8006262 <_vfiprintf_r+0x20a>
 80061e2:	4b26      	ldr	r3, [pc, #152]	@ (800627c <_vfiprintf_r+0x224>)
 80061e4:	bb1b      	cbnz	r3, 800622e <_vfiprintf_r+0x1d6>
 80061e6:	9b03      	ldr	r3, [sp, #12]
 80061e8:	3307      	adds	r3, #7
 80061ea:	f023 0307 	bic.w	r3, r3, #7
 80061ee:	3308      	adds	r3, #8
 80061f0:	9303      	str	r3, [sp, #12]
 80061f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061f4:	443b      	add	r3, r7
 80061f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80061f8:	e76a      	b.n	80060d0 <_vfiprintf_r+0x78>
 80061fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80061fe:	460c      	mov	r4, r1
 8006200:	2001      	movs	r0, #1
 8006202:	e7a8      	b.n	8006156 <_vfiprintf_r+0xfe>
 8006204:	2300      	movs	r3, #0
 8006206:	3401      	adds	r4, #1
 8006208:	9305      	str	r3, [sp, #20]
 800620a:	4619      	mov	r1, r3
 800620c:	f04f 0c0a 	mov.w	ip, #10
 8006210:	4620      	mov	r0, r4
 8006212:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006216:	3a30      	subs	r2, #48	@ 0x30
 8006218:	2a09      	cmp	r2, #9
 800621a:	d903      	bls.n	8006224 <_vfiprintf_r+0x1cc>
 800621c:	2b00      	cmp	r3, #0
 800621e:	d0c6      	beq.n	80061ae <_vfiprintf_r+0x156>
 8006220:	9105      	str	r1, [sp, #20]
 8006222:	e7c4      	b.n	80061ae <_vfiprintf_r+0x156>
 8006224:	fb0c 2101 	mla	r1, ip, r1, r2
 8006228:	4604      	mov	r4, r0
 800622a:	2301      	movs	r3, #1
 800622c:	e7f0      	b.n	8006210 <_vfiprintf_r+0x1b8>
 800622e:	ab03      	add	r3, sp, #12
 8006230:	9300      	str	r3, [sp, #0]
 8006232:	462a      	mov	r2, r5
 8006234:	4b12      	ldr	r3, [pc, #72]	@ (8006280 <_vfiprintf_r+0x228>)
 8006236:	a904      	add	r1, sp, #16
 8006238:	4630      	mov	r0, r6
 800623a:	f7fd fba7 	bl	800398c <_printf_float>
 800623e:	4607      	mov	r7, r0
 8006240:	1c78      	adds	r0, r7, #1
 8006242:	d1d6      	bne.n	80061f2 <_vfiprintf_r+0x19a>
 8006244:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006246:	07d9      	lsls	r1, r3, #31
 8006248:	d405      	bmi.n	8006256 <_vfiprintf_r+0x1fe>
 800624a:	89ab      	ldrh	r3, [r5, #12]
 800624c:	059a      	lsls	r2, r3, #22
 800624e:	d402      	bmi.n	8006256 <_vfiprintf_r+0x1fe>
 8006250:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006252:	f7fe f92b 	bl	80044ac <__retarget_lock_release_recursive>
 8006256:	89ab      	ldrh	r3, [r5, #12]
 8006258:	065b      	lsls	r3, r3, #25
 800625a:	f53f af1f 	bmi.w	800609c <_vfiprintf_r+0x44>
 800625e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006260:	e71e      	b.n	80060a0 <_vfiprintf_r+0x48>
 8006262:	ab03      	add	r3, sp, #12
 8006264:	9300      	str	r3, [sp, #0]
 8006266:	462a      	mov	r2, r5
 8006268:	4b05      	ldr	r3, [pc, #20]	@ (8006280 <_vfiprintf_r+0x228>)
 800626a:	a904      	add	r1, sp, #16
 800626c:	4630      	mov	r0, r6
 800626e:	f7fd fe25 	bl	8003ebc <_printf_i>
 8006272:	e7e4      	b.n	800623e <_vfiprintf_r+0x1e6>
 8006274:	080067b8 	.word	0x080067b8
 8006278:	080067c2 	.word	0x080067c2
 800627c:	0800398d 	.word	0x0800398d
 8006280:	08006035 	.word	0x08006035
 8006284:	080067be 	.word	0x080067be

08006288 <__swbuf_r>:
 8006288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800628a:	460e      	mov	r6, r1
 800628c:	4614      	mov	r4, r2
 800628e:	4605      	mov	r5, r0
 8006290:	b118      	cbz	r0, 800629a <__swbuf_r+0x12>
 8006292:	6a03      	ldr	r3, [r0, #32]
 8006294:	b90b      	cbnz	r3, 800629a <__swbuf_r+0x12>
 8006296:	f7fd ffbd 	bl	8004214 <__sinit>
 800629a:	69a3      	ldr	r3, [r4, #24]
 800629c:	60a3      	str	r3, [r4, #8]
 800629e:	89a3      	ldrh	r3, [r4, #12]
 80062a0:	071a      	lsls	r2, r3, #28
 80062a2:	d501      	bpl.n	80062a8 <__swbuf_r+0x20>
 80062a4:	6923      	ldr	r3, [r4, #16]
 80062a6:	b943      	cbnz	r3, 80062ba <__swbuf_r+0x32>
 80062a8:	4621      	mov	r1, r4
 80062aa:	4628      	mov	r0, r5
 80062ac:	f000 f82a 	bl	8006304 <__swsetup_r>
 80062b0:	b118      	cbz	r0, 80062ba <__swbuf_r+0x32>
 80062b2:	f04f 37ff 	mov.w	r7, #4294967295
 80062b6:	4638      	mov	r0, r7
 80062b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062ba:	6823      	ldr	r3, [r4, #0]
 80062bc:	6922      	ldr	r2, [r4, #16]
 80062be:	1a98      	subs	r0, r3, r2
 80062c0:	6963      	ldr	r3, [r4, #20]
 80062c2:	b2f6      	uxtb	r6, r6
 80062c4:	4283      	cmp	r3, r0
 80062c6:	4637      	mov	r7, r6
 80062c8:	dc05      	bgt.n	80062d6 <__swbuf_r+0x4e>
 80062ca:	4621      	mov	r1, r4
 80062cc:	4628      	mov	r0, r5
 80062ce:	f7ff fd99 	bl	8005e04 <_fflush_r>
 80062d2:	2800      	cmp	r0, #0
 80062d4:	d1ed      	bne.n	80062b2 <__swbuf_r+0x2a>
 80062d6:	68a3      	ldr	r3, [r4, #8]
 80062d8:	3b01      	subs	r3, #1
 80062da:	60a3      	str	r3, [r4, #8]
 80062dc:	6823      	ldr	r3, [r4, #0]
 80062de:	1c5a      	adds	r2, r3, #1
 80062e0:	6022      	str	r2, [r4, #0]
 80062e2:	701e      	strb	r6, [r3, #0]
 80062e4:	6962      	ldr	r2, [r4, #20]
 80062e6:	1c43      	adds	r3, r0, #1
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d004      	beq.n	80062f6 <__swbuf_r+0x6e>
 80062ec:	89a3      	ldrh	r3, [r4, #12]
 80062ee:	07db      	lsls	r3, r3, #31
 80062f0:	d5e1      	bpl.n	80062b6 <__swbuf_r+0x2e>
 80062f2:	2e0a      	cmp	r6, #10
 80062f4:	d1df      	bne.n	80062b6 <__swbuf_r+0x2e>
 80062f6:	4621      	mov	r1, r4
 80062f8:	4628      	mov	r0, r5
 80062fa:	f7ff fd83 	bl	8005e04 <_fflush_r>
 80062fe:	2800      	cmp	r0, #0
 8006300:	d0d9      	beq.n	80062b6 <__swbuf_r+0x2e>
 8006302:	e7d6      	b.n	80062b2 <__swbuf_r+0x2a>

08006304 <__swsetup_r>:
 8006304:	b538      	push	{r3, r4, r5, lr}
 8006306:	4b29      	ldr	r3, [pc, #164]	@ (80063ac <__swsetup_r+0xa8>)
 8006308:	4605      	mov	r5, r0
 800630a:	6818      	ldr	r0, [r3, #0]
 800630c:	460c      	mov	r4, r1
 800630e:	b118      	cbz	r0, 8006318 <__swsetup_r+0x14>
 8006310:	6a03      	ldr	r3, [r0, #32]
 8006312:	b90b      	cbnz	r3, 8006318 <__swsetup_r+0x14>
 8006314:	f7fd ff7e 	bl	8004214 <__sinit>
 8006318:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800631c:	0719      	lsls	r1, r3, #28
 800631e:	d422      	bmi.n	8006366 <__swsetup_r+0x62>
 8006320:	06da      	lsls	r2, r3, #27
 8006322:	d407      	bmi.n	8006334 <__swsetup_r+0x30>
 8006324:	2209      	movs	r2, #9
 8006326:	602a      	str	r2, [r5, #0]
 8006328:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800632c:	81a3      	strh	r3, [r4, #12]
 800632e:	f04f 30ff 	mov.w	r0, #4294967295
 8006332:	e033      	b.n	800639c <__swsetup_r+0x98>
 8006334:	0758      	lsls	r0, r3, #29
 8006336:	d512      	bpl.n	800635e <__swsetup_r+0x5a>
 8006338:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800633a:	b141      	cbz	r1, 800634e <__swsetup_r+0x4a>
 800633c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006340:	4299      	cmp	r1, r3
 8006342:	d002      	beq.n	800634a <__swsetup_r+0x46>
 8006344:	4628      	mov	r0, r5
 8006346:	f7fe feff 	bl	8005148 <_free_r>
 800634a:	2300      	movs	r3, #0
 800634c:	6363      	str	r3, [r4, #52]	@ 0x34
 800634e:	89a3      	ldrh	r3, [r4, #12]
 8006350:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006354:	81a3      	strh	r3, [r4, #12]
 8006356:	2300      	movs	r3, #0
 8006358:	6063      	str	r3, [r4, #4]
 800635a:	6923      	ldr	r3, [r4, #16]
 800635c:	6023      	str	r3, [r4, #0]
 800635e:	89a3      	ldrh	r3, [r4, #12]
 8006360:	f043 0308 	orr.w	r3, r3, #8
 8006364:	81a3      	strh	r3, [r4, #12]
 8006366:	6923      	ldr	r3, [r4, #16]
 8006368:	b94b      	cbnz	r3, 800637e <__swsetup_r+0x7a>
 800636a:	89a3      	ldrh	r3, [r4, #12]
 800636c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006370:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006374:	d003      	beq.n	800637e <__swsetup_r+0x7a>
 8006376:	4621      	mov	r1, r4
 8006378:	4628      	mov	r0, r5
 800637a:	f000 f883 	bl	8006484 <__smakebuf_r>
 800637e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006382:	f013 0201 	ands.w	r2, r3, #1
 8006386:	d00a      	beq.n	800639e <__swsetup_r+0x9a>
 8006388:	2200      	movs	r2, #0
 800638a:	60a2      	str	r2, [r4, #8]
 800638c:	6962      	ldr	r2, [r4, #20]
 800638e:	4252      	negs	r2, r2
 8006390:	61a2      	str	r2, [r4, #24]
 8006392:	6922      	ldr	r2, [r4, #16]
 8006394:	b942      	cbnz	r2, 80063a8 <__swsetup_r+0xa4>
 8006396:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800639a:	d1c5      	bne.n	8006328 <__swsetup_r+0x24>
 800639c:	bd38      	pop	{r3, r4, r5, pc}
 800639e:	0799      	lsls	r1, r3, #30
 80063a0:	bf58      	it	pl
 80063a2:	6962      	ldrpl	r2, [r4, #20]
 80063a4:	60a2      	str	r2, [r4, #8]
 80063a6:	e7f4      	b.n	8006392 <__swsetup_r+0x8e>
 80063a8:	2000      	movs	r0, #0
 80063aa:	e7f7      	b.n	800639c <__swsetup_r+0x98>
 80063ac:	20000030 	.word	0x20000030

080063b0 <_raise_r>:
 80063b0:	291f      	cmp	r1, #31
 80063b2:	b538      	push	{r3, r4, r5, lr}
 80063b4:	4605      	mov	r5, r0
 80063b6:	460c      	mov	r4, r1
 80063b8:	d904      	bls.n	80063c4 <_raise_r+0x14>
 80063ba:	2316      	movs	r3, #22
 80063bc:	6003      	str	r3, [r0, #0]
 80063be:	f04f 30ff 	mov.w	r0, #4294967295
 80063c2:	bd38      	pop	{r3, r4, r5, pc}
 80063c4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80063c6:	b112      	cbz	r2, 80063ce <_raise_r+0x1e>
 80063c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80063cc:	b94b      	cbnz	r3, 80063e2 <_raise_r+0x32>
 80063ce:	4628      	mov	r0, r5
 80063d0:	f000 f830 	bl	8006434 <_getpid_r>
 80063d4:	4622      	mov	r2, r4
 80063d6:	4601      	mov	r1, r0
 80063d8:	4628      	mov	r0, r5
 80063da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063de:	f000 b817 	b.w	8006410 <_kill_r>
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d00a      	beq.n	80063fc <_raise_r+0x4c>
 80063e6:	1c59      	adds	r1, r3, #1
 80063e8:	d103      	bne.n	80063f2 <_raise_r+0x42>
 80063ea:	2316      	movs	r3, #22
 80063ec:	6003      	str	r3, [r0, #0]
 80063ee:	2001      	movs	r0, #1
 80063f0:	e7e7      	b.n	80063c2 <_raise_r+0x12>
 80063f2:	2100      	movs	r1, #0
 80063f4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80063f8:	4620      	mov	r0, r4
 80063fa:	4798      	blx	r3
 80063fc:	2000      	movs	r0, #0
 80063fe:	e7e0      	b.n	80063c2 <_raise_r+0x12>

08006400 <raise>:
 8006400:	4b02      	ldr	r3, [pc, #8]	@ (800640c <raise+0xc>)
 8006402:	4601      	mov	r1, r0
 8006404:	6818      	ldr	r0, [r3, #0]
 8006406:	f7ff bfd3 	b.w	80063b0 <_raise_r>
 800640a:	bf00      	nop
 800640c:	20000030 	.word	0x20000030

08006410 <_kill_r>:
 8006410:	b538      	push	{r3, r4, r5, lr}
 8006412:	4d07      	ldr	r5, [pc, #28]	@ (8006430 <_kill_r+0x20>)
 8006414:	2300      	movs	r3, #0
 8006416:	4604      	mov	r4, r0
 8006418:	4608      	mov	r0, r1
 800641a:	4611      	mov	r1, r2
 800641c:	602b      	str	r3, [r5, #0]
 800641e:	f7fa fee4 	bl	80011ea <_kill>
 8006422:	1c43      	adds	r3, r0, #1
 8006424:	d102      	bne.n	800642c <_kill_r+0x1c>
 8006426:	682b      	ldr	r3, [r5, #0]
 8006428:	b103      	cbz	r3, 800642c <_kill_r+0x1c>
 800642a:	6023      	str	r3, [r4, #0]
 800642c:	bd38      	pop	{r3, r4, r5, pc}
 800642e:	bf00      	nop
 8006430:	20000434 	.word	0x20000434

08006434 <_getpid_r>:
 8006434:	f7fa bed1 	b.w	80011da <_getpid>

08006438 <__swhatbuf_r>:
 8006438:	b570      	push	{r4, r5, r6, lr}
 800643a:	460c      	mov	r4, r1
 800643c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006440:	2900      	cmp	r1, #0
 8006442:	b096      	sub	sp, #88	@ 0x58
 8006444:	4615      	mov	r5, r2
 8006446:	461e      	mov	r6, r3
 8006448:	da0d      	bge.n	8006466 <__swhatbuf_r+0x2e>
 800644a:	89a3      	ldrh	r3, [r4, #12]
 800644c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006450:	f04f 0100 	mov.w	r1, #0
 8006454:	bf14      	ite	ne
 8006456:	2340      	movne	r3, #64	@ 0x40
 8006458:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800645c:	2000      	movs	r0, #0
 800645e:	6031      	str	r1, [r6, #0]
 8006460:	602b      	str	r3, [r5, #0]
 8006462:	b016      	add	sp, #88	@ 0x58
 8006464:	bd70      	pop	{r4, r5, r6, pc}
 8006466:	466a      	mov	r2, sp
 8006468:	f000 f848 	bl	80064fc <_fstat_r>
 800646c:	2800      	cmp	r0, #0
 800646e:	dbec      	blt.n	800644a <__swhatbuf_r+0x12>
 8006470:	9901      	ldr	r1, [sp, #4]
 8006472:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006476:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800647a:	4259      	negs	r1, r3
 800647c:	4159      	adcs	r1, r3
 800647e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006482:	e7eb      	b.n	800645c <__swhatbuf_r+0x24>

08006484 <__smakebuf_r>:
 8006484:	898b      	ldrh	r3, [r1, #12]
 8006486:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006488:	079d      	lsls	r5, r3, #30
 800648a:	4606      	mov	r6, r0
 800648c:	460c      	mov	r4, r1
 800648e:	d507      	bpl.n	80064a0 <__smakebuf_r+0x1c>
 8006490:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006494:	6023      	str	r3, [r4, #0]
 8006496:	6123      	str	r3, [r4, #16]
 8006498:	2301      	movs	r3, #1
 800649a:	6163      	str	r3, [r4, #20]
 800649c:	b003      	add	sp, #12
 800649e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064a0:	ab01      	add	r3, sp, #4
 80064a2:	466a      	mov	r2, sp
 80064a4:	f7ff ffc8 	bl	8006438 <__swhatbuf_r>
 80064a8:	9f00      	ldr	r7, [sp, #0]
 80064aa:	4605      	mov	r5, r0
 80064ac:	4639      	mov	r1, r7
 80064ae:	4630      	mov	r0, r6
 80064b0:	f7fe febe 	bl	8005230 <_malloc_r>
 80064b4:	b948      	cbnz	r0, 80064ca <__smakebuf_r+0x46>
 80064b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064ba:	059a      	lsls	r2, r3, #22
 80064bc:	d4ee      	bmi.n	800649c <__smakebuf_r+0x18>
 80064be:	f023 0303 	bic.w	r3, r3, #3
 80064c2:	f043 0302 	orr.w	r3, r3, #2
 80064c6:	81a3      	strh	r3, [r4, #12]
 80064c8:	e7e2      	b.n	8006490 <__smakebuf_r+0xc>
 80064ca:	89a3      	ldrh	r3, [r4, #12]
 80064cc:	6020      	str	r0, [r4, #0]
 80064ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064d2:	81a3      	strh	r3, [r4, #12]
 80064d4:	9b01      	ldr	r3, [sp, #4]
 80064d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80064da:	b15b      	cbz	r3, 80064f4 <__smakebuf_r+0x70>
 80064dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064e0:	4630      	mov	r0, r6
 80064e2:	f000 f81d 	bl	8006520 <_isatty_r>
 80064e6:	b128      	cbz	r0, 80064f4 <__smakebuf_r+0x70>
 80064e8:	89a3      	ldrh	r3, [r4, #12]
 80064ea:	f023 0303 	bic.w	r3, r3, #3
 80064ee:	f043 0301 	orr.w	r3, r3, #1
 80064f2:	81a3      	strh	r3, [r4, #12]
 80064f4:	89a3      	ldrh	r3, [r4, #12]
 80064f6:	431d      	orrs	r5, r3
 80064f8:	81a5      	strh	r5, [r4, #12]
 80064fa:	e7cf      	b.n	800649c <__smakebuf_r+0x18>

080064fc <_fstat_r>:
 80064fc:	b538      	push	{r3, r4, r5, lr}
 80064fe:	4d07      	ldr	r5, [pc, #28]	@ (800651c <_fstat_r+0x20>)
 8006500:	2300      	movs	r3, #0
 8006502:	4604      	mov	r4, r0
 8006504:	4608      	mov	r0, r1
 8006506:	4611      	mov	r1, r2
 8006508:	602b      	str	r3, [r5, #0]
 800650a:	f7fa fece 	bl	80012aa <_fstat>
 800650e:	1c43      	adds	r3, r0, #1
 8006510:	d102      	bne.n	8006518 <_fstat_r+0x1c>
 8006512:	682b      	ldr	r3, [r5, #0]
 8006514:	b103      	cbz	r3, 8006518 <_fstat_r+0x1c>
 8006516:	6023      	str	r3, [r4, #0]
 8006518:	bd38      	pop	{r3, r4, r5, pc}
 800651a:	bf00      	nop
 800651c:	20000434 	.word	0x20000434

08006520 <_isatty_r>:
 8006520:	b538      	push	{r3, r4, r5, lr}
 8006522:	4d06      	ldr	r5, [pc, #24]	@ (800653c <_isatty_r+0x1c>)
 8006524:	2300      	movs	r3, #0
 8006526:	4604      	mov	r4, r0
 8006528:	4608      	mov	r0, r1
 800652a:	602b      	str	r3, [r5, #0]
 800652c:	f7fa fecd 	bl	80012ca <_isatty>
 8006530:	1c43      	adds	r3, r0, #1
 8006532:	d102      	bne.n	800653a <_isatty_r+0x1a>
 8006534:	682b      	ldr	r3, [r5, #0]
 8006536:	b103      	cbz	r3, 800653a <_isatty_r+0x1a>
 8006538:	6023      	str	r3, [r4, #0]
 800653a:	bd38      	pop	{r3, r4, r5, pc}
 800653c:	20000434 	.word	0x20000434

08006540 <_init>:
 8006540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006542:	bf00      	nop
 8006544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006546:	bc08      	pop	{r3}
 8006548:	469e      	mov	lr, r3
 800654a:	4770      	bx	lr

0800654c <_fini>:
 800654c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800654e:	bf00      	nop
 8006550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006552:	bc08      	pop	{r3}
 8006554:	469e      	mov	lr, r3
 8006556:	4770      	bx	lr
