
Flying_arm_blank_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091a0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  08009330  08009330  0000a330  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096f8  080096f8  0000b1ec  2**0
                  CONTENTS
  4 .ARM          00000008  080096f8  080096f8  0000a6f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009700  08009700  0000b1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009700  08009700  0000a700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009704  08009704  0000a704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  08009708  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b1ec  2**0
                  CONTENTS
 10 .bss          00000618  200001f0  200001f0  0000b1f0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000808  20000808  0000b1f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b1ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f6be  00000000  00000000  0000b21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002876  00000000  00000000  0001a8da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f48  00000000  00000000  0001d150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000be3  00000000  00000000  0001e098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000249e9  00000000  00000000  0001ec7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013e89  00000000  00000000  00043664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc01e  00000000  00000000  000574ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013350b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000050e8  00000000  00000000  00133550  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  00138638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009318 	.word	0x08009318

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	08009318 	.word	0x08009318

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f3e:	f001 fd8d 	bl	8002a5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  Clock_init();
 8000f42:	f000 fd8b 	bl	8001a5c <Clock_init>

  /* USER CODE BEGIN SysInit */

  Motor_init();
 8000f46:	f000 fdf3 	bl	8001b30 <Motor_init>

  Sensor_init();
 8000f4a:	f000 ff17 	bl	8001d7c <Sensor_init>

  Menu_init();
 8000f4e:	f000 fcbf 	bl	80018d0 <Menu_init>
  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */

  double pot, gyro;

  int iter=0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	gyro = Sensor_GetGyro();
 8000f56:	f000 ff27 	bl	8001da8 <Sensor_GetGyro>
 8000f5a:	ed87 0b02 	vstr	d0, [r7, #8]
	pot = Sensor_GetAngle();
 8000f5e:	f000 ff15 	bl	8001d8c <Sensor_GetAngle>
 8000f62:	ed87 0b00 	vstr	d0, [r7]

	if(iter >= 5){
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	2b04      	cmp	r3, #4
 8000f6a:	dd07      	ble.n	8000f7c <main+0x44>
		iter = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]
		Menu_refresh(pot, gyro);
 8000f70:	ed97 1b02 	vldr	d1, [r7, #8]
 8000f74:	ed97 0b00 	vldr	d0, [r7]
 8000f78:	f000 fcc8 	bl	800190c <Menu_refresh>
	}
	iter++;
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	617b      	str	r3, [r7, #20]

	Wait_Until(200);
 8000f82:	20c8      	movs	r0, #200	@ 0xc8
 8000f84:	f000 feb0 	bl	8001ce8 <Wait_Until>
  {
 8000f88:	e7e5      	b.n	8000f56 <main+0x1e>
	...

08000f8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	607b      	str	r3, [r7, #4]
 8000f96:	4b10      	ldr	r3, [pc, #64]	@ (8000fd8 <HAL_MspInit+0x4c>)
 8000f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f9a:	4a0f      	ldr	r2, [pc, #60]	@ (8000fd8 <HAL_MspInit+0x4c>)
 8000f9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fa0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd8 <HAL_MspInit+0x4c>)
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fa6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	603b      	str	r3, [r7, #0]
 8000fb2:	4b09      	ldr	r3, [pc, #36]	@ (8000fd8 <HAL_MspInit+0x4c>)
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb6:	4a08      	ldr	r2, [pc, #32]	@ (8000fd8 <HAL_MspInit+0x4c>)
 8000fb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fbe:	4b06      	ldr	r3, [pc, #24]	@ (8000fd8 <HAL_MspInit+0x4c>)
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fc6:	603b      	str	r3, [r7, #0]
 8000fc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	40023800 	.word	0x40023800

08000fdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fe0:	bf00      	nop
 8000fe2:	e7fd      	b.n	8000fe0 <NMI_Handler+0x4>

08000fe4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fe8:	bf00      	nop
 8000fea:	e7fd      	b.n	8000fe8 <HardFault_Handler+0x4>

08000fec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff0:	bf00      	nop
 8000ff2:	e7fd      	b.n	8000ff0 <MemManage_Handler+0x4>

08000ff4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ff8:	bf00      	nop
 8000ffa:	e7fd      	b.n	8000ff8 <BusFault_Handler+0x4>

08000ffc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001000:	bf00      	nop
 8001002:	e7fd      	b.n	8001000 <UsageFault_Handler+0x4>

08001004 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001012:	b480      	push	{r7}
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001032:	f001 fd65 	bl	8002b00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}

0800103a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0
  return 1;
 800103e:	2301      	movs	r3, #1
}
 8001040:	4618      	mov	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <_kill>:

int _kill(int pid, int sig)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
 8001052:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001054:	f006 f8ea 	bl	800722c <__errno>
 8001058:	4603      	mov	r3, r0
 800105a:	2216      	movs	r2, #22
 800105c:	601a      	str	r2, [r3, #0]
  return -1;
 800105e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001062:	4618      	mov	r0, r3
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <_exit>:

void _exit (int status)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b082      	sub	sp, #8
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001072:	f04f 31ff 	mov.w	r1, #4294967295
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff ffe7 	bl	800104a <_kill>
  while (1) {}    /* Make sure we hang here */
 800107c:	bf00      	nop
 800107e:	e7fd      	b.n	800107c <_exit+0x12>

08001080 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]
 8001090:	e00a      	b.n	80010a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001092:	f3af 8000 	nop.w
 8001096:	4601      	mov	r1, r0
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	1c5a      	adds	r2, r3, #1
 800109c:	60ba      	str	r2, [r7, #8]
 800109e:	b2ca      	uxtb	r2, r1
 80010a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	3301      	adds	r3, #1
 80010a6:	617b      	str	r3, [r7, #20]
 80010a8:	697a      	ldr	r2, [r7, #20]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	dbf0      	blt.n	8001092 <_read+0x12>
  }

  return len;
 80010b0:	687b      	ldr	r3, [r7, #4]
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3718      	adds	r7, #24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b086      	sub	sp, #24
 80010be:	af00      	add	r7, sp, #0
 80010c0:	60f8      	str	r0, [r7, #12]
 80010c2:	60b9      	str	r1, [r7, #8]
 80010c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]
 80010ca:	e009      	b.n	80010e0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	1c5a      	adds	r2, r3, #1
 80010d0:	60ba      	str	r2, [r7, #8]
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	3301      	adds	r3, #1
 80010de:	617b      	str	r3, [r7, #20]
 80010e0:	697a      	ldr	r2, [r7, #20]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	dbf1      	blt.n	80010cc <_write+0x12>
  }
  return len;
 80010e8:	687b      	ldr	r3, [r7, #4]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <_close>:

int _close(int file)
{
 80010f2:	b480      	push	{r7}
 80010f4:	b083      	sub	sp, #12
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010fe:	4618      	mov	r0, r3
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr

0800110a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800110a:	b480      	push	{r7}
 800110c:	b083      	sub	sp, #12
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
 8001112:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800111a:	605a      	str	r2, [r3, #4]
  return 0;
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr

0800112a <_isatty>:

int _isatty(int file)
{
 800112a:	b480      	push	{r7}
 800112c:	b083      	sub	sp, #12
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001132:	2301      	movs	r3, #1
}
 8001134:	4618      	mov	r0, r3
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3714      	adds	r7, #20
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
	...

0800115c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001164:	4a14      	ldr	r2, [pc, #80]	@ (80011b8 <_sbrk+0x5c>)
 8001166:	4b15      	ldr	r3, [pc, #84]	@ (80011bc <_sbrk+0x60>)
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001170:	4b13      	ldr	r3, [pc, #76]	@ (80011c0 <_sbrk+0x64>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d102      	bne.n	800117e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001178:	4b11      	ldr	r3, [pc, #68]	@ (80011c0 <_sbrk+0x64>)
 800117a:	4a12      	ldr	r2, [pc, #72]	@ (80011c4 <_sbrk+0x68>)
 800117c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800117e:	4b10      	ldr	r3, [pc, #64]	@ (80011c0 <_sbrk+0x64>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4413      	add	r3, r2
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	429a      	cmp	r2, r3
 800118a:	d207      	bcs.n	800119c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800118c:	f006 f84e 	bl	800722c <__errno>
 8001190:	4603      	mov	r3, r0
 8001192:	220c      	movs	r2, #12
 8001194:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001196:	f04f 33ff 	mov.w	r3, #4294967295
 800119a:	e009      	b.n	80011b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800119c:	4b08      	ldr	r3, [pc, #32]	@ (80011c0 <_sbrk+0x64>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011a2:	4b07      	ldr	r3, [pc, #28]	@ (80011c0 <_sbrk+0x64>)
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4413      	add	r3, r2
 80011aa:	4a05      	ldr	r2, [pc, #20]	@ (80011c0 <_sbrk+0x64>)
 80011ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ae:	68fb      	ldr	r3, [r7, #12]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3718      	adds	r7, #24
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20020000 	.word	0x20020000
 80011bc:	00000400 	.word	0x00000400
 80011c0:	2000020c 	.word	0x2000020c
 80011c4:	20000808 	.word	0x20000808

080011c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011cc:	4b06      	ldr	r3, [pc, #24]	@ (80011e8 <SystemInit+0x20>)
 80011ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011d2:	4a05      	ldr	r2, [pc, #20]	@ (80011e8 <SystemInit+0x20>)
 80011d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001224 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80011f0:	f7ff ffea 	bl	80011c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011f4:	480c      	ldr	r0, [pc, #48]	@ (8001228 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011f6:	490d      	ldr	r1, [pc, #52]	@ (800122c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001230 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011fc:	e002      	b.n	8001204 <LoopCopyDataInit>

080011fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001200:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001202:	3304      	adds	r3, #4

08001204 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001204:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001206:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001208:	d3f9      	bcc.n	80011fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800120a:	4a0a      	ldr	r2, [pc, #40]	@ (8001234 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800120c:	4c0a      	ldr	r4, [pc, #40]	@ (8001238 <LoopFillZerobss+0x22>)
  movs r3, #0
 800120e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001210:	e001      	b.n	8001216 <LoopFillZerobss>

08001212 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001212:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001214:	3204      	adds	r2, #4

08001216 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001216:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001218:	d3fb      	bcc.n	8001212 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800121a:	f006 f80d 	bl	8007238 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800121e:	f7ff fe8b 	bl	8000f38 <main>
  bx  lr    
 8001222:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001224:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001228:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800122c:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001230:	08009708 	.word	0x08009708
  ldr r2, =_sbss
 8001234:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8001238:	20000808 	.word	0x20000808

0800123c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800123c:	e7fe      	b.n	800123c <ADC_IRQHandler>
	...

08001240 <Keyboard_init>:
/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void Keyboard_init(void) {
 8001240:	b580      	push	{r7, lr}
 8001242:	b088      	sub	sp, #32
 8001244:	af00      	add	r7, sp, #0

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001246:	f107 030c 	add.w	r3, r7, #12
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	609a      	str	r2, [r3, #8]
 8001252:	60da      	str	r2, [r3, #12]
 8001254:	611a      	str	r2, [r3, #16]

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60bb      	str	r3, [r7, #8]
 800125a:	4b4a      	ldr	r3, [pc, #296]	@ (8001384 <Keyboard_init+0x144>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	4a49      	ldr	r2, [pc, #292]	@ (8001384 <Keyboard_init+0x144>)
 8001260:	f043 0304 	orr.w	r3, r3, #4
 8001264:	6313      	str	r3, [r2, #48]	@ 0x30
 8001266:	4b47      	ldr	r3, [pc, #284]	@ (8001384 <Keyboard_init+0x144>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	f003 0304 	and.w	r3, r3, #4
 800126e:	60bb      	str	r3, [r7, #8]
 8001270:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	607b      	str	r3, [r7, #4]
 8001276:	4b43      	ldr	r3, [pc, #268]	@ (8001384 <Keyboard_init+0x144>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127a:	4a42      	ldr	r2, [pc, #264]	@ (8001384 <Keyboard_init+0x144>)
 800127c:	f043 0301 	orr.w	r3, r3, #1
 8001280:	6313      	str	r3, [r2, #48]	@ 0x30
 8001282:	4b40      	ldr	r3, [pc, #256]	@ (8001384 <Keyboard_init+0x144>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	607b      	str	r3, [r7, #4]
 800128c:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	603b      	str	r3, [r7, #0]
 8001292:	4b3c      	ldr	r3, [pc, #240]	@ (8001384 <Keyboard_init+0x144>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001296:	4a3b      	ldr	r2, [pc, #236]	@ (8001384 <Keyboard_init+0x144>)
 8001298:	f043 0302 	orr.w	r3, r3, #2
 800129c:	6313      	str	r3, [r2, #48]	@ 0x30
 800129e:	4b39      	ldr	r3, [pc, #228]	@ (8001384 <Keyboard_init+0x144>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	603b      	str	r3, [r7, #0]
 80012a8:	683b      	ldr	r3, [r7, #0]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_RESET);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2102      	movs	r1, #2
 80012ae:	4836      	ldr	r0, [pc, #216]	@ (8001388 <Keyboard_init+0x148>)
 80012b0:	f002 feb2 	bl	8004018 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOA, LED_1_Pin|LED_2_Pin, GPIO_PIN_RESET);
 80012b4:	2200      	movs	r2, #0
 80012b6:	2121      	movs	r1, #33	@ 0x21
 80012b8:	4834      	ldr	r0, [pc, #208]	@ (800138c <Keyboard_init+0x14c>)
 80012ba:	f002 fead 	bl	8004018 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 80012be:	2200      	movs	r2, #0
 80012c0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012c4:	4832      	ldr	r0, [pc, #200]	@ (8001390 <Keyboard_init+0x150>)
 80012c6:	f002 fea7 	bl	8004018 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin : LED_0_Pin */
	  GPIO_InitStruct.Pin = LED_0_Pin;
 80012ca:	2302      	movs	r3, #2
 80012cc:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ce:	2301      	movs	r3, #1
 80012d0:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(LED_0_GPIO_Port, &GPIO_InitStruct);
 80012da:	f107 030c 	add.w	r3, r7, #12
 80012de:	4619      	mov	r1, r3
 80012e0:	4829      	ldr	r0, [pc, #164]	@ (8001388 <Keyboard_init+0x148>)
 80012e2:	f002 fce5 	bl	8003cb0 <HAL_GPIO_Init>

	  /*Configure GPIO pins : LED_1_Pin LED_2_Pin */
	  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin;
 80012e6:	2321      	movs	r3, #33	@ 0x21
 80012e8:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ea:	2301      	movs	r3, #1
 80012ec:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f6:	f107 030c 	add.w	r3, r7, #12
 80012fa:	4619      	mov	r1, r3
 80012fc:	4823      	ldr	r0, [pc, #140]	@ (800138c <Keyboard_init+0x14c>)
 80012fe:	f002 fcd7 	bl	8003cb0 <HAL_GPIO_Init>

	  /*Configure GPIO pin : LED_3_Pin */
	  GPIO_InitStruct.Pin = LED_3_Pin;
 8001302:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001306:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001308:	2301      	movs	r3, #1
 800130a:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001310:	2300      	movs	r3, #0
 8001312:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(LED_3_GPIO_Port, &GPIO_InitStruct);
 8001314:	f107 030c 	add.w	r3, r7, #12
 8001318:	4619      	mov	r1, r3
 800131a:	481d      	ldr	r0, [pc, #116]	@ (8001390 <Keyboard_init+0x150>)
 800131c:	f002 fcc8 	bl	8003cb0 <HAL_GPIO_Init>

	  /*Configure GPIO pin : BP_green_Pin */
	  GPIO_InitStruct.Pin = BP_green_Pin;
 8001320:	2308      	movs	r3, #8
 8001322:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001324:	2300      	movs	r3, #0
 8001326:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001328:	2302      	movs	r3, #2
 800132a:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(BP_green_GPIO_Port, &GPIO_InitStruct);
 800132c:	f107 030c 	add.w	r3, r7, #12
 8001330:	4619      	mov	r1, r3
 8001332:	4815      	ldr	r0, [pc, #84]	@ (8001388 <Keyboard_init+0x148>)
 8001334:	f002 fcbc 	bl	8003cb0 <HAL_GPIO_Init>

	  /*Configure GPIO pins : Keyboard_bit0_Pin Keyboard_bit2_Pin Keyboard_bit1_Pin Keyboard_bit3_Pin */
	  GPIO_InitStruct.Pin = Keyboard_bit0_Pin|Keyboard_bit2_Pin|Keyboard_bit1_Pin|Keyboard_bit3_Pin;
 8001338:	235a      	movs	r3, #90	@ 0x5a
 800133a:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800133c:	2300      	movs	r3, #0
 800133e:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001340:	2302      	movs	r3, #2
 8001342:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001344:	f107 030c 	add.w	r3, r7, #12
 8001348:	4619      	mov	r1, r3
 800134a:	4810      	ldr	r0, [pc, #64]	@ (800138c <Keyboard_init+0x14c>)
 800134c:	f002 fcb0 	bl	8003cb0 <HAL_GPIO_Init>

	  /*Configure GPIO pin : Keyboard_IT_Pin */
	  GPIO_InitStruct.Pin = Keyboard_IT_Pin;
 8001350:	2304      	movs	r3, #4
 8001352:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001354:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001358:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800135a:	2302      	movs	r3, #2
 800135c:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(Keyboard_IT_GPIO_Port, &GPIO_InitStruct);
 800135e:	f107 030c 	add.w	r3, r7, #12
 8001362:	4619      	mov	r1, r3
 8001364:	4809      	ldr	r0, [pc, #36]	@ (800138c <Keyboard_init+0x14c>)
 8001366:	f002 fca3 	bl	8003cb0 <HAL_GPIO_Init>

	  /* EXTI interrupt init*/
	  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800136a:	2200      	movs	r2, #0
 800136c:	2100      	movs	r1, #0
 800136e:	2008      	movs	r0, #8
 8001370:	f002 f8f7 	bl	8003562 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001374:	2008      	movs	r0, #8
 8001376:	f002 f910 	bl	800359a <HAL_NVIC_EnableIRQ>

}
 800137a:	bf00      	nop
 800137c:	3720      	adds	r7, #32
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40023800 	.word	0x40023800
 8001388:	40020800 	.word	0x40020800
 800138c:	40020000 	.word	0x40020000
 8001390:	40020400 	.word	0x40020400

08001394 <keyboard_translate>:

char keyboard_translate(void){
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0

	int value = HAL_GPIO_ReadPin(Keyboard_bit0_GPIO_Port, Keyboard_bit0_Pin);
 800139a:	2102      	movs	r1, #2
 800139c:	4875      	ldr	r0, [pc, #468]	@ (8001574 <keyboard_translate+0x1e0>)
 800139e:	f002 fe23 	bl	8003fe8 <HAL_GPIO_ReadPin>
 80013a2:	4603      	mov	r3, r0
 80013a4:	607b      	str	r3, [r7, #4]
	value += HAL_GPIO_ReadPin(Keyboard_bit1_GPIO_Port, Keyboard_bit1_Pin)*10;
 80013a6:	2110      	movs	r1, #16
 80013a8:	4872      	ldr	r0, [pc, #456]	@ (8001574 <keyboard_translate+0x1e0>)
 80013aa:	f002 fe1d 	bl	8003fe8 <HAL_GPIO_ReadPin>
 80013ae:	4603      	mov	r3, r0
 80013b0:	461a      	mov	r2, r3
 80013b2:	4613      	mov	r3, r2
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	4413      	add	r3, r2
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	461a      	mov	r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4413      	add	r3, r2
 80013c0:	607b      	str	r3, [r7, #4]
	value += HAL_GPIO_ReadPin(Keyboard_bit2_GPIO_Port, Keyboard_bit2_Pin)*100;
 80013c2:	2108      	movs	r1, #8
 80013c4:	486b      	ldr	r0, [pc, #428]	@ (8001574 <keyboard_translate+0x1e0>)
 80013c6:	f002 fe0f 	bl	8003fe8 <HAL_GPIO_ReadPin>
 80013ca:	4603      	mov	r3, r0
 80013cc:	461a      	mov	r2, r3
 80013ce:	2364      	movs	r3, #100	@ 0x64
 80013d0:	fb02 f303 	mul.w	r3, r2, r3
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	4413      	add	r3, r2
 80013d8:	607b      	str	r3, [r7, #4]
	value += HAL_GPIO_ReadPin(Keyboard_bit3_GPIO_Port, Keyboard_bit3_Pin)*1000;
 80013da:	2140      	movs	r1, #64	@ 0x40
 80013dc:	4865      	ldr	r0, [pc, #404]	@ (8001574 <keyboard_translate+0x1e0>)
 80013de:	f002 fe03 	bl	8003fe8 <HAL_GPIO_ReadPin>
 80013e2:	4603      	mov	r3, r0
 80013e4:	461a      	mov	r2, r3
 80013e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013ea:	fb02 f303 	mul.w	r3, r2, r3
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	4413      	add	r3, r2
 80013f2:	607b      	str	r3, [r7, #4]

	switch (value){
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 80013fa:	f280 80b4 	bge.w	8001566 <keyboard_translate+0x1d2>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f240 424c 	movw	r2, #1100	@ 0x44c
 8001404:	4293      	cmp	r3, r2
 8001406:	da0f      	bge.n	8001428 <keyboard_translate+0x94>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 800140e:	f280 80aa 	bge.w	8001566 <keyboard_translate+0x1d2>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001418:	da28      	bge.n	800146c <keyboard_translate+0xd8>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2b09      	cmp	r3, #9
 800141e:	dc7b      	bgt.n	8001518 <keyboard_translate+0x184>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2b00      	cmp	r3, #0
 8001424:	da5e      	bge.n	80014e4 <keyboard_translate+0x150>
			break;
		case 1111:
			return 'D';
			break;
		default:
			break;
 8001426:	e09e      	b.n	8001566 <keyboard_translate+0x1d2>
	switch (value){
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800142e:	2b0b      	cmp	r3, #11
 8001430:	f200 8099 	bhi.w	8001566 <keyboard_translate+0x1d2>
 8001434:	a201      	add	r2, pc, #4	@ (adr r2, 800143c <keyboard_translate+0xa8>)
 8001436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800143a:	bf00      	nop
 800143c:	08001557 	.word	0x08001557
 8001440:	0800155b 	.word	0x0800155b
 8001444:	08001567 	.word	0x08001567
 8001448:	08001567 	.word	0x08001567
 800144c:	08001567 	.word	0x08001567
 8001450:	08001567 	.word	0x08001567
 8001454:	08001567 	.word	0x08001567
 8001458:	08001567 	.word	0x08001567
 800145c:	08001567 	.word	0x08001567
 8001460:	08001567 	.word	0x08001567
 8001464:	0800155f 	.word	0x0800155f
 8001468:	08001563 	.word	0x08001563
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001472:	2b0b      	cmp	r3, #11
 8001474:	d877      	bhi.n	8001566 <keyboard_translate+0x1d2>
 8001476:	a201      	add	r2, pc, #4	@ (adr r2, 800147c <keyboard_translate+0xe8>)
 8001478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800147c:	08001547 	.word	0x08001547
 8001480:	0800154b 	.word	0x0800154b
 8001484:	08001567 	.word	0x08001567
 8001488:	08001567 	.word	0x08001567
 800148c:	08001567 	.word	0x08001567
 8001490:	08001567 	.word	0x08001567
 8001494:	08001567 	.word	0x08001567
 8001498:	08001567 	.word	0x08001567
 800149c:	08001567 	.word	0x08001567
 80014a0:	08001567 	.word	0x08001567
 80014a4:	0800154f 	.word	0x0800154f
 80014a8:	08001553 	.word	0x08001553
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3b40      	subs	r3, #64	@ 0x40
 80014b0:	2b09      	cmp	r3, #9
 80014b2:	d858      	bhi.n	8001566 <keyboard_translate+0x1d2>
 80014b4:	a201      	add	r2, pc, #4	@ (adr r2, 80014bc <keyboard_translate+0x128>)
 80014b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ba:	bf00      	nop
 80014bc:	08001537 	.word	0x08001537
 80014c0:	0800153b 	.word	0x0800153b
 80014c4:	08001567 	.word	0x08001567
 80014c8:	08001567 	.word	0x08001567
 80014cc:	08001567 	.word	0x08001567
 80014d0:	08001567 	.word	0x08001567
 80014d4:	08001567 	.word	0x08001567
 80014d8:	08001567 	.word	0x08001567
 80014dc:	0800153f 	.word	0x0800153f
 80014e0:	08001543 	.word	0x08001543
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2b09      	cmp	r3, #9
 80014e8:	d83d      	bhi.n	8001566 <keyboard_translate+0x1d2>
 80014ea:	a201      	add	r2, pc, #4	@ (adr r2, 80014f0 <keyboard_translate+0x15c>)
 80014ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014f0:	08001527 	.word	0x08001527
 80014f4:	0800152b 	.word	0x0800152b
 80014f8:	08001567 	.word	0x08001567
 80014fc:	08001567 	.word	0x08001567
 8001500:	08001567 	.word	0x08001567
 8001504:	08001567 	.word	0x08001567
 8001508:	08001567 	.word	0x08001567
 800150c:	08001567 	.word	0x08001567
 8001510:	0800152f 	.word	0x0800152f
 8001514:	08001533 	.word	0x08001533
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2b49      	cmp	r3, #73	@ 0x49
 800151c:	dc23      	bgt.n	8001566 <keyboard_translate+0x1d2>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2b40      	cmp	r3, #64	@ 0x40
 8001522:	dac3      	bge.n	80014ac <keyboard_translate+0x118>
			break;
 8001524:	e01f      	b.n	8001566 <keyboard_translate+0x1d2>
			return '0';
 8001526:	2330      	movs	r3, #48	@ 0x30
 8001528:	e01f      	b.n	800156a <keyboard_translate+0x1d6>
			return '1';
 800152a:	2331      	movs	r3, #49	@ 0x31
 800152c:	e01d      	b.n	800156a <keyboard_translate+0x1d6>
			return '2';
 800152e:	2332      	movs	r3, #50	@ 0x32
 8001530:	e01b      	b.n	800156a <keyboard_translate+0x1d6>
			return '3';
 8001532:	2333      	movs	r3, #51	@ 0x33
 8001534:	e019      	b.n	800156a <keyboard_translate+0x1d6>
			return '4';
 8001536:	2334      	movs	r3, #52	@ 0x34
 8001538:	e017      	b.n	800156a <keyboard_translate+0x1d6>
			return '5';
 800153a:	2335      	movs	r3, #53	@ 0x35
 800153c:	e015      	b.n	800156a <keyboard_translate+0x1d6>
			return '6';
 800153e:	2336      	movs	r3, #54	@ 0x36
 8001540:	e013      	b.n	800156a <keyboard_translate+0x1d6>
			return '7';
 8001542:	2337      	movs	r3, #55	@ 0x37
 8001544:	e011      	b.n	800156a <keyboard_translate+0x1d6>
			return '8';
 8001546:	2338      	movs	r3, #56	@ 0x38
 8001548:	e00f      	b.n	800156a <keyboard_translate+0x1d6>
			return '9';
 800154a:	2339      	movs	r3, #57	@ 0x39
 800154c:	e00d      	b.n	800156a <keyboard_translate+0x1d6>
			return '*';
 800154e:	232a      	movs	r3, #42	@ 0x2a
 8001550:	e00b      	b.n	800156a <keyboard_translate+0x1d6>
			return '#';
 8001552:	2323      	movs	r3, #35	@ 0x23
 8001554:	e009      	b.n	800156a <keyboard_translate+0x1d6>
			return 'A';
 8001556:	2341      	movs	r3, #65	@ 0x41
 8001558:	e007      	b.n	800156a <keyboard_translate+0x1d6>
			return 'B';
 800155a:	2342      	movs	r3, #66	@ 0x42
 800155c:	e005      	b.n	800156a <keyboard_translate+0x1d6>
			return 'C';
 800155e:	2343      	movs	r3, #67	@ 0x43
 8001560:	e003      	b.n	800156a <keyboard_translate+0x1d6>
			return 'D';
 8001562:	2344      	movs	r3, #68	@ 0x44
 8001564:	e001      	b.n	800156a <keyboard_translate+0x1d6>
			break;
 8001566:	bf00      	nop
	}

	return 0;
 8001568:	2300      	movs	r3, #0

}
 800156a:	4618      	mov	r0, r3
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40020000 	.word	0x40020000

08001578 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void) {
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(Keyboard_IT_Pin);
 800157c:	2004      	movs	r0, #4
 800157e:	f002 fd65 	bl	800404c <HAL_GPIO_EXTI_IRQHandler>
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}

08001586 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8001586:	b4b0      	push	{r4, r5, r7}
 8001588:	b08b      	sub	sp, #44	@ 0x2c
 800158a:	af00      	add	r7, sp, #0
 800158c:	60f8      	str	r0, [r7, #12]
 800158e:	60b9      	str	r1, [r7, #8]
 8001590:	607a      	str	r2, [r7, #4]
 8001592:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8001594:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001598:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	lcd.en_pin = en_pin;
 800159c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80015a0:	84bb      	strh	r3, [r7, #36]	@ 0x24
	lcd.en_port = en_port;
 80015a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015a4:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 80015a6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80015a8:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	613b      	str	r3, [r7, #16]

	return lcd;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	461d      	mov	r5, r3
 80015ba:	f107 0410 	add.w	r4, r7, #16
 80015be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015c6:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80015ca:	68f8      	ldr	r0, [r7, #12]
 80015cc:	372c      	adds	r7, #44	@ 0x2c
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bcb0      	pop	{r4, r5, r7}
 80015d2:	4770      	bx	lr

080015d4 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(void) {
 80015d4:	b5b0      	push	{r4, r5, r7, lr}
 80015d6:	b090      	sub	sp, #64	@ 0x40
 80015d8:	af04      	add	r7, sp, #16

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015da:	f107 031c 	add.w	r3, r7, #28
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	609a      	str	r2, [r3, #8]
 80015e6:	60da      	str	r2, [r3, #12]
 80015e8:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	61bb      	str	r3, [r7, #24]
 80015ee:	4b2c      	ldr	r3, [pc, #176]	@ (80016a0 <Lcd_init+0xcc>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f2:	4a2b      	ldr	r2, [pc, #172]	@ (80016a0 <Lcd_init+0xcc>)
 80015f4:	f043 0310 	orr.w	r3, r3, #16
 80015f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015fa:	4b29      	ldr	r3, [pc, #164]	@ (80016a0 <Lcd_init+0xcc>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fe:	f003 0310 	and.w	r3, r3, #16
 8001602:	61bb      	str	r3, [r7, #24]
 8001604:	69bb      	ldr	r3, [r7, #24]

	/* Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, LCD_data7_Pin|LCD_data6_Pin|LCD_data5_Pin|LCD_data4_Pin
 8001606:	2200      	movs	r2, #0
 8001608:	f64a 3180 	movw	r1, #43904	@ 0xab80
 800160c:	4825      	ldr	r0, [pc, #148]	@ (80016a4 <Lcd_init+0xd0>)
 800160e:	f002 fd03 	bl	8004018 <HAL_GPIO_WritePin>
						  	|LCD_RS_Pin|LCD_EN_Pin, GPIO_PIN_RESET);

	/* Configure GPIO pins for the LCD screen */
	GPIO_InitStruct.Pin = LCD_data7_Pin|LCD_data6_Pin|LCD_data5_Pin|LCD_data4_Pin
 8001612:	f64a 3380 	movw	r3, #43904	@ 0xab80
 8001616:	61fb      	str	r3, [r7, #28]
						  |LCD_RS_Pin|LCD_EN_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001618:	2301      	movs	r3, #1
 800161a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001620:	2300      	movs	r3, #0
 8001622:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001624:	f107 031c 	add.w	r3, r7, #28
 8001628:	4619      	mov	r1, r3
 800162a:	481e      	ldr	r0, [pc, #120]	@ (80016a4 <Lcd_init+0xd0>)
 800162c:	f002 fb40 	bl	8003cb0 <HAL_GPIO_Init>



	/* LCD configuration */
	lcd = Lcd_create(ports, pins, LCD_RS_GPIO_Port, LCD_RS_Pin, LCD_EN_GPIO_Port, LCD_EN_Pin, LCD_4_BIT_MODE);
 8001630:	4c1d      	ldr	r4, [pc, #116]	@ (80016a8 <Lcd_init+0xd4>)
 8001632:	4638      	mov	r0, r7
 8001634:	2300      	movs	r3, #0
 8001636:	9303      	str	r3, [sp, #12]
 8001638:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800163c:	9302      	str	r3, [sp, #8]
 800163e:	4b19      	ldr	r3, [pc, #100]	@ (80016a4 <Lcd_init+0xd0>)
 8001640:	9301      	str	r3, [sp, #4]
 8001642:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001646:	9300      	str	r3, [sp, #0]
 8001648:	4b16      	ldr	r3, [pc, #88]	@ (80016a4 <Lcd_init+0xd0>)
 800164a:	4a18      	ldr	r2, [pc, #96]	@ (80016ac <Lcd_init+0xd8>)
 800164c:	4918      	ldr	r1, [pc, #96]	@ (80016b0 <Lcd_init+0xdc>)
 800164e:	f7ff ff9a 	bl	8001586 <Lcd_create>
 8001652:	4625      	mov	r5, r4
 8001654:	463c      	mov	r4, r7
 8001656:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001658:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800165a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800165e:	e885 0003 	stmia.w	r5, {r0, r1}

	if(lcd.mode == LCD_4_BIT_MODE) {
 8001662:	4b11      	ldr	r3, [pc, #68]	@ (80016a8 <Lcd_init+0xd4>)
 8001664:	7d9b      	ldrb	r3, [r3, #22]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d109      	bne.n	800167e <Lcd_init+0xaa>
		lcd_write_command(0x33);
 800166a:	2033      	movs	r0, #51	@ 0x33
 800166c:	f000 f896 	bl	800179c <lcd_write_command>
		lcd_write_command(0x32);
 8001670:	2032      	movs	r0, #50	@ 0x32
 8001672:	f000 f893 	bl	800179c <lcd_write_command>
		lcd_write_command(FUNCTION_SET | OPT_N);				// 4-bit mode
 8001676:	2028      	movs	r0, #40	@ 0x28
 8001678:	f000 f890 	bl	800179c <lcd_write_command>
 800167c:	e002      	b.n	8001684 <Lcd_init+0xb0>
	}
	else {
		lcd_write_command(FUNCTION_SET | OPT_DL | OPT_N);
 800167e:	2038      	movs	r0, #56	@ 0x38
 8001680:	f000 f88c 	bl	800179c <lcd_write_command>
	}

	lcd_write_command(CLEAR_DISPLAY);						// Clear screen
 8001684:	2001      	movs	r0, #1
 8001686:	f000 f889 	bl	800179c <lcd_write_command>
	lcd_write_command(DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 800168a:	200c      	movs	r0, #12
 800168c:	f000 f886 	bl	800179c <lcd_write_command>
	lcd_write_command(ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8001690:	2006      	movs	r0, #6
 8001692:	f000 f883 	bl	800179c <lcd_write_command>
}
 8001696:	bf00      	nop
 8001698:	3730      	adds	r7, #48	@ 0x30
 800169a:	46bd      	mov	sp, r7
 800169c:	bdb0      	pop	{r4, r5, r7, pc}
 800169e:	bf00      	nop
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40021000 	.word	0x40021000
 80016a8:	20000210 	.word	0x20000210
 80016ac:	20000014 	.word	0x20000014
 80016b0:	20000004 	.word	0x20000004

080016b4 <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(int number) {
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
	char buffer[11];
	sprintf(buffer, "%d", number);
 80016bc:	f107 030c 	add.w	r3, r7, #12
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	4906      	ldr	r1, [pc, #24]	@ (80016dc <Lcd_int+0x28>)
 80016c4:	4618      	mov	r0, r3
 80016c6:	f005 fcfb 	bl	80070c0 <siprintf>

	Lcd_string(buffer);
 80016ca:	f107 030c 	add.w	r3, r7, #12
 80016ce:	4618      	mov	r0, r3
 80016d0:	f000 f824 	bl	800171c <Lcd_string>
}
 80016d4:	bf00      	nop
 80016d6:	3718      	adds	r7, #24
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	08009330 	.word	0x08009330

080016e0 <Lcd_float>:

/**
 * Write a floating-point number on the current position
 */
void Lcd_float(float number) {
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08a      	sub	sp, #40	@ 0x28
 80016e4:	af02      	add	r7, sp, #8
 80016e6:	ed87 0a01 	vstr	s0, [r7, #4]
    char buffer[20];
    snprintf(buffer, sizeof(buffer), "%.6g", number);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f7fe ff2c 	bl	8000548 <__aeabi_f2d>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	f107 000c 	add.w	r0, r7, #12
 80016f8:	e9cd 2300 	strd	r2, r3, [sp]
 80016fc:	4a06      	ldr	r2, [pc, #24]	@ (8001718 <Lcd_float+0x38>)
 80016fe:	2114      	movs	r1, #20
 8001700:	f005 fcaa 	bl	8007058 <sniprintf>

    Lcd_string(buffer);
 8001704:	f107 030c 	add.w	r3, r7, #12
 8001708:	4618      	mov	r0, r3
 800170a:	f000 f807 	bl	800171c <Lcd_string>
}
 800170e:	bf00      	nop
 8001710:	3720      	adds	r7, #32
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	08009334 	.word	0x08009334

0800171c <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(char * string) {
 800171c:	b590      	push	{r4, r7, lr}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < strlen(string); i++) {
 8001724:	2300      	movs	r3, #0
 8001726:	73fb      	strb	r3, [r7, #15]
 8001728:	e009      	b.n	800173e <Lcd_string+0x22>
			lcd_write_data(string[i]);
 800172a:	7bfb      	ldrb	r3, [r7, #15]
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	4413      	add	r3, r2
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f000 f85e 	bl	80017f4 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++) {
 8001738:	7bfb      	ldrb	r3, [r7, #15]
 800173a:	3301      	adds	r3, #1
 800173c:	73fb      	strb	r3, [r7, #15]
 800173e:	7bfc      	ldrb	r4, [r7, #15]
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f7fe fd95 	bl	8000270 <strlen>
 8001746:	4603      	mov	r3, r0
 8001748:	429c      	cmp	r4, r3
 800174a:	d3ee      	bcc.n	800172a <Lcd_string+0xe>
	}
}
 800174c:	bf00      	nop
 800174e:	bf00      	nop
 8001750:	3714      	adds	r7, #20
 8001752:	46bd      	mov	sp, r7
 8001754:	bd90      	pop	{r4, r7, pc}
	...

08001758 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(uint8_t row, uint8_t col) {
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	460a      	mov	r2, r1
 8001762:	71fb      	strb	r3, [r7, #7]
 8001764:	4613      	mov	r3, r2
 8001766:	71bb      	strb	r3, [r7, #6]
	#ifdef LCD20xN
	lcd_write_command(SET_DDRAM_ADDR + ROW_20[row] + col);
 8001768:	79fb      	ldrb	r3, [r7, #7]
 800176a:	4a07      	ldr	r2, [pc, #28]	@ (8001788 <Lcd_cursor+0x30>)
 800176c:	5cd2      	ldrb	r2, [r2, r3]
 800176e:	79bb      	ldrb	r3, [r7, #6]
 8001770:	4413      	add	r3, r2
 8001772:	b2db      	uxtb	r3, r3
 8001774:	3b80      	subs	r3, #128	@ 0x80
 8001776:	b2db      	uxtb	r3, r3
 8001778:	4618      	mov	r0, r3
 800177a:	f000 f80f 	bl	800179c <lcd_write_command>
	#endif

	#ifdef LCD16xN
	lcd_write_command(SET_DDRAM_ADDR + ROW_16[row] + col);
	#endif
}
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	0800937c 	.word	0x0800937c

0800178c <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(void) {
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
	lcd_write_command(CLEAR_DISPLAY);
 8001790:	2001      	movs	r0, #1
 8001792:	f000 f803 	bl	800179c <lcd_write_command>
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
	...

0800179c <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(uint8_t command)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(lcd.rs_port, lcd.rs_pin, LCD_COMMAND_REG);		// Write to command register
 80017a6:	4b12      	ldr	r3, [pc, #72]	@ (80017f0 <lcd_write_command+0x54>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	4a11      	ldr	r2, [pc, #68]	@ (80017f0 <lcd_write_command+0x54>)
 80017ac:	8991      	ldrh	r1, [r2, #12]
 80017ae:	2200      	movs	r2, #0
 80017b0:	4618      	mov	r0, r3
 80017b2:	f002 fc31 	bl	8004018 <HAL_GPIO_WritePin>

	if(lcd.mode == LCD_4_BIT_MODE)
 80017b6:	4b0e      	ldr	r3, [pc, #56]	@ (80017f0 <lcd_write_command+0x54>)
 80017b8:	7d9b      	ldrb	r3, [r3, #22]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d10f      	bne.n	80017de <lcd_write_command+0x42>
	{
		lcd_write((command >> 4), LCD_NIB);
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	091b      	lsrs	r3, r3, #4
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	2104      	movs	r1, #4
 80017c6:	4618      	mov	r0, r3
 80017c8:	f000 f840 	bl	800184c <lcd_write>
		lcd_write(command & 0x0F, LCD_NIB);
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	f003 030f 	and.w	r3, r3, #15
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	2104      	movs	r1, #4
 80017d6:	4618      	mov	r0, r3
 80017d8:	f000 f838 	bl	800184c <lcd_write>
	else
	{
		lcd_write(command, LCD_BYTE);
	}

}
 80017dc:	e004      	b.n	80017e8 <lcd_write_command+0x4c>
		lcd_write(command, LCD_BYTE);
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	2108      	movs	r1, #8
 80017e2:	4618      	mov	r0, r3
 80017e4:	f000 f832 	bl	800184c <lcd_write>
}
 80017e8:	bf00      	nop
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20000210 	.word	0x20000210

080017f4 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(uint8_t data)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(lcd.rs_port, lcd.rs_pin, LCD_DATA_REG);			// Write to data register
 80017fe:	4b12      	ldr	r3, [pc, #72]	@ (8001848 <lcd_write_data+0x54>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	4a11      	ldr	r2, [pc, #68]	@ (8001848 <lcd_write_data+0x54>)
 8001804:	8991      	ldrh	r1, [r2, #12]
 8001806:	2201      	movs	r2, #1
 8001808:	4618      	mov	r0, r3
 800180a:	f002 fc05 	bl	8004018 <HAL_GPIO_WritePin>

	if(lcd.mode == LCD_4_BIT_MODE)
 800180e:	4b0e      	ldr	r3, [pc, #56]	@ (8001848 <lcd_write_data+0x54>)
 8001810:	7d9b      	ldrb	r3, [r3, #22]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d10f      	bne.n	8001836 <lcd_write_data+0x42>
	{
		lcd_write(data >> 4, LCD_NIB);
 8001816:	79fb      	ldrb	r3, [r7, #7]
 8001818:	091b      	lsrs	r3, r3, #4
 800181a:	b2db      	uxtb	r3, r3
 800181c:	2104      	movs	r1, #4
 800181e:	4618      	mov	r0, r3
 8001820:	f000 f814 	bl	800184c <lcd_write>
		lcd_write(data & 0x0F, LCD_NIB);
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	f003 030f 	and.w	r3, r3, #15
 800182a:	b2db      	uxtb	r3, r3
 800182c:	2104      	movs	r1, #4
 800182e:	4618      	mov	r0, r3
 8001830:	f000 f80c 	bl	800184c <lcd_write>
	else
	{
		lcd_write(data, LCD_BYTE);
	}

}
 8001834:	e004      	b.n	8001840 <lcd_write_data+0x4c>
		lcd_write(data, LCD_BYTE);
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	2108      	movs	r1, #8
 800183a:	4618      	mov	r0, r3
 800183c:	f000 f806 	bl	800184c <lcd_write>
}
 8001840:	bf00      	nop
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20000210 	.word	0x20000210

0800184c <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(uint8_t data, uint8_t len)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	460a      	mov	r2, r1
 8001856:	71fb      	strb	r3, [r7, #7]
 8001858:	4613      	mov	r3, r2
 800185a:	71bb      	strb	r3, [r7, #6]
	for(uint8_t i = 0; i < len; i++)
 800185c:	2300      	movs	r3, #0
 800185e:	73fb      	strb	r3, [r7, #15]
 8001860:	e019      	b.n	8001896 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd.data_port[i], lcd.data_pin[i], (data >> i) & 0x01);
 8001862:	4b1a      	ldr	r3, [pc, #104]	@ (80018cc <lcd_write+0x80>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	7bfb      	ldrb	r3, [r7, #15]
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4413      	add	r3, r2
 800186c:	6818      	ldr	r0, [r3, #0]
 800186e:	4b17      	ldr	r3, [pc, #92]	@ (80018cc <lcd_write+0x80>)
 8001870:	685a      	ldr	r2, [r3, #4]
 8001872:	7bfb      	ldrb	r3, [r7, #15]
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	4413      	add	r3, r2
 8001878:	8819      	ldrh	r1, [r3, #0]
 800187a:	79fa      	ldrb	r2, [r7, #7]
 800187c:	7bfb      	ldrb	r3, [r7, #15]
 800187e:	fa42 f303 	asr.w	r3, r2, r3
 8001882:	b2db      	uxtb	r3, r3
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	b2db      	uxtb	r3, r3
 800188a:	461a      	mov	r2, r3
 800188c:	f002 fbc4 	bl	8004018 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8001890:	7bfb      	ldrb	r3, [r7, #15]
 8001892:	3301      	adds	r3, #1
 8001894:	73fb      	strb	r3, [r7, #15]
 8001896:	7bfa      	ldrb	r2, [r7, #15]
 8001898:	79bb      	ldrb	r3, [r7, #6]
 800189a:	429a      	cmp	r2, r3
 800189c:	d3e1      	bcc.n	8001862 <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd.en_port, lcd.en_pin, 1);
 800189e:	4b0b      	ldr	r3, [pc, #44]	@ (80018cc <lcd_write+0x80>)
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	4a0a      	ldr	r2, [pc, #40]	@ (80018cc <lcd_write+0x80>)
 80018a4:	8a91      	ldrh	r1, [r2, #20]
 80018a6:	2201      	movs	r2, #1
 80018a8:	4618      	mov	r0, r3
 80018aa:	f002 fbb5 	bl	8004018 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80018ae:	2001      	movs	r0, #1
 80018b0:	f001 f946 	bl	8002b40 <HAL_Delay>
	HAL_GPIO_WritePin(lcd.en_port, lcd.en_pin, 0); 		// Data receive on falling edge
 80018b4:	4b05      	ldr	r3, [pc, #20]	@ (80018cc <lcd_write+0x80>)
 80018b6:	691b      	ldr	r3, [r3, #16]
 80018b8:	4a04      	ldr	r2, [pc, #16]	@ (80018cc <lcd_write+0x80>)
 80018ba:	8a91      	ldrh	r1, [r2, #20]
 80018bc:	2200      	movs	r2, #0
 80018be:	4618      	mov	r0, r3
 80018c0:	f002 fbaa 	bl	8004018 <HAL_GPIO_WritePin>
}
 80018c4:	bf00      	nop
 80018c6:	3710      	adds	r7, #16
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20000210 	.word	0x20000210

080018d0 <Menu_init>:

#include "menu.h"

int stateMenu = 0;

void Menu_init(void) {
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0

	  Lcd_init();
 80018d4:	f7ff fe7e 	bl	80015d4 <Lcd_init>
	  Keyboard_init();
 80018d8:	f7ff fcb2 	bl	8001240 <Keyboard_init>

	  Lcd_clear();
 80018dc:	f7ff ff56 	bl	800178c <Lcd_clear>
	  Lcd_cursor(0,0);
 80018e0:	2100      	movs	r1, #0
 80018e2:	2000      	movs	r0, #0
 80018e4:	f7ff ff38 	bl	8001758 <Lcd_cursor>
	  Lcd_string("Starting...");
 80018e8:	4806      	ldr	r0, [pc, #24]	@ (8001904 <Menu_init+0x34>)
 80018ea:	f7ff ff17 	bl	800171c <Lcd_string>

	  HAL_Delay(500);
 80018ee:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80018f2:	f001 f925 	bl	8002b40 <HAL_Delay>

	  stateMenu = 0;
 80018f6:	4b04      	ldr	r3, [pc, #16]	@ (8001908 <Menu_init+0x38>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]

	  Lcd_clear();
 80018fc:	f7ff ff46 	bl	800178c <Lcd_clear>

}
 8001900:	bf00      	nop
 8001902:	bd80      	pop	{r7, pc}
 8001904:	0800933c 	.word	0x0800933c
 8001908:	20000228 	.word	0x20000228

0800190c <Menu_refresh>:

void Menu_refresh(double gyro, double pot) {
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	ed87 0b02 	vstr	d0, [r7, #8]
 8001916:	ed87 1b00 	vstr	d1, [r7]

	Lcd_cursor(0, 0);
 800191a:	2100      	movs	r1, #0
 800191c:	2000      	movs	r0, #0
 800191e:	f7ff ff1b 	bl	8001758 <Lcd_cursor>
	Lcd_float(pot);
 8001922:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001926:	f7ff f93f 	bl	8000ba8 <__aeabi_d2f>
 800192a:	4603      	mov	r3, r0
 800192c:	ee00 3a10 	vmov	s0, r3
 8001930:	f7ff fed6 	bl	80016e0 <Lcd_float>
	Lcd_string(" | ");
 8001934:	480f      	ldr	r0, [pc, #60]	@ (8001974 <Menu_refresh+0x68>)
 8001936:	f7ff fef1 	bl	800171c <Lcd_string>
	Lcd_float(gyro);
 800193a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800193e:	f7ff f933 	bl	8000ba8 <__aeabi_d2f>
 8001942:	4603      	mov	r3, r0
 8001944:	ee00 3a10 	vmov	s0, r3
 8001948:	f7ff feca 	bl	80016e0 <Lcd_float>
	Lcd_string("           ");
 800194c:	480a      	ldr	r0, [pc, #40]	@ (8001978 <Menu_refresh+0x6c>)
 800194e:	f7ff fee5 	bl	800171c <Lcd_string>

	Lcd_cursor(1, 0);
 8001952:	2100      	movs	r1, #0
 8001954:	2001      	movs	r0, #1
 8001956:	f7ff feff 	bl	8001758 <Lcd_cursor>
	Lcd_int(stateMenu);
 800195a:	4b08      	ldr	r3, [pc, #32]	@ (800197c <Menu_refresh+0x70>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff fea8 	bl	80016b4 <Lcd_int>
	Lcd_string("    ");
 8001964:	4806      	ldr	r0, [pc, #24]	@ (8001980 <Menu_refresh+0x74>)
 8001966:	f7ff fed9 	bl	800171c <Lcd_string>

}
 800196a:	bf00      	nop
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	08009348 	.word	0x08009348
 8001978:	0800934c 	.word	0x0800934c
 800197c:	20000228 	.word	0x20000228
 8001980:	08009358 	.word	0x08009358

08001984 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	80fb      	strh	r3, [r7, #6]
	char key = keyboard_translate();
 800198e:	f7ff fd01 	bl	8001394 <keyboard_translate>
 8001992:	4603      	mov	r3, r0
 8001994:	73fb      	strb	r3, [r7, #15]

	if(key == 'A'){
 8001996:	7bfb      	ldrb	r3, [r7, #15]
 8001998:	2b41      	cmp	r3, #65	@ 0x41
 800199a:	d10d      	bne.n	80019b8 <HAL_GPIO_EXTI_Callback+0x34>
		stateMenu += 10;
 800199c:	4b2d      	ldr	r3, [pc, #180]	@ (8001a54 <HAL_GPIO_EXTI_Callback+0xd0>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	330a      	adds	r3, #10
 80019a2:	4a2c      	ldr	r2, [pc, #176]	@ (8001a54 <HAL_GPIO_EXTI_Callback+0xd0>)
 80019a4:	6013      	str	r3, [r2, #0]
		if(stateMenu > 40){stateMenu -= 10;}
 80019a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001a54 <HAL_GPIO_EXTI_Callback+0xd0>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2b28      	cmp	r3, #40	@ 0x28
 80019ac:	dd04      	ble.n	80019b8 <HAL_GPIO_EXTI_Callback+0x34>
 80019ae:	4b29      	ldr	r3, [pc, #164]	@ (8001a54 <HAL_GPIO_EXTI_Callback+0xd0>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	3b0a      	subs	r3, #10
 80019b4:	4a27      	ldr	r2, [pc, #156]	@ (8001a54 <HAL_GPIO_EXTI_Callback+0xd0>)
 80019b6:	6013      	str	r3, [r2, #0]
	}
	if(key == 'B'){
 80019b8:	7bfb      	ldrb	r3, [r7, #15]
 80019ba:	2b42      	cmp	r3, #66	@ 0x42
 80019bc:	d10d      	bne.n	80019da <HAL_GPIO_EXTI_Callback+0x56>
		stateMenu -= 10;
 80019be:	4b25      	ldr	r3, [pc, #148]	@ (8001a54 <HAL_GPIO_EXTI_Callback+0xd0>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	3b0a      	subs	r3, #10
 80019c4:	4a23      	ldr	r2, [pc, #140]	@ (8001a54 <HAL_GPIO_EXTI_Callback+0xd0>)
 80019c6:	6013      	str	r3, [r2, #0]
		if(stateMenu < 0){stateMenu += 10;}
 80019c8:	4b22      	ldr	r3, [pc, #136]	@ (8001a54 <HAL_GPIO_EXTI_Callback+0xd0>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	da04      	bge.n	80019da <HAL_GPIO_EXTI_Callback+0x56>
 80019d0:	4b20      	ldr	r3, [pc, #128]	@ (8001a54 <HAL_GPIO_EXTI_Callback+0xd0>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	330a      	adds	r3, #10
 80019d6:	4a1f      	ldr	r2, [pc, #124]	@ (8001a54 <HAL_GPIO_EXTI_Callback+0xd0>)
 80019d8:	6013      	str	r3, [r2, #0]
	}
	if(key == 'C'){
 80019da:	7bfb      	ldrb	r3, [r7, #15]
 80019dc:	2b43      	cmp	r3, #67	@ 0x43
 80019de:	d118      	bne.n	8001a12 <HAL_GPIO_EXTI_Callback+0x8e>
		stateMenu += 1;
 80019e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001a54 <HAL_GPIO_EXTI_Callback+0xd0>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	3301      	adds	r3, #1
 80019e6:	4a1b      	ldr	r2, [pc, #108]	@ (8001a54 <HAL_GPIO_EXTI_Callback+0xd0>)
 80019e8:	6013      	str	r3, [r2, #0]
		if(stateMenu%10 > 5){stateMenu -= 1;}
 80019ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001a54 <HAL_GPIO_EXTI_Callback+0xd0>)
 80019ec:	6819      	ldr	r1, [r3, #0]
 80019ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001a58 <HAL_GPIO_EXTI_Callback+0xd4>)
 80019f0:	fb83 2301 	smull	r2, r3, r3, r1
 80019f4:	109a      	asrs	r2, r3, #2
 80019f6:	17cb      	asrs	r3, r1, #31
 80019f8:	1ad2      	subs	r2, r2, r3
 80019fa:	4613      	mov	r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	4413      	add	r3, r2
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	1aca      	subs	r2, r1, r3
 8001a04:	2a05      	cmp	r2, #5
 8001a06:	dd04      	ble.n	8001a12 <HAL_GPIO_EXTI_Callback+0x8e>
 8001a08:	4b12      	ldr	r3, [pc, #72]	@ (8001a54 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	4a11      	ldr	r2, [pc, #68]	@ (8001a54 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001a10:	6013      	str	r3, [r2, #0]
	}
	if(key == 'D'){
 8001a12:	7bfb      	ldrb	r3, [r7, #15]
 8001a14:	2b44      	cmp	r3, #68	@ 0x44
 8001a16:	d118      	bne.n	8001a4a <HAL_GPIO_EXTI_Callback+0xc6>
		stateMenu -= 1;
 8001a18:	4b0e      	ldr	r3, [pc, #56]	@ (8001a54 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	3b01      	subs	r3, #1
 8001a1e:	4a0d      	ldr	r2, [pc, #52]	@ (8001a54 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001a20:	6013      	str	r3, [r2, #0]
		if(stateMenu%10 < 0){stateMenu += 1;}
 8001a22:	4b0c      	ldr	r3, [pc, #48]	@ (8001a54 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001a24:	6819      	ldr	r1, [r3, #0]
 8001a26:	4b0c      	ldr	r3, [pc, #48]	@ (8001a58 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001a28:	fb83 2301 	smull	r2, r3, r3, r1
 8001a2c:	109a      	asrs	r2, r3, #2
 8001a2e:	17cb      	asrs	r3, r1, #31
 8001a30:	1ad2      	subs	r2, r2, r3
 8001a32:	4613      	mov	r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	4413      	add	r3, r2
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	1aca      	subs	r2, r1, r3
 8001a3c:	2a00      	cmp	r2, #0
 8001a3e:	da04      	bge.n	8001a4a <HAL_GPIO_EXTI_Callback+0xc6>
 8001a40:	4b04      	ldr	r3, [pc, #16]	@ (8001a54 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	3301      	adds	r3, #1
 8001a46:	4a03      	ldr	r2, [pc, #12]	@ (8001a54 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001a48:	6013      	str	r3, [r2, #0]
	}

}
 8001a4a:	bf00      	nop
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	20000228 	.word	0x20000228
 8001a58:	66666667 	.word	0x66666667

08001a5c <Clock_init>:
void Motor_SetTime(uint16_t usTime){
	TIM4->CCR1 = TIM4->ARR * usTime / 10000;
}


void Clock_init(void) {
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b094      	sub	sp, #80	@ 0x50
 8001a60:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a62:	f107 0320 	add.w	r3, r7, #32
 8001a66:	2230      	movs	r2, #48	@ 0x30
 8001a68:	2100      	movs	r1, #0
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f005 fb8b 	bl	8007186 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a70:	f107 030c 	add.w	r3, r7, #12
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
 8001a7e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	*/
	__HAL_RCC_PWR_CLK_ENABLE();
 8001a80:	2300      	movs	r3, #0
 8001a82:	60bb      	str	r3, [r7, #8]
 8001a84:	4b28      	ldr	r3, [pc, #160]	@ (8001b28 <Clock_init+0xcc>)
 8001a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a88:	4a27      	ldr	r2, [pc, #156]	@ (8001b28 <Clock_init+0xcc>)
 8001a8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a90:	4b25      	ldr	r3, [pc, #148]	@ (8001b28 <Clock_init+0xcc>)
 8001a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a98:	60bb      	str	r3, [r7, #8]
 8001a9a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	607b      	str	r3, [r7, #4]
 8001aa0:	4b22      	ldr	r3, [pc, #136]	@ (8001b2c <Clock_init+0xd0>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a21      	ldr	r2, [pc, #132]	@ (8001b2c <Clock_init+0xd0>)
 8001aa6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001aaa:	6013      	str	r3, [r2, #0]
 8001aac:	4b1f      	ldr	r3, [pc, #124]	@ (8001b2c <Clock_init+0xd0>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ab4:	607b      	str	r3, [r7, #4]
 8001ab6:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001abc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ac0:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ac6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001acc:	2308      	movs	r3, #8
 8001ace:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001ad0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001ad4:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ada:	2304      	movs	r3, #4
 8001adc:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ade:	f107 0320 	add.w	r3, r7, #32
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f002 faca 	bl	800407c <HAL_RCC_OscConfig>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <Clock_init+0x96>
	{
		MOTOR_Error_Handler();
 8001aee:	f000 f941 	bl	8001d74 <MOTOR_Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001af2:	230f      	movs	r3, #15
 8001af4:	60fb      	str	r3, [r7, #12]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001af6:	2302      	movs	r3, #2
 8001af8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001afa:	2300      	movs	r3, #0
 8001afc:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001afe:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001b02:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b08:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b0a:	f107 030c 	add.w	r3, r7, #12
 8001b0e:	2105      	movs	r1, #5
 8001b10:	4618      	mov	r0, r3
 8001b12:	f002 fd2b 	bl	800456c <HAL_RCC_ClockConfig>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <Clock_init+0xc4>
	{
		MOTOR_Error_Handler();
 8001b1c:	f000 f92a 	bl	8001d74 <MOTOR_Error_Handler>
	}
}
 8001b20:	bf00      	nop
 8001b22:	3750      	adds	r7, #80	@ 0x50
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	40007000 	.word	0x40007000

08001b30 <Motor_init>:


void Motor_init(void) {
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b096      	sub	sp, #88	@ 0x58
 8001b34:	af00      	add	r7, sp, #0

	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	4b65      	ldr	r3, [pc, #404]	@ (8001cd0 <Motor_init+0x1a0>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3e:	4a64      	ldr	r2, [pc, #400]	@ (8001cd0 <Motor_init+0x1a0>)
 8001b40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b46:	4b62      	ldr	r3, [pc, #392]	@ (8001cd0 <Motor_init+0x1a0>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	60bb      	str	r3, [r7, #8]
 8001b56:	4b5e      	ldr	r3, [pc, #376]	@ (8001cd0 <Motor_init+0x1a0>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5a:	4a5d      	ldr	r2, [pc, #372]	@ (8001cd0 <Motor_init+0x1a0>)
 8001b5c:	f043 0308 	orr.w	r3, r3, #8
 8001b60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b62:	4b5b      	ldr	r3, [pc, #364]	@ (8001cd0 <Motor_init+0x1a0>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b66:	f003 0308 	and.w	r3, r3, #8
 8001b6a:	60bb      	str	r3, [r7, #8]
 8001b6c:	68bb      	ldr	r3, [r7, #8]

	__HAL_RCC_TIM4_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	607b      	str	r3, [r7, #4]
 8001b72:	4b57      	ldr	r3, [pc, #348]	@ (8001cd0 <Motor_init+0x1a0>)
 8001b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b76:	4a56      	ldr	r2, [pc, #344]	@ (8001cd0 <Motor_init+0x1a0>)
 8001b78:	f043 0304 	orr.w	r3, r3, #4
 8001b7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b7e:	4b54      	ldr	r3, [pc, #336]	@ (8001cd0 <Motor_init+0x1a0>)
 8001b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b82:	f003 0304 	and.w	r3, r3, #4
 8001b86:	607b      	str	r3, [r7, #4]
 8001b88:	687b      	ldr	r3, [r7, #4]

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b8a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	605a      	str	r2, [r3, #4]
 8001b94:	609a      	str	r2, [r3, #8]
 8001b96:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b98:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001ba2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	605a      	str	r2, [r3, #4]
 8001bac:	609a      	str	r2, [r3, #8]
 8001bae:	60da      	str	r2, [r3, #12]
 8001bb0:	611a      	str	r2, [r3, #16]
 8001bb2:	615a      	str	r2, [r3, #20]
 8001bb4:	619a      	str	r2, [r3, #24]

	htim4.Instance = TIM4;
 8001bb6:	4b47      	ldr	r3, [pc, #284]	@ (8001cd4 <Motor_init+0x1a4>)
 8001bb8:	4a47      	ldr	r2, [pc, #284]	@ (8001cd8 <Motor_init+0x1a8>)
 8001bba:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 204;
 8001bbc:	4b45      	ldr	r3, [pc, #276]	@ (8001cd4 <Motor_init+0x1a4>)
 8001bbe:	22cc      	movs	r2, #204	@ 0xcc
 8001bc0:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bc2:	4b44      	ldr	r3, [pc, #272]	@ (8001cd4 <Motor_init+0x1a4>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 4095;
 8001bc8:	4b42      	ldr	r3, [pc, #264]	@ (8001cd4 <Motor_init+0x1a4>)
 8001bca:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001bce:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bd0:	4b40      	ldr	r3, [pc, #256]	@ (8001cd4 <Motor_init+0x1a4>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bd6:	4b3f      	ldr	r3, [pc, #252]	@ (8001cd4 <Motor_init+0x1a4>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	619a      	str	r2, [r3, #24]

	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8001bdc:	483d      	ldr	r0, [pc, #244]	@ (8001cd4 <Motor_init+0x1a4>)
 8001bde:	f002 fee5 	bl	80049ac <HAL_TIM_Base_Init>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <Motor_init+0xbc>
		MOTOR_Error_Handler();
 8001be8:	f000 f8c4 	bl	8001d74 <MOTOR_Error_Handler>
	}

    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001bec:	2200      	movs	r2, #0
 8001bee:	2100      	movs	r1, #0
 8001bf0:	201e      	movs	r0, #30
 8001bf2:	f001 fcb6 	bl	8003562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001bf6:	201e      	movs	r0, #30
 8001bf8:	f001 fccf 	bl	800359a <HAL_NVIC_EnableIRQ>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bfc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c00:	64bb      	str	r3, [r7, #72]	@ 0x48

	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8001c02:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001c06:	4619      	mov	r1, r3
 8001c08:	4832      	ldr	r0, [pc, #200]	@ (8001cd4 <Motor_init+0x1a4>)
 8001c0a:	f003 fa49 	bl	80050a0 <HAL_TIM_ConfigClockSource>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <Motor_init+0xe8>
		MOTOR_Error_Handler();
 8001c14:	f000 f8ae 	bl	8001d74 <MOTOR_Error_Handler>
	}

	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 8001c18:	482e      	ldr	r0, [pc, #184]	@ (8001cd4 <Motor_init+0x1a4>)
 8001c1a:	f002 ff20 	bl	8004a5e <HAL_TIM_PWM_Init>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <Motor_init+0xf8>
		MOTOR_Error_Handler();
 8001c24:	f000 f8a6 	bl	8001d74 <MOTOR_Error_Handler>
	}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	643b      	str	r3, [r7, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	647b      	str	r3, [r7, #68]	@ 0x44

	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK) {
 8001c30:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001c34:	4619      	mov	r1, r3
 8001c36:	4827      	ldr	r0, [pc, #156]	@ (8001cd4 <Motor_init+0x1a4>)
 8001c38:	f003 fe48 	bl	80058cc <HAL_TIMEx_MasterConfigSynchronization>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <Motor_init+0x116>
		MOTOR_Error_Handler();
 8001c42:	f000 f897 	bl	8001d74 <MOTOR_Error_Handler>
	}

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c46:	2360      	movs	r3, #96	@ 0x60
 8001c48:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigOC.Pulse = 0;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c52:	2300      	movs	r3, #0
 8001c54:	637b      	str	r3, [r7, #52]	@ 0x34

	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8001c56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	481d      	ldr	r0, [pc, #116]	@ (8001cd4 <Motor_init+0x1a4>)
 8001c60:	f003 f95c 	bl	8004f1c <HAL_TIM_PWM_ConfigChannel>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <Motor_init+0x13e>
		MOTOR_Error_Handler();
 8001c6a:	f000 f883 	bl	8001d74 <MOTOR_Error_Handler>
	}

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6e:	f107 0310 	add.w	r3, r7, #16
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	605a      	str	r2, [r3, #4]
 8001c78:	609a      	str	r2, [r3, #8]
 8001c7a:	60da      	str	r2, [r3, #12]
 8001c7c:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001c7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c84:	2302      	movs	r3, #2
 8001c86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001c90:	2302      	movs	r3, #2
 8001c92:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c94:	f107 0310 	add.w	r3, r7, #16
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4810      	ldr	r0, [pc, #64]	@ (8001cdc <Motor_init+0x1ac>)
 8001c9c:	f002 f808 	bl	8003cb0 <HAL_GPIO_Init>

	HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1);
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	480c      	ldr	r0, [pc, #48]	@ (8001cd4 <Motor_init+0x1a4>)
 8001ca4:	f002 ff34 	bl	8004b10 <HAL_TIM_PWM_Start_IT>

	TIM4->CCR1 = 410;
 8001ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd8 <Motor_init+0x1a8>)
 8001caa:	f44f 72cd 	mov.w	r2, #410	@ 0x19a
 8001cae:	635a      	str	r2, [r3, #52]	@ 0x34

	PWM_flag = 0;
 8001cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce0 <Motor_init+0x1b0>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	801a      	strh	r2, [r3, #0]
	old_PWM_flag = 0xFFFF;
 8001cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce4 <Motor_init+0x1b4>)
 8001cb8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001cbc:	801a      	strh	r2, [r3, #0]

	HAL_Delay(3000);
 8001cbe:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001cc2:	f000 ff3d 	bl	8002b40 <HAL_Delay>
}
 8001cc6:	bf00      	nop
 8001cc8:	3758      	adds	r7, #88	@ 0x58
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	2000022c 	.word	0x2000022c
 8001cd8:	40000800 	.word	0x40000800
 8001cdc:	40020c00 	.word	0x40020c00
 8001ce0:	20000274 	.word	0x20000274
 8001ce4:	20000276 	.word	0x20000276

08001ce8 <Wait_Until>:

void Wait_Until(uint16_t time) {
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	80fb      	strh	r3, [r7, #6]

	time /= 10;
 8001cf2:	88fb      	ldrh	r3, [r7, #6]
 8001cf4:	4a13      	ldr	r2, [pc, #76]	@ (8001d44 <Wait_Until+0x5c>)
 8001cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cfa:	08db      	lsrs	r3, r3, #3
 8001cfc:	80fb      	strh	r3, [r7, #6]

	if(old_PWM_flag == 0xFFFF){PWM_flag = time;}
 8001cfe:	4b12      	ldr	r3, [pc, #72]	@ (8001d48 <Wait_Until+0x60>)
 8001d00:	881b      	ldrh	r3, [r3, #0]
 8001d02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d102      	bne.n	8001d10 <Wait_Until+0x28>
 8001d0a:	4a10      	ldr	r2, [pc, #64]	@ (8001d4c <Wait_Until+0x64>)
 8001d0c:	88fb      	ldrh	r3, [r7, #6]
 8001d0e:	8013      	strh	r3, [r2, #0]

	if(PWM_flag > old_PWM_flag){ return; }
 8001d10:	4b0e      	ldr	r3, [pc, #56]	@ (8001d4c <Wait_Until+0x64>)
 8001d12:	881a      	ldrh	r2, [r3, #0]
 8001d14:	4b0c      	ldr	r3, [pc, #48]	@ (8001d48 <Wait_Until+0x60>)
 8001d16:	881b      	ldrh	r3, [r3, #0]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d80c      	bhi.n	8001d36 <Wait_Until+0x4e>

	while(PWM_flag != 0);
 8001d1c:	bf00      	nop
 8001d1e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d4c <Wait_Until+0x64>)
 8001d20:	881b      	ldrh	r3, [r3, #0]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1fb      	bne.n	8001d1e <Wait_Until+0x36>

	PWM_flag = time;
 8001d26:	4a09      	ldr	r2, [pc, #36]	@ (8001d4c <Wait_Until+0x64>)
 8001d28:	88fb      	ldrh	r3, [r7, #6]
 8001d2a:	8013      	strh	r3, [r2, #0]
	old_PWM_flag = PWM_flag;
 8001d2c:	4b07      	ldr	r3, [pc, #28]	@ (8001d4c <Wait_Until+0x64>)
 8001d2e:	881a      	ldrh	r2, [r3, #0]
 8001d30:	4b05      	ldr	r3, [pc, #20]	@ (8001d48 <Wait_Until+0x60>)
 8001d32:	801a      	strh	r2, [r3, #0]
 8001d34:	e000      	b.n	8001d38 <Wait_Until+0x50>
	if(PWM_flag > old_PWM_flag){ return; }
 8001d36:	bf00      	nop
}
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	cccccccd 	.word	0xcccccccd
 8001d48:	20000276 	.word	0x20000276
 8001d4c:	20000274 	.word	0x20000274

08001d50 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void) {
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
	PWM_flag--;
 8001d54:	4b05      	ldr	r3, [pc, #20]	@ (8001d6c <TIM4_IRQHandler+0x1c>)
 8001d56:	881b      	ldrh	r3, [r3, #0]
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	4b03      	ldr	r3, [pc, #12]	@ (8001d6c <TIM4_IRQHandler+0x1c>)
 8001d5e:	801a      	strh	r2, [r3, #0]
	HAL_TIM_IRQHandler(&htim4);
 8001d60:	4803      	ldr	r0, [pc, #12]	@ (8001d70 <TIM4_IRQHandler+0x20>)
 8001d62:	f002 ffeb 	bl	8004d3c <HAL_TIM_IRQHandler>
}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	20000274 	.word	0x20000274
 8001d70:	2000022c 	.word	0x2000022c

08001d74 <MOTOR_Error_Handler>:

void MOTOR_Error_Handler(void) {
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
    while(1);
 8001d78:	bf00      	nop
 8001d7a:	e7fd      	b.n	8001d78 <MOTOR_Error_Handler+0x4>

08001d7c <Sensor_init>:

/*********************************************************/
/*********************** Sensor **************************/
/*********************************************************/

void Sensor_init(void) {
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0

	ADC_init();
 8001d80:	f000 f826 	bl	8001dd0 <ADC_init>
	IMU_init();
 8001d84:	f000 f9d2 	bl	800212c <IMU_init>
}
 8001d88:	bf00      	nop
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <Sensor_GetAngle>:

double Sensor_GetAngle(void) {
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
	return ADC_Calculate_Pot();
 8001d90:	f000 f8ce 	bl	8001f30 <ADC_Calculate_Pot>
 8001d94:	eeb0 7a40 	vmov.f32	s14, s0
 8001d98:	eef0 7a60 	vmov.f32	s15, s1
}
 8001d9c:	eeb0 0a47 	vmov.f32	s0, s14
 8001da0:	eef0 0a67 	vmov.f32	s1, s15
 8001da4:	bd80      	pop	{r7, pc}
	...

08001da8 <Sensor_GetGyro>:

double Sensor_GetGyro(void) {
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
	IMU_Calculate_Gyro();
 8001dac:	f000 fa74 	bl	8002298 <IMU_Calculate_Gyro>
	return gyro[1];
 8001db0:	4b04      	ldr	r3, [pc, #16]	@ (8001dc4 <Sensor_GetGyro+0x1c>)
 8001db2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001db6:	ec43 2b17 	vmov	d7, r2, r3
}
 8001dba:	eeb0 0a47 	vmov.f32	s0, s14
 8001dbe:	eef0 0a67 	vmov.f32	s1, s15
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	20000670 	.word	0x20000670

08001dc8 <Sensor_Error_Handler>:

double Sensor_GetMotorSpeed(void) {
	return 0;
}

void Sensor_Error_Handler(void) {
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
    while(1);
 8001dcc:	bf00      	nop
 8001dce:	e7fd      	b.n	8001dcc <Sensor_Error_Handler+0x4>

08001dd0 <ADC_init>:

uint32_t ADC_data_buffer[ADC_MEAN_VALUE];
uint32_t ADC_Start_Angle;


void ADC_init(void) {
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	607b      	str	r3, [r7, #4]
 8001dda:	4b3a      	ldr	r3, [pc, #232]	@ (8001ec4 <ADC_init+0xf4>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dde:	4a39      	ldr	r2, [pc, #228]	@ (8001ec4 <ADC_init+0xf4>)
 8001de0:	f043 0304 	orr.w	r3, r3, #4
 8001de4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001de6:	4b37      	ldr	r3, [pc, #220]	@ (8001ec4 <ADC_init+0xf4>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dea:	f003 0304 	and.w	r3, r3, #4
 8001dee:	607b      	str	r3, [r7, #4]
 8001df0:	687b      	ldr	r3, [r7, #4]

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	603b      	str	r3, [r7, #0]
 8001df6:	4b33      	ldr	r3, [pc, #204]	@ (8001ec4 <ADC_init+0xf4>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfa:	4a32      	ldr	r2, [pc, #200]	@ (8001ec4 <ADC_init+0xf4>)
 8001dfc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001e00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e02:	4b30      	ldr	r3, [pc, #192]	@ (8001ec4 <ADC_init+0xf4>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e0a:	603b      	str	r3, [r7, #0]
 8001e0c:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001e0e:	2200      	movs	r2, #0
 8001e10:	2100      	movs	r1, #0
 8001e12:	203a      	movs	r0, #58	@ 0x3a
 8001e14:	f001 fba5 	bl	8003562 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001e18:	203a      	movs	r0, #58	@ 0x3a
 8001e1a:	f001 fbbe 	bl	800359a <HAL_NVIC_EnableIRQ>

	ADC_ChannelConfTypeDef sConfig = {0};
 8001e1e:	f107 0308 	add.w	r3, r7, #8
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	605a      	str	r2, [r3, #4]
 8001e28:	609a      	str	r2, [r3, #8]
 8001e2a:	60da      	str	r2, [r3, #12]

	hadc2.Instance = ADC2;
 8001e2c:	4b26      	ldr	r3, [pc, #152]	@ (8001ec8 <ADC_init+0xf8>)
 8001e2e:	4a27      	ldr	r2, [pc, #156]	@ (8001ecc <ADC_init+0xfc>)
 8001e30:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001e32:	4b25      	ldr	r3, [pc, #148]	@ (8001ec8 <ADC_init+0xf8>)
 8001e34:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001e38:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001e3a:	4b23      	ldr	r3, [pc, #140]	@ (8001ec8 <ADC_init+0xf8>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	609a      	str	r2, [r3, #8]
	hadc2.Init.ScanConvMode = DISABLE;
 8001e40:	4b21      	ldr	r3, [pc, #132]	@ (8001ec8 <ADC_init+0xf8>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	611a      	str	r2, [r3, #16]
	hadc2.Init.ContinuousConvMode = ENABLE;
 8001e46:	4b20      	ldr	r3, [pc, #128]	@ (8001ec8 <ADC_init+0xf8>)
 8001e48:	2201      	movs	r2, #1
 8001e4a:	761a      	strb	r2, [r3, #24]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001e4c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ec8 <ADC_init+0xf8>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 2020 	strb.w	r2, [r3, #32]
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e54:	4b1c      	ldr	r3, [pc, #112]	@ (8001ec8 <ADC_init+0xf8>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e5a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ec8 <ADC_init+0xf8>)
 8001e5c:	4a1c      	ldr	r2, [pc, #112]	@ (8001ed0 <ADC_init+0x100>)
 8001e5e:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e60:	4b19      	ldr	r3, [pc, #100]	@ (8001ec8 <ADC_init+0xf8>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	60da      	str	r2, [r3, #12]
	hadc2.Init.NbrOfConversion = 1;
 8001e66:	4b18      	ldr	r3, [pc, #96]	@ (8001ec8 <ADC_init+0xf8>)
 8001e68:	2201      	movs	r2, #1
 8001e6a:	61da      	str	r2, [r3, #28]
	hadc2.Init.DMAContinuousRequests = ENABLE;
 8001e6c:	4b16      	ldr	r3, [pc, #88]	@ (8001ec8 <ADC_init+0xf8>)
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e74:	4b14      	ldr	r3, [pc, #80]	@ (8001ec8 <ADC_init+0xf8>)
 8001e76:	2201      	movs	r2, #1
 8001e78:	615a      	str	r2, [r3, #20]

	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 8001e7a:	4813      	ldr	r0, [pc, #76]	@ (8001ec8 <ADC_init+0xf8>)
 8001e7c:	f000 fe84 	bl	8002b88 <HAL_ADC_Init>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <ADC_init+0xba>
		Sensor_Error_Handler();
 8001e86:	f7ff ff9f 	bl	8001dc8 <Sensor_Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	*/
	sConfig.Channel = ADC_CHANNEL_10;
 8001e8a:	230a      	movs	r3, #10
 8001e8c:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001e92:	2300      	movs	r3, #0
 8001e94:	613b      	str	r3, [r7, #16]

	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8001e96:	f107 0308 	add.w	r3, r7, #8
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	480a      	ldr	r0, [pc, #40]	@ (8001ec8 <ADC_init+0xf8>)
 8001e9e:	f000 ffe5 	bl	8002e6c <HAL_ADC_ConfigChannel>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <ADC_init+0xdc>
		Sensor_Error_Handler();
 8001ea8:	f7ff ff8e 	bl	8001dc8 <Sensor_Error_Handler>
	}

	HAL_ADC_Start_DMA(&hadc2, ADC_data_buffer, ADC_MEAN_VALUE);
 8001eac:	2264      	movs	r2, #100	@ 0x64
 8001eae:	4909      	ldr	r1, [pc, #36]	@ (8001ed4 <ADC_init+0x104>)
 8001eb0:	4805      	ldr	r0, [pc, #20]	@ (8001ec8 <ADC_init+0xf8>)
 8001eb2:	f000 fead 	bl	8002c10 <HAL_ADC_Start_DMA>

	ADC_init_PotOffset();
 8001eb6:	f000 f80f 	bl	8001ed8 <ADC_init_PotOffset>
}
 8001eba:	bf00      	nop
 8001ebc:	3718      	adds	r7, #24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	20000278 	.word	0x20000278
 8001ecc:	40012100 	.word	0x40012100
 8001ed0:	0f000001 	.word	0x0f000001
 8001ed4:	20000320 	.word	0x20000320

08001ed8 <ADC_init_PotOffset>:


void ADC_init_PotOffset(void) {
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0

	for(int i = 0; i < ADC_MEAN_VALUE; i++){
 8001ede:	2300      	movs	r3, #0
 8001ee0:	607b      	str	r3, [r7, #4]
 8001ee2:	e00b      	b.n	8001efc <ADC_init_PotOffset+0x24>
		ADC_Start_Angle += ADC_data_buffer[i];
 8001ee4:	4a0e      	ldr	r2, [pc, #56]	@ (8001f20 <ADC_init_PotOffset+0x48>)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001eec:	4b0d      	ldr	r3, [pc, #52]	@ (8001f24 <ADC_init_PotOffset+0x4c>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	4a0c      	ldr	r2, [pc, #48]	@ (8001f24 <ADC_init_PotOffset+0x4c>)
 8001ef4:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < ADC_MEAN_VALUE; i++){
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	607b      	str	r3, [r7, #4]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b63      	cmp	r3, #99	@ 0x63
 8001f00:	ddf0      	ble.n	8001ee4 <ADC_init_PotOffset+0xc>
	}

	ADC_Start_Angle /= ADC_MEAN_VALUE;
 8001f02:	4b08      	ldr	r3, [pc, #32]	@ (8001f24 <ADC_init_PotOffset+0x4c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a08      	ldr	r2, [pc, #32]	@ (8001f28 <ADC_init_PotOffset+0x50>)
 8001f08:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0c:	095b      	lsrs	r3, r3, #5
 8001f0e:	4a05      	ldr	r2, [pc, #20]	@ (8001f24 <ADC_init_PotOffset+0x4c>)
 8001f10:	6013      	str	r3, [r2, #0]
}
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	20000320 	.word	0x20000320
 8001f24:	200004b0 	.word	0x200004b0
 8001f28:	51eb851f 	.word	0x51eb851f
 8001f2c:	00000000 	.word	0x00000000

08001f30 <ADC_Calculate_Pot>:

double ADC_Calculate_Pot(void) {
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0

	uint32_t mean_adc_value = 0;
 8001f36:	2300      	movs	r3, #0
 8001f38:	60fb      	str	r3, [r7, #12]

	for(int i = 0; i < ADC_MEAN_VALUE; i++){
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60bb      	str	r3, [r7, #8]
 8001f3e:	e009      	b.n	8001f54 <ADC_Calculate_Pot+0x24>
		mean_adc_value += ADC_data_buffer[i];
 8001f40:	4a37      	ldr	r2, [pc, #220]	@ (8002020 <ADC_Calculate_Pot+0xf0>)
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f48:	68fa      	ldr	r2, [r7, #12]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < ADC_MEAN_VALUE; i++){
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	3301      	adds	r3, #1
 8001f52:	60bb      	str	r3, [r7, #8]
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	2b63      	cmp	r3, #99	@ 0x63
 8001f58:	ddf2      	ble.n	8001f40 <ADC_Calculate_Pot+0x10>
	}

	mean_adc_value /= ADC_MEAN_VALUE;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	4a31      	ldr	r2, [pc, #196]	@ (8002024 <ADC_Calculate_Pot+0xf4>)
 8001f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f62:	095b      	lsrs	r3, r3, #5
 8001f64:	60fb      	str	r3, [r7, #12]

	double angle;

	if ( mean_adc_value < 1600 ) {
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8001f6c:	d215      	bcs.n	8001f9a <ADC_Calculate_Pot+0x6a>
		angle = ADC_COEF_A_L * mean_adc_value + ADC_COEF_B_L;
 8001f6e:	68f8      	ldr	r0, [r7, #12]
 8001f70:	f7fe fac8 	bl	8000504 <__aeabi_ui2d>
 8001f74:	a320      	add	r3, pc, #128	@ (adr r3, 8001ff8 <ADC_Calculate_Pot+0xc8>)
 8001f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7a:	f7fe fb3d 	bl	80005f8 <__aeabi_dmul>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	460b      	mov	r3, r1
 8001f82:	4610      	mov	r0, r2
 8001f84:	4619      	mov	r1, r3
 8001f86:	a31e      	add	r3, pc, #120	@ (adr r3, 8002000 <ADC_Calculate_Pot+0xd0>)
 8001f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f8c:	f7fe f97c 	bl	8000288 <__aeabi_dsub>
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	e9c7 2300 	strd	r2, r3, [r7]
 8001f98:	e018      	b.n	8001fcc <ADC_Calculate_Pot+0x9c>
	}
	else if ( mean_adc_value >= 1600 ) {
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8001fa0:	d314      	bcc.n	8001fcc <ADC_Calculate_Pot+0x9c>
		angle = ADC_COEF_A_H * mean_adc_value + ADC_COEF_B_H;
 8001fa2:	68f8      	ldr	r0, [r7, #12]
 8001fa4:	f7fe faae 	bl	8000504 <__aeabi_ui2d>
 8001fa8:	a317      	add	r3, pc, #92	@ (adr r3, 8002008 <ADC_Calculate_Pot+0xd8>)
 8001faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fae:	f7fe fb23 	bl	80005f8 <__aeabi_dmul>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	4610      	mov	r0, r2
 8001fb8:	4619      	mov	r1, r3
 8001fba:	a315      	add	r3, pc, #84	@ (adr r3, 8002010 <ADC_Calculate_Pot+0xe0>)
 8001fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc0:	f7fe f962 	bl	8000288 <__aeabi_dsub>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	e9c7 2300 	strd	r2, r3, [r7]
	}

	angle *= M_PI/180;
 8001fcc:	a312      	add	r3, pc, #72	@ (adr r3, 8002018 <ADC_Calculate_Pot+0xe8>)
 8001fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001fd6:	f7fe fb0f 	bl	80005f8 <__aeabi_dmul>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	460b      	mov	r3, r1
 8001fde:	e9c7 2300 	strd	r2, r3, [r7]

	return angle;
 8001fe2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001fe6:	ec43 2b17 	vmov	d7, r2, r3
}
 8001fea:	eeb0 0a47 	vmov.f32	s0, s14
 8001fee:	eef0 0a67 	vmov.f32	s1, s15
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	ff972474 	.word	0xff972474
 8001ffc:	3fab7e90 	.word	0x3fab7e90
 8002000:	a5119ce0 	.word	0xa5119ce0
 8002004:	401381bd 	.word	0x401381bd
 8002008:	f212d773 	.word	0xf212d773
 800200c:	3fb6cf41 	.word	0x3fb6cf41
 8002010:	25aee632 	.word	0x25aee632
 8002014:	404ec3e4 	.word	0x404ec3e4
 8002018:	a2529d39 	.word	0xa2529d39
 800201c:	3f91df46 	.word	0x3f91df46
 8002020:	20000320 	.word	0x20000320
 8002024:	51eb851f 	.word	0x51eb851f

08002028 <HAL_ADC_MspInit>:


void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc) {
 8002028:	b580      	push	{r7, lr}
 800202a:	b08a      	sub	sp, #40	@ 0x28
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002030:	f107 0314 	add.w	r3, r7, #20
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	605a      	str	r2, [r3, #4]
 800203a:	609a      	str	r2, [r3, #8]
 800203c:	60da      	str	r2, [r3, #12]
 800203e:	611a      	str	r2, [r3, #16]

  if(hadc->Instance==ADC2)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a2f      	ldr	r2, [pc, #188]	@ (8002104 <HAL_ADC_MspInit+0xdc>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d158      	bne.n	80020fc <HAL_ADC_MspInit+0xd4>
  {
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	613b      	str	r3, [r7, #16]
 800204e:	4b2e      	ldr	r3, [pc, #184]	@ (8002108 <HAL_ADC_MspInit+0xe0>)
 8002050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002052:	4a2d      	ldr	r2, [pc, #180]	@ (8002108 <HAL_ADC_MspInit+0xe0>)
 8002054:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002058:	6453      	str	r3, [r2, #68]	@ 0x44
 800205a:	4b2b      	ldr	r3, [pc, #172]	@ (8002108 <HAL_ADC_MspInit+0xe0>)
 800205c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800205e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002062:	613b      	str	r3, [r7, #16]
 8002064:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	4b27      	ldr	r3, [pc, #156]	@ (8002108 <HAL_ADC_MspInit+0xe0>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206e:	4a26      	ldr	r2, [pc, #152]	@ (8002108 <HAL_ADC_MspInit+0xe0>)
 8002070:	f043 0304 	orr.w	r3, r3, #4
 8002074:	6313      	str	r3, [r2, #48]	@ 0x30
 8002076:	4b24      	ldr	r3, [pc, #144]	@ (8002108 <HAL_ADC_MspInit+0xe0>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207a:	f003 0304 	and.w	r3, r3, #4
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PC0     ------> ADC2_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002082:	2301      	movs	r3, #1
 8002084:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002086:	2303      	movs	r3, #3
 8002088:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208a:	2300      	movs	r3, #0
 800208c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800208e:	f107 0314 	add.w	r3, r7, #20
 8002092:	4619      	mov	r1, r3
 8002094:	481d      	ldr	r0, [pc, #116]	@ (800210c <HAL_ADC_MspInit+0xe4>)
 8002096:	f001 fe0b 	bl	8003cb0 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 800209a:	4b1d      	ldr	r3, [pc, #116]	@ (8002110 <HAL_ADC_MspInit+0xe8>)
 800209c:	4a1d      	ldr	r2, [pc, #116]	@ (8002114 <HAL_ADC_MspInit+0xec>)
 800209e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80020a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002110 <HAL_ADC_MspInit+0xe8>)
 80020a2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80020a6:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020a8:	4b19      	ldr	r3, [pc, #100]	@ (8002110 <HAL_ADC_MspInit+0xe8>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80020ae:	4b18      	ldr	r3, [pc, #96]	@ (8002110 <HAL_ADC_MspInit+0xe8>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80020b4:	4b16      	ldr	r3, [pc, #88]	@ (8002110 <HAL_ADC_MspInit+0xe8>)
 80020b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020ba:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80020bc:	4b14      	ldr	r3, [pc, #80]	@ (8002110 <HAL_ADC_MspInit+0xe8>)
 80020be:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80020c2:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80020c4:	4b12      	ldr	r3, [pc, #72]	@ (8002110 <HAL_ADC_MspInit+0xe8>)
 80020c6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80020ca:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80020cc:	4b10      	ldr	r3, [pc, #64]	@ (8002110 <HAL_ADC_MspInit+0xe8>)
 80020ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020d2:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80020d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002110 <HAL_ADC_MspInit+0xe8>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020da:	4b0d      	ldr	r3, [pc, #52]	@ (8002110 <HAL_ADC_MspInit+0xe8>)
 80020dc:	2200      	movs	r2, #0
 80020de:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80020e0:	480b      	ldr	r0, [pc, #44]	@ (8002110 <HAL_ADC_MspInit+0xe8>)
 80020e2:	f001 fa75 	bl	80035d0 <HAL_DMA_Init>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <HAL_ADC_MspInit+0xc8>
    {
      Sensor_Error_Handler();
 80020ec:	f7ff fe6c 	bl	8001dc8 <Sensor_Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a07      	ldr	r2, [pc, #28]	@ (8002110 <HAL_ADC_MspInit+0xe8>)
 80020f4:	639a      	str	r2, [r3, #56]	@ 0x38
 80020f6:	4a06      	ldr	r2, [pc, #24]	@ (8002110 <HAL_ADC_MspInit+0xe8>)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6393      	str	r3, [r2, #56]	@ 0x38
  }
}
 80020fc:	bf00      	nop
 80020fe:	3728      	adds	r7, #40	@ 0x28
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40012100 	.word	0x40012100
 8002108:	40023800 	.word	0x40023800
 800210c:	40020800 	.word	0x40020800
 8002110:	200002c0 	.word	0x200002c0
 8002114:	40026440 	.word	0x40026440

08002118 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void) {
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_adc2);
 800211c:	4802      	ldr	r0, [pc, #8]	@ (8002128 <DMA2_Stream2_IRQHandler+0x10>)
 800211e:	f001 fb5d 	bl	80037dc <HAL_DMA_IRQHandler>
}
 8002122:	bf00      	nop
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	200002c0 	.word	0x200002c0

0800212c <IMU_init>:

double acc[3], gyro[3], angle[3];
double gyro_offset[3] = {0};


void IMU_init(void) {
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	60bb      	str	r3, [r7, #8]
 8002136:	4b2f      	ldr	r3, [pc, #188]	@ (80021f4 <IMU_init+0xc8>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213a:	4a2e      	ldr	r2, [pc, #184]	@ (80021f4 <IMU_init+0xc8>)
 800213c:	f043 0308 	orr.w	r3, r3, #8
 8002140:	6313      	str	r3, [r2, #48]	@ 0x30
 8002142:	4b2c      	ldr	r3, [pc, #176]	@ (80021f4 <IMU_init+0xc8>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002146:	f003 0308 	and.w	r3, r3, #8
 800214a:	60bb      	str	r3, [r7, #8]
 800214c:	68bb      	ldr	r3, [r7, #8]

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800214e:	2300      	movs	r3, #0
 8002150:	607b      	str	r3, [r7, #4]
 8002152:	4b28      	ldr	r3, [pc, #160]	@ (80021f4 <IMU_init+0xc8>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002156:	4a27      	ldr	r2, [pc, #156]	@ (80021f4 <IMU_init+0xc8>)
 8002158:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800215c:	6313      	str	r3, [r2, #48]	@ 0x30
 800215e:	4b25      	ldr	r3, [pc, #148]	@ (80021f4 <IMU_init+0xc8>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002162:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002166:	607b      	str	r3, [r7, #4]
 8002168:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800216a:	2200      	movs	r2, #0
 800216c:	2100      	movs	r1, #0
 800216e:	2010      	movs	r0, #16
 8002170:	f001 f9f7 	bl	8003562 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002174:	2010      	movs	r0, #16
 8002176:	f001 fa10 	bl	800359a <HAL_NVIC_EnableIRQ>

	//HAL_DMA_IRQHandler(&hdma_usart2_rx);

	/* UART2 configuration */
	huart2.Instance = USART2;
 800217a:	4b1f      	ldr	r3, [pc, #124]	@ (80021f8 <IMU_init+0xcc>)
 800217c:	4a1f      	ldr	r2, [pc, #124]	@ (80021fc <IMU_init+0xd0>)
 800217e:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8002180:	4b1d      	ldr	r3, [pc, #116]	@ (80021f8 <IMU_init+0xcc>)
 8002182:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002186:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002188:	4b1b      	ldr	r3, [pc, #108]	@ (80021f8 <IMU_init+0xcc>)
 800218a:	2200      	movs	r2, #0
 800218c:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800218e:	4b1a      	ldr	r3, [pc, #104]	@ (80021f8 <IMU_init+0xcc>)
 8002190:	2200      	movs	r2, #0
 8002192:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002194:	4b18      	ldr	r3, [pc, #96]	@ (80021f8 <IMU_init+0xcc>)
 8002196:	2200      	movs	r2, #0
 8002198:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800219a:	4b17      	ldr	r3, [pc, #92]	@ (80021f8 <IMU_init+0xcc>)
 800219c:	220c      	movs	r2, #12
 800219e:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021a0:	4b15      	ldr	r3, [pc, #84]	@ (80021f8 <IMU_init+0xcc>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021a6:	4b14      	ldr	r3, [pc, #80]	@ (80021f8 <IMU_init+0xcc>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80021ac:	4812      	ldr	r0, [pc, #72]	@ (80021f8 <IMU_init+0xcc>)
 80021ae:	f003 fc1d 	bl	80059ec <HAL_UART_Init>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <IMU_init+0x90>
		Sensor_Error_Handler();
 80021b8:	f7ff fe06 	bl	8001dc8 <Sensor_Error_Handler>
	}

    // Send initial commands to IMU
    char gyro_reset[3] = {0xFF, 0xAA, 0x52}; // Angle initialization Z-axis to zero
 80021bc:	4a10      	ldr	r2, [pc, #64]	@ (8002200 <IMU_init+0xd4>)
 80021be:	f107 030c 	add.w	r3, r7, #12
 80021c2:	6812      	ldr	r2, [r2, #0]
 80021c4:	4611      	mov	r1, r2
 80021c6:	8019      	strh	r1, [r3, #0]
 80021c8:	3302      	adds	r3, #2
 80021ca:	0c12      	lsrs	r2, r2, #16
 80021cc:	701a      	strb	r2, [r3, #0]

    HAL_UART_Transmit(&huart2, (uint8_t *)gyro_reset, sizeof(gyro_reset), HAL_MAX_DELAY);
 80021ce:	f107 010c 	add.w	r1, r7, #12
 80021d2:	f04f 33ff 	mov.w	r3, #4294967295
 80021d6:	2203      	movs	r2, #3
 80021d8:	4807      	ldr	r0, [pc, #28]	@ (80021f8 <IMU_init+0xcc>)
 80021da:	f003 fc57 	bl	8005a8c <HAL_UART_Transmit>

    HAL_UART_Receive_DMA(&huart2, IMU_data_buffer, IMU_RECEIVE_DATA_LGTH);
 80021de:	22c8      	movs	r2, #200	@ 0xc8
 80021e0:	4908      	ldr	r1, [pc, #32]	@ (8002204 <IMU_init+0xd8>)
 80021e2:	4805      	ldr	r0, [pc, #20]	@ (80021f8 <IMU_init+0xcc>)
 80021e4:	f003 fcdd 	bl	8005ba2 <HAL_UART_Receive_DMA>

    IMU_init_GyroOffset();
 80021e8:	f000 fa8c 	bl	8002704 <IMU_init_GyroOffset>
}
 80021ec:	bf00      	nop
 80021ee:	3710      	adds	r7, #16
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	40023800 	.word	0x40023800
 80021f8:	200004b4 	.word	0x200004b4
 80021fc:	40004400 	.word	0x40004400
 8002200:	08009360 	.word	0x08009360
 8002204:	2000055c 	.word	0x2000055c

08002208 <IMU_Decode_Gyro_Data>:

uint8_t IMU_Decode_Gyro_Data(void) {
 8002208:	b490      	push	{r4, r7}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0

	uint8_t mean_counter = 0;
 800220e:	2300      	movs	r3, #0
 8002210:	73fb      	strb	r3, [r7, #15]

	for(int i = 0 ; i < IMU_RECEIVE_DATA_LGTH ; i++) {
 8002212:	2300      	movs	r3, #0
 8002214:	60bb      	str	r3, [r7, #8]
 8002216:	e030      	b.n	800227a <IMU_Decode_Gyro_Data+0x72>

		if(IMU_data_buffer[i] == 0x55 && IMU_data_buffer[i+1] == 0x52){
 8002218:	4a1d      	ldr	r2, [pc, #116]	@ (8002290 <IMU_Decode_Gyro_Data+0x88>)
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	4413      	add	r3, r2
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	2b55      	cmp	r3, #85	@ 0x55
 8002222:	d127      	bne.n	8002274 <IMU_Decode_Gyro_Data+0x6c>
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	3301      	adds	r3, #1
 8002228:	4a19      	ldr	r2, [pc, #100]	@ (8002290 <IMU_Decode_Gyro_Data+0x88>)
 800222a:	5cd3      	ldrb	r3, [r2, r3]
 800222c:	2b52      	cmp	r3, #82	@ 0x52
 800222e:	d121      	bne.n	8002274 <IMU_Decode_Gyro_Data+0x6c>

			if(mean_counter >= IMU_GYRO_MEAN_VALUE) break;
 8002230:	7bfb      	ldrb	r3, [r7, #15]
 8002232:	2b05      	cmp	r3, #5
 8002234:	d825      	bhi.n	8002282 <IMU_Decode_Gyro_Data+0x7a>

			for (int j = 0 ; j < IMU_GYRO_DATA_LGTH ; j++) {
 8002236:	2300      	movs	r3, #0
 8002238:	607b      	str	r3, [r7, #4]
 800223a:	e012      	b.n	8002262 <IMU_Decode_Gyro_Data+0x5a>

				IMU_gyro_data[j][mean_counter] = IMU_data_buffer[i + j];
 800223c:	68ba      	ldr	r2, [r7, #8]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4413      	add	r3, r2
 8002242:	7bf9      	ldrb	r1, [r7, #15]
 8002244:	4a12      	ldr	r2, [pc, #72]	@ (8002290 <IMU_Decode_Gyro_Data+0x88>)
 8002246:	5cd4      	ldrb	r4, [r2, r3]
 8002248:	4812      	ldr	r0, [pc, #72]	@ (8002294 <IMU_Decode_Gyro_Data+0x8c>)
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	4613      	mov	r3, r2
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	4413      	add	r3, r2
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	4403      	add	r3, r0
 8002256:	440b      	add	r3, r1
 8002258:	4622      	mov	r2, r4
 800225a:	701a      	strb	r2, [r3, #0]
			for (int j = 0 ; j < IMU_GYRO_DATA_LGTH ; j++) {
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3301      	adds	r3, #1
 8002260:	607b      	str	r3, [r7, #4]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2b07      	cmp	r3, #7
 8002266:	dde9      	ble.n	800223c <IMU_Decode_Gyro_Data+0x34>
			}

			mean_counter++;
 8002268:	7bfb      	ldrb	r3, [r7, #15]
 800226a:	3301      	adds	r3, #1
 800226c:	73fb      	strb	r3, [r7, #15]
			i = i + IMU_GYRO_DATA_LGTH - 1;
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	3307      	adds	r3, #7
 8002272:	60bb      	str	r3, [r7, #8]
	for(int i = 0 ; i < IMU_RECEIVE_DATA_LGTH ; i++) {
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	3301      	adds	r3, #1
 8002278:	60bb      	str	r3, [r7, #8]
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	2bc7      	cmp	r3, #199	@ 0xc7
 800227e:	ddcb      	ble.n	8002218 <IMU_Decode_Gyro_Data+0x10>
 8002280:	e000      	b.n	8002284 <IMU_Decode_Gyro_Data+0x7c>
			if(mean_counter >= IMU_GYRO_MEAN_VALUE) break;
 8002282:	bf00      	nop
		}
	}

	return mean_counter;
 8002284:	7bfb      	ldrb	r3, [r7, #15]
}
 8002286:	4618      	mov	r0, r3
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bc90      	pop	{r4, r7}
 800228e:	4770      	bx	lr
 8002290:	2000055c 	.word	0x2000055c
 8002294:	20000624 	.word	0x20000624

08002298 <IMU_Calculate_Gyro>:

void IMU_Calculate_Gyro(void) {
 8002298:	b5b0      	push	{r4, r5, r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0

	uint8_t mean_counter = IMU_Decode_Gyro_Data();
 800229e:	f7ff ffb3 	bl	8002208 <IMU_Decode_Gyro_Data>
 80022a2:	4603      	mov	r3, r0
 80022a4:	70fb      	strb	r3, [r7, #3]
	double mean_gyro = 0;
 80022a6:	f04f 0200 	mov.w	r2, #0
 80022aa:	f04f 0300 	mov.w	r3, #0
 80022ae:	e9c7 2302 	strd	r2, r3, [r7, #8]

	for(int i = 0 ; i < mean_counter ; i++) {
 80022b2:	2300      	movs	r3, #0
 80022b4:	607b      	str	r3, [r7, #4]
 80022b6:	e041      	b.n	800233c <IMU_Calculate_Gyro+0xa4>
		if(IMU_gyro_data[0][i] == 0x55 && IMU_gyro_data[1][i] == 0x52) {
 80022b8:	4a2c      	ldr	r2, [pc, #176]	@ (800236c <IMU_Calculate_Gyro+0xd4>)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4413      	add	r3, r2
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	2b55      	cmp	r3, #85	@ 0x55
 80022c2:	d138      	bne.n	8002336 <IMU_Calculate_Gyro+0x9e>
 80022c4:	4a29      	ldr	r2, [pc, #164]	@ (800236c <IMU_Calculate_Gyro+0xd4>)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4413      	add	r3, r2
 80022ca:	3306      	adds	r3, #6
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	2b52      	cmp	r3, #82	@ 0x52
 80022d0:	d131      	bne.n	8002336 <IMU_Calculate_Gyro+0x9e>

			int16_t temp_w = ((int16_t)IMU_gyro_data[5][0] << 8) | (int16_t)IMU_gyro_data[4][0];
 80022d2:	4b26      	ldr	r3, [pc, #152]	@ (800236c <IMU_Calculate_Gyro+0xd4>)
 80022d4:	7f9b      	ldrb	r3, [r3, #30]
 80022d6:	021b      	lsls	r3, r3, #8
 80022d8:	b21a      	sxth	r2, r3
 80022da:	4b24      	ldr	r3, [pc, #144]	@ (800236c <IMU_Calculate_Gyro+0xd4>)
 80022dc:	7e1b      	ldrb	r3, [r3, #24]
 80022de:	b21b      	sxth	r3, r3
 80022e0:	4313      	orrs	r3, r2
 80022e2:	803b      	strh	r3, [r7, #0]
			mean_gyro += (-(((double)temp_w) * 2000.0 / 32768.0) - gyro_offset[1]);
 80022e4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7fe f91b 	bl	8000524 <__aeabi_i2d>
 80022ee:	f04f 0200 	mov.w	r2, #0
 80022f2:	4b1f      	ldr	r3, [pc, #124]	@ (8002370 <IMU_Calculate_Gyro+0xd8>)
 80022f4:	f7fe f980 	bl	80005f8 <__aeabi_dmul>
 80022f8:	4602      	mov	r2, r0
 80022fa:	460b      	mov	r3, r1
 80022fc:	4610      	mov	r0, r2
 80022fe:	4619      	mov	r1, r3
 8002300:	f04f 0200 	mov.w	r2, #0
 8002304:	4b1b      	ldr	r3, [pc, #108]	@ (8002374 <IMU_Calculate_Gyro+0xdc>)
 8002306:	f7fe faa1 	bl	800084c <__aeabi_ddiv>
 800230a:	4602      	mov	r2, r0
 800230c:	460b      	mov	r3, r1
 800230e:	4614      	mov	r4, r2
 8002310:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8002314:	4b18      	ldr	r3, [pc, #96]	@ (8002378 <IMU_Calculate_Gyro+0xe0>)
 8002316:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800231a:	4620      	mov	r0, r4
 800231c:	4629      	mov	r1, r5
 800231e:	f7fd ffb3 	bl	8000288 <__aeabi_dsub>
 8002322:	4602      	mov	r2, r0
 8002324:	460b      	mov	r3, r1
 8002326:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800232a:	f7fd ffaf 	bl	800028c <__adddf3>
 800232e:	4602      	mov	r2, r0
 8002330:	460b      	mov	r3, r1
 8002332:	e9c7 2302 	strd	r2, r3, [r7, #8]
	for(int i = 0 ; i < mean_counter ; i++) {
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	3301      	adds	r3, #1
 800233a:	607b      	str	r3, [r7, #4]
 800233c:	78fb      	ldrb	r3, [r7, #3]
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	429a      	cmp	r2, r3
 8002342:	dbb9      	blt.n	80022b8 <IMU_Calculate_Gyro+0x20>
		}
	}
	gyro[1] = mean_gyro / mean_counter;
 8002344:	78fb      	ldrb	r3, [r7, #3]
 8002346:	4618      	mov	r0, r3
 8002348:	f7fe f8ec 	bl	8000524 <__aeabi_i2d>
 800234c:	4602      	mov	r2, r0
 800234e:	460b      	mov	r3, r1
 8002350:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002354:	f7fe fa7a 	bl	800084c <__aeabi_ddiv>
 8002358:	4602      	mov	r2, r0
 800235a:	460b      	mov	r3, r1
 800235c:	4907      	ldr	r1, [pc, #28]	@ (800237c <IMU_Calculate_Gyro+0xe4>)
 800235e:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8002362:	bf00      	nop
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bdb0      	pop	{r4, r5, r7, pc}
 800236a:	bf00      	nop
 800236c:	20000624 	.word	0x20000624
 8002370:	409f4000 	.word	0x409f4000
 8002374:	40e00000 	.word	0x40e00000
 8002378:	200006a0 	.word	0x200006a0
 800237c:	20000670 	.word	0x20000670

08002380 <IMU_Calculate_All_Data>:

void IMU_Calculate_All_Data(uint8_t IMU_Raw_Data_Buffer[8]) {
 8002380:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002384:	b088      	sub	sp, #32
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
    if(IMU_Raw_Data_Buffer[0] == 0x55) {
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	2b55      	cmp	r3, #85	@ 0x55
 8002390:	f040 81a0 	bne.w	80026d4 <IMU_Calculate_All_Data+0x354>
        int16_t temp_a[3] = {0, 0, 0};
 8002394:	2300      	movs	r3, #0
 8002396:	833b      	strh	r3, [r7, #24]
 8002398:	2300      	movs	r3, #0
 800239a:	837b      	strh	r3, [r7, #26]
 800239c:	2300      	movs	r3, #0
 800239e:	83bb      	strh	r3, [r7, #28]
        int16_t temp_w[3] = {0, 0, 0};
 80023a0:	2300      	movs	r3, #0
 80023a2:	823b      	strh	r3, [r7, #16]
 80023a4:	2300      	movs	r3, #0
 80023a6:	827b      	strh	r3, [r7, #18]
 80023a8:	2300      	movs	r3, #0
 80023aa:	82bb      	strh	r3, [r7, #20]
        int16_t temp_angle[3] = {0, 0, 0};
 80023ac:	2300      	movs	r3, #0
 80023ae:	813b      	strh	r3, [r7, #8]
 80023b0:	2300      	movs	r3, #0
 80023b2:	817b      	strh	r3, [r7, #10]
 80023b4:	2300      	movs	r3, #0
 80023b6:	81bb      	strh	r3, [r7, #12]

        switch(IMU_Raw_Data_Buffer[1]) {
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	3301      	adds	r3, #1
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b53      	cmp	r3, #83	@ 0x53
 80023c0:	f000 8106 	beq.w	80025d0 <IMU_Calculate_All_Data+0x250>
 80023c4:	2b53      	cmp	r3, #83	@ 0x53
 80023c6:	f300 8185 	bgt.w	80026d4 <IMU_Calculate_All_Data+0x354>
 80023ca:	2b51      	cmp	r3, #81	@ 0x51
 80023cc:	d002      	beq.n	80023d4 <IMU_Calculate_All_Data+0x54>
 80023ce:	2b52      	cmp	r3, #82	@ 0x52
 80023d0:	d06d      	beq.n	80024ae <IMU_Calculate_All_Data+0x12e>
                angle[1] = -(((double)temp_angle[1]) * 180.0 / 32768.0) + 90.0;
                angle[2] = -(((double)temp_angle[2]) * 180.0 / 32768.0) + 90.0;
                break;
        }
    }
}
 80023d2:	e17f      	b.n	80026d4 <IMU_Calculate_All_Data+0x354>
                temp_a[0] = ((int16_t)IMU_Raw_Data_Buffer[3] << 8) | (int16_t)IMU_Raw_Data_Buffer[2];
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3303      	adds	r3, #3
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	021b      	lsls	r3, r3, #8
 80023dc:	b21a      	sxth	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	3302      	adds	r3, #2
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	b21b      	sxth	r3, r3
 80023e6:	4313      	orrs	r3, r2
 80023e8:	b21b      	sxth	r3, r3
 80023ea:	833b      	strh	r3, [r7, #24]
                temp_a[1] = ((int16_t)IMU_Raw_Data_Buffer[5] << 8) | (int16_t)IMU_Raw_Data_Buffer[4];
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	3305      	adds	r3, #5
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	021b      	lsls	r3, r3, #8
 80023f4:	b21a      	sxth	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	3304      	adds	r3, #4
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	b21b      	sxth	r3, r3
 80023fe:	4313      	orrs	r3, r2
 8002400:	b21b      	sxth	r3, r3
 8002402:	837b      	strh	r3, [r7, #26]
                temp_a[2] = ((int16_t)IMU_Raw_Data_Buffer[7] << 8) | (int16_t)IMU_Raw_Data_Buffer[6];
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3307      	adds	r3, #7
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	021b      	lsls	r3, r3, #8
 800240c:	b21a      	sxth	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	3306      	adds	r3, #6
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	b21b      	sxth	r3, r3
 8002416:	4313      	orrs	r3, r2
 8002418:	b21b      	sxth	r3, r3
 800241a:	83bb      	strh	r3, [r7, #28]
                acc[0] = ((double)temp_a[0]) * 16 / 32768.0;
 800241c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002420:	4618      	mov	r0, r3
 8002422:	f7fe f87f 	bl	8000524 <__aeabi_i2d>
 8002426:	f04f 0200 	mov.w	r2, #0
 800242a:	4bad      	ldr	r3, [pc, #692]	@ (80026e0 <IMU_Calculate_All_Data+0x360>)
 800242c:	f7fe f8e4 	bl	80005f8 <__aeabi_dmul>
 8002430:	4602      	mov	r2, r0
 8002432:	460b      	mov	r3, r1
 8002434:	4610      	mov	r0, r2
 8002436:	4619      	mov	r1, r3
 8002438:	f04f 0200 	mov.w	r2, #0
 800243c:	4ba9      	ldr	r3, [pc, #676]	@ (80026e4 <IMU_Calculate_All_Data+0x364>)
 800243e:	f7fe fa05 	bl	800084c <__aeabi_ddiv>
 8002442:	4602      	mov	r2, r0
 8002444:	460b      	mov	r3, r1
 8002446:	49a8      	ldr	r1, [pc, #672]	@ (80026e8 <IMU_Calculate_All_Data+0x368>)
 8002448:	e9c1 2300 	strd	r2, r3, [r1]
                acc[1] = ((double)temp_a[1]) * 16 / 32768.0;
 800244c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002450:	4618      	mov	r0, r3
 8002452:	f7fe f867 	bl	8000524 <__aeabi_i2d>
 8002456:	f04f 0200 	mov.w	r2, #0
 800245a:	4ba1      	ldr	r3, [pc, #644]	@ (80026e0 <IMU_Calculate_All_Data+0x360>)
 800245c:	f7fe f8cc 	bl	80005f8 <__aeabi_dmul>
 8002460:	4602      	mov	r2, r0
 8002462:	460b      	mov	r3, r1
 8002464:	4610      	mov	r0, r2
 8002466:	4619      	mov	r1, r3
 8002468:	f04f 0200 	mov.w	r2, #0
 800246c:	4b9d      	ldr	r3, [pc, #628]	@ (80026e4 <IMU_Calculate_All_Data+0x364>)
 800246e:	f7fe f9ed 	bl	800084c <__aeabi_ddiv>
 8002472:	4602      	mov	r2, r0
 8002474:	460b      	mov	r3, r1
 8002476:	499c      	ldr	r1, [pc, #624]	@ (80026e8 <IMU_Calculate_All_Data+0x368>)
 8002478:	e9c1 2302 	strd	r2, r3, [r1, #8]
                acc[2] = ((double)temp_a[2]) * 16 / 32768.0;
 800247c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002480:	4618      	mov	r0, r3
 8002482:	f7fe f84f 	bl	8000524 <__aeabi_i2d>
 8002486:	f04f 0200 	mov.w	r2, #0
 800248a:	4b95      	ldr	r3, [pc, #596]	@ (80026e0 <IMU_Calculate_All_Data+0x360>)
 800248c:	f7fe f8b4 	bl	80005f8 <__aeabi_dmul>
 8002490:	4602      	mov	r2, r0
 8002492:	460b      	mov	r3, r1
 8002494:	4610      	mov	r0, r2
 8002496:	4619      	mov	r1, r3
 8002498:	f04f 0200 	mov.w	r2, #0
 800249c:	4b91      	ldr	r3, [pc, #580]	@ (80026e4 <IMU_Calculate_All_Data+0x364>)
 800249e:	f7fe f9d5 	bl	800084c <__aeabi_ddiv>
 80024a2:	4602      	mov	r2, r0
 80024a4:	460b      	mov	r3, r1
 80024a6:	4990      	ldr	r1, [pc, #576]	@ (80026e8 <IMU_Calculate_All_Data+0x368>)
 80024a8:	e9c1 2304 	strd	r2, r3, [r1, #16]
                break;
 80024ac:	e112      	b.n	80026d4 <IMU_Calculate_All_Data+0x354>
                temp_w[0] = ((int16_t)IMU_Raw_Data_Buffer[3] << 8) | (int16_t)IMU_Raw_Data_Buffer[2];
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	3303      	adds	r3, #3
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	021b      	lsls	r3, r3, #8
 80024b6:	b21a      	sxth	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	3302      	adds	r3, #2
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	b21b      	sxth	r3, r3
 80024c0:	4313      	orrs	r3, r2
 80024c2:	b21b      	sxth	r3, r3
 80024c4:	823b      	strh	r3, [r7, #16]
                temp_w[1] = ((int16_t)IMU_Raw_Data_Buffer[5] << 8) | (int16_t)IMU_Raw_Data_Buffer[4];
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	3305      	adds	r3, #5
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	021b      	lsls	r3, r3, #8
 80024ce:	b21a      	sxth	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	3304      	adds	r3, #4
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	b21b      	sxth	r3, r3
 80024d8:	4313      	orrs	r3, r2
 80024da:	b21b      	sxth	r3, r3
 80024dc:	827b      	strh	r3, [r7, #18]
                temp_w[2] = ((int16_t)IMU_Raw_Data_Buffer[7] << 8) | (int16_t)IMU_Raw_Data_Buffer[6];
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	3307      	adds	r3, #7
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	021b      	lsls	r3, r3, #8
 80024e6:	b21a      	sxth	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	3306      	adds	r3, #6
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	b21b      	sxth	r3, r3
 80024f0:	4313      	orrs	r3, r2
 80024f2:	b21b      	sxth	r3, r3
 80024f4:	82bb      	strh	r3, [r7, #20]
                gyro[0] = -(((double)temp_w[0]) * 2000.0 / 32768.0) - gyro_offset[0];
 80024f6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7fe f812 	bl	8000524 <__aeabi_i2d>
 8002500:	f04f 0200 	mov.w	r2, #0
 8002504:	4b79      	ldr	r3, [pc, #484]	@ (80026ec <IMU_Calculate_All_Data+0x36c>)
 8002506:	f7fe f877 	bl	80005f8 <__aeabi_dmul>
 800250a:	4602      	mov	r2, r0
 800250c:	460b      	mov	r3, r1
 800250e:	4610      	mov	r0, r2
 8002510:	4619      	mov	r1, r3
 8002512:	f04f 0200 	mov.w	r2, #0
 8002516:	4b73      	ldr	r3, [pc, #460]	@ (80026e4 <IMU_Calculate_All_Data+0x364>)
 8002518:	f7fe f998 	bl	800084c <__aeabi_ddiv>
 800251c:	4602      	mov	r2, r0
 800251e:	460b      	mov	r3, r1
 8002520:	4692      	mov	sl, r2
 8002522:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
 8002526:	4b72      	ldr	r3, [pc, #456]	@ (80026f0 <IMU_Calculate_All_Data+0x370>)
 8002528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252c:	4650      	mov	r0, sl
 800252e:	4659      	mov	r1, fp
 8002530:	f7fd feaa 	bl	8000288 <__aeabi_dsub>
 8002534:	4602      	mov	r2, r0
 8002536:	460b      	mov	r3, r1
 8002538:	496e      	ldr	r1, [pc, #440]	@ (80026f4 <IMU_Calculate_All_Data+0x374>)
 800253a:	e9c1 2300 	strd	r2, r3, [r1]
                gyro[1] = -(((double)temp_w[1]) * 2000.0 / 32768.0) - gyro_offset[1];
 800253e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002542:	4618      	mov	r0, r3
 8002544:	f7fd ffee 	bl	8000524 <__aeabi_i2d>
 8002548:	f04f 0200 	mov.w	r2, #0
 800254c:	4b67      	ldr	r3, [pc, #412]	@ (80026ec <IMU_Calculate_All_Data+0x36c>)
 800254e:	f7fe f853 	bl	80005f8 <__aeabi_dmul>
 8002552:	4602      	mov	r2, r0
 8002554:	460b      	mov	r3, r1
 8002556:	4610      	mov	r0, r2
 8002558:	4619      	mov	r1, r3
 800255a:	f04f 0200 	mov.w	r2, #0
 800255e:	4b61      	ldr	r3, [pc, #388]	@ (80026e4 <IMU_Calculate_All_Data+0x364>)
 8002560:	f7fe f974 	bl	800084c <__aeabi_ddiv>
 8002564:	4602      	mov	r2, r0
 8002566:	460b      	mov	r3, r1
 8002568:	4690      	mov	r8, r2
 800256a:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 800256e:	4b60      	ldr	r3, [pc, #384]	@ (80026f0 <IMU_Calculate_All_Data+0x370>)
 8002570:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002574:	4640      	mov	r0, r8
 8002576:	4649      	mov	r1, r9
 8002578:	f7fd fe86 	bl	8000288 <__aeabi_dsub>
 800257c:	4602      	mov	r2, r0
 800257e:	460b      	mov	r3, r1
 8002580:	495c      	ldr	r1, [pc, #368]	@ (80026f4 <IMU_Calculate_All_Data+0x374>)
 8002582:	e9c1 2302 	strd	r2, r3, [r1, #8]
                gyro[2] = -(((double)temp_w[2]) * 2000.0 / 32768.0) - gyro_offset[2];
 8002586:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800258a:	4618      	mov	r0, r3
 800258c:	f7fd ffca 	bl	8000524 <__aeabi_i2d>
 8002590:	f04f 0200 	mov.w	r2, #0
 8002594:	4b55      	ldr	r3, [pc, #340]	@ (80026ec <IMU_Calculate_All_Data+0x36c>)
 8002596:	f7fe f82f 	bl	80005f8 <__aeabi_dmul>
 800259a:	4602      	mov	r2, r0
 800259c:	460b      	mov	r3, r1
 800259e:	4610      	mov	r0, r2
 80025a0:	4619      	mov	r1, r3
 80025a2:	f04f 0200 	mov.w	r2, #0
 80025a6:	4b4f      	ldr	r3, [pc, #316]	@ (80026e4 <IMU_Calculate_All_Data+0x364>)
 80025a8:	f7fe f950 	bl	800084c <__aeabi_ddiv>
 80025ac:	4602      	mov	r2, r0
 80025ae:	460b      	mov	r3, r1
 80025b0:	4614      	mov	r4, r2
 80025b2:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80025b6:	4b4e      	ldr	r3, [pc, #312]	@ (80026f0 <IMU_Calculate_All_Data+0x370>)
 80025b8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80025bc:	4620      	mov	r0, r4
 80025be:	4629      	mov	r1, r5
 80025c0:	f7fd fe62 	bl	8000288 <__aeabi_dsub>
 80025c4:	4602      	mov	r2, r0
 80025c6:	460b      	mov	r3, r1
 80025c8:	494a      	ldr	r1, [pc, #296]	@ (80026f4 <IMU_Calculate_All_Data+0x374>)
 80025ca:	e9c1 2304 	strd	r2, r3, [r1, #16]
                break;
 80025ce:	e081      	b.n	80026d4 <IMU_Calculate_All_Data+0x354>
                temp_angle[0] = ((int16_t)IMU_Raw_Data_Buffer[3] << 8) | (int16_t)IMU_Raw_Data_Buffer[2];
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3303      	adds	r3, #3
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	021b      	lsls	r3, r3, #8
 80025d8:	b21a      	sxth	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	3302      	adds	r3, #2
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	b21b      	sxth	r3, r3
 80025e2:	4313      	orrs	r3, r2
 80025e4:	b21b      	sxth	r3, r3
 80025e6:	813b      	strh	r3, [r7, #8]
                temp_angle[1] = ((int16_t)IMU_Raw_Data_Buffer[5] << 8) | (int16_t)IMU_Raw_Data_Buffer[4];
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	3305      	adds	r3, #5
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	021b      	lsls	r3, r3, #8
 80025f0:	b21a      	sxth	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	3304      	adds	r3, #4
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	b21b      	sxth	r3, r3
 80025fa:	4313      	orrs	r3, r2
 80025fc:	b21b      	sxth	r3, r3
 80025fe:	817b      	strh	r3, [r7, #10]
                temp_angle[2] = ((int16_t)IMU_Raw_Data_Buffer[7] << 8) | (int16_t)IMU_Raw_Data_Buffer[6];
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	3307      	adds	r3, #7
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	021b      	lsls	r3, r3, #8
 8002608:	b21a      	sxth	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	3306      	adds	r3, #6
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	b21b      	sxth	r3, r3
 8002612:	4313      	orrs	r3, r2
 8002614:	b21b      	sxth	r3, r3
 8002616:	81bb      	strh	r3, [r7, #12]
                angle[0] = -(((double)temp_angle[0]) * 180.0 / 32768.0) + 90.0;
 8002618:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800261c:	4618      	mov	r0, r3
 800261e:	f7fd ff81 	bl	8000524 <__aeabi_i2d>
 8002622:	f04f 0200 	mov.w	r2, #0
 8002626:	4b34      	ldr	r3, [pc, #208]	@ (80026f8 <IMU_Calculate_All_Data+0x378>)
 8002628:	f7fd ffe6 	bl	80005f8 <__aeabi_dmul>
 800262c:	4602      	mov	r2, r0
 800262e:	460b      	mov	r3, r1
 8002630:	4610      	mov	r0, r2
 8002632:	4619      	mov	r1, r3
 8002634:	f04f 0200 	mov.w	r2, #0
 8002638:	4b2a      	ldr	r3, [pc, #168]	@ (80026e4 <IMU_Calculate_All_Data+0x364>)
 800263a:	f7fe f907 	bl	800084c <__aeabi_ddiv>
 800263e:	4602      	mov	r2, r0
 8002640:	460b      	mov	r3, r1
 8002642:	f04f 0000 	mov.w	r0, #0
 8002646:	492d      	ldr	r1, [pc, #180]	@ (80026fc <IMU_Calculate_All_Data+0x37c>)
 8002648:	f7fd fe1e 	bl	8000288 <__aeabi_dsub>
 800264c:	4602      	mov	r2, r0
 800264e:	460b      	mov	r3, r1
 8002650:	492b      	ldr	r1, [pc, #172]	@ (8002700 <IMU_Calculate_All_Data+0x380>)
 8002652:	e9c1 2300 	strd	r2, r3, [r1]
                angle[1] = -(((double)temp_angle[1]) * 180.0 / 32768.0) + 90.0;
 8002656:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800265a:	4618      	mov	r0, r3
 800265c:	f7fd ff62 	bl	8000524 <__aeabi_i2d>
 8002660:	f04f 0200 	mov.w	r2, #0
 8002664:	4b24      	ldr	r3, [pc, #144]	@ (80026f8 <IMU_Calculate_All_Data+0x378>)
 8002666:	f7fd ffc7 	bl	80005f8 <__aeabi_dmul>
 800266a:	4602      	mov	r2, r0
 800266c:	460b      	mov	r3, r1
 800266e:	4610      	mov	r0, r2
 8002670:	4619      	mov	r1, r3
 8002672:	f04f 0200 	mov.w	r2, #0
 8002676:	4b1b      	ldr	r3, [pc, #108]	@ (80026e4 <IMU_Calculate_All_Data+0x364>)
 8002678:	f7fe f8e8 	bl	800084c <__aeabi_ddiv>
 800267c:	4602      	mov	r2, r0
 800267e:	460b      	mov	r3, r1
 8002680:	f04f 0000 	mov.w	r0, #0
 8002684:	491d      	ldr	r1, [pc, #116]	@ (80026fc <IMU_Calculate_All_Data+0x37c>)
 8002686:	f7fd fdff 	bl	8000288 <__aeabi_dsub>
 800268a:	4602      	mov	r2, r0
 800268c:	460b      	mov	r3, r1
 800268e:	491c      	ldr	r1, [pc, #112]	@ (8002700 <IMU_Calculate_All_Data+0x380>)
 8002690:	e9c1 2302 	strd	r2, r3, [r1, #8]
                angle[2] = -(((double)temp_angle[2]) * 180.0 / 32768.0) + 90.0;
 8002694:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002698:	4618      	mov	r0, r3
 800269a:	f7fd ff43 	bl	8000524 <__aeabi_i2d>
 800269e:	f04f 0200 	mov.w	r2, #0
 80026a2:	4b15      	ldr	r3, [pc, #84]	@ (80026f8 <IMU_Calculate_All_Data+0x378>)
 80026a4:	f7fd ffa8 	bl	80005f8 <__aeabi_dmul>
 80026a8:	4602      	mov	r2, r0
 80026aa:	460b      	mov	r3, r1
 80026ac:	4610      	mov	r0, r2
 80026ae:	4619      	mov	r1, r3
 80026b0:	f04f 0200 	mov.w	r2, #0
 80026b4:	4b0b      	ldr	r3, [pc, #44]	@ (80026e4 <IMU_Calculate_All_Data+0x364>)
 80026b6:	f7fe f8c9 	bl	800084c <__aeabi_ddiv>
 80026ba:	4602      	mov	r2, r0
 80026bc:	460b      	mov	r3, r1
 80026be:	f04f 0000 	mov.w	r0, #0
 80026c2:	490e      	ldr	r1, [pc, #56]	@ (80026fc <IMU_Calculate_All_Data+0x37c>)
 80026c4:	f7fd fde0 	bl	8000288 <__aeabi_dsub>
 80026c8:	4602      	mov	r2, r0
 80026ca:	460b      	mov	r3, r1
 80026cc:	490c      	ldr	r1, [pc, #48]	@ (8002700 <IMU_Calculate_All_Data+0x380>)
 80026ce:	e9c1 2304 	strd	r2, r3, [r1, #16]
                break;
 80026d2:	bf00      	nop
}
 80026d4:	bf00      	nop
 80026d6:	3720      	adds	r7, #32
 80026d8:	46bd      	mov	sp, r7
 80026da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026de:	bf00      	nop
 80026e0:	40300000 	.word	0x40300000
 80026e4:	40e00000 	.word	0x40e00000
 80026e8:	20000658 	.word	0x20000658
 80026ec:	409f4000 	.word	0x409f4000
 80026f0:	200006a0 	.word	0x200006a0
 80026f4:	20000670 	.word	0x20000670
 80026f8:	40668000 	.word	0x40668000
 80026fc:	40568000 	.word	0x40568000
 8002700:	20000688 	.word	0x20000688

08002704 <IMU_init_GyroOffset>:

void IMU_init_GyroOffset(void) {
 8002704:	b5b0      	push	{r4, r5, r7, lr}
 8002706:	b092      	sub	sp, #72	@ 0x48
 8002708:	af00      	add	r7, sp, #0

	uint8_t flag = 1;
 800270a:	2301      	movs	r3, #1
 800270c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

	while(flag == 1) {
 8002710:	e10d      	b.n	800292e <IMU_init_GyroOffset+0x22a>

		uint8_t mean_counter = 120;
 8002712:	2378      	movs	r3, #120	@ 0x78
 8002714:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		double gyro_mean[3] = {0.0};
 8002718:	f107 0310 	add.w	r3, r7, #16
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	605a      	str	r2, [r3, #4]
 8002722:	609a      	str	r2, [r3, #8]
 8002724:	60da      	str	r2, [r3, #12]
 8002726:	611a      	str	r2, [r3, #16]
 8002728:	615a      	str	r2, [r3, #20]

		mean_counter /= IMU_GYRO_MEAN_VALUE;
 800272a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800272e:	4a85      	ldr	r2, [pc, #532]	@ (8002944 <IMU_init_GyroOffset+0x240>)
 8002730:	fba2 2303 	umull	r2, r3, r2, r3
 8002734:	089b      	lsrs	r3, r3, #2
 8002736:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

		for (int i = 0 ; i < mean_counter ; i++) {
 800273a:	2300      	movs	r3, #0
 800273c:	643b      	str	r3, [r7, #64]	@ 0x40
 800273e:	e04f      	b.n	80027e0 <IMU_init_GyroOffset+0xdc>

			IMU_Decode_Gyro_Data();
 8002740:	f7ff fd62 	bl	8002208 <IMU_Decode_Gyro_Data>

			for (int j = 0 ; j < IMU_GYRO_MEAN_VALUE ; j++) {
 8002744:	2300      	movs	r3, #0
 8002746:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002748:	e041      	b.n	80027ce <IMU_init_GyroOffset+0xca>

				uint8_t Temp_gyro_data[IMU_GYRO_DATA_LGTH];

				for (int k = 0 ; k < IMU_GYRO_DATA_LGTH ; k++) {
 800274a:	2300      	movs	r3, #0
 800274c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800274e:	e012      	b.n	8002776 <IMU_init_GyroOffset+0x72>
					Temp_gyro_data[k] = IMU_gyro_data[k][j];
 8002750:	497d      	ldr	r1, [pc, #500]	@ (8002948 <IMU_init_GyroOffset+0x244>)
 8002752:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002754:	4613      	mov	r3, r2
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	4413      	add	r3, r2
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	18ca      	adds	r2, r1, r3
 800275e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002760:	4413      	add	r3, r2
 8002762:	7819      	ldrb	r1, [r3, #0]
 8002764:	f107 0208 	add.w	r2, r7, #8
 8002768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800276a:	4413      	add	r3, r2
 800276c:	460a      	mov	r2, r1
 800276e:	701a      	strb	r2, [r3, #0]
				for (int k = 0 ; k < IMU_GYRO_DATA_LGTH ; k++) {
 8002770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002772:	3301      	adds	r3, #1
 8002774:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002778:	2b07      	cmp	r3, #7
 800277a:	dde9      	ble.n	8002750 <IMU_init_GyroOffset+0x4c>
				}

				IMU_Calculate_All_Data(Temp_gyro_data);
 800277c:	f107 0308 	add.w	r3, r7, #8
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff fdfd 	bl	8002380 <IMU_Calculate_All_Data>

				gyro_mean[0] += gyro[0];
 8002786:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800278a:	4b70      	ldr	r3, [pc, #448]	@ (800294c <IMU_init_GyroOffset+0x248>)
 800278c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002790:	f7fd fd7c 	bl	800028c <__adddf3>
 8002794:	4602      	mov	r2, r0
 8002796:	460b      	mov	r3, r1
 8002798:	e9c7 2304 	strd	r2, r3, [r7, #16]
				gyro_mean[1] += gyro[1];
 800279c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80027a0:	4b6a      	ldr	r3, [pc, #424]	@ (800294c <IMU_init_GyroOffset+0x248>)
 80027a2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80027a6:	f7fd fd71 	bl	800028c <__adddf3>
 80027aa:	4602      	mov	r2, r0
 80027ac:	460b      	mov	r3, r1
 80027ae:	e9c7 2306 	strd	r2, r3, [r7, #24]
				gyro_mean[2] += gyro[2];
 80027b2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80027b6:	4b65      	ldr	r3, [pc, #404]	@ (800294c <IMU_init_GyroOffset+0x248>)
 80027b8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80027bc:	f7fd fd66 	bl	800028c <__adddf3>
 80027c0:	4602      	mov	r2, r0
 80027c2:	460b      	mov	r3, r1
 80027c4:	e9c7 2308 	strd	r2, r3, [r7, #32]
			for (int j = 0 ; j < IMU_GYRO_MEAN_VALUE ; j++) {
 80027c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027ca:	3301      	adds	r3, #1
 80027cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027d0:	2b05      	cmp	r3, #5
 80027d2:	ddba      	ble.n	800274a <IMU_init_GyroOffset+0x46>

			}

			HAL_Delay(5);
 80027d4:	2005      	movs	r0, #5
 80027d6:	f000 f9b3 	bl	8002b40 <HAL_Delay>
		for (int i = 0 ; i < mean_counter ; i++) {
 80027da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027dc:	3301      	adds	r3, #1
 80027de:	643b      	str	r3, [r7, #64]	@ 0x40
 80027e0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80027e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80027e6:	429a      	cmp	r2, r3
 80027e8:	dbaa      	blt.n	8002740 <IMU_init_GyroOffset+0x3c>
		}

		gyro_offset[0] = gyro_mean[0] / (IMU_GYRO_MEAN_VALUE * mean_counter);
 80027ea:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80027ee:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80027f2:	4613      	mov	r3, r2
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	4413      	add	r3, r2
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7fd fe92 	bl	8000524 <__aeabi_i2d>
 8002800:	4602      	mov	r2, r0
 8002802:	460b      	mov	r3, r1
 8002804:	4620      	mov	r0, r4
 8002806:	4629      	mov	r1, r5
 8002808:	f7fe f820 	bl	800084c <__aeabi_ddiv>
 800280c:	4602      	mov	r2, r0
 800280e:	460b      	mov	r3, r1
 8002810:	494f      	ldr	r1, [pc, #316]	@ (8002950 <IMU_init_GyroOffset+0x24c>)
 8002812:	e9c1 2300 	strd	r2, r3, [r1]
		gyro_offset[1] = gyro_mean[1] / (IMU_GYRO_MEAN_VALUE * mean_counter);
 8002816:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800281a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800281e:	4613      	mov	r3, r2
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	4413      	add	r3, r2
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	4618      	mov	r0, r3
 8002828:	f7fd fe7c 	bl	8000524 <__aeabi_i2d>
 800282c:	4602      	mov	r2, r0
 800282e:	460b      	mov	r3, r1
 8002830:	4620      	mov	r0, r4
 8002832:	4629      	mov	r1, r5
 8002834:	f7fe f80a 	bl	800084c <__aeabi_ddiv>
 8002838:	4602      	mov	r2, r0
 800283a:	460b      	mov	r3, r1
 800283c:	4944      	ldr	r1, [pc, #272]	@ (8002950 <IMU_init_GyroOffset+0x24c>)
 800283e:	e9c1 2302 	strd	r2, r3, [r1, #8]
		gyro_offset[2] = gyro_mean[2] / (IMU_GYRO_MEAN_VALUE * mean_counter);
 8002842:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002846:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800284a:	4613      	mov	r3, r2
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	4413      	add	r3, r2
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	4618      	mov	r0, r3
 8002854:	f7fd fe66 	bl	8000524 <__aeabi_i2d>
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	4620      	mov	r0, r4
 800285e:	4629      	mov	r1, r5
 8002860:	f7fd fff4 	bl	800084c <__aeabi_ddiv>
 8002864:	4602      	mov	r2, r0
 8002866:	460b      	mov	r3, r1
 8002868:	4939      	ldr	r1, [pc, #228]	@ (8002950 <IMU_init_GyroOffset+0x24c>)
 800286a:	e9c1 2304 	strd	r2, r3, [r1, #16]

		IMU_Decode_Gyro_Data();
 800286e:	f7ff fccb 	bl	8002208 <IMU_Decode_Gyro_Data>

		for (int j = 0 ; j < IMU_GYRO_MEAN_VALUE ; j++) {
 8002872:	2300      	movs	r3, #0
 8002874:	637b      	str	r3, [r7, #52]	@ 0x34
 8002876:	e057      	b.n	8002928 <IMU_init_GyroOffset+0x224>

			uint8_t Temp_gyro_data[IMU_GYRO_DATA_LGTH];

			for (int k = 0 ; k < IMU_GYRO_DATA_LGTH ; k++) {
 8002878:	2300      	movs	r3, #0
 800287a:	633b      	str	r3, [r7, #48]	@ 0x30
 800287c:	e011      	b.n	80028a2 <IMU_init_GyroOffset+0x19e>
				Temp_gyro_data[k] = IMU_gyro_data[k][j];
 800287e:	4932      	ldr	r1, [pc, #200]	@ (8002948 <IMU_init_GyroOffset+0x244>)
 8002880:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002882:	4613      	mov	r3, r2
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	4413      	add	r3, r2
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	18ca      	adds	r2, r1, r3
 800288c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800288e:	4413      	add	r3, r2
 8002890:	7819      	ldrb	r1, [r3, #0]
 8002892:	463a      	mov	r2, r7
 8002894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002896:	4413      	add	r3, r2
 8002898:	460a      	mov	r2, r1
 800289a:	701a      	strb	r2, [r3, #0]
			for (int k = 0 ; k < IMU_GYRO_DATA_LGTH ; k++) {
 800289c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800289e:	3301      	adds	r3, #1
 80028a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80028a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028a4:	2b07      	cmp	r3, #7
 80028a6:	ddea      	ble.n	800287e <IMU_init_GyroOffset+0x17a>
			}

			IMU_Calculate_All_Data(Temp_gyro_data);
 80028a8:	463b      	mov	r3, r7
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7ff fd68 	bl	8002380 <IMU_Calculate_All_Data>

			if      (abs(gyro[0]) > 1) { flag = 1; break; }
 80028b0:	4b26      	ldr	r3, [pc, #152]	@ (800294c <IMU_init_GyroOffset+0x248>)
 80028b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b6:	4610      	mov	r0, r2
 80028b8:	4619      	mov	r1, r3
 80028ba:	f7fe f94d 	bl	8000b58 <__aeabi_d2iz>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	bfb8      	it	lt
 80028c4:	425b      	neglt	r3, r3
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	dd03      	ble.n	80028d2 <IMU_init_GyroOffset+0x1ce>
 80028ca:	2301      	movs	r3, #1
 80028cc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80028d0:	e02d      	b.n	800292e <IMU_init_GyroOffset+0x22a>
			else if (abs(gyro[1]) > 1) { flag = 1; break; }
 80028d2:	4b1e      	ldr	r3, [pc, #120]	@ (800294c <IMU_init_GyroOffset+0x248>)
 80028d4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80028d8:	4610      	mov	r0, r2
 80028da:	4619      	mov	r1, r3
 80028dc:	f7fe f93c 	bl	8000b58 <__aeabi_d2iz>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	bfb8      	it	lt
 80028e6:	425b      	neglt	r3, r3
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	dd03      	ble.n	80028f4 <IMU_init_GyroOffset+0x1f0>
 80028ec:	2301      	movs	r3, #1
 80028ee:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80028f2:	e01c      	b.n	800292e <IMU_init_GyroOffset+0x22a>
			else if (abs(gyro[2]) > 1) { flag = 1; break; }
 80028f4:	4b15      	ldr	r3, [pc, #84]	@ (800294c <IMU_init_GyroOffset+0x248>)
 80028f6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80028fa:	4610      	mov	r0, r2
 80028fc:	4619      	mov	r1, r3
 80028fe:	f7fe f92b 	bl	8000b58 <__aeabi_d2iz>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	bfb8      	it	lt
 8002908:	425b      	neglt	r3, r3
 800290a:	2b01      	cmp	r3, #1
 800290c:	dd03      	ble.n	8002916 <IMU_init_GyroOffset+0x212>
 800290e:	2301      	movs	r3, #1
 8002910:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8002914:	e00b      	b.n	800292e <IMU_init_GyroOffset+0x22a>
			else                       { flag = 0; }
 8002916:	2300      	movs	r3, #0
 8002918:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

			HAL_Delay(2);
 800291c:	2002      	movs	r0, #2
 800291e:	f000 f90f 	bl	8002b40 <HAL_Delay>
		for (int j = 0 ; j < IMU_GYRO_MEAN_VALUE ; j++) {
 8002922:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002924:	3301      	adds	r3, #1
 8002926:	637b      	str	r3, [r7, #52]	@ 0x34
 8002928:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800292a:	2b05      	cmp	r3, #5
 800292c:	dda4      	ble.n	8002878 <IMU_init_GyroOffset+0x174>
	while(flag == 1) {
 800292e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002932:	2b01      	cmp	r3, #1
 8002934:	f43f aeed 	beq.w	8002712 <IMU_init_GyroOffset+0xe>
		}
	}
}
 8002938:	bf00      	nop
 800293a:	bf00      	nop
 800293c:	3748      	adds	r7, #72	@ 0x48
 800293e:	46bd      	mov	sp, r7
 8002940:	bdb0      	pop	{r4, r5, r7, pc}
 8002942:	bf00      	nop
 8002944:	aaaaaaab 	.word	0xaaaaaaab
 8002948:	20000624 	.word	0x20000624
 800294c:	20000670 	.word	0x20000670
 8002950:	200006a0 	.word	0x200006a0

08002954 <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b08a      	sub	sp, #40	@ 0x28
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800295c:	f107 0314 	add.w	r3, r7, #20
 8002960:	2200      	movs	r2, #0
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	605a      	str	r2, [r3, #4]
 8002966:	609a      	str	r2, [r3, #8]
 8002968:	60da      	str	r2, [r3, #12]
 800296a:	611a      	str	r2, [r3, #16]

  if(huart->Instance==USART2) {
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a30      	ldr	r2, [pc, #192]	@ (8002a34 <HAL_UART_MspInit+0xe0>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d15a      	bne.n	8002a2c <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	613b      	str	r3, [r7, #16]
 800297a:	4b2f      	ldr	r3, [pc, #188]	@ (8002a38 <HAL_UART_MspInit+0xe4>)
 800297c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297e:	4a2e      	ldr	r2, [pc, #184]	@ (8002a38 <HAL_UART_MspInit+0xe4>)
 8002980:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002984:	6413      	str	r3, [r2, #64]	@ 0x40
 8002986:	4b2c      	ldr	r3, [pc, #176]	@ (8002a38 <HAL_UART_MspInit+0xe4>)
 8002988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800298e:	613b      	str	r3, [r7, #16]
 8002990:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002992:	2300      	movs	r3, #0
 8002994:	60fb      	str	r3, [r7, #12]
 8002996:	4b28      	ldr	r3, [pc, #160]	@ (8002a38 <HAL_UART_MspInit+0xe4>)
 8002998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800299a:	4a27      	ldr	r2, [pc, #156]	@ (8002a38 <HAL_UART_MspInit+0xe4>)
 800299c:	f043 0308 	orr.w	r3, r3, #8
 80029a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80029a2:	4b25      	ldr	r3, [pc, #148]	@ (8002a38 <HAL_UART_MspInit+0xe4>)
 80029a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a6:	f003 0308 	and.w	r3, r3, #8
 80029aa:	60fb      	str	r3, [r7, #12]
 80029ac:	68fb      	ldr	r3, [r7, #12]

    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80029ae:	2360      	movs	r3, #96	@ 0x60
 80029b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b2:	2302      	movs	r3, #2
 80029b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b6:	2300      	movs	r3, #0
 80029b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ba:	2303      	movs	r3, #3
 80029bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029be:	2307      	movs	r3, #7
 80029c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029c2:	f107 0314 	add.w	r3, r7, #20
 80029c6:	4619      	mov	r1, r3
 80029c8:	481c      	ldr	r0, [pc, #112]	@ (8002a3c <HAL_UART_MspInit+0xe8>)
 80029ca:	f001 f971 	bl	8003cb0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80029ce:	4b1c      	ldr	r3, [pc, #112]	@ (8002a40 <HAL_UART_MspInit+0xec>)
 80029d0:	4a1c      	ldr	r2, [pc, #112]	@ (8002a44 <HAL_UART_MspInit+0xf0>)
 80029d2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80029d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002a40 <HAL_UART_MspInit+0xec>)
 80029d6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80029da:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029dc:	4b18      	ldr	r3, [pc, #96]	@ (8002a40 <HAL_UART_MspInit+0xec>)
 80029de:	2200      	movs	r2, #0
 80029e0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029e2:	4b17      	ldr	r3, [pc, #92]	@ (8002a40 <HAL_UART_MspInit+0xec>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029e8:	4b15      	ldr	r3, [pc, #84]	@ (8002a40 <HAL_UART_MspInit+0xec>)
 80029ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029ee:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029f0:	4b13      	ldr	r3, [pc, #76]	@ (8002a40 <HAL_UART_MspInit+0xec>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029f6:	4b12      	ldr	r3, [pc, #72]	@ (8002a40 <HAL_UART_MspInit+0xec>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80029fc:	4b10      	ldr	r3, [pc, #64]	@ (8002a40 <HAL_UART_MspInit+0xec>)
 80029fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a02:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a04:	4b0e      	ldr	r3, [pc, #56]	@ (8002a40 <HAL_UART_MspInit+0xec>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8002a40 <HAL_UART_MspInit+0xec>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002a10:	480b      	ldr	r0, [pc, #44]	@ (8002a40 <HAL_UART_MspInit+0xec>)
 8002a12:	f000 fddd 	bl	80035d0 <HAL_DMA_Init>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d001      	beq.n	8002a20 <HAL_UART_MspInit+0xcc>
    {
    	Sensor_Error_Handler();
 8002a1c:	f7ff f9d4 	bl	8001dc8 <Sensor_Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a07      	ldr	r2, [pc, #28]	@ (8002a40 <HAL_UART_MspInit+0xec>)
 8002a24:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002a26:	4a06      	ldr	r2, [pc, #24]	@ (8002a40 <HAL_UART_MspInit+0xec>)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6393      	str	r3, [r2, #56]	@ 0x38
  }
}
 8002a2c:	bf00      	nop
 8002a2e:	3728      	adds	r7, #40	@ 0x28
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	40004400 	.word	0x40004400
 8002a38:	40023800 	.word	0x40023800
 8002a3c:	40020c00 	.word	0x40020c00
 8002a40:	200004fc 	.word	0x200004fc
 8002a44:	40026088 	.word	0x40026088

08002a48 <DMA1_Stream5_IRQHandler>:

void DMA1_Stream5_IRQHandler(void) {
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002a4c:	4802      	ldr	r0, [pc, #8]	@ (8002a58 <DMA1_Stream5_IRQHandler+0x10>)
 8002a4e:	f000 fec5 	bl	80037dc <HAL_DMA_IRQHandler>
}
 8002a52:	bf00      	nop
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	200004fc 	.word	0x200004fc

08002a5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a60:	4b0e      	ldr	r3, [pc, #56]	@ (8002a9c <HAL_Init+0x40>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a0d      	ldr	r2, [pc, #52]	@ (8002a9c <HAL_Init+0x40>)
 8002a66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a9c <HAL_Init+0x40>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a0a      	ldr	r2, [pc, #40]	@ (8002a9c <HAL_Init+0x40>)
 8002a72:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a78:	4b08      	ldr	r3, [pc, #32]	@ (8002a9c <HAL_Init+0x40>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a07      	ldr	r2, [pc, #28]	@ (8002a9c <HAL_Init+0x40>)
 8002a7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a84:	2003      	movs	r0, #3
 8002a86:	f000 fd61 	bl	800354c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a8a:	200f      	movs	r0, #15
 8002a8c:	f000 f808 	bl	8002aa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a90:	f7fe fa7c 	bl	8000f8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40023c00 	.word	0x40023c00

08002aa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002aa8:	4b12      	ldr	r3, [pc, #72]	@ (8002af4 <HAL_InitTick+0x54>)
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	4b12      	ldr	r3, [pc, #72]	@ (8002af8 <HAL_InitTick+0x58>)
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ab6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f000 fd79 	bl	80035b6 <HAL_SYSTICK_Config>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e00e      	b.n	8002aec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2b0f      	cmp	r3, #15
 8002ad2:	d80a      	bhi.n	8002aea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	6879      	ldr	r1, [r7, #4]
 8002ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8002adc:	f000 fd41 	bl	8003562 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ae0:	4a06      	ldr	r2, [pc, #24]	@ (8002afc <HAL_InitTick+0x5c>)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	e000      	b.n	8002aec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	20000000 	.word	0x20000000
 8002af8:	20000020 	.word	0x20000020
 8002afc:	2000001c 	.word	0x2000001c

08002b00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b04:	4b06      	ldr	r3, [pc, #24]	@ (8002b20 <HAL_IncTick+0x20>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	461a      	mov	r2, r3
 8002b0a:	4b06      	ldr	r3, [pc, #24]	@ (8002b24 <HAL_IncTick+0x24>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4413      	add	r3, r2
 8002b10:	4a04      	ldr	r2, [pc, #16]	@ (8002b24 <HAL_IncTick+0x24>)
 8002b12:	6013      	str	r3, [r2, #0]
}
 8002b14:	bf00      	nop
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	20000020 	.word	0x20000020
 8002b24:	200006b8 	.word	0x200006b8

08002b28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b2c:	4b03      	ldr	r3, [pc, #12]	@ (8002b3c <HAL_GetTick+0x14>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	200006b8 	.word	0x200006b8

08002b40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b48:	f7ff ffee 	bl	8002b28 <HAL_GetTick>
 8002b4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b58:	d005      	beq.n	8002b66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b5a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b84 <HAL_Delay+0x44>)
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	461a      	mov	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	4413      	add	r3, r2
 8002b64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b66:	bf00      	nop
 8002b68:	f7ff ffde 	bl	8002b28 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d8f7      	bhi.n	8002b68 <HAL_Delay+0x28>
  {
  }
}
 8002b78:	bf00      	nop
 8002b7a:	bf00      	nop
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	20000020 	.word	0x20000020

08002b88 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b90:	2300      	movs	r3, #0
 8002b92:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e033      	b.n	8002c06 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d109      	bne.n	8002bba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f7ff fa3e 	bl	8002028 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bbe:	f003 0310 	and.w	r3, r3, #16
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d118      	bne.n	8002bf8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bca:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002bce:	f023 0302 	bic.w	r3, r3, #2
 8002bd2:	f043 0202 	orr.w	r2, r3, #2
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 fa68 	bl	80030b0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bea:	f023 0303 	bic.w	r3, r3, #3
 8002bee:	f043 0201 	orr.w	r2, r3, #1
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	641a      	str	r2, [r3, #64]	@ 0x40
 8002bf6:	e001      	b.n	8002bfc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
	...

08002c10 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d101      	bne.n	8002c2e <HAL_ADC_Start_DMA+0x1e>
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	e0e9      	b.n	8002e02 <HAL_ADC_Start_DMA+0x1f2>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f003 0301 	and.w	r3, r3, #1
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d018      	beq.n	8002c76 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	689a      	ldr	r2, [r3, #8]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f042 0201 	orr.w	r2, r2, #1
 8002c52:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002c54:	4b6d      	ldr	r3, [pc, #436]	@ (8002e0c <HAL_ADC_Start_DMA+0x1fc>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a6d      	ldr	r2, [pc, #436]	@ (8002e10 <HAL_ADC_Start_DMA+0x200>)
 8002c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5e:	0c9a      	lsrs	r2, r3, #18
 8002c60:	4613      	mov	r3, r2
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	4413      	add	r3, r2
 8002c66:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002c68:	e002      	b.n	8002c70 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1f9      	bne.n	8002c6a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c84:	d107      	bne.n	8002c96 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c94:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	f040 80a1 	bne.w	8002de8 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002caa:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002cae:	f023 0301 	bic.w	r3, r3, #1
 8002cb2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d007      	beq.n	8002cd8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ccc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002cd0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cdc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ce0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ce4:	d106      	bne.n	8002cf4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cea:	f023 0206 	bic.w	r2, r3, #6
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	645a      	str	r2, [r3, #68]	@ 0x44
 8002cf2:	e002      	b.n	8002cfa <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d02:	4b44      	ldr	r3, [pc, #272]	@ (8002e14 <HAL_ADC_Start_DMA+0x204>)
 8002d04:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d0a:	4a43      	ldr	r2, [pc, #268]	@ (8002e18 <HAL_ADC_Start_DMA+0x208>)
 8002d0c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d12:	4a42      	ldr	r2, [pc, #264]	@ (8002e1c <HAL_ADC_Start_DMA+0x20c>)
 8002d14:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d1a:	4a41      	ldr	r2, [pc, #260]	@ (8002e20 <HAL_ADC_Start_DMA+0x210>)
 8002d1c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002d26:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	685a      	ldr	r2, [r3, #4]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002d36:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	689a      	ldr	r2, [r3, #8]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d46:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	334c      	adds	r3, #76	@ 0x4c
 8002d52:	4619      	mov	r1, r3
 8002d54:	68ba      	ldr	r2, [r7, #8]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f000 fce8 	bl	800372c <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f003 031f 	and.w	r3, r3, #31
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d12a      	bne.n	8002dbe <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a2d      	ldr	r2, [pc, #180]	@ (8002e24 <HAL_ADC_Start_DMA+0x214>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d015      	beq.n	8002d9e <HAL_ADC_Start_DMA+0x18e>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a2c      	ldr	r2, [pc, #176]	@ (8002e28 <HAL_ADC_Start_DMA+0x218>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d105      	bne.n	8002d88 <HAL_ADC_Start_DMA+0x178>
 8002d7c:	4b25      	ldr	r3, [pc, #148]	@ (8002e14 <HAL_ADC_Start_DMA+0x204>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f003 031f 	and.w	r3, r3, #31
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00a      	beq.n	8002d9e <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a27      	ldr	r2, [pc, #156]	@ (8002e2c <HAL_ADC_Start_DMA+0x21c>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d136      	bne.n	8002e00 <HAL_ADC_Start_DMA+0x1f0>
 8002d92:	4b20      	ldr	r3, [pc, #128]	@ (8002e14 <HAL_ADC_Start_DMA+0x204>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f003 0310 	and.w	r3, r3, #16
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d130      	bne.n	8002e00 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d129      	bne.n	8002e00 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	689a      	ldr	r2, [r3, #8]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002dba:	609a      	str	r2, [r3, #8]
 8002dbc:	e020      	b.n	8002e00 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a18      	ldr	r2, [pc, #96]	@ (8002e24 <HAL_ADC_Start_DMA+0x214>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d11b      	bne.n	8002e00 <HAL_ADC_Start_DMA+0x1f0>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d114      	bne.n	8002e00 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	689a      	ldr	r2, [r3, #8]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002de4:	609a      	str	r2, [r3, #8]
 8002de6:	e00b      	b.n	8002e00 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dec:	f043 0210 	orr.w	r2, r3, #16
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002df8:	f043 0201 	orr.w	r2, r3, #1
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3718      	adds	r7, #24
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	20000000 	.word	0x20000000
 8002e10:	431bde83 	.word	0x431bde83
 8002e14:	40012300 	.word	0x40012300
 8002e18:	080032a9 	.word	0x080032a9
 8002e1c:	08003363 	.word	0x08003363
 8002e20:	0800337f 	.word	0x0800337f
 8002e24:	40012000 	.word	0x40012000
 8002e28:	40012100 	.word	0x40012100
 8002e2c:	40012200 	.word	0x40012200

08002e30 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002e38:	bf00      	nop
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002e76:	2300      	movs	r3, #0
 8002e78:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d101      	bne.n	8002e88 <HAL_ADC_ConfigChannel+0x1c>
 8002e84:	2302      	movs	r3, #2
 8002e86:	e105      	b.n	8003094 <HAL_ADC_ConfigChannel+0x228>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2b09      	cmp	r3, #9
 8002e96:	d925      	bls.n	8002ee4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68d9      	ldr	r1, [r3, #12]
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	4413      	add	r3, r2
 8002eac:	3b1e      	subs	r3, #30
 8002eae:	2207      	movs	r2, #7
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	43da      	mvns	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	400a      	ands	r2, r1
 8002ebc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68d9      	ldr	r1, [r3, #12]
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	689a      	ldr	r2, [r3, #8]
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	4618      	mov	r0, r3
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	4403      	add	r3, r0
 8002ed6:	3b1e      	subs	r3, #30
 8002ed8:	409a      	lsls	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	60da      	str	r2, [r3, #12]
 8002ee2:	e022      	b.n	8002f2a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	6919      	ldr	r1, [r3, #16]
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	4413      	add	r3, r2
 8002ef8:	2207      	movs	r2, #7
 8002efa:	fa02 f303 	lsl.w	r3, r2, r3
 8002efe:	43da      	mvns	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	400a      	ands	r2, r1
 8002f06:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6919      	ldr	r1, [r3, #16]
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	689a      	ldr	r2, [r3, #8]
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	4618      	mov	r0, r3
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	4403      	add	r3, r0
 8002f20:	409a      	lsls	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	430a      	orrs	r2, r1
 8002f28:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	2b06      	cmp	r3, #6
 8002f30:	d824      	bhi.n	8002f7c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685a      	ldr	r2, [r3, #4]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	4413      	add	r3, r2
 8002f42:	3b05      	subs	r3, #5
 8002f44:	221f      	movs	r2, #31
 8002f46:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4a:	43da      	mvns	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	400a      	ands	r2, r1
 8002f52:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	4618      	mov	r0, r3
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685a      	ldr	r2, [r3, #4]
 8002f66:	4613      	mov	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	4413      	add	r3, r2
 8002f6c:	3b05      	subs	r3, #5
 8002f6e:	fa00 f203 	lsl.w	r2, r0, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	430a      	orrs	r2, r1
 8002f78:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f7a:	e04c      	b.n	8003016 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	2b0c      	cmp	r3, #12
 8002f82:	d824      	bhi.n	8002fce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685a      	ldr	r2, [r3, #4]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	4413      	add	r3, r2
 8002f94:	3b23      	subs	r3, #35	@ 0x23
 8002f96:	221f      	movs	r2, #31
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	43da      	mvns	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	400a      	ands	r2, r1
 8002fa4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685a      	ldr	r2, [r3, #4]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	4413      	add	r3, r2
 8002fbe:	3b23      	subs	r3, #35	@ 0x23
 8002fc0:	fa00 f203 	lsl.w	r2, r0, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	631a      	str	r2, [r3, #48]	@ 0x30
 8002fcc:	e023      	b.n	8003016 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685a      	ldr	r2, [r3, #4]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	4413      	add	r3, r2
 8002fde:	3b41      	subs	r3, #65	@ 0x41
 8002fe0:	221f      	movs	r2, #31
 8002fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe6:	43da      	mvns	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	400a      	ands	r2, r1
 8002fee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685a      	ldr	r2, [r3, #4]
 8003002:	4613      	mov	r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	4413      	add	r3, r2
 8003008:	3b41      	subs	r3, #65	@ 0x41
 800300a:	fa00 f203 	lsl.w	r2, r0, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	430a      	orrs	r2, r1
 8003014:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003016:	4b22      	ldr	r3, [pc, #136]	@ (80030a0 <HAL_ADC_ConfigChannel+0x234>)
 8003018:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a21      	ldr	r2, [pc, #132]	@ (80030a4 <HAL_ADC_ConfigChannel+0x238>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d109      	bne.n	8003038 <HAL_ADC_ConfigChannel+0x1cc>
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2b12      	cmp	r3, #18
 800302a:	d105      	bne.n	8003038 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a19      	ldr	r2, [pc, #100]	@ (80030a4 <HAL_ADC_ConfigChannel+0x238>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d123      	bne.n	800308a <HAL_ADC_ConfigChannel+0x21e>
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2b10      	cmp	r3, #16
 8003048:	d003      	beq.n	8003052 <HAL_ADC_ConfigChannel+0x1e6>
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2b11      	cmp	r3, #17
 8003050:	d11b      	bne.n	800308a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2b10      	cmp	r3, #16
 8003064:	d111      	bne.n	800308a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003066:	4b10      	ldr	r3, [pc, #64]	@ (80030a8 <HAL_ADC_ConfigChannel+0x23c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a10      	ldr	r2, [pc, #64]	@ (80030ac <HAL_ADC_ConfigChannel+0x240>)
 800306c:	fba2 2303 	umull	r2, r3, r2, r3
 8003070:	0c9a      	lsrs	r2, r3, #18
 8003072:	4613      	mov	r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	4413      	add	r3, r2
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800307c:	e002      	b.n	8003084 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	3b01      	subs	r3, #1
 8003082:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1f9      	bne.n	800307e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3714      	adds	r7, #20
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr
 80030a0:	40012300 	.word	0x40012300
 80030a4:	40012000 	.word	0x40012000
 80030a8:	20000000 	.word	0x20000000
 80030ac:	431bde83 	.word	0x431bde83

080030b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b085      	sub	sp, #20
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030b8:	4b79      	ldr	r3, [pc, #484]	@ (80032a0 <ADC_Init+0x1f0>)
 80030ba:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	685a      	ldr	r2, [r3, #4]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	431a      	orrs	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	685a      	ldr	r2, [r3, #4]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80030e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6859      	ldr	r1, [r3, #4]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	021a      	lsls	r2, r3, #8
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	685a      	ldr	r2, [r3, #4]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003108:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	6859      	ldr	r1, [r3, #4]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689a      	ldr	r2, [r3, #8]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	430a      	orrs	r2, r1
 800311a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	689a      	ldr	r2, [r3, #8]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800312a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	6899      	ldr	r1, [r3, #8]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	68da      	ldr	r2, [r3, #12]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	430a      	orrs	r2, r1
 800313c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003142:	4a58      	ldr	r2, [pc, #352]	@ (80032a4 <ADC_Init+0x1f4>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d022      	beq.n	800318e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689a      	ldr	r2, [r3, #8]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003156:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	6899      	ldr	r1, [r3, #8]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	430a      	orrs	r2, r1
 8003168:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	689a      	ldr	r2, [r3, #8]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003178:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6899      	ldr	r1, [r3, #8]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	430a      	orrs	r2, r1
 800318a:	609a      	str	r2, [r3, #8]
 800318c:	e00f      	b.n	80031ae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800319c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	689a      	ldr	r2, [r3, #8]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80031ac:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	689a      	ldr	r2, [r3, #8]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f022 0202 	bic.w	r2, r2, #2
 80031bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	6899      	ldr	r1, [r3, #8]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	7e1b      	ldrb	r3, [r3, #24]
 80031c8:	005a      	lsls	r2, r3, #1
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	430a      	orrs	r2, r1
 80031d0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d01b      	beq.n	8003214 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	685a      	ldr	r2, [r3, #4]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031ea:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80031fa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	6859      	ldr	r1, [r3, #4]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003206:	3b01      	subs	r3, #1
 8003208:	035a      	lsls	r2, r3, #13
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	605a      	str	r2, [r3, #4]
 8003212:	e007      	b.n	8003224 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	685a      	ldr	r2, [r3, #4]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003222:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003232:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	69db      	ldr	r3, [r3, #28]
 800323e:	3b01      	subs	r3, #1
 8003240:	051a      	lsls	r2, r3, #20
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	430a      	orrs	r2, r1
 8003248:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003258:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	6899      	ldr	r1, [r3, #8]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003266:	025a      	lsls	r2, r3, #9
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	430a      	orrs	r2, r1
 800326e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689a      	ldr	r2, [r3, #8]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800327e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	6899      	ldr	r1, [r3, #8]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	029a      	lsls	r2, r3, #10
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	430a      	orrs	r2, r1
 8003292:	609a      	str	r2, [r3, #8]
}
 8003294:	bf00      	nop
 8003296:	3714      	adds	r7, #20
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr
 80032a0:	40012300 	.word	0x40012300
 80032a4:	0f000001 	.word	0x0f000001

080032a8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032b4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ba:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d13c      	bne.n	800333c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d12b      	bne.n	8003334 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d127      	bne.n	8003334 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ea:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d006      	beq.n	8003300 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d119      	bne.n	8003334 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	685a      	ldr	r2, [r3, #4]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f022 0220 	bic.w	r2, r2, #32
 800330e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003314:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003320:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d105      	bne.n	8003334 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332c:	f043 0201 	orr.w	r2, r3, #1
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003334:	68f8      	ldr	r0, [r7, #12]
 8003336:	f7ff fd7b 	bl	8002e30 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800333a:	e00e      	b.n	800335a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003340:	f003 0310 	and.w	r3, r3, #16
 8003344:	2b00      	cmp	r3, #0
 8003346:	d003      	beq.n	8003350 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003348:	68f8      	ldr	r0, [r7, #12]
 800334a:	f7ff fd85 	bl	8002e58 <HAL_ADC_ErrorCallback>
}
 800334e:	e004      	b.n	800335a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	4798      	blx	r3
}
 800335a:	bf00      	nop
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b084      	sub	sp, #16
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800336e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	f7ff fd67 	bl	8002e44 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003376:	bf00      	nop
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800337e:	b580      	push	{r7, lr}
 8003380:	b084      	sub	sp, #16
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800338a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2240      	movs	r2, #64	@ 0x40
 8003390:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003396:	f043 0204 	orr.w	r2, r3, #4
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	f7ff fd5a 	bl	8002e58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80033a4:	bf00      	nop
 80033a6:	3710      	adds	r7, #16
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b085      	sub	sp, #20
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f003 0307 	and.w	r3, r3, #7
 80033ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033bc:	4b0c      	ldr	r3, [pc, #48]	@ (80033f0 <__NVIC_SetPriorityGrouping+0x44>)
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033c2:	68ba      	ldr	r2, [r7, #8]
 80033c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80033c8:	4013      	ands	r3, r2
 80033ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80033d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033de:	4a04      	ldr	r2, [pc, #16]	@ (80033f0 <__NVIC_SetPriorityGrouping+0x44>)
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	60d3      	str	r3, [r2, #12]
}
 80033e4:	bf00      	nop
 80033e6:	3714      	adds	r7, #20
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr
 80033f0:	e000ed00 	.word	0xe000ed00

080033f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033f8:	4b04      	ldr	r3, [pc, #16]	@ (800340c <__NVIC_GetPriorityGrouping+0x18>)
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	0a1b      	lsrs	r3, r3, #8
 80033fe:	f003 0307 	and.w	r3, r3, #7
}
 8003402:	4618      	mov	r0, r3
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr
 800340c:	e000ed00 	.word	0xe000ed00

08003410 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	4603      	mov	r3, r0
 8003418:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800341a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800341e:	2b00      	cmp	r3, #0
 8003420:	db0b      	blt.n	800343a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003422:	79fb      	ldrb	r3, [r7, #7]
 8003424:	f003 021f 	and.w	r2, r3, #31
 8003428:	4907      	ldr	r1, [pc, #28]	@ (8003448 <__NVIC_EnableIRQ+0x38>)
 800342a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800342e:	095b      	lsrs	r3, r3, #5
 8003430:	2001      	movs	r0, #1
 8003432:	fa00 f202 	lsl.w	r2, r0, r2
 8003436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800343a:	bf00      	nop
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	e000e100 	.word	0xe000e100

0800344c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	4603      	mov	r3, r0
 8003454:	6039      	str	r1, [r7, #0]
 8003456:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800345c:	2b00      	cmp	r3, #0
 800345e:	db0a      	blt.n	8003476 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	b2da      	uxtb	r2, r3
 8003464:	490c      	ldr	r1, [pc, #48]	@ (8003498 <__NVIC_SetPriority+0x4c>)
 8003466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800346a:	0112      	lsls	r2, r2, #4
 800346c:	b2d2      	uxtb	r2, r2
 800346e:	440b      	add	r3, r1
 8003470:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003474:	e00a      	b.n	800348c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	b2da      	uxtb	r2, r3
 800347a:	4908      	ldr	r1, [pc, #32]	@ (800349c <__NVIC_SetPriority+0x50>)
 800347c:	79fb      	ldrb	r3, [r7, #7]
 800347e:	f003 030f 	and.w	r3, r3, #15
 8003482:	3b04      	subs	r3, #4
 8003484:	0112      	lsls	r2, r2, #4
 8003486:	b2d2      	uxtb	r2, r2
 8003488:	440b      	add	r3, r1
 800348a:	761a      	strb	r2, [r3, #24]
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr
 8003498:	e000e100 	.word	0xe000e100
 800349c:	e000ed00 	.word	0xe000ed00

080034a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b089      	sub	sp, #36	@ 0x24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f003 0307 	and.w	r3, r3, #7
 80034b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	f1c3 0307 	rsb	r3, r3, #7
 80034ba:	2b04      	cmp	r3, #4
 80034bc:	bf28      	it	cs
 80034be:	2304      	movcs	r3, #4
 80034c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	3304      	adds	r3, #4
 80034c6:	2b06      	cmp	r3, #6
 80034c8:	d902      	bls.n	80034d0 <NVIC_EncodePriority+0x30>
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	3b03      	subs	r3, #3
 80034ce:	e000      	b.n	80034d2 <NVIC_EncodePriority+0x32>
 80034d0:	2300      	movs	r3, #0
 80034d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034d4:	f04f 32ff 	mov.w	r2, #4294967295
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	fa02 f303 	lsl.w	r3, r2, r3
 80034de:	43da      	mvns	r2, r3
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	401a      	ands	r2, r3
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034e8:	f04f 31ff 	mov.w	r1, #4294967295
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	fa01 f303 	lsl.w	r3, r1, r3
 80034f2:	43d9      	mvns	r1, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034f8:	4313      	orrs	r3, r2
         );
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3724      	adds	r7, #36	@ 0x24
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
	...

08003508 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	3b01      	subs	r3, #1
 8003514:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003518:	d301      	bcc.n	800351e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800351a:	2301      	movs	r3, #1
 800351c:	e00f      	b.n	800353e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800351e:	4a0a      	ldr	r2, [pc, #40]	@ (8003548 <SysTick_Config+0x40>)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	3b01      	subs	r3, #1
 8003524:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003526:	210f      	movs	r1, #15
 8003528:	f04f 30ff 	mov.w	r0, #4294967295
 800352c:	f7ff ff8e 	bl	800344c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003530:	4b05      	ldr	r3, [pc, #20]	@ (8003548 <SysTick_Config+0x40>)
 8003532:	2200      	movs	r2, #0
 8003534:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003536:	4b04      	ldr	r3, [pc, #16]	@ (8003548 <SysTick_Config+0x40>)
 8003538:	2207      	movs	r2, #7
 800353a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	e000e010 	.word	0xe000e010

0800354c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f7ff ff29 	bl	80033ac <__NVIC_SetPriorityGrouping>
}
 800355a:	bf00      	nop
 800355c:	3708      	adds	r7, #8
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003562:	b580      	push	{r7, lr}
 8003564:	b086      	sub	sp, #24
 8003566:	af00      	add	r7, sp, #0
 8003568:	4603      	mov	r3, r0
 800356a:	60b9      	str	r1, [r7, #8]
 800356c:	607a      	str	r2, [r7, #4]
 800356e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003570:	2300      	movs	r3, #0
 8003572:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003574:	f7ff ff3e 	bl	80033f4 <__NVIC_GetPriorityGrouping>
 8003578:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	68b9      	ldr	r1, [r7, #8]
 800357e:	6978      	ldr	r0, [r7, #20]
 8003580:	f7ff ff8e 	bl	80034a0 <NVIC_EncodePriority>
 8003584:	4602      	mov	r2, r0
 8003586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800358a:	4611      	mov	r1, r2
 800358c:	4618      	mov	r0, r3
 800358e:	f7ff ff5d 	bl	800344c <__NVIC_SetPriority>
}
 8003592:	bf00      	nop
 8003594:	3718      	adds	r7, #24
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b082      	sub	sp, #8
 800359e:	af00      	add	r7, sp, #0
 80035a0:	4603      	mov	r3, r0
 80035a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7ff ff31 	bl	8003410 <__NVIC_EnableIRQ>
}
 80035ae:	bf00      	nop
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b082      	sub	sp, #8
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f7ff ffa2 	bl	8003508 <SysTick_Config>
 80035c4:	4603      	mov	r3, r0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
	...

080035d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b086      	sub	sp, #24
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80035d8:	2300      	movs	r3, #0
 80035da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80035dc:	f7ff faa4 	bl	8002b28 <HAL_GetTick>
 80035e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d101      	bne.n	80035ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e099      	b.n	8003720 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2202      	movs	r2, #2
 80035f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f022 0201 	bic.w	r2, r2, #1
 800360a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800360c:	e00f      	b.n	800362e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800360e:	f7ff fa8b 	bl	8002b28 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	2b05      	cmp	r3, #5
 800361a:	d908      	bls.n	800362e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2220      	movs	r2, #32
 8003620:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2203      	movs	r2, #3
 8003626:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e078      	b.n	8003720 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0301 	and.w	r3, r3, #1
 8003638:	2b00      	cmp	r3, #0
 800363a:	d1e8      	bne.n	800360e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003644:	697a      	ldr	r2, [r7, #20]
 8003646:	4b38      	ldr	r3, [pc, #224]	@ (8003728 <HAL_DMA_Init+0x158>)
 8003648:	4013      	ands	r3, r2
 800364a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685a      	ldr	r2, [r3, #4]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800365a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003666:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	699b      	ldr	r3, [r3, #24]
 800366c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003672:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a1b      	ldr	r3, [r3, #32]
 8003678:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	4313      	orrs	r3, r2
 800367e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003684:	2b04      	cmp	r3, #4
 8003686:	d107      	bne.n	8003698 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003690:	4313      	orrs	r3, r2
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	4313      	orrs	r3, r2
 8003696:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	697a      	ldr	r2, [r7, #20]
 800369e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	f023 0307 	bic.w	r3, r3, #7
 80036ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b4:	697a      	ldr	r2, [r7, #20]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036be:	2b04      	cmp	r3, #4
 80036c0:	d117      	bne.n	80036f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036c6:	697a      	ldr	r2, [r7, #20]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00e      	beq.n	80036f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 fa6f 	bl	8003bb8 <DMA_CheckFifoParam>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d008      	beq.n	80036f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2240      	movs	r2, #64	@ 0x40
 80036e4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80036ee:	2301      	movs	r3, #1
 80036f0:	e016      	b.n	8003720 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	697a      	ldr	r2, [r7, #20]
 80036f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 fa26 	bl	8003b4c <DMA_CalcBaseAndBitshift>
 8003700:	4603      	mov	r3, r0
 8003702:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003708:	223f      	movs	r2, #63	@ 0x3f
 800370a:	409a      	lsls	r2, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	3718      	adds	r7, #24
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	f010803f 	.word	0xf010803f

0800372c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
 8003738:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800373a:	2300      	movs	r3, #0
 800373c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003742:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800374a:	2b01      	cmp	r3, #1
 800374c:	d101      	bne.n	8003752 <HAL_DMA_Start_IT+0x26>
 800374e:	2302      	movs	r3, #2
 8003750:	e040      	b.n	80037d4 <HAL_DMA_Start_IT+0xa8>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b01      	cmp	r3, #1
 8003764:	d12f      	bne.n	80037c6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2202      	movs	r2, #2
 800376a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	68b9      	ldr	r1, [r7, #8]
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f000 f9b8 	bl	8003af0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003784:	223f      	movs	r2, #63	@ 0x3f
 8003786:	409a      	lsls	r2, r3
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f042 0216 	orr.w	r2, r2, #22
 800379a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d007      	beq.n	80037b4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f042 0208 	orr.w	r2, r2, #8
 80037b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f042 0201 	orr.w	r2, r2, #1
 80037c2:	601a      	str	r2, [r3, #0]
 80037c4:	e005      	b.n	80037d2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80037ce:	2302      	movs	r3, #2
 80037d0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80037d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3718      	adds	r7, #24
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b086      	sub	sp, #24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80037e4:	2300      	movs	r3, #0
 80037e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80037e8:	4b8e      	ldr	r3, [pc, #568]	@ (8003a24 <HAL_DMA_IRQHandler+0x248>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a8e      	ldr	r2, [pc, #568]	@ (8003a28 <HAL_DMA_IRQHandler+0x24c>)
 80037ee:	fba2 2303 	umull	r2, r3, r2, r3
 80037f2:	0a9b      	lsrs	r3, r3, #10
 80037f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003806:	2208      	movs	r2, #8
 8003808:	409a      	lsls	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	4013      	ands	r3, r2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d01a      	beq.n	8003848 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0304 	and.w	r3, r3, #4
 800381c:	2b00      	cmp	r3, #0
 800381e:	d013      	beq.n	8003848 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 0204 	bic.w	r2, r2, #4
 800382e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003834:	2208      	movs	r2, #8
 8003836:	409a      	lsls	r2, r3
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003840:	f043 0201 	orr.w	r2, r3, #1
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800384c:	2201      	movs	r2, #1
 800384e:	409a      	lsls	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	4013      	ands	r3, r2
 8003854:	2b00      	cmp	r3, #0
 8003856:	d012      	beq.n	800387e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00b      	beq.n	800387e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800386a:	2201      	movs	r2, #1
 800386c:	409a      	lsls	r2, r3
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003876:	f043 0202 	orr.w	r2, r3, #2
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003882:	2204      	movs	r2, #4
 8003884:	409a      	lsls	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	4013      	ands	r3, r2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d012      	beq.n	80038b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0302 	and.w	r3, r3, #2
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00b      	beq.n	80038b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038a0:	2204      	movs	r2, #4
 80038a2:	409a      	lsls	r2, r3
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038ac:	f043 0204 	orr.w	r2, r3, #4
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038b8:	2210      	movs	r2, #16
 80038ba:	409a      	lsls	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	4013      	ands	r3, r2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d043      	beq.n	800394c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0308 	and.w	r3, r3, #8
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d03c      	beq.n	800394c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038d6:	2210      	movs	r2, #16
 80038d8:	409a      	lsls	r2, r3
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d018      	beq.n	800391e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d108      	bne.n	800390c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d024      	beq.n	800394c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	4798      	blx	r3
 800390a:	e01f      	b.n	800394c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003910:	2b00      	cmp	r3, #0
 8003912:	d01b      	beq.n	800394c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	4798      	blx	r3
 800391c:	e016      	b.n	800394c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003928:	2b00      	cmp	r3, #0
 800392a:	d107      	bne.n	800393c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f022 0208 	bic.w	r2, r2, #8
 800393a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003940:	2b00      	cmp	r3, #0
 8003942:	d003      	beq.n	800394c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003950:	2220      	movs	r2, #32
 8003952:	409a      	lsls	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	4013      	ands	r3, r2
 8003958:	2b00      	cmp	r3, #0
 800395a:	f000 808f 	beq.w	8003a7c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0310 	and.w	r3, r3, #16
 8003968:	2b00      	cmp	r3, #0
 800396a:	f000 8087 	beq.w	8003a7c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003972:	2220      	movs	r2, #32
 8003974:	409a      	lsls	r2, r3
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2b05      	cmp	r3, #5
 8003984:	d136      	bne.n	80039f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f022 0216 	bic.w	r2, r2, #22
 8003994:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	695a      	ldr	r2, [r3, #20]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80039a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d103      	bne.n	80039b6 <HAL_DMA_IRQHandler+0x1da>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d007      	beq.n	80039c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f022 0208 	bic.w	r2, r2, #8
 80039c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039ca:	223f      	movs	r2, #63	@ 0x3f
 80039cc:	409a      	lsls	r2, r3
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d07e      	beq.n	8003ae8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	4798      	blx	r3
        }
        return;
 80039f2:	e079      	b.n	8003ae8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d01d      	beq.n	8003a3e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d10d      	bne.n	8003a2c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d031      	beq.n	8003a7c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	4798      	blx	r3
 8003a20:	e02c      	b.n	8003a7c <HAL_DMA_IRQHandler+0x2a0>
 8003a22:	bf00      	nop
 8003a24:	20000000 	.word	0x20000000
 8003a28:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d023      	beq.n	8003a7c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	4798      	blx	r3
 8003a3c:	e01e      	b.n	8003a7c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d10f      	bne.n	8003a6c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f022 0210 	bic.w	r2, r2, #16
 8003a5a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d003      	beq.n	8003a7c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d032      	beq.n	8003aea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d022      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2205      	movs	r2, #5
 8003a94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f022 0201 	bic.w	r2, r2, #1
 8003aa6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	60bb      	str	r3, [r7, #8]
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d307      	bcc.n	8003ac4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1f2      	bne.n	8003aa8 <HAL_DMA_IRQHandler+0x2cc>
 8003ac2:	e000      	b.n	8003ac6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003ac4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d005      	beq.n	8003aea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	4798      	blx	r3
 8003ae6:	e000      	b.n	8003aea <HAL_DMA_IRQHandler+0x30e>
        return;
 8003ae8:	bf00      	nop
    }
  }
}
 8003aea:	3718      	adds	r7, #24
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
 8003afc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003b0c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	683a      	ldr	r2, [r7, #0]
 8003b14:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	2b40      	cmp	r3, #64	@ 0x40
 8003b1c:	d108      	bne.n	8003b30 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68ba      	ldr	r2, [r7, #8]
 8003b2c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003b2e:	e007      	b.n	8003b40 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68ba      	ldr	r2, [r7, #8]
 8003b36:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	60da      	str	r2, [r3, #12]
}
 8003b40:	bf00      	nop
 8003b42:	3714      	adds	r7, #20
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	3b10      	subs	r3, #16
 8003b5c:	4a14      	ldr	r2, [pc, #80]	@ (8003bb0 <DMA_CalcBaseAndBitshift+0x64>)
 8003b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b62:	091b      	lsrs	r3, r3, #4
 8003b64:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003b66:	4a13      	ldr	r2, [pc, #76]	@ (8003bb4 <DMA_CalcBaseAndBitshift+0x68>)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	461a      	mov	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2b03      	cmp	r3, #3
 8003b78:	d909      	bls.n	8003b8e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003b82:	f023 0303 	bic.w	r3, r3, #3
 8003b86:	1d1a      	adds	r2, r3, #4
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	659a      	str	r2, [r3, #88]	@ 0x58
 8003b8c:	e007      	b.n	8003b9e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003b96:	f023 0303 	bic.w	r3, r3, #3
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3714      	adds	r7, #20
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	aaaaaaab 	.word	0xaaaaaaab
 8003bb4:	08009380 	.word	0x08009380

08003bb8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bc8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d11f      	bne.n	8003c12 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	2b03      	cmp	r3, #3
 8003bd6:	d856      	bhi.n	8003c86 <DMA_CheckFifoParam+0xce>
 8003bd8:	a201      	add	r2, pc, #4	@ (adr r2, 8003be0 <DMA_CheckFifoParam+0x28>)
 8003bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bde:	bf00      	nop
 8003be0:	08003bf1 	.word	0x08003bf1
 8003be4:	08003c03 	.word	0x08003c03
 8003be8:	08003bf1 	.word	0x08003bf1
 8003bec:	08003c87 	.word	0x08003c87
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bf4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d046      	beq.n	8003c8a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c00:	e043      	b.n	8003c8a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c06:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003c0a:	d140      	bne.n	8003c8e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c10:	e03d      	b.n	8003c8e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c1a:	d121      	bne.n	8003c60 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	2b03      	cmp	r3, #3
 8003c20:	d837      	bhi.n	8003c92 <DMA_CheckFifoParam+0xda>
 8003c22:	a201      	add	r2, pc, #4	@ (adr r2, 8003c28 <DMA_CheckFifoParam+0x70>)
 8003c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c28:	08003c39 	.word	0x08003c39
 8003c2c:	08003c3f 	.word	0x08003c3f
 8003c30:	08003c39 	.word	0x08003c39
 8003c34:	08003c51 	.word	0x08003c51
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c3c:	e030      	b.n	8003ca0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c42:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d025      	beq.n	8003c96 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c4e:	e022      	b.n	8003c96 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c54:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003c58:	d11f      	bne.n	8003c9a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003c5e:	e01c      	b.n	8003c9a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d903      	bls.n	8003c6e <DMA_CheckFifoParam+0xb6>
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	2b03      	cmp	r3, #3
 8003c6a:	d003      	beq.n	8003c74 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003c6c:	e018      	b.n	8003ca0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	73fb      	strb	r3, [r7, #15]
      break;
 8003c72:	e015      	b.n	8003ca0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c78:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00e      	beq.n	8003c9e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	73fb      	strb	r3, [r7, #15]
      break;
 8003c84:	e00b      	b.n	8003c9e <DMA_CheckFifoParam+0xe6>
      break;
 8003c86:	bf00      	nop
 8003c88:	e00a      	b.n	8003ca0 <DMA_CheckFifoParam+0xe8>
      break;
 8003c8a:	bf00      	nop
 8003c8c:	e008      	b.n	8003ca0 <DMA_CheckFifoParam+0xe8>
      break;
 8003c8e:	bf00      	nop
 8003c90:	e006      	b.n	8003ca0 <DMA_CheckFifoParam+0xe8>
      break;
 8003c92:	bf00      	nop
 8003c94:	e004      	b.n	8003ca0 <DMA_CheckFifoParam+0xe8>
      break;
 8003c96:	bf00      	nop
 8003c98:	e002      	b.n	8003ca0 <DMA_CheckFifoParam+0xe8>
      break;   
 8003c9a:	bf00      	nop
 8003c9c:	e000      	b.n	8003ca0 <DMA_CheckFifoParam+0xe8>
      break;
 8003c9e:	bf00      	nop
    }
  } 
  
  return status; 
 8003ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3714      	adds	r7, #20
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop

08003cb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b089      	sub	sp, #36	@ 0x24
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	61fb      	str	r3, [r7, #28]
 8003cca:	e16b      	b.n	8003fa4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ccc:	2201      	movs	r2, #1
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	4013      	ands	r3, r2
 8003cde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	f040 815a 	bne.w	8003f9e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f003 0303 	and.w	r3, r3, #3
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d005      	beq.n	8003d02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d130      	bne.n	8003d64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	005b      	lsls	r3, r3, #1
 8003d0c:	2203      	movs	r2, #3
 8003d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d12:	43db      	mvns	r3, r3
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	4013      	ands	r3, r2
 8003d18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	68da      	ldr	r2, [r3, #12]
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	fa02 f303 	lsl.w	r3, r2, r3
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	69ba      	ldr	r2, [r7, #24]
 8003d30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d38:	2201      	movs	r2, #1
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d40:	43db      	mvns	r3, r3
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	4013      	ands	r3, r2
 8003d46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	091b      	lsrs	r3, r3, #4
 8003d4e:	f003 0201 	and.w	r2, r3, #1
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	fa02 f303 	lsl.w	r3, r2, r3
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f003 0303 	and.w	r3, r3, #3
 8003d6c:	2b03      	cmp	r3, #3
 8003d6e:	d017      	beq.n	8003da0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	005b      	lsls	r3, r3, #1
 8003d7a:	2203      	movs	r2, #3
 8003d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d80:	43db      	mvns	r3, r3
 8003d82:	69ba      	ldr	r2, [r7, #24]
 8003d84:	4013      	ands	r3, r2
 8003d86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	689a      	ldr	r2, [r3, #8]
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	005b      	lsls	r3, r3, #1
 8003d90:	fa02 f303 	lsl.w	r3, r2, r3
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	69ba      	ldr	r2, [r7, #24]
 8003d9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f003 0303 	and.w	r3, r3, #3
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d123      	bne.n	8003df4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	08da      	lsrs	r2, r3, #3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	3208      	adds	r2, #8
 8003db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003db8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	f003 0307 	and.w	r3, r3, #7
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	220f      	movs	r2, #15
 8003dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc8:	43db      	mvns	r3, r3
 8003dca:	69ba      	ldr	r2, [r7, #24]
 8003dcc:	4013      	ands	r3, r2
 8003dce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	691a      	ldr	r2, [r3, #16]
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	f003 0307 	and.w	r3, r3, #7
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8003de0:	69ba      	ldr	r2, [r7, #24]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	08da      	lsrs	r2, r3, #3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	3208      	adds	r2, #8
 8003dee:	69b9      	ldr	r1, [r7, #24]
 8003df0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	005b      	lsls	r3, r3, #1
 8003dfe:	2203      	movs	r2, #3
 8003e00:	fa02 f303 	lsl.w	r3, r2, r3
 8003e04:	43db      	mvns	r3, r3
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f003 0203 	and.w	r2, r3, #3
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	005b      	lsls	r3, r3, #1
 8003e18:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1c:	69ba      	ldr	r2, [r7, #24]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 80b4 	beq.w	8003f9e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e36:	2300      	movs	r3, #0
 8003e38:	60fb      	str	r3, [r7, #12]
 8003e3a:	4b60      	ldr	r3, [pc, #384]	@ (8003fbc <HAL_GPIO_Init+0x30c>)
 8003e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e3e:	4a5f      	ldr	r2, [pc, #380]	@ (8003fbc <HAL_GPIO_Init+0x30c>)
 8003e40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e44:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e46:	4b5d      	ldr	r3, [pc, #372]	@ (8003fbc <HAL_GPIO_Init+0x30c>)
 8003e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e4e:	60fb      	str	r3, [r7, #12]
 8003e50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e52:	4a5b      	ldr	r2, [pc, #364]	@ (8003fc0 <HAL_GPIO_Init+0x310>)
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	089b      	lsrs	r3, r3, #2
 8003e58:	3302      	adds	r3, #2
 8003e5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	f003 0303 	and.w	r3, r3, #3
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	220f      	movs	r2, #15
 8003e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6e:	43db      	mvns	r3, r3
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	4013      	ands	r3, r2
 8003e74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a52      	ldr	r2, [pc, #328]	@ (8003fc4 <HAL_GPIO_Init+0x314>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d02b      	beq.n	8003ed6 <HAL_GPIO_Init+0x226>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a51      	ldr	r2, [pc, #324]	@ (8003fc8 <HAL_GPIO_Init+0x318>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d025      	beq.n	8003ed2 <HAL_GPIO_Init+0x222>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a50      	ldr	r2, [pc, #320]	@ (8003fcc <HAL_GPIO_Init+0x31c>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d01f      	beq.n	8003ece <HAL_GPIO_Init+0x21e>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a4f      	ldr	r2, [pc, #316]	@ (8003fd0 <HAL_GPIO_Init+0x320>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d019      	beq.n	8003eca <HAL_GPIO_Init+0x21a>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a4e      	ldr	r2, [pc, #312]	@ (8003fd4 <HAL_GPIO_Init+0x324>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d013      	beq.n	8003ec6 <HAL_GPIO_Init+0x216>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a4d      	ldr	r2, [pc, #308]	@ (8003fd8 <HAL_GPIO_Init+0x328>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d00d      	beq.n	8003ec2 <HAL_GPIO_Init+0x212>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a4c      	ldr	r2, [pc, #304]	@ (8003fdc <HAL_GPIO_Init+0x32c>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d007      	beq.n	8003ebe <HAL_GPIO_Init+0x20e>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a4b      	ldr	r2, [pc, #300]	@ (8003fe0 <HAL_GPIO_Init+0x330>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d101      	bne.n	8003eba <HAL_GPIO_Init+0x20a>
 8003eb6:	2307      	movs	r3, #7
 8003eb8:	e00e      	b.n	8003ed8 <HAL_GPIO_Init+0x228>
 8003eba:	2308      	movs	r3, #8
 8003ebc:	e00c      	b.n	8003ed8 <HAL_GPIO_Init+0x228>
 8003ebe:	2306      	movs	r3, #6
 8003ec0:	e00a      	b.n	8003ed8 <HAL_GPIO_Init+0x228>
 8003ec2:	2305      	movs	r3, #5
 8003ec4:	e008      	b.n	8003ed8 <HAL_GPIO_Init+0x228>
 8003ec6:	2304      	movs	r3, #4
 8003ec8:	e006      	b.n	8003ed8 <HAL_GPIO_Init+0x228>
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e004      	b.n	8003ed8 <HAL_GPIO_Init+0x228>
 8003ece:	2302      	movs	r3, #2
 8003ed0:	e002      	b.n	8003ed8 <HAL_GPIO_Init+0x228>
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e000      	b.n	8003ed8 <HAL_GPIO_Init+0x228>
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	69fa      	ldr	r2, [r7, #28]
 8003eda:	f002 0203 	and.w	r2, r2, #3
 8003ede:	0092      	lsls	r2, r2, #2
 8003ee0:	4093      	lsls	r3, r2
 8003ee2:	69ba      	ldr	r2, [r7, #24]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ee8:	4935      	ldr	r1, [pc, #212]	@ (8003fc0 <HAL_GPIO_Init+0x310>)
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	089b      	lsrs	r3, r3, #2
 8003eee:	3302      	adds	r3, #2
 8003ef0:	69ba      	ldr	r2, [r7, #24]
 8003ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ef6:	4b3b      	ldr	r3, [pc, #236]	@ (8003fe4 <HAL_GPIO_Init+0x334>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	43db      	mvns	r3, r3
 8003f00:	69ba      	ldr	r2, [r7, #24]
 8003f02:	4013      	ands	r3, r2
 8003f04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d003      	beq.n	8003f1a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003f12:	69ba      	ldr	r2, [r7, #24]
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f1a:	4a32      	ldr	r2, [pc, #200]	@ (8003fe4 <HAL_GPIO_Init+0x334>)
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f20:	4b30      	ldr	r3, [pc, #192]	@ (8003fe4 <HAL_GPIO_Init+0x334>)
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	43db      	mvns	r3, r3
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d003      	beq.n	8003f44 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f44:	4a27      	ldr	r2, [pc, #156]	@ (8003fe4 <HAL_GPIO_Init+0x334>)
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f4a:	4b26      	ldr	r3, [pc, #152]	@ (8003fe4 <HAL_GPIO_Init+0x334>)
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	43db      	mvns	r3, r3
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	4013      	ands	r3, r2
 8003f58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d003      	beq.n	8003f6e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003f66:	69ba      	ldr	r2, [r7, #24]
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f6e:	4a1d      	ldr	r2, [pc, #116]	@ (8003fe4 <HAL_GPIO_Init+0x334>)
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f74:	4b1b      	ldr	r3, [pc, #108]	@ (8003fe4 <HAL_GPIO_Init+0x334>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	43db      	mvns	r3, r3
 8003f7e:	69ba      	ldr	r2, [r7, #24]
 8003f80:	4013      	ands	r3, r2
 8003f82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d003      	beq.n	8003f98 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003f90:	69ba      	ldr	r2, [r7, #24]
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f98:	4a12      	ldr	r2, [pc, #72]	@ (8003fe4 <HAL_GPIO_Init+0x334>)
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	61fb      	str	r3, [r7, #28]
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	2b0f      	cmp	r3, #15
 8003fa8:	f67f ae90 	bls.w	8003ccc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003fac:	bf00      	nop
 8003fae:	bf00      	nop
 8003fb0:	3724      	adds	r7, #36	@ 0x24
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	40023800 	.word	0x40023800
 8003fc0:	40013800 	.word	0x40013800
 8003fc4:	40020000 	.word	0x40020000
 8003fc8:	40020400 	.word	0x40020400
 8003fcc:	40020800 	.word	0x40020800
 8003fd0:	40020c00 	.word	0x40020c00
 8003fd4:	40021000 	.word	0x40021000
 8003fd8:	40021400 	.word	0x40021400
 8003fdc:	40021800 	.word	0x40021800
 8003fe0:	40021c00 	.word	0x40021c00
 8003fe4:	40013c00 	.word	0x40013c00

08003fe8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	691a      	ldr	r2, [r3, #16]
 8003ff8:	887b      	ldrh	r3, [r7, #2]
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d002      	beq.n	8004006 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004000:	2301      	movs	r3, #1
 8004002:	73fb      	strb	r3, [r7, #15]
 8004004:	e001      	b.n	800400a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004006:	2300      	movs	r3, #0
 8004008:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800400a:	7bfb      	ldrb	r3, [r7, #15]
}
 800400c:	4618      	mov	r0, r3
 800400e:	3714      	adds	r7, #20
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	460b      	mov	r3, r1
 8004022:	807b      	strh	r3, [r7, #2]
 8004024:	4613      	mov	r3, r2
 8004026:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004028:	787b      	ldrb	r3, [r7, #1]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d003      	beq.n	8004036 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800402e:	887a      	ldrh	r2, [r7, #2]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004034:	e003      	b.n	800403e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004036:	887b      	ldrh	r3, [r7, #2]
 8004038:	041a      	lsls	r2, r3, #16
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	619a      	str	r2, [r3, #24]
}
 800403e:	bf00      	nop
 8004040:	370c      	adds	r7, #12
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
	...

0800404c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	4603      	mov	r3, r0
 8004054:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004056:	4b08      	ldr	r3, [pc, #32]	@ (8004078 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004058:	695a      	ldr	r2, [r3, #20]
 800405a:	88fb      	ldrh	r3, [r7, #6]
 800405c:	4013      	ands	r3, r2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d006      	beq.n	8004070 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004062:	4a05      	ldr	r2, [pc, #20]	@ (8004078 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004064:	88fb      	ldrh	r3, [r7, #6]
 8004066:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004068:	88fb      	ldrh	r3, [r7, #6]
 800406a:	4618      	mov	r0, r3
 800406c:	f7fd fc8a 	bl	8001984 <HAL_GPIO_EXTI_Callback>
  }
}
 8004070:	bf00      	nop
 8004072:	3708      	adds	r7, #8
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	40013c00 	.word	0x40013c00

0800407c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d101      	bne.n	800408e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e267      	b.n	800455e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b00      	cmp	r3, #0
 8004098:	d075      	beq.n	8004186 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800409a:	4b88      	ldr	r3, [pc, #544]	@ (80042bc <HAL_RCC_OscConfig+0x240>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f003 030c 	and.w	r3, r3, #12
 80040a2:	2b04      	cmp	r3, #4
 80040a4:	d00c      	beq.n	80040c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040a6:	4b85      	ldr	r3, [pc, #532]	@ (80042bc <HAL_RCC_OscConfig+0x240>)
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040ae:	2b08      	cmp	r3, #8
 80040b0:	d112      	bne.n	80040d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040b2:	4b82      	ldr	r3, [pc, #520]	@ (80042bc <HAL_RCC_OscConfig+0x240>)
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040be:	d10b      	bne.n	80040d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040c0:	4b7e      	ldr	r3, [pc, #504]	@ (80042bc <HAL_RCC_OscConfig+0x240>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d05b      	beq.n	8004184 <HAL_RCC_OscConfig+0x108>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d157      	bne.n	8004184 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e242      	b.n	800455e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040e0:	d106      	bne.n	80040f0 <HAL_RCC_OscConfig+0x74>
 80040e2:	4b76      	ldr	r3, [pc, #472]	@ (80042bc <HAL_RCC_OscConfig+0x240>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a75      	ldr	r2, [pc, #468]	@ (80042bc <HAL_RCC_OscConfig+0x240>)
 80040e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040ec:	6013      	str	r3, [r2, #0]
 80040ee:	e01d      	b.n	800412c <HAL_RCC_OscConfig+0xb0>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80040f8:	d10c      	bne.n	8004114 <HAL_RCC_OscConfig+0x98>
 80040fa:	4b70      	ldr	r3, [pc, #448]	@ (80042bc <HAL_RCC_OscConfig+0x240>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a6f      	ldr	r2, [pc, #444]	@ (80042bc <HAL_RCC_OscConfig+0x240>)
 8004100:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004104:	6013      	str	r3, [r2, #0]
 8004106:	4b6d      	ldr	r3, [pc, #436]	@ (80042bc <HAL_RCC_OscConfig+0x240>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a6c      	ldr	r2, [pc, #432]	@ (80042bc <HAL_RCC_OscConfig+0x240>)
 800410c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004110:	6013      	str	r3, [r2, #0]
 8004112:	e00b      	b.n	800412c <HAL_RCC_OscConfig+0xb0>
 8004114:	4b69      	ldr	r3, [pc, #420]	@ (80042bc <HAL_RCC_OscConfig+0x240>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a68      	ldr	r2, [pc, #416]	@ (80042bc <HAL_RCC_OscConfig+0x240>)
 800411a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800411e:	6013      	str	r3, [r2, #0]
 8004120:	4b66      	ldr	r3, [pc, #408]	@ (80042bc <HAL_RCC_OscConfig+0x240>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a65      	ldr	r2, [pc, #404]	@ (80042bc <HAL_RCC_OscConfig+0x240>)
 8004126:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800412a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d013      	beq.n	800415c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004134:	f7fe fcf8 	bl	8002b28 <HAL_GetTick>
 8004138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800413a:	e008      	b.n	800414e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800413c:	f7fe fcf4 	bl	8002b28 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b64      	cmp	r3, #100	@ 0x64
 8004148:	d901      	bls.n	800414e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e207      	b.n	800455e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800414e:	4b5b      	ldr	r3, [pc, #364]	@ (80042bc <HAL_RCC_OscConfig+0x240>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d0f0      	beq.n	800413c <HAL_RCC_OscConfig+0xc0>
 800415a:	e014      	b.n	8004186 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800415c:	f7fe fce4 	bl	8002b28 <HAL_GetTick>
 8004160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004162:	e008      	b.n	8004176 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004164:	f7fe fce0 	bl	8002b28 <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	2b64      	cmp	r3, #100	@ 0x64
 8004170:	d901      	bls.n	8004176 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e1f3      	b.n	800455e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004176:	4b51      	ldr	r3, [pc, #324]	@ (80042bc <HAL_RCC_OscConfig+0x240>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1f0      	bne.n	8004164 <HAL_RCC_OscConfig+0xe8>
 8004182:	e000      	b.n	8004186 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004184:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b00      	cmp	r3, #0
 8004190:	d063      	beq.n	800425a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004192:	4b4a      	ldr	r3, [pc, #296]	@ (80042bc <HAL_RCC_OscConfig+0x240>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f003 030c 	and.w	r3, r3, #12
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00b      	beq.n	80041b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800419e:	4b47      	ldr	r3, [pc, #284]	@ (80042bc <HAL_RCC_OscConfig+0x240>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041a6:	2b08      	cmp	r3, #8
 80041a8:	d11c      	bne.n	80041e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041aa:	4b44      	ldr	r3, [pc, #272]	@ (80042bc <HAL_RCC_OscConfig+0x240>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d116      	bne.n	80041e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041b6:	4b41      	ldr	r3, [pc, #260]	@ (80042bc <HAL_RCC_OscConfig+0x240>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d005      	beq.n	80041ce <HAL_RCC_OscConfig+0x152>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d001      	beq.n	80041ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e1c7      	b.n	800455e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ce:	4b3b      	ldr	r3, [pc, #236]	@ (80042bc <HAL_RCC_OscConfig+0x240>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	00db      	lsls	r3, r3, #3
 80041dc:	4937      	ldr	r1, [pc, #220]	@ (80042bc <HAL_RCC_OscConfig+0x240>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041e2:	e03a      	b.n	800425a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d020      	beq.n	800422e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041ec:	4b34      	ldr	r3, [pc, #208]	@ (80042c0 <HAL_RCC_OscConfig+0x244>)
 80041ee:	2201      	movs	r2, #1
 80041f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f2:	f7fe fc99 	bl	8002b28 <HAL_GetTick>
 80041f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041f8:	e008      	b.n	800420c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041fa:	f7fe fc95 	bl	8002b28 <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	2b02      	cmp	r3, #2
 8004206:	d901      	bls.n	800420c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e1a8      	b.n	800455e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800420c:	4b2b      	ldr	r3, [pc, #172]	@ (80042bc <HAL_RCC_OscConfig+0x240>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0302 	and.w	r3, r3, #2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d0f0      	beq.n	80041fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004218:	4b28      	ldr	r3, [pc, #160]	@ (80042bc <HAL_RCC_OscConfig+0x240>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	00db      	lsls	r3, r3, #3
 8004226:	4925      	ldr	r1, [pc, #148]	@ (80042bc <HAL_RCC_OscConfig+0x240>)
 8004228:	4313      	orrs	r3, r2
 800422a:	600b      	str	r3, [r1, #0]
 800422c:	e015      	b.n	800425a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800422e:	4b24      	ldr	r3, [pc, #144]	@ (80042c0 <HAL_RCC_OscConfig+0x244>)
 8004230:	2200      	movs	r2, #0
 8004232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004234:	f7fe fc78 	bl	8002b28 <HAL_GetTick>
 8004238:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800423a:	e008      	b.n	800424e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800423c:	f7fe fc74 	bl	8002b28 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	2b02      	cmp	r3, #2
 8004248:	d901      	bls.n	800424e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e187      	b.n	800455e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800424e:	4b1b      	ldr	r3, [pc, #108]	@ (80042bc <HAL_RCC_OscConfig+0x240>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d1f0      	bne.n	800423c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0308 	and.w	r3, r3, #8
 8004262:	2b00      	cmp	r3, #0
 8004264:	d036      	beq.n	80042d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d016      	beq.n	800429c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800426e:	4b15      	ldr	r3, [pc, #84]	@ (80042c4 <HAL_RCC_OscConfig+0x248>)
 8004270:	2201      	movs	r2, #1
 8004272:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004274:	f7fe fc58 	bl	8002b28 <HAL_GetTick>
 8004278:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800427a:	e008      	b.n	800428e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800427c:	f7fe fc54 	bl	8002b28 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b02      	cmp	r3, #2
 8004288:	d901      	bls.n	800428e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e167      	b.n	800455e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800428e:	4b0b      	ldr	r3, [pc, #44]	@ (80042bc <HAL_RCC_OscConfig+0x240>)
 8004290:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d0f0      	beq.n	800427c <HAL_RCC_OscConfig+0x200>
 800429a:	e01b      	b.n	80042d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800429c:	4b09      	ldr	r3, [pc, #36]	@ (80042c4 <HAL_RCC_OscConfig+0x248>)
 800429e:	2200      	movs	r2, #0
 80042a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042a2:	f7fe fc41 	bl	8002b28 <HAL_GetTick>
 80042a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042a8:	e00e      	b.n	80042c8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042aa:	f7fe fc3d 	bl	8002b28 <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d907      	bls.n	80042c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e150      	b.n	800455e <HAL_RCC_OscConfig+0x4e2>
 80042bc:	40023800 	.word	0x40023800
 80042c0:	42470000 	.word	0x42470000
 80042c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042c8:	4b88      	ldr	r3, [pc, #544]	@ (80044ec <HAL_RCC_OscConfig+0x470>)
 80042ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042cc:	f003 0302 	and.w	r3, r3, #2
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d1ea      	bne.n	80042aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0304 	and.w	r3, r3, #4
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f000 8097 	beq.w	8004410 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042e2:	2300      	movs	r3, #0
 80042e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042e6:	4b81      	ldr	r3, [pc, #516]	@ (80044ec <HAL_RCC_OscConfig+0x470>)
 80042e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d10f      	bne.n	8004312 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042f2:	2300      	movs	r3, #0
 80042f4:	60bb      	str	r3, [r7, #8]
 80042f6:	4b7d      	ldr	r3, [pc, #500]	@ (80044ec <HAL_RCC_OscConfig+0x470>)
 80042f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042fa:	4a7c      	ldr	r2, [pc, #496]	@ (80044ec <HAL_RCC_OscConfig+0x470>)
 80042fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004300:	6413      	str	r3, [r2, #64]	@ 0x40
 8004302:	4b7a      	ldr	r3, [pc, #488]	@ (80044ec <HAL_RCC_OscConfig+0x470>)
 8004304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004306:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800430a:	60bb      	str	r3, [r7, #8]
 800430c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800430e:	2301      	movs	r3, #1
 8004310:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004312:	4b77      	ldr	r3, [pc, #476]	@ (80044f0 <HAL_RCC_OscConfig+0x474>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800431a:	2b00      	cmp	r3, #0
 800431c:	d118      	bne.n	8004350 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800431e:	4b74      	ldr	r3, [pc, #464]	@ (80044f0 <HAL_RCC_OscConfig+0x474>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a73      	ldr	r2, [pc, #460]	@ (80044f0 <HAL_RCC_OscConfig+0x474>)
 8004324:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004328:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800432a:	f7fe fbfd 	bl	8002b28 <HAL_GetTick>
 800432e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004330:	e008      	b.n	8004344 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004332:	f7fe fbf9 	bl	8002b28 <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	2b02      	cmp	r3, #2
 800433e:	d901      	bls.n	8004344 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e10c      	b.n	800455e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004344:	4b6a      	ldr	r3, [pc, #424]	@ (80044f0 <HAL_RCC_OscConfig+0x474>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800434c:	2b00      	cmp	r3, #0
 800434e:	d0f0      	beq.n	8004332 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	2b01      	cmp	r3, #1
 8004356:	d106      	bne.n	8004366 <HAL_RCC_OscConfig+0x2ea>
 8004358:	4b64      	ldr	r3, [pc, #400]	@ (80044ec <HAL_RCC_OscConfig+0x470>)
 800435a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800435c:	4a63      	ldr	r2, [pc, #396]	@ (80044ec <HAL_RCC_OscConfig+0x470>)
 800435e:	f043 0301 	orr.w	r3, r3, #1
 8004362:	6713      	str	r3, [r2, #112]	@ 0x70
 8004364:	e01c      	b.n	80043a0 <HAL_RCC_OscConfig+0x324>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	2b05      	cmp	r3, #5
 800436c:	d10c      	bne.n	8004388 <HAL_RCC_OscConfig+0x30c>
 800436e:	4b5f      	ldr	r3, [pc, #380]	@ (80044ec <HAL_RCC_OscConfig+0x470>)
 8004370:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004372:	4a5e      	ldr	r2, [pc, #376]	@ (80044ec <HAL_RCC_OscConfig+0x470>)
 8004374:	f043 0304 	orr.w	r3, r3, #4
 8004378:	6713      	str	r3, [r2, #112]	@ 0x70
 800437a:	4b5c      	ldr	r3, [pc, #368]	@ (80044ec <HAL_RCC_OscConfig+0x470>)
 800437c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800437e:	4a5b      	ldr	r2, [pc, #364]	@ (80044ec <HAL_RCC_OscConfig+0x470>)
 8004380:	f043 0301 	orr.w	r3, r3, #1
 8004384:	6713      	str	r3, [r2, #112]	@ 0x70
 8004386:	e00b      	b.n	80043a0 <HAL_RCC_OscConfig+0x324>
 8004388:	4b58      	ldr	r3, [pc, #352]	@ (80044ec <HAL_RCC_OscConfig+0x470>)
 800438a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800438c:	4a57      	ldr	r2, [pc, #348]	@ (80044ec <HAL_RCC_OscConfig+0x470>)
 800438e:	f023 0301 	bic.w	r3, r3, #1
 8004392:	6713      	str	r3, [r2, #112]	@ 0x70
 8004394:	4b55      	ldr	r3, [pc, #340]	@ (80044ec <HAL_RCC_OscConfig+0x470>)
 8004396:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004398:	4a54      	ldr	r2, [pc, #336]	@ (80044ec <HAL_RCC_OscConfig+0x470>)
 800439a:	f023 0304 	bic.w	r3, r3, #4
 800439e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d015      	beq.n	80043d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043a8:	f7fe fbbe 	bl	8002b28 <HAL_GetTick>
 80043ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043ae:	e00a      	b.n	80043c6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043b0:	f7fe fbba 	bl	8002b28 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043be:	4293      	cmp	r3, r2
 80043c0:	d901      	bls.n	80043c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e0cb      	b.n	800455e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043c6:	4b49      	ldr	r3, [pc, #292]	@ (80044ec <HAL_RCC_OscConfig+0x470>)
 80043c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d0ee      	beq.n	80043b0 <HAL_RCC_OscConfig+0x334>
 80043d2:	e014      	b.n	80043fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043d4:	f7fe fba8 	bl	8002b28 <HAL_GetTick>
 80043d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043da:	e00a      	b.n	80043f2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043dc:	f7fe fba4 	bl	8002b28 <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d901      	bls.n	80043f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e0b5      	b.n	800455e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043f2:	4b3e      	ldr	r3, [pc, #248]	@ (80044ec <HAL_RCC_OscConfig+0x470>)
 80043f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1ee      	bne.n	80043dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043fe:	7dfb      	ldrb	r3, [r7, #23]
 8004400:	2b01      	cmp	r3, #1
 8004402:	d105      	bne.n	8004410 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004404:	4b39      	ldr	r3, [pc, #228]	@ (80044ec <HAL_RCC_OscConfig+0x470>)
 8004406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004408:	4a38      	ldr	r2, [pc, #224]	@ (80044ec <HAL_RCC_OscConfig+0x470>)
 800440a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800440e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	2b00      	cmp	r3, #0
 8004416:	f000 80a1 	beq.w	800455c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800441a:	4b34      	ldr	r3, [pc, #208]	@ (80044ec <HAL_RCC_OscConfig+0x470>)
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f003 030c 	and.w	r3, r3, #12
 8004422:	2b08      	cmp	r3, #8
 8004424:	d05c      	beq.n	80044e0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	2b02      	cmp	r3, #2
 800442c:	d141      	bne.n	80044b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800442e:	4b31      	ldr	r3, [pc, #196]	@ (80044f4 <HAL_RCC_OscConfig+0x478>)
 8004430:	2200      	movs	r2, #0
 8004432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004434:	f7fe fb78 	bl	8002b28 <HAL_GetTick>
 8004438:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800443a:	e008      	b.n	800444e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800443c:	f7fe fb74 	bl	8002b28 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b02      	cmp	r3, #2
 8004448:	d901      	bls.n	800444e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e087      	b.n	800455e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800444e:	4b27      	ldr	r3, [pc, #156]	@ (80044ec <HAL_RCC_OscConfig+0x470>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1f0      	bne.n	800443c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	69da      	ldr	r2, [r3, #28]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a1b      	ldr	r3, [r3, #32]
 8004462:	431a      	orrs	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004468:	019b      	lsls	r3, r3, #6
 800446a:	431a      	orrs	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004470:	085b      	lsrs	r3, r3, #1
 8004472:	3b01      	subs	r3, #1
 8004474:	041b      	lsls	r3, r3, #16
 8004476:	431a      	orrs	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800447c:	061b      	lsls	r3, r3, #24
 800447e:	491b      	ldr	r1, [pc, #108]	@ (80044ec <HAL_RCC_OscConfig+0x470>)
 8004480:	4313      	orrs	r3, r2
 8004482:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004484:	4b1b      	ldr	r3, [pc, #108]	@ (80044f4 <HAL_RCC_OscConfig+0x478>)
 8004486:	2201      	movs	r2, #1
 8004488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800448a:	f7fe fb4d 	bl	8002b28 <HAL_GetTick>
 800448e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004490:	e008      	b.n	80044a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004492:	f7fe fb49 	bl	8002b28 <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	2b02      	cmp	r3, #2
 800449e:	d901      	bls.n	80044a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e05c      	b.n	800455e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044a4:	4b11      	ldr	r3, [pc, #68]	@ (80044ec <HAL_RCC_OscConfig+0x470>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d0f0      	beq.n	8004492 <HAL_RCC_OscConfig+0x416>
 80044b0:	e054      	b.n	800455c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044b2:	4b10      	ldr	r3, [pc, #64]	@ (80044f4 <HAL_RCC_OscConfig+0x478>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044b8:	f7fe fb36 	bl	8002b28 <HAL_GetTick>
 80044bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044be:	e008      	b.n	80044d2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044c0:	f7fe fb32 	bl	8002b28 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e045      	b.n	800455e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044d2:	4b06      	ldr	r3, [pc, #24]	@ (80044ec <HAL_RCC_OscConfig+0x470>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1f0      	bne.n	80044c0 <HAL_RCC_OscConfig+0x444>
 80044de:	e03d      	b.n	800455c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	699b      	ldr	r3, [r3, #24]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d107      	bne.n	80044f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e038      	b.n	800455e <HAL_RCC_OscConfig+0x4e2>
 80044ec:	40023800 	.word	0x40023800
 80044f0:	40007000 	.word	0x40007000
 80044f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044f8:	4b1b      	ldr	r3, [pc, #108]	@ (8004568 <HAL_RCC_OscConfig+0x4ec>)
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	2b01      	cmp	r3, #1
 8004504:	d028      	beq.n	8004558 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004510:	429a      	cmp	r2, r3
 8004512:	d121      	bne.n	8004558 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800451e:	429a      	cmp	r2, r3
 8004520:	d11a      	bne.n	8004558 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004528:	4013      	ands	r3, r2
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800452e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004530:	4293      	cmp	r3, r2
 8004532:	d111      	bne.n	8004558 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800453e:	085b      	lsrs	r3, r3, #1
 8004540:	3b01      	subs	r3, #1
 8004542:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004544:	429a      	cmp	r2, r3
 8004546:	d107      	bne.n	8004558 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004552:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004554:	429a      	cmp	r2, r3
 8004556:	d001      	beq.n	800455c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e000      	b.n	800455e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3718      	adds	r7, #24
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	40023800 	.word	0x40023800

0800456c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d101      	bne.n	8004580 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e0cc      	b.n	800471a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004580:	4b68      	ldr	r3, [pc, #416]	@ (8004724 <HAL_RCC_ClockConfig+0x1b8>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0307 	and.w	r3, r3, #7
 8004588:	683a      	ldr	r2, [r7, #0]
 800458a:	429a      	cmp	r2, r3
 800458c:	d90c      	bls.n	80045a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800458e:	4b65      	ldr	r3, [pc, #404]	@ (8004724 <HAL_RCC_ClockConfig+0x1b8>)
 8004590:	683a      	ldr	r2, [r7, #0]
 8004592:	b2d2      	uxtb	r2, r2
 8004594:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004596:	4b63      	ldr	r3, [pc, #396]	@ (8004724 <HAL_RCC_ClockConfig+0x1b8>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0307 	and.w	r3, r3, #7
 800459e:	683a      	ldr	r2, [r7, #0]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d001      	beq.n	80045a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e0b8      	b.n	800471a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0302 	and.w	r3, r3, #2
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d020      	beq.n	80045f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0304 	and.w	r3, r3, #4
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d005      	beq.n	80045cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045c0:	4b59      	ldr	r3, [pc, #356]	@ (8004728 <HAL_RCC_ClockConfig+0x1bc>)
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	4a58      	ldr	r2, [pc, #352]	@ (8004728 <HAL_RCC_ClockConfig+0x1bc>)
 80045c6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80045ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0308 	and.w	r3, r3, #8
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d005      	beq.n	80045e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045d8:	4b53      	ldr	r3, [pc, #332]	@ (8004728 <HAL_RCC_ClockConfig+0x1bc>)
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	4a52      	ldr	r2, [pc, #328]	@ (8004728 <HAL_RCC_ClockConfig+0x1bc>)
 80045de:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80045e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045e4:	4b50      	ldr	r3, [pc, #320]	@ (8004728 <HAL_RCC_ClockConfig+0x1bc>)
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	494d      	ldr	r1, [pc, #308]	@ (8004728 <HAL_RCC_ClockConfig+0x1bc>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0301 	and.w	r3, r3, #1
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d044      	beq.n	800468c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	2b01      	cmp	r3, #1
 8004608:	d107      	bne.n	800461a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800460a:	4b47      	ldr	r3, [pc, #284]	@ (8004728 <HAL_RCC_ClockConfig+0x1bc>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d119      	bne.n	800464a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e07f      	b.n	800471a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	2b02      	cmp	r3, #2
 8004620:	d003      	beq.n	800462a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004626:	2b03      	cmp	r3, #3
 8004628:	d107      	bne.n	800463a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800462a:	4b3f      	ldr	r3, [pc, #252]	@ (8004728 <HAL_RCC_ClockConfig+0x1bc>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d109      	bne.n	800464a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e06f      	b.n	800471a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800463a:	4b3b      	ldr	r3, [pc, #236]	@ (8004728 <HAL_RCC_ClockConfig+0x1bc>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0302 	and.w	r3, r3, #2
 8004642:	2b00      	cmp	r3, #0
 8004644:	d101      	bne.n	800464a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e067      	b.n	800471a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800464a:	4b37      	ldr	r3, [pc, #220]	@ (8004728 <HAL_RCC_ClockConfig+0x1bc>)
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f023 0203 	bic.w	r2, r3, #3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	4934      	ldr	r1, [pc, #208]	@ (8004728 <HAL_RCC_ClockConfig+0x1bc>)
 8004658:	4313      	orrs	r3, r2
 800465a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800465c:	f7fe fa64 	bl	8002b28 <HAL_GetTick>
 8004660:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004662:	e00a      	b.n	800467a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004664:	f7fe fa60 	bl	8002b28 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004672:	4293      	cmp	r3, r2
 8004674:	d901      	bls.n	800467a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e04f      	b.n	800471a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800467a:	4b2b      	ldr	r3, [pc, #172]	@ (8004728 <HAL_RCC_ClockConfig+0x1bc>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f003 020c 	and.w	r2, r3, #12
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	429a      	cmp	r2, r3
 800468a:	d1eb      	bne.n	8004664 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800468c:	4b25      	ldr	r3, [pc, #148]	@ (8004724 <HAL_RCC_ClockConfig+0x1b8>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0307 	and.w	r3, r3, #7
 8004694:	683a      	ldr	r2, [r7, #0]
 8004696:	429a      	cmp	r2, r3
 8004698:	d20c      	bcs.n	80046b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800469a:	4b22      	ldr	r3, [pc, #136]	@ (8004724 <HAL_RCC_ClockConfig+0x1b8>)
 800469c:	683a      	ldr	r2, [r7, #0]
 800469e:	b2d2      	uxtb	r2, r2
 80046a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046a2:	4b20      	ldr	r3, [pc, #128]	@ (8004724 <HAL_RCC_ClockConfig+0x1b8>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0307 	and.w	r3, r3, #7
 80046aa:	683a      	ldr	r2, [r7, #0]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d001      	beq.n	80046b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e032      	b.n	800471a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0304 	and.w	r3, r3, #4
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d008      	beq.n	80046d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046c0:	4b19      	ldr	r3, [pc, #100]	@ (8004728 <HAL_RCC_ClockConfig+0x1bc>)
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	4916      	ldr	r1, [pc, #88]	@ (8004728 <HAL_RCC_ClockConfig+0x1bc>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0308 	and.w	r3, r3, #8
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d009      	beq.n	80046f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046de:	4b12      	ldr	r3, [pc, #72]	@ (8004728 <HAL_RCC_ClockConfig+0x1bc>)
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	00db      	lsls	r3, r3, #3
 80046ec:	490e      	ldr	r1, [pc, #56]	@ (8004728 <HAL_RCC_ClockConfig+0x1bc>)
 80046ee:	4313      	orrs	r3, r2
 80046f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046f2:	f000 f821 	bl	8004738 <HAL_RCC_GetSysClockFreq>
 80046f6:	4602      	mov	r2, r0
 80046f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004728 <HAL_RCC_ClockConfig+0x1bc>)
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	091b      	lsrs	r3, r3, #4
 80046fe:	f003 030f 	and.w	r3, r3, #15
 8004702:	490a      	ldr	r1, [pc, #40]	@ (800472c <HAL_RCC_ClockConfig+0x1c0>)
 8004704:	5ccb      	ldrb	r3, [r1, r3]
 8004706:	fa22 f303 	lsr.w	r3, r2, r3
 800470a:	4a09      	ldr	r2, [pc, #36]	@ (8004730 <HAL_RCC_ClockConfig+0x1c4>)
 800470c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800470e:	4b09      	ldr	r3, [pc, #36]	@ (8004734 <HAL_RCC_ClockConfig+0x1c8>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4618      	mov	r0, r3
 8004714:	f7fe f9c4 	bl	8002aa0 <HAL_InitTick>

  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	40023c00 	.word	0x40023c00
 8004728:	40023800 	.word	0x40023800
 800472c:	08009364 	.word	0x08009364
 8004730:	20000000 	.word	0x20000000
 8004734:	2000001c 	.word	0x2000001c

08004738 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004738:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800473c:	b094      	sub	sp, #80	@ 0x50
 800473e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004740:	2300      	movs	r3, #0
 8004742:	647b      	str	r3, [r7, #68]	@ 0x44
 8004744:	2300      	movs	r3, #0
 8004746:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004748:	2300      	movs	r3, #0
 800474a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800474c:	2300      	movs	r3, #0
 800474e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004750:	4b79      	ldr	r3, [pc, #484]	@ (8004938 <HAL_RCC_GetSysClockFreq+0x200>)
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	f003 030c 	and.w	r3, r3, #12
 8004758:	2b08      	cmp	r3, #8
 800475a:	d00d      	beq.n	8004778 <HAL_RCC_GetSysClockFreq+0x40>
 800475c:	2b08      	cmp	r3, #8
 800475e:	f200 80e1 	bhi.w	8004924 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004762:	2b00      	cmp	r3, #0
 8004764:	d002      	beq.n	800476c <HAL_RCC_GetSysClockFreq+0x34>
 8004766:	2b04      	cmp	r3, #4
 8004768:	d003      	beq.n	8004772 <HAL_RCC_GetSysClockFreq+0x3a>
 800476a:	e0db      	b.n	8004924 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800476c:	4b73      	ldr	r3, [pc, #460]	@ (800493c <HAL_RCC_GetSysClockFreq+0x204>)
 800476e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004770:	e0db      	b.n	800492a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004772:	4b73      	ldr	r3, [pc, #460]	@ (8004940 <HAL_RCC_GetSysClockFreq+0x208>)
 8004774:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004776:	e0d8      	b.n	800492a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004778:	4b6f      	ldr	r3, [pc, #444]	@ (8004938 <HAL_RCC_GetSysClockFreq+0x200>)
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004780:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004782:	4b6d      	ldr	r3, [pc, #436]	@ (8004938 <HAL_RCC_GetSysClockFreq+0x200>)
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d063      	beq.n	8004856 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800478e:	4b6a      	ldr	r3, [pc, #424]	@ (8004938 <HAL_RCC_GetSysClockFreq+0x200>)
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	099b      	lsrs	r3, r3, #6
 8004794:	2200      	movs	r2, #0
 8004796:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004798:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800479a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800479c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80047a2:	2300      	movs	r3, #0
 80047a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80047a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80047aa:	4622      	mov	r2, r4
 80047ac:	462b      	mov	r3, r5
 80047ae:	f04f 0000 	mov.w	r0, #0
 80047b2:	f04f 0100 	mov.w	r1, #0
 80047b6:	0159      	lsls	r1, r3, #5
 80047b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047bc:	0150      	lsls	r0, r2, #5
 80047be:	4602      	mov	r2, r0
 80047c0:	460b      	mov	r3, r1
 80047c2:	4621      	mov	r1, r4
 80047c4:	1a51      	subs	r1, r2, r1
 80047c6:	6139      	str	r1, [r7, #16]
 80047c8:	4629      	mov	r1, r5
 80047ca:	eb63 0301 	sbc.w	r3, r3, r1
 80047ce:	617b      	str	r3, [r7, #20]
 80047d0:	f04f 0200 	mov.w	r2, #0
 80047d4:	f04f 0300 	mov.w	r3, #0
 80047d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047dc:	4659      	mov	r1, fp
 80047de:	018b      	lsls	r3, r1, #6
 80047e0:	4651      	mov	r1, sl
 80047e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047e6:	4651      	mov	r1, sl
 80047e8:	018a      	lsls	r2, r1, #6
 80047ea:	4651      	mov	r1, sl
 80047ec:	ebb2 0801 	subs.w	r8, r2, r1
 80047f0:	4659      	mov	r1, fp
 80047f2:	eb63 0901 	sbc.w	r9, r3, r1
 80047f6:	f04f 0200 	mov.w	r2, #0
 80047fa:	f04f 0300 	mov.w	r3, #0
 80047fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004802:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004806:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800480a:	4690      	mov	r8, r2
 800480c:	4699      	mov	r9, r3
 800480e:	4623      	mov	r3, r4
 8004810:	eb18 0303 	adds.w	r3, r8, r3
 8004814:	60bb      	str	r3, [r7, #8]
 8004816:	462b      	mov	r3, r5
 8004818:	eb49 0303 	adc.w	r3, r9, r3
 800481c:	60fb      	str	r3, [r7, #12]
 800481e:	f04f 0200 	mov.w	r2, #0
 8004822:	f04f 0300 	mov.w	r3, #0
 8004826:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800482a:	4629      	mov	r1, r5
 800482c:	024b      	lsls	r3, r1, #9
 800482e:	4621      	mov	r1, r4
 8004830:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004834:	4621      	mov	r1, r4
 8004836:	024a      	lsls	r2, r1, #9
 8004838:	4610      	mov	r0, r2
 800483a:	4619      	mov	r1, r3
 800483c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800483e:	2200      	movs	r2, #0
 8004840:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004842:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004844:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004848:	f7fc f9fe 	bl	8000c48 <__aeabi_uldivmod>
 800484c:	4602      	mov	r2, r0
 800484e:	460b      	mov	r3, r1
 8004850:	4613      	mov	r3, r2
 8004852:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004854:	e058      	b.n	8004908 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004856:	4b38      	ldr	r3, [pc, #224]	@ (8004938 <HAL_RCC_GetSysClockFreq+0x200>)
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	099b      	lsrs	r3, r3, #6
 800485c:	2200      	movs	r2, #0
 800485e:	4618      	mov	r0, r3
 8004860:	4611      	mov	r1, r2
 8004862:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004866:	623b      	str	r3, [r7, #32]
 8004868:	2300      	movs	r3, #0
 800486a:	627b      	str	r3, [r7, #36]	@ 0x24
 800486c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004870:	4642      	mov	r2, r8
 8004872:	464b      	mov	r3, r9
 8004874:	f04f 0000 	mov.w	r0, #0
 8004878:	f04f 0100 	mov.w	r1, #0
 800487c:	0159      	lsls	r1, r3, #5
 800487e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004882:	0150      	lsls	r0, r2, #5
 8004884:	4602      	mov	r2, r0
 8004886:	460b      	mov	r3, r1
 8004888:	4641      	mov	r1, r8
 800488a:	ebb2 0a01 	subs.w	sl, r2, r1
 800488e:	4649      	mov	r1, r9
 8004890:	eb63 0b01 	sbc.w	fp, r3, r1
 8004894:	f04f 0200 	mov.w	r2, #0
 8004898:	f04f 0300 	mov.w	r3, #0
 800489c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80048a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80048a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80048a8:	ebb2 040a 	subs.w	r4, r2, sl
 80048ac:	eb63 050b 	sbc.w	r5, r3, fp
 80048b0:	f04f 0200 	mov.w	r2, #0
 80048b4:	f04f 0300 	mov.w	r3, #0
 80048b8:	00eb      	lsls	r3, r5, #3
 80048ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048be:	00e2      	lsls	r2, r4, #3
 80048c0:	4614      	mov	r4, r2
 80048c2:	461d      	mov	r5, r3
 80048c4:	4643      	mov	r3, r8
 80048c6:	18e3      	adds	r3, r4, r3
 80048c8:	603b      	str	r3, [r7, #0]
 80048ca:	464b      	mov	r3, r9
 80048cc:	eb45 0303 	adc.w	r3, r5, r3
 80048d0:	607b      	str	r3, [r7, #4]
 80048d2:	f04f 0200 	mov.w	r2, #0
 80048d6:	f04f 0300 	mov.w	r3, #0
 80048da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80048de:	4629      	mov	r1, r5
 80048e0:	028b      	lsls	r3, r1, #10
 80048e2:	4621      	mov	r1, r4
 80048e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048e8:	4621      	mov	r1, r4
 80048ea:	028a      	lsls	r2, r1, #10
 80048ec:	4610      	mov	r0, r2
 80048ee:	4619      	mov	r1, r3
 80048f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048f2:	2200      	movs	r2, #0
 80048f4:	61bb      	str	r3, [r7, #24]
 80048f6:	61fa      	str	r2, [r7, #28]
 80048f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048fc:	f7fc f9a4 	bl	8000c48 <__aeabi_uldivmod>
 8004900:	4602      	mov	r2, r0
 8004902:	460b      	mov	r3, r1
 8004904:	4613      	mov	r3, r2
 8004906:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004908:	4b0b      	ldr	r3, [pc, #44]	@ (8004938 <HAL_RCC_GetSysClockFreq+0x200>)
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	0c1b      	lsrs	r3, r3, #16
 800490e:	f003 0303 	and.w	r3, r3, #3
 8004912:	3301      	adds	r3, #1
 8004914:	005b      	lsls	r3, r3, #1
 8004916:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004918:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800491a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800491c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004920:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004922:	e002      	b.n	800492a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004924:	4b05      	ldr	r3, [pc, #20]	@ (800493c <HAL_RCC_GetSysClockFreq+0x204>)
 8004926:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004928:	bf00      	nop
    }
  }
  return sysclockfreq;
 800492a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800492c:	4618      	mov	r0, r3
 800492e:	3750      	adds	r7, #80	@ 0x50
 8004930:	46bd      	mov	sp, r7
 8004932:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004936:	bf00      	nop
 8004938:	40023800 	.word	0x40023800
 800493c:	00f42400 	.word	0x00f42400
 8004940:	007a1200 	.word	0x007a1200

08004944 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004944:	b480      	push	{r7}
 8004946:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004948:	4b03      	ldr	r3, [pc, #12]	@ (8004958 <HAL_RCC_GetHCLKFreq+0x14>)
 800494a:	681b      	ldr	r3, [r3, #0]
}
 800494c:	4618      	mov	r0, r3
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	20000000 	.word	0x20000000

0800495c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004960:	f7ff fff0 	bl	8004944 <HAL_RCC_GetHCLKFreq>
 8004964:	4602      	mov	r2, r0
 8004966:	4b05      	ldr	r3, [pc, #20]	@ (800497c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	0a9b      	lsrs	r3, r3, #10
 800496c:	f003 0307 	and.w	r3, r3, #7
 8004970:	4903      	ldr	r1, [pc, #12]	@ (8004980 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004972:	5ccb      	ldrb	r3, [r1, r3]
 8004974:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004978:	4618      	mov	r0, r3
 800497a:	bd80      	pop	{r7, pc}
 800497c:	40023800 	.word	0x40023800
 8004980:	08009374 	.word	0x08009374

08004984 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004988:	f7ff ffdc 	bl	8004944 <HAL_RCC_GetHCLKFreq>
 800498c:	4602      	mov	r2, r0
 800498e:	4b05      	ldr	r3, [pc, #20]	@ (80049a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	0b5b      	lsrs	r3, r3, #13
 8004994:	f003 0307 	and.w	r3, r3, #7
 8004998:	4903      	ldr	r1, [pc, #12]	@ (80049a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800499a:	5ccb      	ldrb	r3, [r1, r3]
 800499c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	40023800 	.word	0x40023800
 80049a8:	08009374 	.word	0x08009374

080049ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d101      	bne.n	80049be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e041      	b.n	8004a42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d106      	bne.n	80049d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 f839 	bl	8004a4a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2202      	movs	r2, #2
 80049dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	3304      	adds	r3, #4
 80049e8:	4619      	mov	r1, r3
 80049ea:	4610      	mov	r0, r2
 80049ec:	f000 fc52 	bl	8005294 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3708      	adds	r7, #8
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}

08004a4a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004a4a:	b480      	push	{r7}
 8004a4c:	b083      	sub	sp, #12
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004a52:	bf00      	nop
 8004a54:	370c      	adds	r7, #12
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr

08004a5e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b082      	sub	sp, #8
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d101      	bne.n	8004a70 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e041      	b.n	8004af4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d106      	bne.n	8004a8a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f000 f839 	bl	8004afc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2202      	movs	r2, #2
 8004a8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	3304      	adds	r3, #4
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	4610      	mov	r0, r2
 8004a9e:	f000 fbf9 	bl	8005294 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2201      	movs	r2, #1
 8004ade:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2201      	movs	r2, #1
 8004aee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3708      	adds	r7, #8
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b04:	bf00      	nop
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d109      	bne.n	8004b38 <HAL_TIM_PWM_Start_IT+0x28>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	bf14      	ite	ne
 8004b30:	2301      	movne	r3, #1
 8004b32:	2300      	moveq	r3, #0
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	e022      	b.n	8004b7e <HAL_TIM_PWM_Start_IT+0x6e>
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	2b04      	cmp	r3, #4
 8004b3c:	d109      	bne.n	8004b52 <HAL_TIM_PWM_Start_IT+0x42>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	bf14      	ite	ne
 8004b4a:	2301      	movne	r3, #1
 8004b4c:	2300      	moveq	r3, #0
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	e015      	b.n	8004b7e <HAL_TIM_PWM_Start_IT+0x6e>
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	2b08      	cmp	r3, #8
 8004b56:	d109      	bne.n	8004b6c <HAL_TIM_PWM_Start_IT+0x5c>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	bf14      	ite	ne
 8004b64:	2301      	movne	r3, #1
 8004b66:	2300      	moveq	r3, #0
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	e008      	b.n	8004b7e <HAL_TIM_PWM_Start_IT+0x6e>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	bf14      	ite	ne
 8004b78:	2301      	movne	r3, #1
 8004b7a:	2300      	moveq	r3, #0
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d001      	beq.n	8004b86 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e0c7      	b.n	8004d16 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d104      	bne.n	8004b96 <HAL_TIM_PWM_Start_IT+0x86>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2202      	movs	r2, #2
 8004b90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b94:	e013      	b.n	8004bbe <HAL_TIM_PWM_Start_IT+0xae>
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	2b04      	cmp	r3, #4
 8004b9a:	d104      	bne.n	8004ba6 <HAL_TIM_PWM_Start_IT+0x96>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2202      	movs	r2, #2
 8004ba0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ba4:	e00b      	b.n	8004bbe <HAL_TIM_PWM_Start_IT+0xae>
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	2b08      	cmp	r3, #8
 8004baa:	d104      	bne.n	8004bb6 <HAL_TIM_PWM_Start_IT+0xa6>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2202      	movs	r2, #2
 8004bb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004bb4:	e003      	b.n	8004bbe <HAL_TIM_PWM_Start_IT+0xae>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2202      	movs	r2, #2
 8004bba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	2b0c      	cmp	r3, #12
 8004bc2:	d841      	bhi.n	8004c48 <HAL_TIM_PWM_Start_IT+0x138>
 8004bc4:	a201      	add	r2, pc, #4	@ (adr r2, 8004bcc <HAL_TIM_PWM_Start_IT+0xbc>)
 8004bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bca:	bf00      	nop
 8004bcc:	08004c01 	.word	0x08004c01
 8004bd0:	08004c49 	.word	0x08004c49
 8004bd4:	08004c49 	.word	0x08004c49
 8004bd8:	08004c49 	.word	0x08004c49
 8004bdc:	08004c13 	.word	0x08004c13
 8004be0:	08004c49 	.word	0x08004c49
 8004be4:	08004c49 	.word	0x08004c49
 8004be8:	08004c49 	.word	0x08004c49
 8004bec:	08004c25 	.word	0x08004c25
 8004bf0:	08004c49 	.word	0x08004c49
 8004bf4:	08004c49 	.word	0x08004c49
 8004bf8:	08004c49 	.word	0x08004c49
 8004bfc:	08004c37 	.word	0x08004c37
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68da      	ldr	r2, [r3, #12]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f042 0202 	orr.w	r2, r2, #2
 8004c0e:	60da      	str	r2, [r3, #12]
      break;
 8004c10:	e01d      	b.n	8004c4e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68da      	ldr	r2, [r3, #12]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f042 0204 	orr.w	r2, r2, #4
 8004c20:	60da      	str	r2, [r3, #12]
      break;
 8004c22:	e014      	b.n	8004c4e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68da      	ldr	r2, [r3, #12]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f042 0208 	orr.w	r2, r2, #8
 8004c32:	60da      	str	r2, [r3, #12]
      break;
 8004c34:	e00b      	b.n	8004c4e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68da      	ldr	r2, [r3, #12]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f042 0210 	orr.w	r2, r2, #16
 8004c44:	60da      	str	r2, [r3, #12]
      break;
 8004c46:	e002      	b.n	8004c4e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c4c:	bf00      	nop
  }

  if (status == HAL_OK)
 8004c4e:	7bfb      	ldrb	r3, [r7, #15]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d15f      	bne.n	8004d14 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2201      	movs	r2, #1
 8004c5a:	6839      	ldr	r1, [r7, #0]
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f000 fe0f 	bl	8005880 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a2e      	ldr	r2, [pc, #184]	@ (8004d20 <HAL_TIM_PWM_Start_IT+0x210>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d004      	beq.n	8004c76 <HAL_TIM_PWM_Start_IT+0x166>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a2c      	ldr	r2, [pc, #176]	@ (8004d24 <HAL_TIM_PWM_Start_IT+0x214>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d101      	bne.n	8004c7a <HAL_TIM_PWM_Start_IT+0x16a>
 8004c76:	2301      	movs	r3, #1
 8004c78:	e000      	b.n	8004c7c <HAL_TIM_PWM_Start_IT+0x16c>
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d007      	beq.n	8004c90 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c8e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a22      	ldr	r2, [pc, #136]	@ (8004d20 <HAL_TIM_PWM_Start_IT+0x210>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d022      	beq.n	8004ce0 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ca2:	d01d      	beq.n	8004ce0 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a1f      	ldr	r2, [pc, #124]	@ (8004d28 <HAL_TIM_PWM_Start_IT+0x218>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d018      	beq.n	8004ce0 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a1e      	ldr	r2, [pc, #120]	@ (8004d2c <HAL_TIM_PWM_Start_IT+0x21c>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d013      	beq.n	8004ce0 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a1c      	ldr	r2, [pc, #112]	@ (8004d30 <HAL_TIM_PWM_Start_IT+0x220>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d00e      	beq.n	8004ce0 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a17      	ldr	r2, [pc, #92]	@ (8004d24 <HAL_TIM_PWM_Start_IT+0x214>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d009      	beq.n	8004ce0 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a18      	ldr	r2, [pc, #96]	@ (8004d34 <HAL_TIM_PWM_Start_IT+0x224>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d004      	beq.n	8004ce0 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a17      	ldr	r2, [pc, #92]	@ (8004d38 <HAL_TIM_PWM_Start_IT+0x228>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d111      	bne.n	8004d04 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f003 0307 	and.w	r3, r3, #7
 8004cea:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	2b06      	cmp	r3, #6
 8004cf0:	d010      	beq.n	8004d14 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f042 0201 	orr.w	r2, r2, #1
 8004d00:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d02:	e007      	b.n	8004d14 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f042 0201 	orr.w	r2, r2, #1
 8004d12:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	40010000 	.word	0x40010000
 8004d24:	40010400 	.word	0x40010400
 8004d28:	40000400 	.word	0x40000400
 8004d2c:	40000800 	.word	0x40000800
 8004d30:	40000c00 	.word	0x40000c00
 8004d34:	40014000 	.word	0x40014000
 8004d38:	40001800 	.word	0x40001800

08004d3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	f003 0302 	and.w	r3, r3, #2
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d020      	beq.n	8004da0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f003 0302 	and.w	r3, r3, #2
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d01b      	beq.n	8004da0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f06f 0202 	mvn.w	r2, #2
 8004d70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2201      	movs	r2, #1
 8004d76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	f003 0303 	and.w	r3, r3, #3
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d003      	beq.n	8004d8e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 fa65 	bl	8005256 <HAL_TIM_IC_CaptureCallback>
 8004d8c:	e005      	b.n	8004d9a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 fa57 	bl	8005242 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f000 fa68 	bl	800526a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	f003 0304 	and.w	r3, r3, #4
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d020      	beq.n	8004dec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f003 0304 	and.w	r3, r3, #4
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d01b      	beq.n	8004dec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f06f 0204 	mvn.w	r2, #4
 8004dbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2202      	movs	r2, #2
 8004dc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d003      	beq.n	8004dda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 fa3f 	bl	8005256 <HAL_TIM_IC_CaptureCallback>
 8004dd8:	e005      	b.n	8004de6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 fa31 	bl	8005242 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f000 fa42 	bl	800526a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	f003 0308 	and.w	r3, r3, #8
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d020      	beq.n	8004e38 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f003 0308 	and.w	r3, r3, #8
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d01b      	beq.n	8004e38 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f06f 0208 	mvn.w	r2, #8
 8004e08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2204      	movs	r2, #4
 8004e0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	69db      	ldr	r3, [r3, #28]
 8004e16:	f003 0303 	and.w	r3, r3, #3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d003      	beq.n	8004e26 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 fa19 	bl	8005256 <HAL_TIM_IC_CaptureCallback>
 8004e24:	e005      	b.n	8004e32 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 fa0b 	bl	8005242 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 fa1c 	bl	800526a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	f003 0310 	and.w	r3, r3, #16
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d020      	beq.n	8004e84 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f003 0310 	and.w	r3, r3, #16
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d01b      	beq.n	8004e84 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f06f 0210 	mvn.w	r2, #16
 8004e54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2208      	movs	r2, #8
 8004e5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	69db      	ldr	r3, [r3, #28]
 8004e62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d003      	beq.n	8004e72 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 f9f3 	bl	8005256 <HAL_TIM_IC_CaptureCallback>
 8004e70:	e005      	b.n	8004e7e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 f9e5 	bl	8005242 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f000 f9f6 	bl	800526a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	f003 0301 	and.w	r3, r3, #1
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00c      	beq.n	8004ea8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f003 0301 	and.w	r3, r3, #1
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d007      	beq.n	8004ea8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f06f 0201 	mvn.w	r2, #1
 8004ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 f9c3 	bl	800522e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00c      	beq.n	8004ecc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d007      	beq.n	8004ecc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 fd86 	bl	80059d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00c      	beq.n	8004ef0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d007      	beq.n	8004ef0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 f9c7 	bl	800527e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	f003 0320 	and.w	r3, r3, #32
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00c      	beq.n	8004f14 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f003 0320 	and.w	r3, r3, #32
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d007      	beq.n	8004f14 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f06f 0220 	mvn.w	r2, #32
 8004f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 fd58 	bl	80059c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f14:	bf00      	nop
 8004f16:	3710      	adds	r7, #16
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b086      	sub	sp, #24
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d101      	bne.n	8004f3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f36:	2302      	movs	r3, #2
 8004f38:	e0ae      	b.n	8005098 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2b0c      	cmp	r3, #12
 8004f46:	f200 809f 	bhi.w	8005088 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004f4a:	a201      	add	r2, pc, #4	@ (adr r2, 8004f50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f50:	08004f85 	.word	0x08004f85
 8004f54:	08005089 	.word	0x08005089
 8004f58:	08005089 	.word	0x08005089
 8004f5c:	08005089 	.word	0x08005089
 8004f60:	08004fc5 	.word	0x08004fc5
 8004f64:	08005089 	.word	0x08005089
 8004f68:	08005089 	.word	0x08005089
 8004f6c:	08005089 	.word	0x08005089
 8004f70:	08005007 	.word	0x08005007
 8004f74:	08005089 	.word	0x08005089
 8004f78:	08005089 	.word	0x08005089
 8004f7c:	08005089 	.word	0x08005089
 8004f80:	08005047 	.word	0x08005047
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68b9      	ldr	r1, [r7, #8]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f000 fa2e 	bl	80053ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	699a      	ldr	r2, [r3, #24]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f042 0208 	orr.w	r2, r2, #8
 8004f9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	699a      	ldr	r2, [r3, #24]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f022 0204 	bic.w	r2, r2, #4
 8004fae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6999      	ldr	r1, [r3, #24]
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	691a      	ldr	r2, [r3, #16]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	430a      	orrs	r2, r1
 8004fc0:	619a      	str	r2, [r3, #24]
      break;
 8004fc2:	e064      	b.n	800508e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68b9      	ldr	r1, [r7, #8]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f000 fa7e 	bl	80054cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	699a      	ldr	r2, [r3, #24]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004fde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	699a      	ldr	r2, [r3, #24]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	6999      	ldr	r1, [r3, #24]
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	021a      	lsls	r2, r3, #8
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	430a      	orrs	r2, r1
 8005002:	619a      	str	r2, [r3, #24]
      break;
 8005004:	e043      	b.n	800508e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68b9      	ldr	r1, [r7, #8]
 800500c:	4618      	mov	r0, r3
 800500e:	f000 fad3 	bl	80055b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	69da      	ldr	r2, [r3, #28]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f042 0208 	orr.w	r2, r2, #8
 8005020:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	69da      	ldr	r2, [r3, #28]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f022 0204 	bic.w	r2, r2, #4
 8005030:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	69d9      	ldr	r1, [r3, #28]
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	691a      	ldr	r2, [r3, #16]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	430a      	orrs	r2, r1
 8005042:	61da      	str	r2, [r3, #28]
      break;
 8005044:	e023      	b.n	800508e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68b9      	ldr	r1, [r7, #8]
 800504c:	4618      	mov	r0, r3
 800504e:	f000 fb27 	bl	80056a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	69da      	ldr	r2, [r3, #28]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005060:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	69da      	ldr	r2, [r3, #28]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005070:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	69d9      	ldr	r1, [r3, #28]
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	021a      	lsls	r2, r3, #8
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	430a      	orrs	r2, r1
 8005084:	61da      	str	r2, [r3, #28]
      break;
 8005086:	e002      	b.n	800508e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	75fb      	strb	r3, [r7, #23]
      break;
 800508c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005096:	7dfb      	ldrb	r3, [r7, #23]
}
 8005098:	4618      	mov	r0, r3
 800509a:	3718      	adds	r7, #24
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050aa:	2300      	movs	r3, #0
 80050ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d101      	bne.n	80050bc <HAL_TIM_ConfigClockSource+0x1c>
 80050b8:	2302      	movs	r3, #2
 80050ba:	e0b4      	b.n	8005226 <HAL_TIM_ConfigClockSource+0x186>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2202      	movs	r2, #2
 80050c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80050da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80050e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68ba      	ldr	r2, [r7, #8]
 80050ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050f4:	d03e      	beq.n	8005174 <HAL_TIM_ConfigClockSource+0xd4>
 80050f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050fa:	f200 8087 	bhi.w	800520c <HAL_TIM_ConfigClockSource+0x16c>
 80050fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005102:	f000 8086 	beq.w	8005212 <HAL_TIM_ConfigClockSource+0x172>
 8005106:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800510a:	d87f      	bhi.n	800520c <HAL_TIM_ConfigClockSource+0x16c>
 800510c:	2b70      	cmp	r3, #112	@ 0x70
 800510e:	d01a      	beq.n	8005146 <HAL_TIM_ConfigClockSource+0xa6>
 8005110:	2b70      	cmp	r3, #112	@ 0x70
 8005112:	d87b      	bhi.n	800520c <HAL_TIM_ConfigClockSource+0x16c>
 8005114:	2b60      	cmp	r3, #96	@ 0x60
 8005116:	d050      	beq.n	80051ba <HAL_TIM_ConfigClockSource+0x11a>
 8005118:	2b60      	cmp	r3, #96	@ 0x60
 800511a:	d877      	bhi.n	800520c <HAL_TIM_ConfigClockSource+0x16c>
 800511c:	2b50      	cmp	r3, #80	@ 0x50
 800511e:	d03c      	beq.n	800519a <HAL_TIM_ConfigClockSource+0xfa>
 8005120:	2b50      	cmp	r3, #80	@ 0x50
 8005122:	d873      	bhi.n	800520c <HAL_TIM_ConfigClockSource+0x16c>
 8005124:	2b40      	cmp	r3, #64	@ 0x40
 8005126:	d058      	beq.n	80051da <HAL_TIM_ConfigClockSource+0x13a>
 8005128:	2b40      	cmp	r3, #64	@ 0x40
 800512a:	d86f      	bhi.n	800520c <HAL_TIM_ConfigClockSource+0x16c>
 800512c:	2b30      	cmp	r3, #48	@ 0x30
 800512e:	d064      	beq.n	80051fa <HAL_TIM_ConfigClockSource+0x15a>
 8005130:	2b30      	cmp	r3, #48	@ 0x30
 8005132:	d86b      	bhi.n	800520c <HAL_TIM_ConfigClockSource+0x16c>
 8005134:	2b20      	cmp	r3, #32
 8005136:	d060      	beq.n	80051fa <HAL_TIM_ConfigClockSource+0x15a>
 8005138:	2b20      	cmp	r3, #32
 800513a:	d867      	bhi.n	800520c <HAL_TIM_ConfigClockSource+0x16c>
 800513c:	2b00      	cmp	r3, #0
 800513e:	d05c      	beq.n	80051fa <HAL_TIM_ConfigClockSource+0x15a>
 8005140:	2b10      	cmp	r3, #16
 8005142:	d05a      	beq.n	80051fa <HAL_TIM_ConfigClockSource+0x15a>
 8005144:	e062      	b.n	800520c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005156:	f000 fb73 	bl	8005840 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005168:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68ba      	ldr	r2, [r7, #8]
 8005170:	609a      	str	r2, [r3, #8]
      break;
 8005172:	e04f      	b.n	8005214 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005184:	f000 fb5c 	bl	8005840 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689a      	ldr	r2, [r3, #8]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005196:	609a      	str	r2, [r3, #8]
      break;
 8005198:	e03c      	b.n	8005214 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051a6:	461a      	mov	r2, r3
 80051a8:	f000 fad0 	bl	800574c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2150      	movs	r1, #80	@ 0x50
 80051b2:	4618      	mov	r0, r3
 80051b4:	f000 fb29 	bl	800580a <TIM_ITRx_SetConfig>
      break;
 80051b8:	e02c      	b.n	8005214 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80051c6:	461a      	mov	r2, r3
 80051c8:	f000 faef 	bl	80057aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2160      	movs	r1, #96	@ 0x60
 80051d2:	4618      	mov	r0, r3
 80051d4:	f000 fb19 	bl	800580a <TIM_ITRx_SetConfig>
      break;
 80051d8:	e01c      	b.n	8005214 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051e6:	461a      	mov	r2, r3
 80051e8:	f000 fab0 	bl	800574c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2140      	movs	r1, #64	@ 0x40
 80051f2:	4618      	mov	r0, r3
 80051f4:	f000 fb09 	bl	800580a <TIM_ITRx_SetConfig>
      break;
 80051f8:	e00c      	b.n	8005214 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4619      	mov	r1, r3
 8005204:	4610      	mov	r0, r2
 8005206:	f000 fb00 	bl	800580a <TIM_ITRx_SetConfig>
      break;
 800520a:	e003      	b.n	8005214 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	73fb      	strb	r3, [r7, #15]
      break;
 8005210:	e000      	b.n	8005214 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005212:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005224:	7bfb      	ldrb	r3, [r7, #15]
}
 8005226:	4618      	mov	r0, r3
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800522e:	b480      	push	{r7}
 8005230:	b083      	sub	sp, #12
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005236:	bf00      	nop
 8005238:	370c      	adds	r7, #12
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr

08005242 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005242:	b480      	push	{r7}
 8005244:	b083      	sub	sp, #12
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800524a:	bf00      	nop
 800524c:	370c      	adds	r7, #12
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr

08005256 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005256:	b480      	push	{r7}
 8005258:	b083      	sub	sp, #12
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800525e:	bf00      	nop
 8005260:	370c      	adds	r7, #12
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr

0800526a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800526a:	b480      	push	{r7}
 800526c:	b083      	sub	sp, #12
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005272:	bf00      	nop
 8005274:	370c      	adds	r7, #12
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr

0800527e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800527e:	b480      	push	{r7}
 8005280:	b083      	sub	sp, #12
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005286:	bf00      	nop
 8005288:	370c      	adds	r7, #12
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
	...

08005294 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a46      	ldr	r2, [pc, #280]	@ (80053c0 <TIM_Base_SetConfig+0x12c>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d013      	beq.n	80052d4 <TIM_Base_SetConfig+0x40>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052b2:	d00f      	beq.n	80052d4 <TIM_Base_SetConfig+0x40>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a43      	ldr	r2, [pc, #268]	@ (80053c4 <TIM_Base_SetConfig+0x130>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d00b      	beq.n	80052d4 <TIM_Base_SetConfig+0x40>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a42      	ldr	r2, [pc, #264]	@ (80053c8 <TIM_Base_SetConfig+0x134>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d007      	beq.n	80052d4 <TIM_Base_SetConfig+0x40>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a41      	ldr	r2, [pc, #260]	@ (80053cc <TIM_Base_SetConfig+0x138>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d003      	beq.n	80052d4 <TIM_Base_SetConfig+0x40>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a40      	ldr	r2, [pc, #256]	@ (80053d0 <TIM_Base_SetConfig+0x13c>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d108      	bne.n	80052e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a35      	ldr	r2, [pc, #212]	@ (80053c0 <TIM_Base_SetConfig+0x12c>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d02b      	beq.n	8005346 <TIM_Base_SetConfig+0xb2>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052f4:	d027      	beq.n	8005346 <TIM_Base_SetConfig+0xb2>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a32      	ldr	r2, [pc, #200]	@ (80053c4 <TIM_Base_SetConfig+0x130>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d023      	beq.n	8005346 <TIM_Base_SetConfig+0xb2>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a31      	ldr	r2, [pc, #196]	@ (80053c8 <TIM_Base_SetConfig+0x134>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d01f      	beq.n	8005346 <TIM_Base_SetConfig+0xb2>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a30      	ldr	r2, [pc, #192]	@ (80053cc <TIM_Base_SetConfig+0x138>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d01b      	beq.n	8005346 <TIM_Base_SetConfig+0xb2>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a2f      	ldr	r2, [pc, #188]	@ (80053d0 <TIM_Base_SetConfig+0x13c>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d017      	beq.n	8005346 <TIM_Base_SetConfig+0xb2>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a2e      	ldr	r2, [pc, #184]	@ (80053d4 <TIM_Base_SetConfig+0x140>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d013      	beq.n	8005346 <TIM_Base_SetConfig+0xb2>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a2d      	ldr	r2, [pc, #180]	@ (80053d8 <TIM_Base_SetConfig+0x144>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d00f      	beq.n	8005346 <TIM_Base_SetConfig+0xb2>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a2c      	ldr	r2, [pc, #176]	@ (80053dc <TIM_Base_SetConfig+0x148>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d00b      	beq.n	8005346 <TIM_Base_SetConfig+0xb2>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a2b      	ldr	r2, [pc, #172]	@ (80053e0 <TIM_Base_SetConfig+0x14c>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d007      	beq.n	8005346 <TIM_Base_SetConfig+0xb2>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a2a      	ldr	r2, [pc, #168]	@ (80053e4 <TIM_Base_SetConfig+0x150>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d003      	beq.n	8005346 <TIM_Base_SetConfig+0xb2>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a29      	ldr	r2, [pc, #164]	@ (80053e8 <TIM_Base_SetConfig+0x154>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d108      	bne.n	8005358 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800534c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	4313      	orrs	r3, r2
 8005356:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	4313      	orrs	r3, r2
 8005364:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	68fa      	ldr	r2, [r7, #12]
 800536a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	689a      	ldr	r2, [r3, #8]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a10      	ldr	r2, [pc, #64]	@ (80053c0 <TIM_Base_SetConfig+0x12c>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d003      	beq.n	800538c <TIM_Base_SetConfig+0xf8>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a12      	ldr	r2, [pc, #72]	@ (80053d0 <TIM_Base_SetConfig+0x13c>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d103      	bne.n	8005394 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	691a      	ldr	r2, [r3, #16]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	f003 0301 	and.w	r3, r3, #1
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d105      	bne.n	80053b2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	f023 0201 	bic.w	r2, r3, #1
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	611a      	str	r2, [r3, #16]
  }
}
 80053b2:	bf00      	nop
 80053b4:	3714      	adds	r7, #20
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	40010000 	.word	0x40010000
 80053c4:	40000400 	.word	0x40000400
 80053c8:	40000800 	.word	0x40000800
 80053cc:	40000c00 	.word	0x40000c00
 80053d0:	40010400 	.word	0x40010400
 80053d4:	40014000 	.word	0x40014000
 80053d8:	40014400 	.word	0x40014400
 80053dc:	40014800 	.word	0x40014800
 80053e0:	40001800 	.word	0x40001800
 80053e4:	40001c00 	.word	0x40001c00
 80053e8:	40002000 	.word	0x40002000

080053ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b087      	sub	sp, #28
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a1b      	ldr	r3, [r3, #32]
 80053fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a1b      	ldr	r3, [r3, #32]
 8005400:	f023 0201 	bic.w	r2, r3, #1
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	699b      	ldr	r3, [r3, #24]
 8005412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800541a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f023 0303 	bic.w	r3, r3, #3
 8005422:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	4313      	orrs	r3, r2
 800542c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	f023 0302 	bic.w	r3, r3, #2
 8005434:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	697a      	ldr	r2, [r7, #20]
 800543c:	4313      	orrs	r3, r2
 800543e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a20      	ldr	r2, [pc, #128]	@ (80054c4 <TIM_OC1_SetConfig+0xd8>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d003      	beq.n	8005450 <TIM_OC1_SetConfig+0x64>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a1f      	ldr	r2, [pc, #124]	@ (80054c8 <TIM_OC1_SetConfig+0xdc>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d10c      	bne.n	800546a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	f023 0308 	bic.w	r3, r3, #8
 8005456:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	697a      	ldr	r2, [r7, #20]
 800545e:	4313      	orrs	r3, r2
 8005460:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	f023 0304 	bic.w	r3, r3, #4
 8005468:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a15      	ldr	r2, [pc, #84]	@ (80054c4 <TIM_OC1_SetConfig+0xd8>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d003      	beq.n	800547a <TIM_OC1_SetConfig+0x8e>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a14      	ldr	r2, [pc, #80]	@ (80054c8 <TIM_OC1_SetConfig+0xdc>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d111      	bne.n	800549e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005480:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005488:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	695b      	ldr	r3, [r3, #20]
 800548e:	693a      	ldr	r2, [r7, #16]
 8005490:	4313      	orrs	r3, r2
 8005492:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	699b      	ldr	r3, [r3, #24]
 8005498:	693a      	ldr	r2, [r7, #16]
 800549a:	4313      	orrs	r3, r2
 800549c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	685a      	ldr	r2, [r3, #4]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	697a      	ldr	r2, [r7, #20]
 80054b6:	621a      	str	r2, [r3, #32]
}
 80054b8:	bf00      	nop
 80054ba:	371c      	adds	r7, #28
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr
 80054c4:	40010000 	.word	0x40010000
 80054c8:	40010400 	.word	0x40010400

080054cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b087      	sub	sp, #28
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a1b      	ldr	r3, [r3, #32]
 80054e0:	f023 0210 	bic.w	r2, r3, #16
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	699b      	ldr	r3, [r3, #24]
 80054f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005502:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	021b      	lsls	r3, r3, #8
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	4313      	orrs	r3, r2
 800550e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	f023 0320 	bic.w	r3, r3, #32
 8005516:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	011b      	lsls	r3, r3, #4
 800551e:	697a      	ldr	r2, [r7, #20]
 8005520:	4313      	orrs	r3, r2
 8005522:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a22      	ldr	r2, [pc, #136]	@ (80055b0 <TIM_OC2_SetConfig+0xe4>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d003      	beq.n	8005534 <TIM_OC2_SetConfig+0x68>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a21      	ldr	r2, [pc, #132]	@ (80055b4 <TIM_OC2_SetConfig+0xe8>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d10d      	bne.n	8005550 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800553a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	011b      	lsls	r3, r3, #4
 8005542:	697a      	ldr	r2, [r7, #20]
 8005544:	4313      	orrs	r3, r2
 8005546:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800554e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a17      	ldr	r2, [pc, #92]	@ (80055b0 <TIM_OC2_SetConfig+0xe4>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d003      	beq.n	8005560 <TIM_OC2_SetConfig+0x94>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a16      	ldr	r2, [pc, #88]	@ (80055b4 <TIM_OC2_SetConfig+0xe8>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d113      	bne.n	8005588 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005566:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800556e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	695b      	ldr	r3, [r3, #20]
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	693a      	ldr	r2, [r7, #16]
 8005578:	4313      	orrs	r3, r2
 800557a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	699b      	ldr	r3, [r3, #24]
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	693a      	ldr	r2, [r7, #16]
 8005584:	4313      	orrs	r3, r2
 8005586:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	693a      	ldr	r2, [r7, #16]
 800558c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	685a      	ldr	r2, [r3, #4]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	697a      	ldr	r2, [r7, #20]
 80055a0:	621a      	str	r2, [r3, #32]
}
 80055a2:	bf00      	nop
 80055a4:	371c      	adds	r7, #28
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
 80055ae:	bf00      	nop
 80055b0:	40010000 	.word	0x40010000
 80055b4:	40010400 	.word	0x40010400

080055b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b087      	sub	sp, #28
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a1b      	ldr	r3, [r3, #32]
 80055c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a1b      	ldr	r3, [r3, #32]
 80055cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	69db      	ldr	r3, [r3, #28]
 80055de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f023 0303 	bic.w	r3, r3, #3
 80055ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005600:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	021b      	lsls	r3, r3, #8
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	4313      	orrs	r3, r2
 800560c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a21      	ldr	r2, [pc, #132]	@ (8005698 <TIM_OC3_SetConfig+0xe0>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d003      	beq.n	800561e <TIM_OC3_SetConfig+0x66>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a20      	ldr	r2, [pc, #128]	@ (800569c <TIM_OC3_SetConfig+0xe4>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d10d      	bne.n	800563a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005624:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	021b      	lsls	r3, r3, #8
 800562c:	697a      	ldr	r2, [r7, #20]
 800562e:	4313      	orrs	r3, r2
 8005630:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005638:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a16      	ldr	r2, [pc, #88]	@ (8005698 <TIM_OC3_SetConfig+0xe0>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d003      	beq.n	800564a <TIM_OC3_SetConfig+0x92>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a15      	ldr	r2, [pc, #84]	@ (800569c <TIM_OC3_SetConfig+0xe4>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d113      	bne.n	8005672 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005650:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005658:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	695b      	ldr	r3, [r3, #20]
 800565e:	011b      	lsls	r3, r3, #4
 8005660:	693a      	ldr	r2, [r7, #16]
 8005662:	4313      	orrs	r3, r2
 8005664:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	011b      	lsls	r3, r3, #4
 800566c:	693a      	ldr	r2, [r7, #16]
 800566e:	4313      	orrs	r3, r2
 8005670:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	693a      	ldr	r2, [r7, #16]
 8005676:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	685a      	ldr	r2, [r3, #4]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	697a      	ldr	r2, [r7, #20]
 800568a:	621a      	str	r2, [r3, #32]
}
 800568c:	bf00      	nop
 800568e:	371c      	adds	r7, #28
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr
 8005698:	40010000 	.word	0x40010000
 800569c:	40010400 	.word	0x40010400

080056a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b087      	sub	sp, #28
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a1b      	ldr	r3, [r3, #32]
 80056ae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a1b      	ldr	r3, [r3, #32]
 80056b4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	69db      	ldr	r3, [r3, #28]
 80056c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	021b      	lsls	r3, r3, #8
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80056ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	031b      	lsls	r3, r3, #12
 80056f2:	693a      	ldr	r2, [r7, #16]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a12      	ldr	r2, [pc, #72]	@ (8005744 <TIM_OC4_SetConfig+0xa4>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d003      	beq.n	8005708 <TIM_OC4_SetConfig+0x68>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a11      	ldr	r2, [pc, #68]	@ (8005748 <TIM_OC4_SetConfig+0xa8>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d109      	bne.n	800571c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800570e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	695b      	ldr	r3, [r3, #20]
 8005714:	019b      	lsls	r3, r3, #6
 8005716:	697a      	ldr	r2, [r7, #20]
 8005718:	4313      	orrs	r3, r2
 800571a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	68fa      	ldr	r2, [r7, #12]
 8005726:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	685a      	ldr	r2, [r3, #4]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	693a      	ldr	r2, [r7, #16]
 8005734:	621a      	str	r2, [r3, #32]
}
 8005736:	bf00      	nop
 8005738:	371c      	adds	r7, #28
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	40010000 	.word	0x40010000
 8005748:	40010400 	.word	0x40010400

0800574c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800574c:	b480      	push	{r7}
 800574e:	b087      	sub	sp, #28
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6a1b      	ldr	r3, [r3, #32]
 800575c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6a1b      	ldr	r3, [r3, #32]
 8005762:	f023 0201 	bic.w	r2, r3, #1
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	699b      	ldr	r3, [r3, #24]
 800576e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005776:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	011b      	lsls	r3, r3, #4
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	4313      	orrs	r3, r2
 8005780:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	f023 030a 	bic.w	r3, r3, #10
 8005788:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800578a:	697a      	ldr	r2, [r7, #20]
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	4313      	orrs	r3, r2
 8005790:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	693a      	ldr	r2, [r7, #16]
 8005796:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	621a      	str	r2, [r3, #32]
}
 800579e:	bf00      	nop
 80057a0:	371c      	adds	r7, #28
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr

080057aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057aa:	b480      	push	{r7}
 80057ac:	b087      	sub	sp, #28
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	60f8      	str	r0, [r7, #12]
 80057b2:	60b9      	str	r1, [r7, #8]
 80057b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6a1b      	ldr	r3, [r3, #32]
 80057ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6a1b      	ldr	r3, [r3, #32]
 80057c0:	f023 0210 	bic.w	r2, r3, #16
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	699b      	ldr	r3, [r3, #24]
 80057cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80057d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	031b      	lsls	r3, r3, #12
 80057da:	693a      	ldr	r2, [r7, #16]
 80057dc:	4313      	orrs	r3, r2
 80057de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80057e6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	011b      	lsls	r3, r3, #4
 80057ec:	697a      	ldr	r2, [r7, #20]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	693a      	ldr	r2, [r7, #16]
 80057f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	697a      	ldr	r2, [r7, #20]
 80057fc:	621a      	str	r2, [r3, #32]
}
 80057fe:	bf00      	nop
 8005800:	371c      	adds	r7, #28
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr

0800580a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800580a:	b480      	push	{r7}
 800580c:	b085      	sub	sp, #20
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
 8005812:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005820:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005822:	683a      	ldr	r2, [r7, #0]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	4313      	orrs	r3, r2
 8005828:	f043 0307 	orr.w	r3, r3, #7
 800582c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	609a      	str	r2, [r3, #8]
}
 8005834:	bf00      	nop
 8005836:	3714      	adds	r7, #20
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005840:	b480      	push	{r7}
 8005842:	b087      	sub	sp, #28
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]
 800584c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800585a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	021a      	lsls	r2, r3, #8
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	431a      	orrs	r2, r3
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	4313      	orrs	r3, r2
 8005868:	697a      	ldr	r2, [r7, #20]
 800586a:	4313      	orrs	r3, r2
 800586c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	697a      	ldr	r2, [r7, #20]
 8005872:	609a      	str	r2, [r3, #8]
}
 8005874:	bf00      	nop
 8005876:	371c      	adds	r7, #28
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005880:	b480      	push	{r7}
 8005882:	b087      	sub	sp, #28
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	f003 031f 	and.w	r3, r3, #31
 8005892:	2201      	movs	r2, #1
 8005894:	fa02 f303 	lsl.w	r3, r2, r3
 8005898:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6a1a      	ldr	r2, [r3, #32]
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	43db      	mvns	r3, r3
 80058a2:	401a      	ands	r2, r3
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6a1a      	ldr	r2, [r3, #32]
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	f003 031f 	and.w	r3, r3, #31
 80058b2:	6879      	ldr	r1, [r7, #4]
 80058b4:	fa01 f303 	lsl.w	r3, r1, r3
 80058b8:	431a      	orrs	r2, r3
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	621a      	str	r2, [r3, #32]
}
 80058be:	bf00      	nop
 80058c0:	371c      	adds	r7, #28
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
	...

080058cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b085      	sub	sp, #20
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d101      	bne.n	80058e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058e0:	2302      	movs	r3, #2
 80058e2:	e05a      	b.n	800599a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2202      	movs	r2, #2
 80058f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800590a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	4313      	orrs	r3, r2
 8005914:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a21      	ldr	r2, [pc, #132]	@ (80059a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d022      	beq.n	800596e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005930:	d01d      	beq.n	800596e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a1d      	ldr	r2, [pc, #116]	@ (80059ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d018      	beq.n	800596e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a1b      	ldr	r2, [pc, #108]	@ (80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d013      	beq.n	800596e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a1a      	ldr	r2, [pc, #104]	@ (80059b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d00e      	beq.n	800596e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a18      	ldr	r2, [pc, #96]	@ (80059b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d009      	beq.n	800596e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a17      	ldr	r2, [pc, #92]	@ (80059bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d004      	beq.n	800596e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a15      	ldr	r2, [pc, #84]	@ (80059c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d10c      	bne.n	8005988 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005974:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	68ba      	ldr	r2, [r7, #8]
 800597c:	4313      	orrs	r3, r2
 800597e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68ba      	ldr	r2, [r7, #8]
 8005986:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3714      	adds	r7, #20
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr
 80059a6:	bf00      	nop
 80059a8:	40010000 	.word	0x40010000
 80059ac:	40000400 	.word	0x40000400
 80059b0:	40000800 	.word	0x40000800
 80059b4:	40000c00 	.word	0x40000c00
 80059b8:	40010400 	.word	0x40010400
 80059bc:	40014000 	.word	0x40014000
 80059c0:	40001800 	.word	0x40001800

080059c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059cc:	bf00      	nop
 80059ce:	370c      	adds	r7, #12
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059e0:	bf00      	nop
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b082      	sub	sp, #8
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d101      	bne.n	80059fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e042      	b.n	8005a84 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d106      	bne.n	8005a18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f7fc ff9e 	bl	8002954 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2224      	movs	r2, #36	@ 0x24
 8005a1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68da      	ldr	r2, [r3, #12]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005a2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 fb83 	bl	800613c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	691a      	ldr	r2, [r3, #16]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005a44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	695a      	ldr	r2, [r3, #20]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005a54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	68da      	ldr	r2, [r3, #12]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005a64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2220      	movs	r2, #32
 8005a70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2220      	movs	r2, #32
 8005a78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005a82:	2300      	movs	r3, #0
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3708      	adds	r7, #8
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b08a      	sub	sp, #40	@ 0x28
 8005a90:	af02      	add	r7, sp, #8
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	603b      	str	r3, [r7, #0]
 8005a98:	4613      	mov	r3, r2
 8005a9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	2b20      	cmp	r3, #32
 8005aaa:	d175      	bne.n	8005b98 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d002      	beq.n	8005ab8 <HAL_UART_Transmit+0x2c>
 8005ab2:	88fb      	ldrh	r3, [r7, #6]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d101      	bne.n	8005abc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e06e      	b.n	8005b9a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2221      	movs	r2, #33	@ 0x21
 8005ac6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005aca:	f7fd f82d 	bl	8002b28 <HAL_GetTick>
 8005ace:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	88fa      	ldrh	r2, [r7, #6]
 8005ad4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	88fa      	ldrh	r2, [r7, #6]
 8005ada:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ae4:	d108      	bne.n	8005af8 <HAL_UART_Transmit+0x6c>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d104      	bne.n	8005af8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005aee:	2300      	movs	r3, #0
 8005af0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	61bb      	str	r3, [r7, #24]
 8005af6:	e003      	b.n	8005b00 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005afc:	2300      	movs	r3, #0
 8005afe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005b00:	e02e      	b.n	8005b60 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	9300      	str	r3, [sp, #0]
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	2180      	movs	r1, #128	@ 0x80
 8005b0c:	68f8      	ldr	r0, [r7, #12]
 8005b0e:	f000 f995 	bl	8005e3c <UART_WaitOnFlagUntilTimeout>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d005      	beq.n	8005b24 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2220      	movs	r2, #32
 8005b1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005b20:	2303      	movs	r3, #3
 8005b22:	e03a      	b.n	8005b9a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d10b      	bne.n	8005b42 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	881b      	ldrh	r3, [r3, #0]
 8005b2e:	461a      	mov	r2, r3
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	3302      	adds	r3, #2
 8005b3e:	61bb      	str	r3, [r7, #24]
 8005b40:	e007      	b.n	8005b52 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	781a      	ldrb	r2, [r3, #0]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	3301      	adds	r3, #1
 8005b50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	3b01      	subs	r3, #1
 8005b5a:	b29a      	uxth	r2, r3
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d1cb      	bne.n	8005b02 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	9300      	str	r3, [sp, #0]
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	2200      	movs	r2, #0
 8005b72:	2140      	movs	r1, #64	@ 0x40
 8005b74:	68f8      	ldr	r0, [r7, #12]
 8005b76:	f000 f961 	bl	8005e3c <UART_WaitOnFlagUntilTimeout>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d005      	beq.n	8005b8c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2220      	movs	r2, #32
 8005b84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	e006      	b.n	8005b9a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2220      	movs	r2, #32
 8005b90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005b94:	2300      	movs	r3, #0
 8005b96:	e000      	b.n	8005b9a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005b98:	2302      	movs	r3, #2
  }
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3720      	adds	r7, #32
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b084      	sub	sp, #16
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	60f8      	str	r0, [r7, #12]
 8005baa:	60b9      	str	r1, [r7, #8]
 8005bac:	4613      	mov	r3, r2
 8005bae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	2b20      	cmp	r3, #32
 8005bba:	d112      	bne.n	8005be2 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d002      	beq.n	8005bc8 <HAL_UART_Receive_DMA+0x26>
 8005bc2:	88fb      	ldrh	r3, [r7, #6]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d101      	bne.n	8005bcc <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e00b      	b.n	8005be4 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005bd2:	88fb      	ldrh	r3, [r7, #6]
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	68b9      	ldr	r1, [r7, #8]
 8005bd8:	68f8      	ldr	r0, [r7, #12]
 8005bda:	f000 f989 	bl	8005ef0 <UART_Start_Receive_DMA>
 8005bde:	4603      	mov	r3, r0
 8005be0:	e000      	b.n	8005be4 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005be2:	2302      	movs	r3, #2
  }
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3710      	adds	r7, #16
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005bf4:	bf00      	nop
 8005bf6:	370c      	adds	r7, #12
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005c08:	bf00      	nop
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005c1c:	bf00      	nop
 8005c1e:	370c      	adds	r7, #12
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	460b      	mov	r3, r1
 8005c32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c34:	bf00      	nop
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b09c      	sub	sp, #112	@ 0x70
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c4c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d172      	bne.n	8005d42 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005c5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c5e:	2200      	movs	r2, #0
 8005c60:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	330c      	adds	r3, #12
 8005c68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c6c:	e853 3f00 	ldrex	r3, [r3]
 8005c70:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005c72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c78:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	330c      	adds	r3, #12
 8005c80:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005c82:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005c84:	657b      	str	r3, [r7, #84]	@ 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c86:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005c88:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005c8a:	e841 2300 	strex	r3, r2, [r1]
 8005c8e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005c90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d1e5      	bne.n	8005c62 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	3314      	adds	r3, #20
 8005c9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ca0:	e853 3f00 	ldrex	r3, [r3]
 8005ca4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ca6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ca8:	f023 0301 	bic.w	r3, r3, #1
 8005cac:	667b      	str	r3, [r7, #100]	@ 0x64
 8005cae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	3314      	adds	r3, #20
 8005cb4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005cb6:	647a      	str	r2, [r7, #68]	@ 0x44
 8005cb8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005cbc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005cbe:	e841 2300 	strex	r3, r2, [r1]
 8005cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005cc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d1e5      	bne.n	8005c96 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	3314      	adds	r3, #20
 8005cd0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd4:	e853 3f00 	ldrex	r3, [r3]
 8005cd8:	623b      	str	r3, [r7, #32]
   return(result);
 8005cda:	6a3b      	ldr	r3, [r7, #32]
 8005cdc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ce0:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ce2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	3314      	adds	r3, #20
 8005ce8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005cea:	633a      	str	r2, [r7, #48]	@ 0x30
 8005cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005cf0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cf2:	e841 2300 	strex	r3, r2, [r1]
 8005cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d1e5      	bne.n	8005cca <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005cfe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d00:	2220      	movs	r2, #32
 8005d02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d119      	bne.n	8005d42 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	330c      	adds	r3, #12
 8005d14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	e853 3f00 	ldrex	r3, [r3]
 8005d1c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f023 0310 	bic.w	r3, r3, #16
 8005d24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	330c      	adds	r3, #12
 8005d2c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005d2e:	61fa      	str	r2, [r7, #28]
 8005d30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d32:	69b9      	ldr	r1, [r7, #24]
 8005d34:	69fa      	ldr	r2, [r7, #28]
 8005d36:	e841 2300 	strex	r3, r2, [r1]
 8005d3a:	617b      	str	r3, [r7, #20]
   return(result);
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d1e5      	bne.n	8005d0e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d44:	2200      	movs	r2, #0
 8005d46:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d106      	bne.n	8005d5e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d52:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005d54:	4619      	mov	r1, r3
 8005d56:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005d58:	f7ff ff66 	bl	8005c28 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005d5c:	e002      	b.n	8005d64 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005d5e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005d60:	f7ff ff44 	bl	8005bec <HAL_UART_RxCpltCallback>
}
 8005d64:	bf00      	nop
 8005d66:	3770      	adds	r7, #112	@ 0x70
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b084      	sub	sp, #16
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d78:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d108      	bne.n	8005d9a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005d8c:	085b      	lsrs	r3, r3, #1
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	4619      	mov	r1, r3
 8005d92:	68f8      	ldr	r0, [r7, #12]
 8005d94:	f7ff ff48 	bl	8005c28 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005d98:	e002      	b.n	8005da0 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005d9a:	68f8      	ldr	r0, [r7, #12]
 8005d9c:	f7ff ff30 	bl	8005c00 <HAL_UART_RxHalfCpltCallback>
}
 8005da0:	bf00      	nop
 8005da2:	3710      	adds	r7, #16
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005db0:	2300      	movs	r3, #0
 8005db2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005db8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	695b      	ldr	r3, [r3, #20]
 8005dc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dc4:	2b80      	cmp	r3, #128	@ 0x80
 8005dc6:	bf0c      	ite	eq
 8005dc8:	2301      	moveq	r3, #1
 8005dca:	2300      	movne	r3, #0
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	2b21      	cmp	r3, #33	@ 0x21
 8005dda:	d108      	bne.n	8005dee <UART_DMAError+0x46>
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d005      	beq.n	8005dee <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	2200      	movs	r2, #0
 8005de6:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005de8:	68b8      	ldr	r0, [r7, #8]
 8005dea:	f000 f91b 	bl	8006024 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	695b      	ldr	r3, [r3, #20]
 8005df4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005df8:	2b40      	cmp	r3, #64	@ 0x40
 8005dfa:	bf0c      	ite	eq
 8005dfc:	2301      	moveq	r3, #1
 8005dfe:	2300      	movne	r3, #0
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	2b22      	cmp	r3, #34	@ 0x22
 8005e0e:	d108      	bne.n	8005e22 <UART_DMAError+0x7a>
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d005      	beq.n	8005e22 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005e1c:	68b8      	ldr	r0, [r7, #8]
 8005e1e:	f000 f929 	bl	8006074 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e26:	f043 0210 	orr.w	r2, r3, #16
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e2e:	68b8      	ldr	r0, [r7, #8]
 8005e30:	f7ff fef0 	bl	8005c14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e34:	bf00      	nop
 8005e36:	3710      	adds	r7, #16
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b086      	sub	sp, #24
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	603b      	str	r3, [r7, #0]
 8005e48:	4613      	mov	r3, r2
 8005e4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e4c:	e03b      	b.n	8005ec6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e4e:	6a3b      	ldr	r3, [r7, #32]
 8005e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e54:	d037      	beq.n	8005ec6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e56:	f7fc fe67 	bl	8002b28 <HAL_GetTick>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	1ad3      	subs	r3, r2, r3
 8005e60:	6a3a      	ldr	r2, [r7, #32]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d302      	bcc.n	8005e6c <UART_WaitOnFlagUntilTimeout+0x30>
 8005e66:	6a3b      	ldr	r3, [r7, #32]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d101      	bne.n	8005e70 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e03a      	b.n	8005ee6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	f003 0304 	and.w	r3, r3, #4
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d023      	beq.n	8005ec6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	2b80      	cmp	r3, #128	@ 0x80
 8005e82:	d020      	beq.n	8005ec6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	2b40      	cmp	r3, #64	@ 0x40
 8005e88:	d01d      	beq.n	8005ec6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 0308 	and.w	r3, r3, #8
 8005e94:	2b08      	cmp	r3, #8
 8005e96:	d116      	bne.n	8005ec6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005e98:	2300      	movs	r3, #0
 8005e9a:	617b      	str	r3, [r7, #20]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	617b      	str	r3, [r7, #20]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	617b      	str	r3, [r7, #20]
 8005eac:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005eae:	68f8      	ldr	r0, [r7, #12]
 8005eb0:	f000 f8e0 	bl	8006074 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2208      	movs	r2, #8
 8005eb8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e00f      	b.n	8005ee6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	4013      	ands	r3, r2
 8005ed0:	68ba      	ldr	r2, [r7, #8]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	bf0c      	ite	eq
 8005ed6:	2301      	moveq	r3, #1
 8005ed8:	2300      	movne	r3, #0
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	461a      	mov	r2, r3
 8005ede:	79fb      	ldrb	r3, [r7, #7]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d0b4      	beq.n	8005e4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3718      	adds	r7, #24
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
	...

08005ef0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b098      	sub	sp, #96	@ 0x60
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	4613      	mov	r3, r2
 8005efc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005efe:	68ba      	ldr	r2, [r7, #8]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	88fa      	ldrh	r2, [r7, #6]
 8005f08:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2222      	movs	r2, #34	@ 0x22
 8005f14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f1c:	4a3e      	ldr	r2, [pc, #248]	@ (8006018 <UART_Start_Receive_DMA+0x128>)
 8005f1e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f24:	4a3d      	ldr	r2, [pc, #244]	@ (800601c <UART_Start_Receive_DMA+0x12c>)
 8005f26:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f2c:	4a3c      	ldr	r2, [pc, #240]	@ (8006020 <UART_Start_Receive_DMA+0x130>)
 8005f2e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f34:	2200      	movs	r2, #0
 8005f36:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005f38:	f107 0308 	add.w	r3, r7, #8
 8005f3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	3304      	adds	r3, #4
 8005f48:	4619      	mov	r1, r3
 8005f4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	88fb      	ldrh	r3, [r7, #6]
 8005f50:	f7fd fbec 	bl	800372c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005f54:	2300      	movs	r3, #0
 8005f56:	613b      	str	r3, [r7, #16]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	613b      	str	r3, [r7, #16]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	613b      	str	r3, [r7, #16]
 8005f68:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d019      	beq.n	8005fa6 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	330c      	adds	r3, #12
 8005f78:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f7c:	e853 3f00 	ldrex	r3, [r3]
 8005f80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005f82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f88:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	330c      	adds	r3, #12
 8005f90:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005f92:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005f94:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f96:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005f98:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005f9a:	e841 2300 	strex	r3, r2, [r1]
 8005f9e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005fa0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d1e5      	bne.n	8005f72 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	3314      	adds	r3, #20
 8005fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fb0:	e853 3f00 	ldrex	r3, [r3]
 8005fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fb8:	f043 0301 	orr.w	r3, r3, #1
 8005fbc:	657b      	str	r3, [r7, #84]	@ 0x54
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	3314      	adds	r3, #20
 8005fc4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005fc6:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005fc8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fca:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005fcc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005fce:	e841 2300 	strex	r3, r2, [r1]
 8005fd2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d1e5      	bne.n	8005fa6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	3314      	adds	r3, #20
 8005fe0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	e853 3f00 	ldrex	r3, [r3]
 8005fe8:	617b      	str	r3, [r7, #20]
   return(result);
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ff0:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	3314      	adds	r3, #20
 8005ff8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005ffa:	627a      	str	r2, [r7, #36]	@ 0x24
 8005ffc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffe:	6a39      	ldr	r1, [r7, #32]
 8006000:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006002:	e841 2300 	strex	r3, r2, [r1]
 8006006:	61fb      	str	r3, [r7, #28]
   return(result);
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1e5      	bne.n	8005fda <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800600e:	2300      	movs	r3, #0
}
 8006010:	4618      	mov	r0, r3
 8006012:	3760      	adds	r7, #96	@ 0x60
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}
 8006018:	08005c41 	.word	0x08005c41
 800601c:	08005d6d 	.word	0x08005d6d
 8006020:	08005da9 	.word	0x08005da9

08006024 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006024:	b480      	push	{r7}
 8006026:	b089      	sub	sp, #36	@ 0x24
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	330c      	adds	r3, #12
 8006032:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	e853 3f00 	ldrex	r3, [r3]
 800603a:	60bb      	str	r3, [r7, #8]
   return(result);
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006042:	61fb      	str	r3, [r7, #28]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	330c      	adds	r3, #12
 800604a:	69fa      	ldr	r2, [r7, #28]
 800604c:	61ba      	str	r2, [r7, #24]
 800604e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006050:	6979      	ldr	r1, [r7, #20]
 8006052:	69ba      	ldr	r2, [r7, #24]
 8006054:	e841 2300 	strex	r3, r2, [r1]
 8006058:	613b      	str	r3, [r7, #16]
   return(result);
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d1e5      	bne.n	800602c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2220      	movs	r2, #32
 8006064:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006068:	bf00      	nop
 800606a:	3724      	adds	r7, #36	@ 0x24
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006074:	b480      	push	{r7}
 8006076:	b095      	sub	sp, #84	@ 0x54
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	330c      	adds	r3, #12
 8006082:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006084:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006086:	e853 3f00 	ldrex	r3, [r3]
 800608a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800608c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800608e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006092:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	330c      	adds	r3, #12
 800609a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800609c:	643a      	str	r2, [r7, #64]	@ 0x40
 800609e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80060a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80060a4:	e841 2300 	strex	r3, r2, [r1]
 80060a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80060aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d1e5      	bne.n	800607c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	3314      	adds	r3, #20
 80060b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b8:	6a3b      	ldr	r3, [r7, #32]
 80060ba:	e853 3f00 	ldrex	r3, [r3]
 80060be:	61fb      	str	r3, [r7, #28]
   return(result);
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	f023 0301 	bic.w	r3, r3, #1
 80060c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	3314      	adds	r3, #20
 80060ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80060d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80060d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80060d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060d8:	e841 2300 	strex	r3, r2, [r1]
 80060dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80060de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d1e5      	bne.n	80060b0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d119      	bne.n	8006120 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	330c      	adds	r3, #12
 80060f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	e853 3f00 	ldrex	r3, [r3]
 80060fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	f023 0310 	bic.w	r3, r3, #16
 8006102:	647b      	str	r3, [r7, #68]	@ 0x44
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	330c      	adds	r3, #12
 800610a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800610c:	61ba      	str	r2, [r7, #24]
 800610e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006110:	6979      	ldr	r1, [r7, #20]
 8006112:	69ba      	ldr	r2, [r7, #24]
 8006114:	e841 2300 	strex	r3, r2, [r1]
 8006118:	613b      	str	r3, [r7, #16]
   return(result);
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d1e5      	bne.n	80060ec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2220      	movs	r2, #32
 8006124:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800612e:	bf00      	nop
 8006130:	3754      	adds	r7, #84	@ 0x54
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr
	...

0800613c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800613c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006140:	b0c0      	sub	sp, #256	@ 0x100
 8006142:	af00      	add	r7, sp, #0
 8006144:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006158:	68d9      	ldr	r1, [r3, #12]
 800615a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	ea40 0301 	orr.w	r3, r0, r1
 8006164:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800616a:	689a      	ldr	r2, [r3, #8]
 800616c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	431a      	orrs	r2, r3
 8006174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006178:	695b      	ldr	r3, [r3, #20]
 800617a:	431a      	orrs	r2, r3
 800617c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006180:	69db      	ldr	r3, [r3, #28]
 8006182:	4313      	orrs	r3, r2
 8006184:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006194:	f021 010c 	bic.w	r1, r1, #12
 8006198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80061a2:	430b      	orrs	r3, r1
 80061a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80061a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	695b      	ldr	r3, [r3, #20]
 80061ae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80061b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061b6:	6999      	ldr	r1, [r3, #24]
 80061b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	ea40 0301 	orr.w	r3, r0, r1
 80061c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80061c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	4b8f      	ldr	r3, [pc, #572]	@ (8006408 <UART_SetConfig+0x2cc>)
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d005      	beq.n	80061dc <UART_SetConfig+0xa0>
 80061d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	4b8d      	ldr	r3, [pc, #564]	@ (800640c <UART_SetConfig+0x2d0>)
 80061d8:	429a      	cmp	r2, r3
 80061da:	d104      	bne.n	80061e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80061dc:	f7fe fbd2 	bl	8004984 <HAL_RCC_GetPCLK2Freq>
 80061e0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80061e4:	e003      	b.n	80061ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80061e6:	f7fe fbb9 	bl	800495c <HAL_RCC_GetPCLK1Freq>
 80061ea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061f2:	69db      	ldr	r3, [r3, #28]
 80061f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061f8:	f040 810c 	bne.w	8006414 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80061fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006200:	2200      	movs	r2, #0
 8006202:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006206:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800620a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800620e:	4622      	mov	r2, r4
 8006210:	462b      	mov	r3, r5
 8006212:	1891      	adds	r1, r2, r2
 8006214:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006216:	415b      	adcs	r3, r3
 8006218:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800621a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800621e:	4621      	mov	r1, r4
 8006220:	eb12 0801 	adds.w	r8, r2, r1
 8006224:	4629      	mov	r1, r5
 8006226:	eb43 0901 	adc.w	r9, r3, r1
 800622a:	f04f 0200 	mov.w	r2, #0
 800622e:	f04f 0300 	mov.w	r3, #0
 8006232:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006236:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800623a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800623e:	4690      	mov	r8, r2
 8006240:	4699      	mov	r9, r3
 8006242:	4623      	mov	r3, r4
 8006244:	eb18 0303 	adds.w	r3, r8, r3
 8006248:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800624c:	462b      	mov	r3, r5
 800624e:	eb49 0303 	adc.w	r3, r9, r3
 8006252:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006262:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006266:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800626a:	460b      	mov	r3, r1
 800626c:	18db      	adds	r3, r3, r3
 800626e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006270:	4613      	mov	r3, r2
 8006272:	eb42 0303 	adc.w	r3, r2, r3
 8006276:	657b      	str	r3, [r7, #84]	@ 0x54
 8006278:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800627c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006280:	f7fa fce2 	bl	8000c48 <__aeabi_uldivmod>
 8006284:	4602      	mov	r2, r0
 8006286:	460b      	mov	r3, r1
 8006288:	4b61      	ldr	r3, [pc, #388]	@ (8006410 <UART_SetConfig+0x2d4>)
 800628a:	fba3 2302 	umull	r2, r3, r3, r2
 800628e:	095b      	lsrs	r3, r3, #5
 8006290:	011c      	lsls	r4, r3, #4
 8006292:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006296:	2200      	movs	r2, #0
 8006298:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800629c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80062a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80062a4:	4642      	mov	r2, r8
 80062a6:	464b      	mov	r3, r9
 80062a8:	1891      	adds	r1, r2, r2
 80062aa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80062ac:	415b      	adcs	r3, r3
 80062ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80062b4:	4641      	mov	r1, r8
 80062b6:	eb12 0a01 	adds.w	sl, r2, r1
 80062ba:	4649      	mov	r1, r9
 80062bc:	eb43 0b01 	adc.w	fp, r3, r1
 80062c0:	f04f 0200 	mov.w	r2, #0
 80062c4:	f04f 0300 	mov.w	r3, #0
 80062c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80062cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80062d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062d4:	4692      	mov	sl, r2
 80062d6:	469b      	mov	fp, r3
 80062d8:	4643      	mov	r3, r8
 80062da:	eb1a 0303 	adds.w	r3, sl, r3
 80062de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80062e2:	464b      	mov	r3, r9
 80062e4:	eb4b 0303 	adc.w	r3, fp, r3
 80062e8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80062ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80062f8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80062fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006300:	460b      	mov	r3, r1
 8006302:	18db      	adds	r3, r3, r3
 8006304:	643b      	str	r3, [r7, #64]	@ 0x40
 8006306:	4613      	mov	r3, r2
 8006308:	eb42 0303 	adc.w	r3, r2, r3
 800630c:	647b      	str	r3, [r7, #68]	@ 0x44
 800630e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006312:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006316:	f7fa fc97 	bl	8000c48 <__aeabi_uldivmod>
 800631a:	4602      	mov	r2, r0
 800631c:	460b      	mov	r3, r1
 800631e:	4611      	mov	r1, r2
 8006320:	4b3b      	ldr	r3, [pc, #236]	@ (8006410 <UART_SetConfig+0x2d4>)
 8006322:	fba3 2301 	umull	r2, r3, r3, r1
 8006326:	095b      	lsrs	r3, r3, #5
 8006328:	2264      	movs	r2, #100	@ 0x64
 800632a:	fb02 f303 	mul.w	r3, r2, r3
 800632e:	1acb      	subs	r3, r1, r3
 8006330:	00db      	lsls	r3, r3, #3
 8006332:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006336:	4b36      	ldr	r3, [pc, #216]	@ (8006410 <UART_SetConfig+0x2d4>)
 8006338:	fba3 2302 	umull	r2, r3, r3, r2
 800633c:	095b      	lsrs	r3, r3, #5
 800633e:	005b      	lsls	r3, r3, #1
 8006340:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006344:	441c      	add	r4, r3
 8006346:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800634a:	2200      	movs	r2, #0
 800634c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006350:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006354:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006358:	4642      	mov	r2, r8
 800635a:	464b      	mov	r3, r9
 800635c:	1891      	adds	r1, r2, r2
 800635e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006360:	415b      	adcs	r3, r3
 8006362:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006364:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006368:	4641      	mov	r1, r8
 800636a:	1851      	adds	r1, r2, r1
 800636c:	6339      	str	r1, [r7, #48]	@ 0x30
 800636e:	4649      	mov	r1, r9
 8006370:	414b      	adcs	r3, r1
 8006372:	637b      	str	r3, [r7, #52]	@ 0x34
 8006374:	f04f 0200 	mov.w	r2, #0
 8006378:	f04f 0300 	mov.w	r3, #0
 800637c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006380:	4659      	mov	r1, fp
 8006382:	00cb      	lsls	r3, r1, #3
 8006384:	4651      	mov	r1, sl
 8006386:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800638a:	4651      	mov	r1, sl
 800638c:	00ca      	lsls	r2, r1, #3
 800638e:	4610      	mov	r0, r2
 8006390:	4619      	mov	r1, r3
 8006392:	4603      	mov	r3, r0
 8006394:	4642      	mov	r2, r8
 8006396:	189b      	adds	r3, r3, r2
 8006398:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800639c:	464b      	mov	r3, r9
 800639e:	460a      	mov	r2, r1
 80063a0:	eb42 0303 	adc.w	r3, r2, r3
 80063a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80063a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80063b4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80063b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80063bc:	460b      	mov	r3, r1
 80063be:	18db      	adds	r3, r3, r3
 80063c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063c2:	4613      	mov	r3, r2
 80063c4:	eb42 0303 	adc.w	r3, r2, r3
 80063c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80063ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80063d2:	f7fa fc39 	bl	8000c48 <__aeabi_uldivmod>
 80063d6:	4602      	mov	r2, r0
 80063d8:	460b      	mov	r3, r1
 80063da:	4b0d      	ldr	r3, [pc, #52]	@ (8006410 <UART_SetConfig+0x2d4>)
 80063dc:	fba3 1302 	umull	r1, r3, r3, r2
 80063e0:	095b      	lsrs	r3, r3, #5
 80063e2:	2164      	movs	r1, #100	@ 0x64
 80063e4:	fb01 f303 	mul.w	r3, r1, r3
 80063e8:	1ad3      	subs	r3, r2, r3
 80063ea:	00db      	lsls	r3, r3, #3
 80063ec:	3332      	adds	r3, #50	@ 0x32
 80063ee:	4a08      	ldr	r2, [pc, #32]	@ (8006410 <UART_SetConfig+0x2d4>)
 80063f0:	fba2 2303 	umull	r2, r3, r2, r3
 80063f4:	095b      	lsrs	r3, r3, #5
 80063f6:	f003 0207 	and.w	r2, r3, #7
 80063fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4422      	add	r2, r4
 8006402:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006404:	e106      	b.n	8006614 <UART_SetConfig+0x4d8>
 8006406:	bf00      	nop
 8006408:	40011000 	.word	0x40011000
 800640c:	40011400 	.word	0x40011400
 8006410:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006414:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006418:	2200      	movs	r2, #0
 800641a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800641e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006422:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006426:	4642      	mov	r2, r8
 8006428:	464b      	mov	r3, r9
 800642a:	1891      	adds	r1, r2, r2
 800642c:	6239      	str	r1, [r7, #32]
 800642e:	415b      	adcs	r3, r3
 8006430:	627b      	str	r3, [r7, #36]	@ 0x24
 8006432:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006436:	4641      	mov	r1, r8
 8006438:	1854      	adds	r4, r2, r1
 800643a:	4649      	mov	r1, r9
 800643c:	eb43 0501 	adc.w	r5, r3, r1
 8006440:	f04f 0200 	mov.w	r2, #0
 8006444:	f04f 0300 	mov.w	r3, #0
 8006448:	00eb      	lsls	r3, r5, #3
 800644a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800644e:	00e2      	lsls	r2, r4, #3
 8006450:	4614      	mov	r4, r2
 8006452:	461d      	mov	r5, r3
 8006454:	4643      	mov	r3, r8
 8006456:	18e3      	adds	r3, r4, r3
 8006458:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800645c:	464b      	mov	r3, r9
 800645e:	eb45 0303 	adc.w	r3, r5, r3
 8006462:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006472:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006476:	f04f 0200 	mov.w	r2, #0
 800647a:	f04f 0300 	mov.w	r3, #0
 800647e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006482:	4629      	mov	r1, r5
 8006484:	008b      	lsls	r3, r1, #2
 8006486:	4621      	mov	r1, r4
 8006488:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800648c:	4621      	mov	r1, r4
 800648e:	008a      	lsls	r2, r1, #2
 8006490:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006494:	f7fa fbd8 	bl	8000c48 <__aeabi_uldivmod>
 8006498:	4602      	mov	r2, r0
 800649a:	460b      	mov	r3, r1
 800649c:	4b60      	ldr	r3, [pc, #384]	@ (8006620 <UART_SetConfig+0x4e4>)
 800649e:	fba3 2302 	umull	r2, r3, r3, r2
 80064a2:	095b      	lsrs	r3, r3, #5
 80064a4:	011c      	lsls	r4, r3, #4
 80064a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064aa:	2200      	movs	r2, #0
 80064ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80064b0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80064b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80064b8:	4642      	mov	r2, r8
 80064ba:	464b      	mov	r3, r9
 80064bc:	1891      	adds	r1, r2, r2
 80064be:	61b9      	str	r1, [r7, #24]
 80064c0:	415b      	adcs	r3, r3
 80064c2:	61fb      	str	r3, [r7, #28]
 80064c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80064c8:	4641      	mov	r1, r8
 80064ca:	1851      	adds	r1, r2, r1
 80064cc:	6139      	str	r1, [r7, #16]
 80064ce:	4649      	mov	r1, r9
 80064d0:	414b      	adcs	r3, r1
 80064d2:	617b      	str	r3, [r7, #20]
 80064d4:	f04f 0200 	mov.w	r2, #0
 80064d8:	f04f 0300 	mov.w	r3, #0
 80064dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80064e0:	4659      	mov	r1, fp
 80064e2:	00cb      	lsls	r3, r1, #3
 80064e4:	4651      	mov	r1, sl
 80064e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064ea:	4651      	mov	r1, sl
 80064ec:	00ca      	lsls	r2, r1, #3
 80064ee:	4610      	mov	r0, r2
 80064f0:	4619      	mov	r1, r3
 80064f2:	4603      	mov	r3, r0
 80064f4:	4642      	mov	r2, r8
 80064f6:	189b      	adds	r3, r3, r2
 80064f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80064fc:	464b      	mov	r3, r9
 80064fe:	460a      	mov	r2, r1
 8006500:	eb42 0303 	adc.w	r3, r2, r3
 8006504:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006512:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006514:	f04f 0200 	mov.w	r2, #0
 8006518:	f04f 0300 	mov.w	r3, #0
 800651c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006520:	4649      	mov	r1, r9
 8006522:	008b      	lsls	r3, r1, #2
 8006524:	4641      	mov	r1, r8
 8006526:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800652a:	4641      	mov	r1, r8
 800652c:	008a      	lsls	r2, r1, #2
 800652e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006532:	f7fa fb89 	bl	8000c48 <__aeabi_uldivmod>
 8006536:	4602      	mov	r2, r0
 8006538:	460b      	mov	r3, r1
 800653a:	4611      	mov	r1, r2
 800653c:	4b38      	ldr	r3, [pc, #224]	@ (8006620 <UART_SetConfig+0x4e4>)
 800653e:	fba3 2301 	umull	r2, r3, r3, r1
 8006542:	095b      	lsrs	r3, r3, #5
 8006544:	2264      	movs	r2, #100	@ 0x64
 8006546:	fb02 f303 	mul.w	r3, r2, r3
 800654a:	1acb      	subs	r3, r1, r3
 800654c:	011b      	lsls	r3, r3, #4
 800654e:	3332      	adds	r3, #50	@ 0x32
 8006550:	4a33      	ldr	r2, [pc, #204]	@ (8006620 <UART_SetConfig+0x4e4>)
 8006552:	fba2 2303 	umull	r2, r3, r2, r3
 8006556:	095b      	lsrs	r3, r3, #5
 8006558:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800655c:	441c      	add	r4, r3
 800655e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006562:	2200      	movs	r2, #0
 8006564:	673b      	str	r3, [r7, #112]	@ 0x70
 8006566:	677a      	str	r2, [r7, #116]	@ 0x74
 8006568:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800656c:	4642      	mov	r2, r8
 800656e:	464b      	mov	r3, r9
 8006570:	1891      	adds	r1, r2, r2
 8006572:	60b9      	str	r1, [r7, #8]
 8006574:	415b      	adcs	r3, r3
 8006576:	60fb      	str	r3, [r7, #12]
 8006578:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800657c:	4641      	mov	r1, r8
 800657e:	1851      	adds	r1, r2, r1
 8006580:	6039      	str	r1, [r7, #0]
 8006582:	4649      	mov	r1, r9
 8006584:	414b      	adcs	r3, r1
 8006586:	607b      	str	r3, [r7, #4]
 8006588:	f04f 0200 	mov.w	r2, #0
 800658c:	f04f 0300 	mov.w	r3, #0
 8006590:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006594:	4659      	mov	r1, fp
 8006596:	00cb      	lsls	r3, r1, #3
 8006598:	4651      	mov	r1, sl
 800659a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800659e:	4651      	mov	r1, sl
 80065a0:	00ca      	lsls	r2, r1, #3
 80065a2:	4610      	mov	r0, r2
 80065a4:	4619      	mov	r1, r3
 80065a6:	4603      	mov	r3, r0
 80065a8:	4642      	mov	r2, r8
 80065aa:	189b      	adds	r3, r3, r2
 80065ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80065ae:	464b      	mov	r3, r9
 80065b0:	460a      	mov	r2, r1
 80065b2:	eb42 0303 	adc.w	r3, r2, r3
 80065b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80065b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80065c2:	667a      	str	r2, [r7, #100]	@ 0x64
 80065c4:	f04f 0200 	mov.w	r2, #0
 80065c8:	f04f 0300 	mov.w	r3, #0
 80065cc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80065d0:	4649      	mov	r1, r9
 80065d2:	008b      	lsls	r3, r1, #2
 80065d4:	4641      	mov	r1, r8
 80065d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065da:	4641      	mov	r1, r8
 80065dc:	008a      	lsls	r2, r1, #2
 80065de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80065e2:	f7fa fb31 	bl	8000c48 <__aeabi_uldivmod>
 80065e6:	4602      	mov	r2, r0
 80065e8:	460b      	mov	r3, r1
 80065ea:	4b0d      	ldr	r3, [pc, #52]	@ (8006620 <UART_SetConfig+0x4e4>)
 80065ec:	fba3 1302 	umull	r1, r3, r3, r2
 80065f0:	095b      	lsrs	r3, r3, #5
 80065f2:	2164      	movs	r1, #100	@ 0x64
 80065f4:	fb01 f303 	mul.w	r3, r1, r3
 80065f8:	1ad3      	subs	r3, r2, r3
 80065fa:	011b      	lsls	r3, r3, #4
 80065fc:	3332      	adds	r3, #50	@ 0x32
 80065fe:	4a08      	ldr	r2, [pc, #32]	@ (8006620 <UART_SetConfig+0x4e4>)
 8006600:	fba2 2303 	umull	r2, r3, r2, r3
 8006604:	095b      	lsrs	r3, r3, #5
 8006606:	f003 020f 	and.w	r2, r3, #15
 800660a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4422      	add	r2, r4
 8006612:	609a      	str	r2, [r3, #8]
}
 8006614:	bf00      	nop
 8006616:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800661a:	46bd      	mov	sp, r7
 800661c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006620:	51eb851f 	.word	0x51eb851f

08006624 <__cvt>:
 8006624:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006628:	ec57 6b10 	vmov	r6, r7, d0
 800662c:	2f00      	cmp	r7, #0
 800662e:	460c      	mov	r4, r1
 8006630:	4619      	mov	r1, r3
 8006632:	463b      	mov	r3, r7
 8006634:	bfbb      	ittet	lt
 8006636:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800663a:	461f      	movlt	r7, r3
 800663c:	2300      	movge	r3, #0
 800663e:	232d      	movlt	r3, #45	@ 0x2d
 8006640:	700b      	strb	r3, [r1, #0]
 8006642:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006644:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006648:	4691      	mov	r9, r2
 800664a:	f023 0820 	bic.w	r8, r3, #32
 800664e:	bfbc      	itt	lt
 8006650:	4632      	movlt	r2, r6
 8006652:	4616      	movlt	r6, r2
 8006654:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006658:	d005      	beq.n	8006666 <__cvt+0x42>
 800665a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800665e:	d100      	bne.n	8006662 <__cvt+0x3e>
 8006660:	3401      	adds	r4, #1
 8006662:	2102      	movs	r1, #2
 8006664:	e000      	b.n	8006668 <__cvt+0x44>
 8006666:	2103      	movs	r1, #3
 8006668:	ab03      	add	r3, sp, #12
 800666a:	9301      	str	r3, [sp, #4]
 800666c:	ab02      	add	r3, sp, #8
 800666e:	9300      	str	r3, [sp, #0]
 8006670:	ec47 6b10 	vmov	d0, r6, r7
 8006674:	4653      	mov	r3, sl
 8006676:	4622      	mov	r2, r4
 8006678:	f000 fe8e 	bl	8007398 <_dtoa_r>
 800667c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006680:	4605      	mov	r5, r0
 8006682:	d119      	bne.n	80066b8 <__cvt+0x94>
 8006684:	f019 0f01 	tst.w	r9, #1
 8006688:	d00e      	beq.n	80066a8 <__cvt+0x84>
 800668a:	eb00 0904 	add.w	r9, r0, r4
 800668e:	2200      	movs	r2, #0
 8006690:	2300      	movs	r3, #0
 8006692:	4630      	mov	r0, r6
 8006694:	4639      	mov	r1, r7
 8006696:	f7fa fa17 	bl	8000ac8 <__aeabi_dcmpeq>
 800669a:	b108      	cbz	r0, 80066a0 <__cvt+0x7c>
 800669c:	f8cd 900c 	str.w	r9, [sp, #12]
 80066a0:	2230      	movs	r2, #48	@ 0x30
 80066a2:	9b03      	ldr	r3, [sp, #12]
 80066a4:	454b      	cmp	r3, r9
 80066a6:	d31e      	bcc.n	80066e6 <__cvt+0xc2>
 80066a8:	9b03      	ldr	r3, [sp, #12]
 80066aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80066ac:	1b5b      	subs	r3, r3, r5
 80066ae:	4628      	mov	r0, r5
 80066b0:	6013      	str	r3, [r2, #0]
 80066b2:	b004      	add	sp, #16
 80066b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066b8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80066bc:	eb00 0904 	add.w	r9, r0, r4
 80066c0:	d1e5      	bne.n	800668e <__cvt+0x6a>
 80066c2:	7803      	ldrb	r3, [r0, #0]
 80066c4:	2b30      	cmp	r3, #48	@ 0x30
 80066c6:	d10a      	bne.n	80066de <__cvt+0xba>
 80066c8:	2200      	movs	r2, #0
 80066ca:	2300      	movs	r3, #0
 80066cc:	4630      	mov	r0, r6
 80066ce:	4639      	mov	r1, r7
 80066d0:	f7fa f9fa 	bl	8000ac8 <__aeabi_dcmpeq>
 80066d4:	b918      	cbnz	r0, 80066de <__cvt+0xba>
 80066d6:	f1c4 0401 	rsb	r4, r4, #1
 80066da:	f8ca 4000 	str.w	r4, [sl]
 80066de:	f8da 3000 	ldr.w	r3, [sl]
 80066e2:	4499      	add	r9, r3
 80066e4:	e7d3      	b.n	800668e <__cvt+0x6a>
 80066e6:	1c59      	adds	r1, r3, #1
 80066e8:	9103      	str	r1, [sp, #12]
 80066ea:	701a      	strb	r2, [r3, #0]
 80066ec:	e7d9      	b.n	80066a2 <__cvt+0x7e>

080066ee <__exponent>:
 80066ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80066f0:	2900      	cmp	r1, #0
 80066f2:	bfba      	itte	lt
 80066f4:	4249      	neglt	r1, r1
 80066f6:	232d      	movlt	r3, #45	@ 0x2d
 80066f8:	232b      	movge	r3, #43	@ 0x2b
 80066fa:	2909      	cmp	r1, #9
 80066fc:	7002      	strb	r2, [r0, #0]
 80066fe:	7043      	strb	r3, [r0, #1]
 8006700:	dd29      	ble.n	8006756 <__exponent+0x68>
 8006702:	f10d 0307 	add.w	r3, sp, #7
 8006706:	461d      	mov	r5, r3
 8006708:	270a      	movs	r7, #10
 800670a:	461a      	mov	r2, r3
 800670c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006710:	fb07 1416 	mls	r4, r7, r6, r1
 8006714:	3430      	adds	r4, #48	@ 0x30
 8006716:	f802 4c01 	strb.w	r4, [r2, #-1]
 800671a:	460c      	mov	r4, r1
 800671c:	2c63      	cmp	r4, #99	@ 0x63
 800671e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006722:	4631      	mov	r1, r6
 8006724:	dcf1      	bgt.n	800670a <__exponent+0x1c>
 8006726:	3130      	adds	r1, #48	@ 0x30
 8006728:	1e94      	subs	r4, r2, #2
 800672a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800672e:	1c41      	adds	r1, r0, #1
 8006730:	4623      	mov	r3, r4
 8006732:	42ab      	cmp	r3, r5
 8006734:	d30a      	bcc.n	800674c <__exponent+0x5e>
 8006736:	f10d 0309 	add.w	r3, sp, #9
 800673a:	1a9b      	subs	r3, r3, r2
 800673c:	42ac      	cmp	r4, r5
 800673e:	bf88      	it	hi
 8006740:	2300      	movhi	r3, #0
 8006742:	3302      	adds	r3, #2
 8006744:	4403      	add	r3, r0
 8006746:	1a18      	subs	r0, r3, r0
 8006748:	b003      	add	sp, #12
 800674a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800674c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006750:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006754:	e7ed      	b.n	8006732 <__exponent+0x44>
 8006756:	2330      	movs	r3, #48	@ 0x30
 8006758:	3130      	adds	r1, #48	@ 0x30
 800675a:	7083      	strb	r3, [r0, #2]
 800675c:	70c1      	strb	r1, [r0, #3]
 800675e:	1d03      	adds	r3, r0, #4
 8006760:	e7f1      	b.n	8006746 <__exponent+0x58>
	...

08006764 <_printf_float>:
 8006764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006768:	b08d      	sub	sp, #52	@ 0x34
 800676a:	460c      	mov	r4, r1
 800676c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006770:	4616      	mov	r6, r2
 8006772:	461f      	mov	r7, r3
 8006774:	4605      	mov	r5, r0
 8006776:	f000 fd0f 	bl	8007198 <_localeconv_r>
 800677a:	6803      	ldr	r3, [r0, #0]
 800677c:	9304      	str	r3, [sp, #16]
 800677e:	4618      	mov	r0, r3
 8006780:	f7f9 fd76 	bl	8000270 <strlen>
 8006784:	2300      	movs	r3, #0
 8006786:	930a      	str	r3, [sp, #40]	@ 0x28
 8006788:	f8d8 3000 	ldr.w	r3, [r8]
 800678c:	9005      	str	r0, [sp, #20]
 800678e:	3307      	adds	r3, #7
 8006790:	f023 0307 	bic.w	r3, r3, #7
 8006794:	f103 0208 	add.w	r2, r3, #8
 8006798:	f894 a018 	ldrb.w	sl, [r4, #24]
 800679c:	f8d4 b000 	ldr.w	fp, [r4]
 80067a0:	f8c8 2000 	str.w	r2, [r8]
 80067a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80067a8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80067ac:	9307      	str	r3, [sp, #28]
 80067ae:	f8cd 8018 	str.w	r8, [sp, #24]
 80067b2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80067b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80067ba:	4b9c      	ldr	r3, [pc, #624]	@ (8006a2c <_printf_float+0x2c8>)
 80067bc:	f04f 32ff 	mov.w	r2, #4294967295
 80067c0:	f7fa f9b4 	bl	8000b2c <__aeabi_dcmpun>
 80067c4:	bb70      	cbnz	r0, 8006824 <_printf_float+0xc0>
 80067c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80067ca:	4b98      	ldr	r3, [pc, #608]	@ (8006a2c <_printf_float+0x2c8>)
 80067cc:	f04f 32ff 	mov.w	r2, #4294967295
 80067d0:	f7fa f98e 	bl	8000af0 <__aeabi_dcmple>
 80067d4:	bb30      	cbnz	r0, 8006824 <_printf_float+0xc0>
 80067d6:	2200      	movs	r2, #0
 80067d8:	2300      	movs	r3, #0
 80067da:	4640      	mov	r0, r8
 80067dc:	4649      	mov	r1, r9
 80067de:	f7fa f97d 	bl	8000adc <__aeabi_dcmplt>
 80067e2:	b110      	cbz	r0, 80067ea <_printf_float+0x86>
 80067e4:	232d      	movs	r3, #45	@ 0x2d
 80067e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067ea:	4a91      	ldr	r2, [pc, #580]	@ (8006a30 <_printf_float+0x2cc>)
 80067ec:	4b91      	ldr	r3, [pc, #580]	@ (8006a34 <_printf_float+0x2d0>)
 80067ee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80067f2:	bf94      	ite	ls
 80067f4:	4690      	movls	r8, r2
 80067f6:	4698      	movhi	r8, r3
 80067f8:	2303      	movs	r3, #3
 80067fa:	6123      	str	r3, [r4, #16]
 80067fc:	f02b 0304 	bic.w	r3, fp, #4
 8006800:	6023      	str	r3, [r4, #0]
 8006802:	f04f 0900 	mov.w	r9, #0
 8006806:	9700      	str	r7, [sp, #0]
 8006808:	4633      	mov	r3, r6
 800680a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800680c:	4621      	mov	r1, r4
 800680e:	4628      	mov	r0, r5
 8006810:	f000 f9d2 	bl	8006bb8 <_printf_common>
 8006814:	3001      	adds	r0, #1
 8006816:	f040 808d 	bne.w	8006934 <_printf_float+0x1d0>
 800681a:	f04f 30ff 	mov.w	r0, #4294967295
 800681e:	b00d      	add	sp, #52	@ 0x34
 8006820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006824:	4642      	mov	r2, r8
 8006826:	464b      	mov	r3, r9
 8006828:	4640      	mov	r0, r8
 800682a:	4649      	mov	r1, r9
 800682c:	f7fa f97e 	bl	8000b2c <__aeabi_dcmpun>
 8006830:	b140      	cbz	r0, 8006844 <_printf_float+0xe0>
 8006832:	464b      	mov	r3, r9
 8006834:	2b00      	cmp	r3, #0
 8006836:	bfbc      	itt	lt
 8006838:	232d      	movlt	r3, #45	@ 0x2d
 800683a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800683e:	4a7e      	ldr	r2, [pc, #504]	@ (8006a38 <_printf_float+0x2d4>)
 8006840:	4b7e      	ldr	r3, [pc, #504]	@ (8006a3c <_printf_float+0x2d8>)
 8006842:	e7d4      	b.n	80067ee <_printf_float+0x8a>
 8006844:	6863      	ldr	r3, [r4, #4]
 8006846:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800684a:	9206      	str	r2, [sp, #24]
 800684c:	1c5a      	adds	r2, r3, #1
 800684e:	d13b      	bne.n	80068c8 <_printf_float+0x164>
 8006850:	2306      	movs	r3, #6
 8006852:	6063      	str	r3, [r4, #4]
 8006854:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006858:	2300      	movs	r3, #0
 800685a:	6022      	str	r2, [r4, #0]
 800685c:	9303      	str	r3, [sp, #12]
 800685e:	ab0a      	add	r3, sp, #40	@ 0x28
 8006860:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006864:	ab09      	add	r3, sp, #36	@ 0x24
 8006866:	9300      	str	r3, [sp, #0]
 8006868:	6861      	ldr	r1, [r4, #4]
 800686a:	ec49 8b10 	vmov	d0, r8, r9
 800686e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006872:	4628      	mov	r0, r5
 8006874:	f7ff fed6 	bl	8006624 <__cvt>
 8006878:	9b06      	ldr	r3, [sp, #24]
 800687a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800687c:	2b47      	cmp	r3, #71	@ 0x47
 800687e:	4680      	mov	r8, r0
 8006880:	d129      	bne.n	80068d6 <_printf_float+0x172>
 8006882:	1cc8      	adds	r0, r1, #3
 8006884:	db02      	blt.n	800688c <_printf_float+0x128>
 8006886:	6863      	ldr	r3, [r4, #4]
 8006888:	4299      	cmp	r1, r3
 800688a:	dd41      	ble.n	8006910 <_printf_float+0x1ac>
 800688c:	f1aa 0a02 	sub.w	sl, sl, #2
 8006890:	fa5f fa8a 	uxtb.w	sl, sl
 8006894:	3901      	subs	r1, #1
 8006896:	4652      	mov	r2, sl
 8006898:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800689c:	9109      	str	r1, [sp, #36]	@ 0x24
 800689e:	f7ff ff26 	bl	80066ee <__exponent>
 80068a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80068a4:	1813      	adds	r3, r2, r0
 80068a6:	2a01      	cmp	r2, #1
 80068a8:	4681      	mov	r9, r0
 80068aa:	6123      	str	r3, [r4, #16]
 80068ac:	dc02      	bgt.n	80068b4 <_printf_float+0x150>
 80068ae:	6822      	ldr	r2, [r4, #0]
 80068b0:	07d2      	lsls	r2, r2, #31
 80068b2:	d501      	bpl.n	80068b8 <_printf_float+0x154>
 80068b4:	3301      	adds	r3, #1
 80068b6:	6123      	str	r3, [r4, #16]
 80068b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d0a2      	beq.n	8006806 <_printf_float+0xa2>
 80068c0:	232d      	movs	r3, #45	@ 0x2d
 80068c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068c6:	e79e      	b.n	8006806 <_printf_float+0xa2>
 80068c8:	9a06      	ldr	r2, [sp, #24]
 80068ca:	2a47      	cmp	r2, #71	@ 0x47
 80068cc:	d1c2      	bne.n	8006854 <_printf_float+0xf0>
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d1c0      	bne.n	8006854 <_printf_float+0xf0>
 80068d2:	2301      	movs	r3, #1
 80068d4:	e7bd      	b.n	8006852 <_printf_float+0xee>
 80068d6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80068da:	d9db      	bls.n	8006894 <_printf_float+0x130>
 80068dc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80068e0:	d118      	bne.n	8006914 <_printf_float+0x1b0>
 80068e2:	2900      	cmp	r1, #0
 80068e4:	6863      	ldr	r3, [r4, #4]
 80068e6:	dd0b      	ble.n	8006900 <_printf_float+0x19c>
 80068e8:	6121      	str	r1, [r4, #16]
 80068ea:	b913      	cbnz	r3, 80068f2 <_printf_float+0x18e>
 80068ec:	6822      	ldr	r2, [r4, #0]
 80068ee:	07d0      	lsls	r0, r2, #31
 80068f0:	d502      	bpl.n	80068f8 <_printf_float+0x194>
 80068f2:	3301      	adds	r3, #1
 80068f4:	440b      	add	r3, r1
 80068f6:	6123      	str	r3, [r4, #16]
 80068f8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80068fa:	f04f 0900 	mov.w	r9, #0
 80068fe:	e7db      	b.n	80068b8 <_printf_float+0x154>
 8006900:	b913      	cbnz	r3, 8006908 <_printf_float+0x1a4>
 8006902:	6822      	ldr	r2, [r4, #0]
 8006904:	07d2      	lsls	r2, r2, #31
 8006906:	d501      	bpl.n	800690c <_printf_float+0x1a8>
 8006908:	3302      	adds	r3, #2
 800690a:	e7f4      	b.n	80068f6 <_printf_float+0x192>
 800690c:	2301      	movs	r3, #1
 800690e:	e7f2      	b.n	80068f6 <_printf_float+0x192>
 8006910:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006914:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006916:	4299      	cmp	r1, r3
 8006918:	db05      	blt.n	8006926 <_printf_float+0x1c2>
 800691a:	6823      	ldr	r3, [r4, #0]
 800691c:	6121      	str	r1, [r4, #16]
 800691e:	07d8      	lsls	r0, r3, #31
 8006920:	d5ea      	bpl.n	80068f8 <_printf_float+0x194>
 8006922:	1c4b      	adds	r3, r1, #1
 8006924:	e7e7      	b.n	80068f6 <_printf_float+0x192>
 8006926:	2900      	cmp	r1, #0
 8006928:	bfd4      	ite	le
 800692a:	f1c1 0202 	rsble	r2, r1, #2
 800692e:	2201      	movgt	r2, #1
 8006930:	4413      	add	r3, r2
 8006932:	e7e0      	b.n	80068f6 <_printf_float+0x192>
 8006934:	6823      	ldr	r3, [r4, #0]
 8006936:	055a      	lsls	r2, r3, #21
 8006938:	d407      	bmi.n	800694a <_printf_float+0x1e6>
 800693a:	6923      	ldr	r3, [r4, #16]
 800693c:	4642      	mov	r2, r8
 800693e:	4631      	mov	r1, r6
 8006940:	4628      	mov	r0, r5
 8006942:	47b8      	blx	r7
 8006944:	3001      	adds	r0, #1
 8006946:	d12b      	bne.n	80069a0 <_printf_float+0x23c>
 8006948:	e767      	b.n	800681a <_printf_float+0xb6>
 800694a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800694e:	f240 80dd 	bls.w	8006b0c <_printf_float+0x3a8>
 8006952:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006956:	2200      	movs	r2, #0
 8006958:	2300      	movs	r3, #0
 800695a:	f7fa f8b5 	bl	8000ac8 <__aeabi_dcmpeq>
 800695e:	2800      	cmp	r0, #0
 8006960:	d033      	beq.n	80069ca <_printf_float+0x266>
 8006962:	4a37      	ldr	r2, [pc, #220]	@ (8006a40 <_printf_float+0x2dc>)
 8006964:	2301      	movs	r3, #1
 8006966:	4631      	mov	r1, r6
 8006968:	4628      	mov	r0, r5
 800696a:	47b8      	blx	r7
 800696c:	3001      	adds	r0, #1
 800696e:	f43f af54 	beq.w	800681a <_printf_float+0xb6>
 8006972:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006976:	4543      	cmp	r3, r8
 8006978:	db02      	blt.n	8006980 <_printf_float+0x21c>
 800697a:	6823      	ldr	r3, [r4, #0]
 800697c:	07d8      	lsls	r0, r3, #31
 800697e:	d50f      	bpl.n	80069a0 <_printf_float+0x23c>
 8006980:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006984:	4631      	mov	r1, r6
 8006986:	4628      	mov	r0, r5
 8006988:	47b8      	blx	r7
 800698a:	3001      	adds	r0, #1
 800698c:	f43f af45 	beq.w	800681a <_printf_float+0xb6>
 8006990:	f04f 0900 	mov.w	r9, #0
 8006994:	f108 38ff 	add.w	r8, r8, #4294967295
 8006998:	f104 0a1a 	add.w	sl, r4, #26
 800699c:	45c8      	cmp	r8, r9
 800699e:	dc09      	bgt.n	80069b4 <_printf_float+0x250>
 80069a0:	6823      	ldr	r3, [r4, #0]
 80069a2:	079b      	lsls	r3, r3, #30
 80069a4:	f100 8103 	bmi.w	8006bae <_printf_float+0x44a>
 80069a8:	68e0      	ldr	r0, [r4, #12]
 80069aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80069ac:	4298      	cmp	r0, r3
 80069ae:	bfb8      	it	lt
 80069b0:	4618      	movlt	r0, r3
 80069b2:	e734      	b.n	800681e <_printf_float+0xba>
 80069b4:	2301      	movs	r3, #1
 80069b6:	4652      	mov	r2, sl
 80069b8:	4631      	mov	r1, r6
 80069ba:	4628      	mov	r0, r5
 80069bc:	47b8      	blx	r7
 80069be:	3001      	adds	r0, #1
 80069c0:	f43f af2b 	beq.w	800681a <_printf_float+0xb6>
 80069c4:	f109 0901 	add.w	r9, r9, #1
 80069c8:	e7e8      	b.n	800699c <_printf_float+0x238>
 80069ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	dc39      	bgt.n	8006a44 <_printf_float+0x2e0>
 80069d0:	4a1b      	ldr	r2, [pc, #108]	@ (8006a40 <_printf_float+0x2dc>)
 80069d2:	2301      	movs	r3, #1
 80069d4:	4631      	mov	r1, r6
 80069d6:	4628      	mov	r0, r5
 80069d8:	47b8      	blx	r7
 80069da:	3001      	adds	r0, #1
 80069dc:	f43f af1d 	beq.w	800681a <_printf_float+0xb6>
 80069e0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80069e4:	ea59 0303 	orrs.w	r3, r9, r3
 80069e8:	d102      	bne.n	80069f0 <_printf_float+0x28c>
 80069ea:	6823      	ldr	r3, [r4, #0]
 80069ec:	07d9      	lsls	r1, r3, #31
 80069ee:	d5d7      	bpl.n	80069a0 <_printf_float+0x23c>
 80069f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069f4:	4631      	mov	r1, r6
 80069f6:	4628      	mov	r0, r5
 80069f8:	47b8      	blx	r7
 80069fa:	3001      	adds	r0, #1
 80069fc:	f43f af0d 	beq.w	800681a <_printf_float+0xb6>
 8006a00:	f04f 0a00 	mov.w	sl, #0
 8006a04:	f104 0b1a 	add.w	fp, r4, #26
 8006a08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a0a:	425b      	negs	r3, r3
 8006a0c:	4553      	cmp	r3, sl
 8006a0e:	dc01      	bgt.n	8006a14 <_printf_float+0x2b0>
 8006a10:	464b      	mov	r3, r9
 8006a12:	e793      	b.n	800693c <_printf_float+0x1d8>
 8006a14:	2301      	movs	r3, #1
 8006a16:	465a      	mov	r2, fp
 8006a18:	4631      	mov	r1, r6
 8006a1a:	4628      	mov	r0, r5
 8006a1c:	47b8      	blx	r7
 8006a1e:	3001      	adds	r0, #1
 8006a20:	f43f aefb 	beq.w	800681a <_printf_float+0xb6>
 8006a24:	f10a 0a01 	add.w	sl, sl, #1
 8006a28:	e7ee      	b.n	8006a08 <_printf_float+0x2a4>
 8006a2a:	bf00      	nop
 8006a2c:	7fefffff 	.word	0x7fefffff
 8006a30:	08009388 	.word	0x08009388
 8006a34:	0800938c 	.word	0x0800938c
 8006a38:	08009390 	.word	0x08009390
 8006a3c:	08009394 	.word	0x08009394
 8006a40:	08009398 	.word	0x08009398
 8006a44:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006a46:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006a4a:	4553      	cmp	r3, sl
 8006a4c:	bfa8      	it	ge
 8006a4e:	4653      	movge	r3, sl
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	4699      	mov	r9, r3
 8006a54:	dc36      	bgt.n	8006ac4 <_printf_float+0x360>
 8006a56:	f04f 0b00 	mov.w	fp, #0
 8006a5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a5e:	f104 021a 	add.w	r2, r4, #26
 8006a62:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006a64:	9306      	str	r3, [sp, #24]
 8006a66:	eba3 0309 	sub.w	r3, r3, r9
 8006a6a:	455b      	cmp	r3, fp
 8006a6c:	dc31      	bgt.n	8006ad2 <_printf_float+0x36e>
 8006a6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a70:	459a      	cmp	sl, r3
 8006a72:	dc3a      	bgt.n	8006aea <_printf_float+0x386>
 8006a74:	6823      	ldr	r3, [r4, #0]
 8006a76:	07da      	lsls	r2, r3, #31
 8006a78:	d437      	bmi.n	8006aea <_printf_float+0x386>
 8006a7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a7c:	ebaa 0903 	sub.w	r9, sl, r3
 8006a80:	9b06      	ldr	r3, [sp, #24]
 8006a82:	ebaa 0303 	sub.w	r3, sl, r3
 8006a86:	4599      	cmp	r9, r3
 8006a88:	bfa8      	it	ge
 8006a8a:	4699      	movge	r9, r3
 8006a8c:	f1b9 0f00 	cmp.w	r9, #0
 8006a90:	dc33      	bgt.n	8006afa <_printf_float+0x396>
 8006a92:	f04f 0800 	mov.w	r8, #0
 8006a96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a9a:	f104 0b1a 	add.w	fp, r4, #26
 8006a9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006aa0:	ebaa 0303 	sub.w	r3, sl, r3
 8006aa4:	eba3 0309 	sub.w	r3, r3, r9
 8006aa8:	4543      	cmp	r3, r8
 8006aaa:	f77f af79 	ble.w	80069a0 <_printf_float+0x23c>
 8006aae:	2301      	movs	r3, #1
 8006ab0:	465a      	mov	r2, fp
 8006ab2:	4631      	mov	r1, r6
 8006ab4:	4628      	mov	r0, r5
 8006ab6:	47b8      	blx	r7
 8006ab8:	3001      	adds	r0, #1
 8006aba:	f43f aeae 	beq.w	800681a <_printf_float+0xb6>
 8006abe:	f108 0801 	add.w	r8, r8, #1
 8006ac2:	e7ec      	b.n	8006a9e <_printf_float+0x33a>
 8006ac4:	4642      	mov	r2, r8
 8006ac6:	4631      	mov	r1, r6
 8006ac8:	4628      	mov	r0, r5
 8006aca:	47b8      	blx	r7
 8006acc:	3001      	adds	r0, #1
 8006ace:	d1c2      	bne.n	8006a56 <_printf_float+0x2f2>
 8006ad0:	e6a3      	b.n	800681a <_printf_float+0xb6>
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	4631      	mov	r1, r6
 8006ad6:	4628      	mov	r0, r5
 8006ad8:	9206      	str	r2, [sp, #24]
 8006ada:	47b8      	blx	r7
 8006adc:	3001      	adds	r0, #1
 8006ade:	f43f ae9c 	beq.w	800681a <_printf_float+0xb6>
 8006ae2:	9a06      	ldr	r2, [sp, #24]
 8006ae4:	f10b 0b01 	add.w	fp, fp, #1
 8006ae8:	e7bb      	b.n	8006a62 <_printf_float+0x2fe>
 8006aea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006aee:	4631      	mov	r1, r6
 8006af0:	4628      	mov	r0, r5
 8006af2:	47b8      	blx	r7
 8006af4:	3001      	adds	r0, #1
 8006af6:	d1c0      	bne.n	8006a7a <_printf_float+0x316>
 8006af8:	e68f      	b.n	800681a <_printf_float+0xb6>
 8006afa:	9a06      	ldr	r2, [sp, #24]
 8006afc:	464b      	mov	r3, r9
 8006afe:	4442      	add	r2, r8
 8006b00:	4631      	mov	r1, r6
 8006b02:	4628      	mov	r0, r5
 8006b04:	47b8      	blx	r7
 8006b06:	3001      	adds	r0, #1
 8006b08:	d1c3      	bne.n	8006a92 <_printf_float+0x32e>
 8006b0a:	e686      	b.n	800681a <_printf_float+0xb6>
 8006b0c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006b10:	f1ba 0f01 	cmp.w	sl, #1
 8006b14:	dc01      	bgt.n	8006b1a <_printf_float+0x3b6>
 8006b16:	07db      	lsls	r3, r3, #31
 8006b18:	d536      	bpl.n	8006b88 <_printf_float+0x424>
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	4642      	mov	r2, r8
 8006b1e:	4631      	mov	r1, r6
 8006b20:	4628      	mov	r0, r5
 8006b22:	47b8      	blx	r7
 8006b24:	3001      	adds	r0, #1
 8006b26:	f43f ae78 	beq.w	800681a <_printf_float+0xb6>
 8006b2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b2e:	4631      	mov	r1, r6
 8006b30:	4628      	mov	r0, r5
 8006b32:	47b8      	blx	r7
 8006b34:	3001      	adds	r0, #1
 8006b36:	f43f ae70 	beq.w	800681a <_printf_float+0xb6>
 8006b3a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006b3e:	2200      	movs	r2, #0
 8006b40:	2300      	movs	r3, #0
 8006b42:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b46:	f7f9 ffbf 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b4a:	b9c0      	cbnz	r0, 8006b7e <_printf_float+0x41a>
 8006b4c:	4653      	mov	r3, sl
 8006b4e:	f108 0201 	add.w	r2, r8, #1
 8006b52:	4631      	mov	r1, r6
 8006b54:	4628      	mov	r0, r5
 8006b56:	47b8      	blx	r7
 8006b58:	3001      	adds	r0, #1
 8006b5a:	d10c      	bne.n	8006b76 <_printf_float+0x412>
 8006b5c:	e65d      	b.n	800681a <_printf_float+0xb6>
 8006b5e:	2301      	movs	r3, #1
 8006b60:	465a      	mov	r2, fp
 8006b62:	4631      	mov	r1, r6
 8006b64:	4628      	mov	r0, r5
 8006b66:	47b8      	blx	r7
 8006b68:	3001      	adds	r0, #1
 8006b6a:	f43f ae56 	beq.w	800681a <_printf_float+0xb6>
 8006b6e:	f108 0801 	add.w	r8, r8, #1
 8006b72:	45d0      	cmp	r8, sl
 8006b74:	dbf3      	blt.n	8006b5e <_printf_float+0x3fa>
 8006b76:	464b      	mov	r3, r9
 8006b78:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006b7c:	e6df      	b.n	800693e <_printf_float+0x1da>
 8006b7e:	f04f 0800 	mov.w	r8, #0
 8006b82:	f104 0b1a 	add.w	fp, r4, #26
 8006b86:	e7f4      	b.n	8006b72 <_printf_float+0x40e>
 8006b88:	2301      	movs	r3, #1
 8006b8a:	4642      	mov	r2, r8
 8006b8c:	e7e1      	b.n	8006b52 <_printf_float+0x3ee>
 8006b8e:	2301      	movs	r3, #1
 8006b90:	464a      	mov	r2, r9
 8006b92:	4631      	mov	r1, r6
 8006b94:	4628      	mov	r0, r5
 8006b96:	47b8      	blx	r7
 8006b98:	3001      	adds	r0, #1
 8006b9a:	f43f ae3e 	beq.w	800681a <_printf_float+0xb6>
 8006b9e:	f108 0801 	add.w	r8, r8, #1
 8006ba2:	68e3      	ldr	r3, [r4, #12]
 8006ba4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006ba6:	1a5b      	subs	r3, r3, r1
 8006ba8:	4543      	cmp	r3, r8
 8006baa:	dcf0      	bgt.n	8006b8e <_printf_float+0x42a>
 8006bac:	e6fc      	b.n	80069a8 <_printf_float+0x244>
 8006bae:	f04f 0800 	mov.w	r8, #0
 8006bb2:	f104 0919 	add.w	r9, r4, #25
 8006bb6:	e7f4      	b.n	8006ba2 <_printf_float+0x43e>

08006bb8 <_printf_common>:
 8006bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bbc:	4616      	mov	r6, r2
 8006bbe:	4698      	mov	r8, r3
 8006bc0:	688a      	ldr	r2, [r1, #8]
 8006bc2:	690b      	ldr	r3, [r1, #16]
 8006bc4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	bfb8      	it	lt
 8006bcc:	4613      	movlt	r3, r2
 8006bce:	6033      	str	r3, [r6, #0]
 8006bd0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006bd4:	4607      	mov	r7, r0
 8006bd6:	460c      	mov	r4, r1
 8006bd8:	b10a      	cbz	r2, 8006bde <_printf_common+0x26>
 8006bda:	3301      	adds	r3, #1
 8006bdc:	6033      	str	r3, [r6, #0]
 8006bde:	6823      	ldr	r3, [r4, #0]
 8006be0:	0699      	lsls	r1, r3, #26
 8006be2:	bf42      	ittt	mi
 8006be4:	6833      	ldrmi	r3, [r6, #0]
 8006be6:	3302      	addmi	r3, #2
 8006be8:	6033      	strmi	r3, [r6, #0]
 8006bea:	6825      	ldr	r5, [r4, #0]
 8006bec:	f015 0506 	ands.w	r5, r5, #6
 8006bf0:	d106      	bne.n	8006c00 <_printf_common+0x48>
 8006bf2:	f104 0a19 	add.w	sl, r4, #25
 8006bf6:	68e3      	ldr	r3, [r4, #12]
 8006bf8:	6832      	ldr	r2, [r6, #0]
 8006bfa:	1a9b      	subs	r3, r3, r2
 8006bfc:	42ab      	cmp	r3, r5
 8006bfe:	dc26      	bgt.n	8006c4e <_printf_common+0x96>
 8006c00:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006c04:	6822      	ldr	r2, [r4, #0]
 8006c06:	3b00      	subs	r3, #0
 8006c08:	bf18      	it	ne
 8006c0a:	2301      	movne	r3, #1
 8006c0c:	0692      	lsls	r2, r2, #26
 8006c0e:	d42b      	bmi.n	8006c68 <_printf_common+0xb0>
 8006c10:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006c14:	4641      	mov	r1, r8
 8006c16:	4638      	mov	r0, r7
 8006c18:	47c8      	blx	r9
 8006c1a:	3001      	adds	r0, #1
 8006c1c:	d01e      	beq.n	8006c5c <_printf_common+0xa4>
 8006c1e:	6823      	ldr	r3, [r4, #0]
 8006c20:	6922      	ldr	r2, [r4, #16]
 8006c22:	f003 0306 	and.w	r3, r3, #6
 8006c26:	2b04      	cmp	r3, #4
 8006c28:	bf02      	ittt	eq
 8006c2a:	68e5      	ldreq	r5, [r4, #12]
 8006c2c:	6833      	ldreq	r3, [r6, #0]
 8006c2e:	1aed      	subeq	r5, r5, r3
 8006c30:	68a3      	ldr	r3, [r4, #8]
 8006c32:	bf0c      	ite	eq
 8006c34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c38:	2500      	movne	r5, #0
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	bfc4      	itt	gt
 8006c3e:	1a9b      	subgt	r3, r3, r2
 8006c40:	18ed      	addgt	r5, r5, r3
 8006c42:	2600      	movs	r6, #0
 8006c44:	341a      	adds	r4, #26
 8006c46:	42b5      	cmp	r5, r6
 8006c48:	d11a      	bne.n	8006c80 <_printf_common+0xc8>
 8006c4a:	2000      	movs	r0, #0
 8006c4c:	e008      	b.n	8006c60 <_printf_common+0xa8>
 8006c4e:	2301      	movs	r3, #1
 8006c50:	4652      	mov	r2, sl
 8006c52:	4641      	mov	r1, r8
 8006c54:	4638      	mov	r0, r7
 8006c56:	47c8      	blx	r9
 8006c58:	3001      	adds	r0, #1
 8006c5a:	d103      	bne.n	8006c64 <_printf_common+0xac>
 8006c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c64:	3501      	adds	r5, #1
 8006c66:	e7c6      	b.n	8006bf6 <_printf_common+0x3e>
 8006c68:	18e1      	adds	r1, r4, r3
 8006c6a:	1c5a      	adds	r2, r3, #1
 8006c6c:	2030      	movs	r0, #48	@ 0x30
 8006c6e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006c72:	4422      	add	r2, r4
 8006c74:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006c78:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006c7c:	3302      	adds	r3, #2
 8006c7e:	e7c7      	b.n	8006c10 <_printf_common+0x58>
 8006c80:	2301      	movs	r3, #1
 8006c82:	4622      	mov	r2, r4
 8006c84:	4641      	mov	r1, r8
 8006c86:	4638      	mov	r0, r7
 8006c88:	47c8      	blx	r9
 8006c8a:	3001      	adds	r0, #1
 8006c8c:	d0e6      	beq.n	8006c5c <_printf_common+0xa4>
 8006c8e:	3601      	adds	r6, #1
 8006c90:	e7d9      	b.n	8006c46 <_printf_common+0x8e>
	...

08006c94 <_printf_i>:
 8006c94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c98:	7e0f      	ldrb	r7, [r1, #24]
 8006c9a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006c9c:	2f78      	cmp	r7, #120	@ 0x78
 8006c9e:	4691      	mov	r9, r2
 8006ca0:	4680      	mov	r8, r0
 8006ca2:	460c      	mov	r4, r1
 8006ca4:	469a      	mov	sl, r3
 8006ca6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006caa:	d807      	bhi.n	8006cbc <_printf_i+0x28>
 8006cac:	2f62      	cmp	r7, #98	@ 0x62
 8006cae:	d80a      	bhi.n	8006cc6 <_printf_i+0x32>
 8006cb0:	2f00      	cmp	r7, #0
 8006cb2:	f000 80d2 	beq.w	8006e5a <_printf_i+0x1c6>
 8006cb6:	2f58      	cmp	r7, #88	@ 0x58
 8006cb8:	f000 80b9 	beq.w	8006e2e <_printf_i+0x19a>
 8006cbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006cc0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006cc4:	e03a      	b.n	8006d3c <_printf_i+0xa8>
 8006cc6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006cca:	2b15      	cmp	r3, #21
 8006ccc:	d8f6      	bhi.n	8006cbc <_printf_i+0x28>
 8006cce:	a101      	add	r1, pc, #4	@ (adr r1, 8006cd4 <_printf_i+0x40>)
 8006cd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006cd4:	08006d2d 	.word	0x08006d2d
 8006cd8:	08006d41 	.word	0x08006d41
 8006cdc:	08006cbd 	.word	0x08006cbd
 8006ce0:	08006cbd 	.word	0x08006cbd
 8006ce4:	08006cbd 	.word	0x08006cbd
 8006ce8:	08006cbd 	.word	0x08006cbd
 8006cec:	08006d41 	.word	0x08006d41
 8006cf0:	08006cbd 	.word	0x08006cbd
 8006cf4:	08006cbd 	.word	0x08006cbd
 8006cf8:	08006cbd 	.word	0x08006cbd
 8006cfc:	08006cbd 	.word	0x08006cbd
 8006d00:	08006e41 	.word	0x08006e41
 8006d04:	08006d6b 	.word	0x08006d6b
 8006d08:	08006dfb 	.word	0x08006dfb
 8006d0c:	08006cbd 	.word	0x08006cbd
 8006d10:	08006cbd 	.word	0x08006cbd
 8006d14:	08006e63 	.word	0x08006e63
 8006d18:	08006cbd 	.word	0x08006cbd
 8006d1c:	08006d6b 	.word	0x08006d6b
 8006d20:	08006cbd 	.word	0x08006cbd
 8006d24:	08006cbd 	.word	0x08006cbd
 8006d28:	08006e03 	.word	0x08006e03
 8006d2c:	6833      	ldr	r3, [r6, #0]
 8006d2e:	1d1a      	adds	r2, r3, #4
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	6032      	str	r2, [r6, #0]
 8006d34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d38:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	e09d      	b.n	8006e7c <_printf_i+0x1e8>
 8006d40:	6833      	ldr	r3, [r6, #0]
 8006d42:	6820      	ldr	r0, [r4, #0]
 8006d44:	1d19      	adds	r1, r3, #4
 8006d46:	6031      	str	r1, [r6, #0]
 8006d48:	0606      	lsls	r6, r0, #24
 8006d4a:	d501      	bpl.n	8006d50 <_printf_i+0xbc>
 8006d4c:	681d      	ldr	r5, [r3, #0]
 8006d4e:	e003      	b.n	8006d58 <_printf_i+0xc4>
 8006d50:	0645      	lsls	r5, r0, #25
 8006d52:	d5fb      	bpl.n	8006d4c <_printf_i+0xb8>
 8006d54:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006d58:	2d00      	cmp	r5, #0
 8006d5a:	da03      	bge.n	8006d64 <_printf_i+0xd0>
 8006d5c:	232d      	movs	r3, #45	@ 0x2d
 8006d5e:	426d      	negs	r5, r5
 8006d60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d64:	4859      	ldr	r0, [pc, #356]	@ (8006ecc <_printf_i+0x238>)
 8006d66:	230a      	movs	r3, #10
 8006d68:	e011      	b.n	8006d8e <_printf_i+0xfa>
 8006d6a:	6821      	ldr	r1, [r4, #0]
 8006d6c:	6833      	ldr	r3, [r6, #0]
 8006d6e:	0608      	lsls	r0, r1, #24
 8006d70:	f853 5b04 	ldr.w	r5, [r3], #4
 8006d74:	d402      	bmi.n	8006d7c <_printf_i+0xe8>
 8006d76:	0649      	lsls	r1, r1, #25
 8006d78:	bf48      	it	mi
 8006d7a:	b2ad      	uxthmi	r5, r5
 8006d7c:	2f6f      	cmp	r7, #111	@ 0x6f
 8006d7e:	4853      	ldr	r0, [pc, #332]	@ (8006ecc <_printf_i+0x238>)
 8006d80:	6033      	str	r3, [r6, #0]
 8006d82:	bf14      	ite	ne
 8006d84:	230a      	movne	r3, #10
 8006d86:	2308      	moveq	r3, #8
 8006d88:	2100      	movs	r1, #0
 8006d8a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006d8e:	6866      	ldr	r6, [r4, #4]
 8006d90:	60a6      	str	r6, [r4, #8]
 8006d92:	2e00      	cmp	r6, #0
 8006d94:	bfa2      	ittt	ge
 8006d96:	6821      	ldrge	r1, [r4, #0]
 8006d98:	f021 0104 	bicge.w	r1, r1, #4
 8006d9c:	6021      	strge	r1, [r4, #0]
 8006d9e:	b90d      	cbnz	r5, 8006da4 <_printf_i+0x110>
 8006da0:	2e00      	cmp	r6, #0
 8006da2:	d04b      	beq.n	8006e3c <_printf_i+0x1a8>
 8006da4:	4616      	mov	r6, r2
 8006da6:	fbb5 f1f3 	udiv	r1, r5, r3
 8006daa:	fb03 5711 	mls	r7, r3, r1, r5
 8006dae:	5dc7      	ldrb	r7, [r0, r7]
 8006db0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006db4:	462f      	mov	r7, r5
 8006db6:	42bb      	cmp	r3, r7
 8006db8:	460d      	mov	r5, r1
 8006dba:	d9f4      	bls.n	8006da6 <_printf_i+0x112>
 8006dbc:	2b08      	cmp	r3, #8
 8006dbe:	d10b      	bne.n	8006dd8 <_printf_i+0x144>
 8006dc0:	6823      	ldr	r3, [r4, #0]
 8006dc2:	07df      	lsls	r7, r3, #31
 8006dc4:	d508      	bpl.n	8006dd8 <_printf_i+0x144>
 8006dc6:	6923      	ldr	r3, [r4, #16]
 8006dc8:	6861      	ldr	r1, [r4, #4]
 8006dca:	4299      	cmp	r1, r3
 8006dcc:	bfde      	ittt	le
 8006dce:	2330      	movle	r3, #48	@ 0x30
 8006dd0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006dd4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006dd8:	1b92      	subs	r2, r2, r6
 8006dda:	6122      	str	r2, [r4, #16]
 8006ddc:	f8cd a000 	str.w	sl, [sp]
 8006de0:	464b      	mov	r3, r9
 8006de2:	aa03      	add	r2, sp, #12
 8006de4:	4621      	mov	r1, r4
 8006de6:	4640      	mov	r0, r8
 8006de8:	f7ff fee6 	bl	8006bb8 <_printf_common>
 8006dec:	3001      	adds	r0, #1
 8006dee:	d14a      	bne.n	8006e86 <_printf_i+0x1f2>
 8006df0:	f04f 30ff 	mov.w	r0, #4294967295
 8006df4:	b004      	add	sp, #16
 8006df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dfa:	6823      	ldr	r3, [r4, #0]
 8006dfc:	f043 0320 	orr.w	r3, r3, #32
 8006e00:	6023      	str	r3, [r4, #0]
 8006e02:	4833      	ldr	r0, [pc, #204]	@ (8006ed0 <_printf_i+0x23c>)
 8006e04:	2778      	movs	r7, #120	@ 0x78
 8006e06:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006e0a:	6823      	ldr	r3, [r4, #0]
 8006e0c:	6831      	ldr	r1, [r6, #0]
 8006e0e:	061f      	lsls	r7, r3, #24
 8006e10:	f851 5b04 	ldr.w	r5, [r1], #4
 8006e14:	d402      	bmi.n	8006e1c <_printf_i+0x188>
 8006e16:	065f      	lsls	r7, r3, #25
 8006e18:	bf48      	it	mi
 8006e1a:	b2ad      	uxthmi	r5, r5
 8006e1c:	6031      	str	r1, [r6, #0]
 8006e1e:	07d9      	lsls	r1, r3, #31
 8006e20:	bf44      	itt	mi
 8006e22:	f043 0320 	orrmi.w	r3, r3, #32
 8006e26:	6023      	strmi	r3, [r4, #0]
 8006e28:	b11d      	cbz	r5, 8006e32 <_printf_i+0x19e>
 8006e2a:	2310      	movs	r3, #16
 8006e2c:	e7ac      	b.n	8006d88 <_printf_i+0xf4>
 8006e2e:	4827      	ldr	r0, [pc, #156]	@ (8006ecc <_printf_i+0x238>)
 8006e30:	e7e9      	b.n	8006e06 <_printf_i+0x172>
 8006e32:	6823      	ldr	r3, [r4, #0]
 8006e34:	f023 0320 	bic.w	r3, r3, #32
 8006e38:	6023      	str	r3, [r4, #0]
 8006e3a:	e7f6      	b.n	8006e2a <_printf_i+0x196>
 8006e3c:	4616      	mov	r6, r2
 8006e3e:	e7bd      	b.n	8006dbc <_printf_i+0x128>
 8006e40:	6833      	ldr	r3, [r6, #0]
 8006e42:	6825      	ldr	r5, [r4, #0]
 8006e44:	6961      	ldr	r1, [r4, #20]
 8006e46:	1d18      	adds	r0, r3, #4
 8006e48:	6030      	str	r0, [r6, #0]
 8006e4a:	062e      	lsls	r6, r5, #24
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	d501      	bpl.n	8006e54 <_printf_i+0x1c0>
 8006e50:	6019      	str	r1, [r3, #0]
 8006e52:	e002      	b.n	8006e5a <_printf_i+0x1c6>
 8006e54:	0668      	lsls	r0, r5, #25
 8006e56:	d5fb      	bpl.n	8006e50 <_printf_i+0x1bc>
 8006e58:	8019      	strh	r1, [r3, #0]
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	6123      	str	r3, [r4, #16]
 8006e5e:	4616      	mov	r6, r2
 8006e60:	e7bc      	b.n	8006ddc <_printf_i+0x148>
 8006e62:	6833      	ldr	r3, [r6, #0]
 8006e64:	1d1a      	adds	r2, r3, #4
 8006e66:	6032      	str	r2, [r6, #0]
 8006e68:	681e      	ldr	r6, [r3, #0]
 8006e6a:	6862      	ldr	r2, [r4, #4]
 8006e6c:	2100      	movs	r1, #0
 8006e6e:	4630      	mov	r0, r6
 8006e70:	f7f9 f9ae 	bl	80001d0 <memchr>
 8006e74:	b108      	cbz	r0, 8006e7a <_printf_i+0x1e6>
 8006e76:	1b80      	subs	r0, r0, r6
 8006e78:	6060      	str	r0, [r4, #4]
 8006e7a:	6863      	ldr	r3, [r4, #4]
 8006e7c:	6123      	str	r3, [r4, #16]
 8006e7e:	2300      	movs	r3, #0
 8006e80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e84:	e7aa      	b.n	8006ddc <_printf_i+0x148>
 8006e86:	6923      	ldr	r3, [r4, #16]
 8006e88:	4632      	mov	r2, r6
 8006e8a:	4649      	mov	r1, r9
 8006e8c:	4640      	mov	r0, r8
 8006e8e:	47d0      	blx	sl
 8006e90:	3001      	adds	r0, #1
 8006e92:	d0ad      	beq.n	8006df0 <_printf_i+0x15c>
 8006e94:	6823      	ldr	r3, [r4, #0]
 8006e96:	079b      	lsls	r3, r3, #30
 8006e98:	d413      	bmi.n	8006ec2 <_printf_i+0x22e>
 8006e9a:	68e0      	ldr	r0, [r4, #12]
 8006e9c:	9b03      	ldr	r3, [sp, #12]
 8006e9e:	4298      	cmp	r0, r3
 8006ea0:	bfb8      	it	lt
 8006ea2:	4618      	movlt	r0, r3
 8006ea4:	e7a6      	b.n	8006df4 <_printf_i+0x160>
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	4632      	mov	r2, r6
 8006eaa:	4649      	mov	r1, r9
 8006eac:	4640      	mov	r0, r8
 8006eae:	47d0      	blx	sl
 8006eb0:	3001      	adds	r0, #1
 8006eb2:	d09d      	beq.n	8006df0 <_printf_i+0x15c>
 8006eb4:	3501      	adds	r5, #1
 8006eb6:	68e3      	ldr	r3, [r4, #12]
 8006eb8:	9903      	ldr	r1, [sp, #12]
 8006eba:	1a5b      	subs	r3, r3, r1
 8006ebc:	42ab      	cmp	r3, r5
 8006ebe:	dcf2      	bgt.n	8006ea6 <_printf_i+0x212>
 8006ec0:	e7eb      	b.n	8006e9a <_printf_i+0x206>
 8006ec2:	2500      	movs	r5, #0
 8006ec4:	f104 0619 	add.w	r6, r4, #25
 8006ec8:	e7f5      	b.n	8006eb6 <_printf_i+0x222>
 8006eca:	bf00      	nop
 8006ecc:	0800939a 	.word	0x0800939a
 8006ed0:	080093ab 	.word	0x080093ab

08006ed4 <std>:
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	b510      	push	{r4, lr}
 8006ed8:	4604      	mov	r4, r0
 8006eda:	e9c0 3300 	strd	r3, r3, [r0]
 8006ede:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ee2:	6083      	str	r3, [r0, #8]
 8006ee4:	8181      	strh	r1, [r0, #12]
 8006ee6:	6643      	str	r3, [r0, #100]	@ 0x64
 8006ee8:	81c2      	strh	r2, [r0, #14]
 8006eea:	6183      	str	r3, [r0, #24]
 8006eec:	4619      	mov	r1, r3
 8006eee:	2208      	movs	r2, #8
 8006ef0:	305c      	adds	r0, #92	@ 0x5c
 8006ef2:	f000 f948 	bl	8007186 <memset>
 8006ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8006f2c <std+0x58>)
 8006ef8:	6263      	str	r3, [r4, #36]	@ 0x24
 8006efa:	4b0d      	ldr	r3, [pc, #52]	@ (8006f30 <std+0x5c>)
 8006efc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006efe:	4b0d      	ldr	r3, [pc, #52]	@ (8006f34 <std+0x60>)
 8006f00:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006f02:	4b0d      	ldr	r3, [pc, #52]	@ (8006f38 <std+0x64>)
 8006f04:	6323      	str	r3, [r4, #48]	@ 0x30
 8006f06:	4b0d      	ldr	r3, [pc, #52]	@ (8006f3c <std+0x68>)
 8006f08:	6224      	str	r4, [r4, #32]
 8006f0a:	429c      	cmp	r4, r3
 8006f0c:	d006      	beq.n	8006f1c <std+0x48>
 8006f0e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006f12:	4294      	cmp	r4, r2
 8006f14:	d002      	beq.n	8006f1c <std+0x48>
 8006f16:	33d0      	adds	r3, #208	@ 0xd0
 8006f18:	429c      	cmp	r4, r3
 8006f1a:	d105      	bne.n	8006f28 <std+0x54>
 8006f1c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006f20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f24:	f000 b9ac 	b.w	8007280 <__retarget_lock_init_recursive>
 8006f28:	bd10      	pop	{r4, pc}
 8006f2a:	bf00      	nop
 8006f2c:	08007101 	.word	0x08007101
 8006f30:	08007123 	.word	0x08007123
 8006f34:	0800715b 	.word	0x0800715b
 8006f38:	0800717f 	.word	0x0800717f
 8006f3c:	200006bc 	.word	0x200006bc

08006f40 <stdio_exit_handler>:
 8006f40:	4a02      	ldr	r2, [pc, #8]	@ (8006f4c <stdio_exit_handler+0xc>)
 8006f42:	4903      	ldr	r1, [pc, #12]	@ (8006f50 <stdio_exit_handler+0x10>)
 8006f44:	4803      	ldr	r0, [pc, #12]	@ (8006f54 <stdio_exit_handler+0x14>)
 8006f46:	f000 b869 	b.w	800701c <_fwalk_sglue>
 8006f4a:	bf00      	nop
 8006f4c:	20000024 	.word	0x20000024
 8006f50:	08008bdd 	.word	0x08008bdd
 8006f54:	20000034 	.word	0x20000034

08006f58 <cleanup_stdio>:
 8006f58:	6841      	ldr	r1, [r0, #4]
 8006f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8006f8c <cleanup_stdio+0x34>)
 8006f5c:	4299      	cmp	r1, r3
 8006f5e:	b510      	push	{r4, lr}
 8006f60:	4604      	mov	r4, r0
 8006f62:	d001      	beq.n	8006f68 <cleanup_stdio+0x10>
 8006f64:	f001 fe3a 	bl	8008bdc <_fflush_r>
 8006f68:	68a1      	ldr	r1, [r4, #8]
 8006f6a:	4b09      	ldr	r3, [pc, #36]	@ (8006f90 <cleanup_stdio+0x38>)
 8006f6c:	4299      	cmp	r1, r3
 8006f6e:	d002      	beq.n	8006f76 <cleanup_stdio+0x1e>
 8006f70:	4620      	mov	r0, r4
 8006f72:	f001 fe33 	bl	8008bdc <_fflush_r>
 8006f76:	68e1      	ldr	r1, [r4, #12]
 8006f78:	4b06      	ldr	r3, [pc, #24]	@ (8006f94 <cleanup_stdio+0x3c>)
 8006f7a:	4299      	cmp	r1, r3
 8006f7c:	d004      	beq.n	8006f88 <cleanup_stdio+0x30>
 8006f7e:	4620      	mov	r0, r4
 8006f80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f84:	f001 be2a 	b.w	8008bdc <_fflush_r>
 8006f88:	bd10      	pop	{r4, pc}
 8006f8a:	bf00      	nop
 8006f8c:	200006bc 	.word	0x200006bc
 8006f90:	20000724 	.word	0x20000724
 8006f94:	2000078c 	.word	0x2000078c

08006f98 <global_stdio_init.part.0>:
 8006f98:	b510      	push	{r4, lr}
 8006f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8006fc8 <global_stdio_init.part.0+0x30>)
 8006f9c:	4c0b      	ldr	r4, [pc, #44]	@ (8006fcc <global_stdio_init.part.0+0x34>)
 8006f9e:	4a0c      	ldr	r2, [pc, #48]	@ (8006fd0 <global_stdio_init.part.0+0x38>)
 8006fa0:	601a      	str	r2, [r3, #0]
 8006fa2:	4620      	mov	r0, r4
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	2104      	movs	r1, #4
 8006fa8:	f7ff ff94 	bl	8006ed4 <std>
 8006fac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	2109      	movs	r1, #9
 8006fb4:	f7ff ff8e 	bl	8006ed4 <std>
 8006fb8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006fbc:	2202      	movs	r2, #2
 8006fbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fc2:	2112      	movs	r1, #18
 8006fc4:	f7ff bf86 	b.w	8006ed4 <std>
 8006fc8:	200007f4 	.word	0x200007f4
 8006fcc:	200006bc 	.word	0x200006bc
 8006fd0:	08006f41 	.word	0x08006f41

08006fd4 <__sfp_lock_acquire>:
 8006fd4:	4801      	ldr	r0, [pc, #4]	@ (8006fdc <__sfp_lock_acquire+0x8>)
 8006fd6:	f000 b954 	b.w	8007282 <__retarget_lock_acquire_recursive>
 8006fda:	bf00      	nop
 8006fdc:	200007fd 	.word	0x200007fd

08006fe0 <__sfp_lock_release>:
 8006fe0:	4801      	ldr	r0, [pc, #4]	@ (8006fe8 <__sfp_lock_release+0x8>)
 8006fe2:	f000 b94f 	b.w	8007284 <__retarget_lock_release_recursive>
 8006fe6:	bf00      	nop
 8006fe8:	200007fd 	.word	0x200007fd

08006fec <__sinit>:
 8006fec:	b510      	push	{r4, lr}
 8006fee:	4604      	mov	r4, r0
 8006ff0:	f7ff fff0 	bl	8006fd4 <__sfp_lock_acquire>
 8006ff4:	6a23      	ldr	r3, [r4, #32]
 8006ff6:	b11b      	cbz	r3, 8007000 <__sinit+0x14>
 8006ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ffc:	f7ff bff0 	b.w	8006fe0 <__sfp_lock_release>
 8007000:	4b04      	ldr	r3, [pc, #16]	@ (8007014 <__sinit+0x28>)
 8007002:	6223      	str	r3, [r4, #32]
 8007004:	4b04      	ldr	r3, [pc, #16]	@ (8007018 <__sinit+0x2c>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d1f5      	bne.n	8006ff8 <__sinit+0xc>
 800700c:	f7ff ffc4 	bl	8006f98 <global_stdio_init.part.0>
 8007010:	e7f2      	b.n	8006ff8 <__sinit+0xc>
 8007012:	bf00      	nop
 8007014:	08006f59 	.word	0x08006f59
 8007018:	200007f4 	.word	0x200007f4

0800701c <_fwalk_sglue>:
 800701c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007020:	4607      	mov	r7, r0
 8007022:	4688      	mov	r8, r1
 8007024:	4614      	mov	r4, r2
 8007026:	2600      	movs	r6, #0
 8007028:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800702c:	f1b9 0901 	subs.w	r9, r9, #1
 8007030:	d505      	bpl.n	800703e <_fwalk_sglue+0x22>
 8007032:	6824      	ldr	r4, [r4, #0]
 8007034:	2c00      	cmp	r4, #0
 8007036:	d1f7      	bne.n	8007028 <_fwalk_sglue+0xc>
 8007038:	4630      	mov	r0, r6
 800703a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800703e:	89ab      	ldrh	r3, [r5, #12]
 8007040:	2b01      	cmp	r3, #1
 8007042:	d907      	bls.n	8007054 <_fwalk_sglue+0x38>
 8007044:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007048:	3301      	adds	r3, #1
 800704a:	d003      	beq.n	8007054 <_fwalk_sglue+0x38>
 800704c:	4629      	mov	r1, r5
 800704e:	4638      	mov	r0, r7
 8007050:	47c0      	blx	r8
 8007052:	4306      	orrs	r6, r0
 8007054:	3568      	adds	r5, #104	@ 0x68
 8007056:	e7e9      	b.n	800702c <_fwalk_sglue+0x10>

08007058 <sniprintf>:
 8007058:	b40c      	push	{r2, r3}
 800705a:	b530      	push	{r4, r5, lr}
 800705c:	4b17      	ldr	r3, [pc, #92]	@ (80070bc <sniprintf+0x64>)
 800705e:	1e0c      	subs	r4, r1, #0
 8007060:	681d      	ldr	r5, [r3, #0]
 8007062:	b09d      	sub	sp, #116	@ 0x74
 8007064:	da08      	bge.n	8007078 <sniprintf+0x20>
 8007066:	238b      	movs	r3, #139	@ 0x8b
 8007068:	602b      	str	r3, [r5, #0]
 800706a:	f04f 30ff 	mov.w	r0, #4294967295
 800706e:	b01d      	add	sp, #116	@ 0x74
 8007070:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007074:	b002      	add	sp, #8
 8007076:	4770      	bx	lr
 8007078:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800707c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007080:	bf14      	ite	ne
 8007082:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007086:	4623      	moveq	r3, r4
 8007088:	9304      	str	r3, [sp, #16]
 800708a:	9307      	str	r3, [sp, #28]
 800708c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007090:	9002      	str	r0, [sp, #8]
 8007092:	9006      	str	r0, [sp, #24]
 8007094:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007098:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800709a:	ab21      	add	r3, sp, #132	@ 0x84
 800709c:	a902      	add	r1, sp, #8
 800709e:	4628      	mov	r0, r5
 80070a0:	9301      	str	r3, [sp, #4]
 80070a2:	f001 fc1b 	bl	80088dc <_svfiprintf_r>
 80070a6:	1c43      	adds	r3, r0, #1
 80070a8:	bfbc      	itt	lt
 80070aa:	238b      	movlt	r3, #139	@ 0x8b
 80070ac:	602b      	strlt	r3, [r5, #0]
 80070ae:	2c00      	cmp	r4, #0
 80070b0:	d0dd      	beq.n	800706e <sniprintf+0x16>
 80070b2:	9b02      	ldr	r3, [sp, #8]
 80070b4:	2200      	movs	r2, #0
 80070b6:	701a      	strb	r2, [r3, #0]
 80070b8:	e7d9      	b.n	800706e <sniprintf+0x16>
 80070ba:	bf00      	nop
 80070bc:	20000030 	.word	0x20000030

080070c0 <siprintf>:
 80070c0:	b40e      	push	{r1, r2, r3}
 80070c2:	b500      	push	{lr}
 80070c4:	b09c      	sub	sp, #112	@ 0x70
 80070c6:	ab1d      	add	r3, sp, #116	@ 0x74
 80070c8:	9002      	str	r0, [sp, #8]
 80070ca:	9006      	str	r0, [sp, #24]
 80070cc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80070d0:	4809      	ldr	r0, [pc, #36]	@ (80070f8 <siprintf+0x38>)
 80070d2:	9107      	str	r1, [sp, #28]
 80070d4:	9104      	str	r1, [sp, #16]
 80070d6:	4909      	ldr	r1, [pc, #36]	@ (80070fc <siprintf+0x3c>)
 80070d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80070dc:	9105      	str	r1, [sp, #20]
 80070de:	6800      	ldr	r0, [r0, #0]
 80070e0:	9301      	str	r3, [sp, #4]
 80070e2:	a902      	add	r1, sp, #8
 80070e4:	f001 fbfa 	bl	80088dc <_svfiprintf_r>
 80070e8:	9b02      	ldr	r3, [sp, #8]
 80070ea:	2200      	movs	r2, #0
 80070ec:	701a      	strb	r2, [r3, #0]
 80070ee:	b01c      	add	sp, #112	@ 0x70
 80070f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80070f4:	b003      	add	sp, #12
 80070f6:	4770      	bx	lr
 80070f8:	20000030 	.word	0x20000030
 80070fc:	ffff0208 	.word	0xffff0208

08007100 <__sread>:
 8007100:	b510      	push	{r4, lr}
 8007102:	460c      	mov	r4, r1
 8007104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007108:	f000 f86c 	bl	80071e4 <_read_r>
 800710c:	2800      	cmp	r0, #0
 800710e:	bfab      	itete	ge
 8007110:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007112:	89a3      	ldrhlt	r3, [r4, #12]
 8007114:	181b      	addge	r3, r3, r0
 8007116:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800711a:	bfac      	ite	ge
 800711c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800711e:	81a3      	strhlt	r3, [r4, #12]
 8007120:	bd10      	pop	{r4, pc}

08007122 <__swrite>:
 8007122:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007126:	461f      	mov	r7, r3
 8007128:	898b      	ldrh	r3, [r1, #12]
 800712a:	05db      	lsls	r3, r3, #23
 800712c:	4605      	mov	r5, r0
 800712e:	460c      	mov	r4, r1
 8007130:	4616      	mov	r6, r2
 8007132:	d505      	bpl.n	8007140 <__swrite+0x1e>
 8007134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007138:	2302      	movs	r3, #2
 800713a:	2200      	movs	r2, #0
 800713c:	f000 f840 	bl	80071c0 <_lseek_r>
 8007140:	89a3      	ldrh	r3, [r4, #12]
 8007142:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007146:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800714a:	81a3      	strh	r3, [r4, #12]
 800714c:	4632      	mov	r2, r6
 800714e:	463b      	mov	r3, r7
 8007150:	4628      	mov	r0, r5
 8007152:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007156:	f000 b857 	b.w	8007208 <_write_r>

0800715a <__sseek>:
 800715a:	b510      	push	{r4, lr}
 800715c:	460c      	mov	r4, r1
 800715e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007162:	f000 f82d 	bl	80071c0 <_lseek_r>
 8007166:	1c43      	adds	r3, r0, #1
 8007168:	89a3      	ldrh	r3, [r4, #12]
 800716a:	bf15      	itete	ne
 800716c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800716e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007172:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007176:	81a3      	strheq	r3, [r4, #12]
 8007178:	bf18      	it	ne
 800717a:	81a3      	strhne	r3, [r4, #12]
 800717c:	bd10      	pop	{r4, pc}

0800717e <__sclose>:
 800717e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007182:	f000 b80d 	b.w	80071a0 <_close_r>

08007186 <memset>:
 8007186:	4402      	add	r2, r0
 8007188:	4603      	mov	r3, r0
 800718a:	4293      	cmp	r3, r2
 800718c:	d100      	bne.n	8007190 <memset+0xa>
 800718e:	4770      	bx	lr
 8007190:	f803 1b01 	strb.w	r1, [r3], #1
 8007194:	e7f9      	b.n	800718a <memset+0x4>
	...

08007198 <_localeconv_r>:
 8007198:	4800      	ldr	r0, [pc, #0]	@ (800719c <_localeconv_r+0x4>)
 800719a:	4770      	bx	lr
 800719c:	20000170 	.word	0x20000170

080071a0 <_close_r>:
 80071a0:	b538      	push	{r3, r4, r5, lr}
 80071a2:	4d06      	ldr	r5, [pc, #24]	@ (80071bc <_close_r+0x1c>)
 80071a4:	2300      	movs	r3, #0
 80071a6:	4604      	mov	r4, r0
 80071a8:	4608      	mov	r0, r1
 80071aa:	602b      	str	r3, [r5, #0]
 80071ac:	f7f9 ffa1 	bl	80010f2 <_close>
 80071b0:	1c43      	adds	r3, r0, #1
 80071b2:	d102      	bne.n	80071ba <_close_r+0x1a>
 80071b4:	682b      	ldr	r3, [r5, #0]
 80071b6:	b103      	cbz	r3, 80071ba <_close_r+0x1a>
 80071b8:	6023      	str	r3, [r4, #0]
 80071ba:	bd38      	pop	{r3, r4, r5, pc}
 80071bc:	200007f8 	.word	0x200007f8

080071c0 <_lseek_r>:
 80071c0:	b538      	push	{r3, r4, r5, lr}
 80071c2:	4d07      	ldr	r5, [pc, #28]	@ (80071e0 <_lseek_r+0x20>)
 80071c4:	4604      	mov	r4, r0
 80071c6:	4608      	mov	r0, r1
 80071c8:	4611      	mov	r1, r2
 80071ca:	2200      	movs	r2, #0
 80071cc:	602a      	str	r2, [r5, #0]
 80071ce:	461a      	mov	r2, r3
 80071d0:	f7f9 ffb6 	bl	8001140 <_lseek>
 80071d4:	1c43      	adds	r3, r0, #1
 80071d6:	d102      	bne.n	80071de <_lseek_r+0x1e>
 80071d8:	682b      	ldr	r3, [r5, #0]
 80071da:	b103      	cbz	r3, 80071de <_lseek_r+0x1e>
 80071dc:	6023      	str	r3, [r4, #0]
 80071de:	bd38      	pop	{r3, r4, r5, pc}
 80071e0:	200007f8 	.word	0x200007f8

080071e4 <_read_r>:
 80071e4:	b538      	push	{r3, r4, r5, lr}
 80071e6:	4d07      	ldr	r5, [pc, #28]	@ (8007204 <_read_r+0x20>)
 80071e8:	4604      	mov	r4, r0
 80071ea:	4608      	mov	r0, r1
 80071ec:	4611      	mov	r1, r2
 80071ee:	2200      	movs	r2, #0
 80071f0:	602a      	str	r2, [r5, #0]
 80071f2:	461a      	mov	r2, r3
 80071f4:	f7f9 ff44 	bl	8001080 <_read>
 80071f8:	1c43      	adds	r3, r0, #1
 80071fa:	d102      	bne.n	8007202 <_read_r+0x1e>
 80071fc:	682b      	ldr	r3, [r5, #0]
 80071fe:	b103      	cbz	r3, 8007202 <_read_r+0x1e>
 8007200:	6023      	str	r3, [r4, #0]
 8007202:	bd38      	pop	{r3, r4, r5, pc}
 8007204:	200007f8 	.word	0x200007f8

08007208 <_write_r>:
 8007208:	b538      	push	{r3, r4, r5, lr}
 800720a:	4d07      	ldr	r5, [pc, #28]	@ (8007228 <_write_r+0x20>)
 800720c:	4604      	mov	r4, r0
 800720e:	4608      	mov	r0, r1
 8007210:	4611      	mov	r1, r2
 8007212:	2200      	movs	r2, #0
 8007214:	602a      	str	r2, [r5, #0]
 8007216:	461a      	mov	r2, r3
 8007218:	f7f9 ff4f 	bl	80010ba <_write>
 800721c:	1c43      	adds	r3, r0, #1
 800721e:	d102      	bne.n	8007226 <_write_r+0x1e>
 8007220:	682b      	ldr	r3, [r5, #0]
 8007222:	b103      	cbz	r3, 8007226 <_write_r+0x1e>
 8007224:	6023      	str	r3, [r4, #0]
 8007226:	bd38      	pop	{r3, r4, r5, pc}
 8007228:	200007f8 	.word	0x200007f8

0800722c <__errno>:
 800722c:	4b01      	ldr	r3, [pc, #4]	@ (8007234 <__errno+0x8>)
 800722e:	6818      	ldr	r0, [r3, #0]
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop
 8007234:	20000030 	.word	0x20000030

08007238 <__libc_init_array>:
 8007238:	b570      	push	{r4, r5, r6, lr}
 800723a:	4d0d      	ldr	r5, [pc, #52]	@ (8007270 <__libc_init_array+0x38>)
 800723c:	4c0d      	ldr	r4, [pc, #52]	@ (8007274 <__libc_init_array+0x3c>)
 800723e:	1b64      	subs	r4, r4, r5
 8007240:	10a4      	asrs	r4, r4, #2
 8007242:	2600      	movs	r6, #0
 8007244:	42a6      	cmp	r6, r4
 8007246:	d109      	bne.n	800725c <__libc_init_array+0x24>
 8007248:	4d0b      	ldr	r5, [pc, #44]	@ (8007278 <__libc_init_array+0x40>)
 800724a:	4c0c      	ldr	r4, [pc, #48]	@ (800727c <__libc_init_array+0x44>)
 800724c:	f002 f864 	bl	8009318 <_init>
 8007250:	1b64      	subs	r4, r4, r5
 8007252:	10a4      	asrs	r4, r4, #2
 8007254:	2600      	movs	r6, #0
 8007256:	42a6      	cmp	r6, r4
 8007258:	d105      	bne.n	8007266 <__libc_init_array+0x2e>
 800725a:	bd70      	pop	{r4, r5, r6, pc}
 800725c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007260:	4798      	blx	r3
 8007262:	3601      	adds	r6, #1
 8007264:	e7ee      	b.n	8007244 <__libc_init_array+0xc>
 8007266:	f855 3b04 	ldr.w	r3, [r5], #4
 800726a:	4798      	blx	r3
 800726c:	3601      	adds	r6, #1
 800726e:	e7f2      	b.n	8007256 <__libc_init_array+0x1e>
 8007270:	08009700 	.word	0x08009700
 8007274:	08009700 	.word	0x08009700
 8007278:	08009700 	.word	0x08009700
 800727c:	08009704 	.word	0x08009704

08007280 <__retarget_lock_init_recursive>:
 8007280:	4770      	bx	lr

08007282 <__retarget_lock_acquire_recursive>:
 8007282:	4770      	bx	lr

08007284 <__retarget_lock_release_recursive>:
 8007284:	4770      	bx	lr

08007286 <quorem>:
 8007286:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800728a:	6903      	ldr	r3, [r0, #16]
 800728c:	690c      	ldr	r4, [r1, #16]
 800728e:	42a3      	cmp	r3, r4
 8007290:	4607      	mov	r7, r0
 8007292:	db7e      	blt.n	8007392 <quorem+0x10c>
 8007294:	3c01      	subs	r4, #1
 8007296:	f101 0814 	add.w	r8, r1, #20
 800729a:	00a3      	lsls	r3, r4, #2
 800729c:	f100 0514 	add.w	r5, r0, #20
 80072a0:	9300      	str	r3, [sp, #0]
 80072a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80072a6:	9301      	str	r3, [sp, #4]
 80072a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80072ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80072b0:	3301      	adds	r3, #1
 80072b2:	429a      	cmp	r2, r3
 80072b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80072b8:	fbb2 f6f3 	udiv	r6, r2, r3
 80072bc:	d32e      	bcc.n	800731c <quorem+0x96>
 80072be:	f04f 0a00 	mov.w	sl, #0
 80072c2:	46c4      	mov	ip, r8
 80072c4:	46ae      	mov	lr, r5
 80072c6:	46d3      	mov	fp, sl
 80072c8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80072cc:	b298      	uxth	r0, r3
 80072ce:	fb06 a000 	mla	r0, r6, r0, sl
 80072d2:	0c02      	lsrs	r2, r0, #16
 80072d4:	0c1b      	lsrs	r3, r3, #16
 80072d6:	fb06 2303 	mla	r3, r6, r3, r2
 80072da:	f8de 2000 	ldr.w	r2, [lr]
 80072de:	b280      	uxth	r0, r0
 80072e0:	b292      	uxth	r2, r2
 80072e2:	1a12      	subs	r2, r2, r0
 80072e4:	445a      	add	r2, fp
 80072e6:	f8de 0000 	ldr.w	r0, [lr]
 80072ea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80072f4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80072f8:	b292      	uxth	r2, r2
 80072fa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80072fe:	45e1      	cmp	r9, ip
 8007300:	f84e 2b04 	str.w	r2, [lr], #4
 8007304:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007308:	d2de      	bcs.n	80072c8 <quorem+0x42>
 800730a:	9b00      	ldr	r3, [sp, #0]
 800730c:	58eb      	ldr	r3, [r5, r3]
 800730e:	b92b      	cbnz	r3, 800731c <quorem+0x96>
 8007310:	9b01      	ldr	r3, [sp, #4]
 8007312:	3b04      	subs	r3, #4
 8007314:	429d      	cmp	r5, r3
 8007316:	461a      	mov	r2, r3
 8007318:	d32f      	bcc.n	800737a <quorem+0xf4>
 800731a:	613c      	str	r4, [r7, #16]
 800731c:	4638      	mov	r0, r7
 800731e:	f001 f979 	bl	8008614 <__mcmp>
 8007322:	2800      	cmp	r0, #0
 8007324:	db25      	blt.n	8007372 <quorem+0xec>
 8007326:	4629      	mov	r1, r5
 8007328:	2000      	movs	r0, #0
 800732a:	f858 2b04 	ldr.w	r2, [r8], #4
 800732e:	f8d1 c000 	ldr.w	ip, [r1]
 8007332:	fa1f fe82 	uxth.w	lr, r2
 8007336:	fa1f f38c 	uxth.w	r3, ip
 800733a:	eba3 030e 	sub.w	r3, r3, lr
 800733e:	4403      	add	r3, r0
 8007340:	0c12      	lsrs	r2, r2, #16
 8007342:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007346:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800734a:	b29b      	uxth	r3, r3
 800734c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007350:	45c1      	cmp	r9, r8
 8007352:	f841 3b04 	str.w	r3, [r1], #4
 8007356:	ea4f 4022 	mov.w	r0, r2, asr #16
 800735a:	d2e6      	bcs.n	800732a <quorem+0xa4>
 800735c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007360:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007364:	b922      	cbnz	r2, 8007370 <quorem+0xea>
 8007366:	3b04      	subs	r3, #4
 8007368:	429d      	cmp	r5, r3
 800736a:	461a      	mov	r2, r3
 800736c:	d30b      	bcc.n	8007386 <quorem+0x100>
 800736e:	613c      	str	r4, [r7, #16]
 8007370:	3601      	adds	r6, #1
 8007372:	4630      	mov	r0, r6
 8007374:	b003      	add	sp, #12
 8007376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800737a:	6812      	ldr	r2, [r2, #0]
 800737c:	3b04      	subs	r3, #4
 800737e:	2a00      	cmp	r2, #0
 8007380:	d1cb      	bne.n	800731a <quorem+0x94>
 8007382:	3c01      	subs	r4, #1
 8007384:	e7c6      	b.n	8007314 <quorem+0x8e>
 8007386:	6812      	ldr	r2, [r2, #0]
 8007388:	3b04      	subs	r3, #4
 800738a:	2a00      	cmp	r2, #0
 800738c:	d1ef      	bne.n	800736e <quorem+0xe8>
 800738e:	3c01      	subs	r4, #1
 8007390:	e7ea      	b.n	8007368 <quorem+0xe2>
 8007392:	2000      	movs	r0, #0
 8007394:	e7ee      	b.n	8007374 <quorem+0xee>
	...

08007398 <_dtoa_r>:
 8007398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800739c:	69c7      	ldr	r7, [r0, #28]
 800739e:	b099      	sub	sp, #100	@ 0x64
 80073a0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80073a4:	ec55 4b10 	vmov	r4, r5, d0
 80073a8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80073aa:	9109      	str	r1, [sp, #36]	@ 0x24
 80073ac:	4683      	mov	fp, r0
 80073ae:	920e      	str	r2, [sp, #56]	@ 0x38
 80073b0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80073b2:	b97f      	cbnz	r7, 80073d4 <_dtoa_r+0x3c>
 80073b4:	2010      	movs	r0, #16
 80073b6:	f000 fdfd 	bl	8007fb4 <malloc>
 80073ba:	4602      	mov	r2, r0
 80073bc:	f8cb 001c 	str.w	r0, [fp, #28]
 80073c0:	b920      	cbnz	r0, 80073cc <_dtoa_r+0x34>
 80073c2:	4ba7      	ldr	r3, [pc, #668]	@ (8007660 <_dtoa_r+0x2c8>)
 80073c4:	21ef      	movs	r1, #239	@ 0xef
 80073c6:	48a7      	ldr	r0, [pc, #668]	@ (8007664 <_dtoa_r+0x2cc>)
 80073c8:	f001 fc68 	bl	8008c9c <__assert_func>
 80073cc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80073d0:	6007      	str	r7, [r0, #0]
 80073d2:	60c7      	str	r7, [r0, #12]
 80073d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80073d8:	6819      	ldr	r1, [r3, #0]
 80073da:	b159      	cbz	r1, 80073f4 <_dtoa_r+0x5c>
 80073dc:	685a      	ldr	r2, [r3, #4]
 80073de:	604a      	str	r2, [r1, #4]
 80073e0:	2301      	movs	r3, #1
 80073e2:	4093      	lsls	r3, r2
 80073e4:	608b      	str	r3, [r1, #8]
 80073e6:	4658      	mov	r0, fp
 80073e8:	f000 feda 	bl	80081a0 <_Bfree>
 80073ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 80073f0:	2200      	movs	r2, #0
 80073f2:	601a      	str	r2, [r3, #0]
 80073f4:	1e2b      	subs	r3, r5, #0
 80073f6:	bfb9      	ittee	lt
 80073f8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80073fc:	9303      	strlt	r3, [sp, #12]
 80073fe:	2300      	movge	r3, #0
 8007400:	6033      	strge	r3, [r6, #0]
 8007402:	9f03      	ldr	r7, [sp, #12]
 8007404:	4b98      	ldr	r3, [pc, #608]	@ (8007668 <_dtoa_r+0x2d0>)
 8007406:	bfbc      	itt	lt
 8007408:	2201      	movlt	r2, #1
 800740a:	6032      	strlt	r2, [r6, #0]
 800740c:	43bb      	bics	r3, r7
 800740e:	d112      	bne.n	8007436 <_dtoa_r+0x9e>
 8007410:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007412:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007416:	6013      	str	r3, [r2, #0]
 8007418:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800741c:	4323      	orrs	r3, r4
 800741e:	f000 854d 	beq.w	8007ebc <_dtoa_r+0xb24>
 8007422:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007424:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800767c <_dtoa_r+0x2e4>
 8007428:	2b00      	cmp	r3, #0
 800742a:	f000 854f 	beq.w	8007ecc <_dtoa_r+0xb34>
 800742e:	f10a 0303 	add.w	r3, sl, #3
 8007432:	f000 bd49 	b.w	8007ec8 <_dtoa_r+0xb30>
 8007436:	ed9d 7b02 	vldr	d7, [sp, #8]
 800743a:	2200      	movs	r2, #0
 800743c:	ec51 0b17 	vmov	r0, r1, d7
 8007440:	2300      	movs	r3, #0
 8007442:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007446:	f7f9 fb3f 	bl	8000ac8 <__aeabi_dcmpeq>
 800744a:	4680      	mov	r8, r0
 800744c:	b158      	cbz	r0, 8007466 <_dtoa_r+0xce>
 800744e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007450:	2301      	movs	r3, #1
 8007452:	6013      	str	r3, [r2, #0]
 8007454:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007456:	b113      	cbz	r3, 800745e <_dtoa_r+0xc6>
 8007458:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800745a:	4b84      	ldr	r3, [pc, #528]	@ (800766c <_dtoa_r+0x2d4>)
 800745c:	6013      	str	r3, [r2, #0]
 800745e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007680 <_dtoa_r+0x2e8>
 8007462:	f000 bd33 	b.w	8007ecc <_dtoa_r+0xb34>
 8007466:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800746a:	aa16      	add	r2, sp, #88	@ 0x58
 800746c:	a917      	add	r1, sp, #92	@ 0x5c
 800746e:	4658      	mov	r0, fp
 8007470:	f001 f980 	bl	8008774 <__d2b>
 8007474:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007478:	4681      	mov	r9, r0
 800747a:	2e00      	cmp	r6, #0
 800747c:	d077      	beq.n	800756e <_dtoa_r+0x1d6>
 800747e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007480:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007484:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007488:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800748c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007490:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007494:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007498:	4619      	mov	r1, r3
 800749a:	2200      	movs	r2, #0
 800749c:	4b74      	ldr	r3, [pc, #464]	@ (8007670 <_dtoa_r+0x2d8>)
 800749e:	f7f8 fef3 	bl	8000288 <__aeabi_dsub>
 80074a2:	a369      	add	r3, pc, #420	@ (adr r3, 8007648 <_dtoa_r+0x2b0>)
 80074a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a8:	f7f9 f8a6 	bl	80005f8 <__aeabi_dmul>
 80074ac:	a368      	add	r3, pc, #416	@ (adr r3, 8007650 <_dtoa_r+0x2b8>)
 80074ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b2:	f7f8 feeb 	bl	800028c <__adddf3>
 80074b6:	4604      	mov	r4, r0
 80074b8:	4630      	mov	r0, r6
 80074ba:	460d      	mov	r5, r1
 80074bc:	f7f9 f832 	bl	8000524 <__aeabi_i2d>
 80074c0:	a365      	add	r3, pc, #404	@ (adr r3, 8007658 <_dtoa_r+0x2c0>)
 80074c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c6:	f7f9 f897 	bl	80005f8 <__aeabi_dmul>
 80074ca:	4602      	mov	r2, r0
 80074cc:	460b      	mov	r3, r1
 80074ce:	4620      	mov	r0, r4
 80074d0:	4629      	mov	r1, r5
 80074d2:	f7f8 fedb 	bl	800028c <__adddf3>
 80074d6:	4604      	mov	r4, r0
 80074d8:	460d      	mov	r5, r1
 80074da:	f7f9 fb3d 	bl	8000b58 <__aeabi_d2iz>
 80074de:	2200      	movs	r2, #0
 80074e0:	4607      	mov	r7, r0
 80074e2:	2300      	movs	r3, #0
 80074e4:	4620      	mov	r0, r4
 80074e6:	4629      	mov	r1, r5
 80074e8:	f7f9 faf8 	bl	8000adc <__aeabi_dcmplt>
 80074ec:	b140      	cbz	r0, 8007500 <_dtoa_r+0x168>
 80074ee:	4638      	mov	r0, r7
 80074f0:	f7f9 f818 	bl	8000524 <__aeabi_i2d>
 80074f4:	4622      	mov	r2, r4
 80074f6:	462b      	mov	r3, r5
 80074f8:	f7f9 fae6 	bl	8000ac8 <__aeabi_dcmpeq>
 80074fc:	b900      	cbnz	r0, 8007500 <_dtoa_r+0x168>
 80074fe:	3f01      	subs	r7, #1
 8007500:	2f16      	cmp	r7, #22
 8007502:	d851      	bhi.n	80075a8 <_dtoa_r+0x210>
 8007504:	4b5b      	ldr	r3, [pc, #364]	@ (8007674 <_dtoa_r+0x2dc>)
 8007506:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800750a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800750e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007512:	f7f9 fae3 	bl	8000adc <__aeabi_dcmplt>
 8007516:	2800      	cmp	r0, #0
 8007518:	d048      	beq.n	80075ac <_dtoa_r+0x214>
 800751a:	3f01      	subs	r7, #1
 800751c:	2300      	movs	r3, #0
 800751e:	9312      	str	r3, [sp, #72]	@ 0x48
 8007520:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007522:	1b9b      	subs	r3, r3, r6
 8007524:	1e5a      	subs	r2, r3, #1
 8007526:	bf44      	itt	mi
 8007528:	f1c3 0801 	rsbmi	r8, r3, #1
 800752c:	2300      	movmi	r3, #0
 800752e:	9208      	str	r2, [sp, #32]
 8007530:	bf54      	ite	pl
 8007532:	f04f 0800 	movpl.w	r8, #0
 8007536:	9308      	strmi	r3, [sp, #32]
 8007538:	2f00      	cmp	r7, #0
 800753a:	db39      	blt.n	80075b0 <_dtoa_r+0x218>
 800753c:	9b08      	ldr	r3, [sp, #32]
 800753e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007540:	443b      	add	r3, r7
 8007542:	9308      	str	r3, [sp, #32]
 8007544:	2300      	movs	r3, #0
 8007546:	930a      	str	r3, [sp, #40]	@ 0x28
 8007548:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800754a:	2b09      	cmp	r3, #9
 800754c:	d864      	bhi.n	8007618 <_dtoa_r+0x280>
 800754e:	2b05      	cmp	r3, #5
 8007550:	bfc4      	itt	gt
 8007552:	3b04      	subgt	r3, #4
 8007554:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007556:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007558:	f1a3 0302 	sub.w	r3, r3, #2
 800755c:	bfcc      	ite	gt
 800755e:	2400      	movgt	r4, #0
 8007560:	2401      	movle	r4, #1
 8007562:	2b03      	cmp	r3, #3
 8007564:	d863      	bhi.n	800762e <_dtoa_r+0x296>
 8007566:	e8df f003 	tbb	[pc, r3]
 800756a:	372a      	.short	0x372a
 800756c:	5535      	.short	0x5535
 800756e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007572:	441e      	add	r6, r3
 8007574:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007578:	2b20      	cmp	r3, #32
 800757a:	bfc1      	itttt	gt
 800757c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007580:	409f      	lslgt	r7, r3
 8007582:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007586:	fa24 f303 	lsrgt.w	r3, r4, r3
 800758a:	bfd6      	itet	le
 800758c:	f1c3 0320 	rsble	r3, r3, #32
 8007590:	ea47 0003 	orrgt.w	r0, r7, r3
 8007594:	fa04 f003 	lslle.w	r0, r4, r3
 8007598:	f7f8 ffb4 	bl	8000504 <__aeabi_ui2d>
 800759c:	2201      	movs	r2, #1
 800759e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80075a2:	3e01      	subs	r6, #1
 80075a4:	9214      	str	r2, [sp, #80]	@ 0x50
 80075a6:	e777      	b.n	8007498 <_dtoa_r+0x100>
 80075a8:	2301      	movs	r3, #1
 80075aa:	e7b8      	b.n	800751e <_dtoa_r+0x186>
 80075ac:	9012      	str	r0, [sp, #72]	@ 0x48
 80075ae:	e7b7      	b.n	8007520 <_dtoa_r+0x188>
 80075b0:	427b      	negs	r3, r7
 80075b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80075b4:	2300      	movs	r3, #0
 80075b6:	eba8 0807 	sub.w	r8, r8, r7
 80075ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 80075bc:	e7c4      	b.n	8007548 <_dtoa_r+0x1b0>
 80075be:	2300      	movs	r3, #0
 80075c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80075c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	dc35      	bgt.n	8007634 <_dtoa_r+0x29c>
 80075c8:	2301      	movs	r3, #1
 80075ca:	9300      	str	r3, [sp, #0]
 80075cc:	9307      	str	r3, [sp, #28]
 80075ce:	461a      	mov	r2, r3
 80075d0:	920e      	str	r2, [sp, #56]	@ 0x38
 80075d2:	e00b      	b.n	80075ec <_dtoa_r+0x254>
 80075d4:	2301      	movs	r3, #1
 80075d6:	e7f3      	b.n	80075c0 <_dtoa_r+0x228>
 80075d8:	2300      	movs	r3, #0
 80075da:	930b      	str	r3, [sp, #44]	@ 0x2c
 80075dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80075de:	18fb      	adds	r3, r7, r3
 80075e0:	9300      	str	r3, [sp, #0]
 80075e2:	3301      	adds	r3, #1
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	9307      	str	r3, [sp, #28]
 80075e8:	bfb8      	it	lt
 80075ea:	2301      	movlt	r3, #1
 80075ec:	f8db 001c 	ldr.w	r0, [fp, #28]
 80075f0:	2100      	movs	r1, #0
 80075f2:	2204      	movs	r2, #4
 80075f4:	f102 0514 	add.w	r5, r2, #20
 80075f8:	429d      	cmp	r5, r3
 80075fa:	d91f      	bls.n	800763c <_dtoa_r+0x2a4>
 80075fc:	6041      	str	r1, [r0, #4]
 80075fe:	4658      	mov	r0, fp
 8007600:	f000 fd8e 	bl	8008120 <_Balloc>
 8007604:	4682      	mov	sl, r0
 8007606:	2800      	cmp	r0, #0
 8007608:	d13c      	bne.n	8007684 <_dtoa_r+0x2ec>
 800760a:	4b1b      	ldr	r3, [pc, #108]	@ (8007678 <_dtoa_r+0x2e0>)
 800760c:	4602      	mov	r2, r0
 800760e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007612:	e6d8      	b.n	80073c6 <_dtoa_r+0x2e>
 8007614:	2301      	movs	r3, #1
 8007616:	e7e0      	b.n	80075da <_dtoa_r+0x242>
 8007618:	2401      	movs	r4, #1
 800761a:	2300      	movs	r3, #0
 800761c:	9309      	str	r3, [sp, #36]	@ 0x24
 800761e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007620:	f04f 33ff 	mov.w	r3, #4294967295
 8007624:	9300      	str	r3, [sp, #0]
 8007626:	9307      	str	r3, [sp, #28]
 8007628:	2200      	movs	r2, #0
 800762a:	2312      	movs	r3, #18
 800762c:	e7d0      	b.n	80075d0 <_dtoa_r+0x238>
 800762e:	2301      	movs	r3, #1
 8007630:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007632:	e7f5      	b.n	8007620 <_dtoa_r+0x288>
 8007634:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007636:	9300      	str	r3, [sp, #0]
 8007638:	9307      	str	r3, [sp, #28]
 800763a:	e7d7      	b.n	80075ec <_dtoa_r+0x254>
 800763c:	3101      	adds	r1, #1
 800763e:	0052      	lsls	r2, r2, #1
 8007640:	e7d8      	b.n	80075f4 <_dtoa_r+0x25c>
 8007642:	bf00      	nop
 8007644:	f3af 8000 	nop.w
 8007648:	636f4361 	.word	0x636f4361
 800764c:	3fd287a7 	.word	0x3fd287a7
 8007650:	8b60c8b3 	.word	0x8b60c8b3
 8007654:	3fc68a28 	.word	0x3fc68a28
 8007658:	509f79fb 	.word	0x509f79fb
 800765c:	3fd34413 	.word	0x3fd34413
 8007660:	080093c9 	.word	0x080093c9
 8007664:	080093e0 	.word	0x080093e0
 8007668:	7ff00000 	.word	0x7ff00000
 800766c:	08009399 	.word	0x08009399
 8007670:	3ff80000 	.word	0x3ff80000
 8007674:	080094d8 	.word	0x080094d8
 8007678:	08009438 	.word	0x08009438
 800767c:	080093c5 	.word	0x080093c5
 8007680:	08009398 	.word	0x08009398
 8007684:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007688:	6018      	str	r0, [r3, #0]
 800768a:	9b07      	ldr	r3, [sp, #28]
 800768c:	2b0e      	cmp	r3, #14
 800768e:	f200 80a4 	bhi.w	80077da <_dtoa_r+0x442>
 8007692:	2c00      	cmp	r4, #0
 8007694:	f000 80a1 	beq.w	80077da <_dtoa_r+0x442>
 8007698:	2f00      	cmp	r7, #0
 800769a:	dd33      	ble.n	8007704 <_dtoa_r+0x36c>
 800769c:	4bad      	ldr	r3, [pc, #692]	@ (8007954 <_dtoa_r+0x5bc>)
 800769e:	f007 020f 	and.w	r2, r7, #15
 80076a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076a6:	ed93 7b00 	vldr	d7, [r3]
 80076aa:	05f8      	lsls	r0, r7, #23
 80076ac:	ed8d 7b04 	vstr	d7, [sp, #16]
 80076b0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80076b4:	d516      	bpl.n	80076e4 <_dtoa_r+0x34c>
 80076b6:	4ba8      	ldr	r3, [pc, #672]	@ (8007958 <_dtoa_r+0x5c0>)
 80076b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80076bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80076c0:	f7f9 f8c4 	bl	800084c <__aeabi_ddiv>
 80076c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076c8:	f004 040f 	and.w	r4, r4, #15
 80076cc:	2603      	movs	r6, #3
 80076ce:	4da2      	ldr	r5, [pc, #648]	@ (8007958 <_dtoa_r+0x5c0>)
 80076d0:	b954      	cbnz	r4, 80076e8 <_dtoa_r+0x350>
 80076d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076da:	f7f9 f8b7 	bl	800084c <__aeabi_ddiv>
 80076de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076e2:	e028      	b.n	8007736 <_dtoa_r+0x39e>
 80076e4:	2602      	movs	r6, #2
 80076e6:	e7f2      	b.n	80076ce <_dtoa_r+0x336>
 80076e8:	07e1      	lsls	r1, r4, #31
 80076ea:	d508      	bpl.n	80076fe <_dtoa_r+0x366>
 80076ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80076f4:	f7f8 ff80 	bl	80005f8 <__aeabi_dmul>
 80076f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80076fc:	3601      	adds	r6, #1
 80076fe:	1064      	asrs	r4, r4, #1
 8007700:	3508      	adds	r5, #8
 8007702:	e7e5      	b.n	80076d0 <_dtoa_r+0x338>
 8007704:	f000 80d2 	beq.w	80078ac <_dtoa_r+0x514>
 8007708:	427c      	negs	r4, r7
 800770a:	4b92      	ldr	r3, [pc, #584]	@ (8007954 <_dtoa_r+0x5bc>)
 800770c:	4d92      	ldr	r5, [pc, #584]	@ (8007958 <_dtoa_r+0x5c0>)
 800770e:	f004 020f 	and.w	r2, r4, #15
 8007712:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800771a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800771e:	f7f8 ff6b 	bl	80005f8 <__aeabi_dmul>
 8007722:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007726:	1124      	asrs	r4, r4, #4
 8007728:	2300      	movs	r3, #0
 800772a:	2602      	movs	r6, #2
 800772c:	2c00      	cmp	r4, #0
 800772e:	f040 80b2 	bne.w	8007896 <_dtoa_r+0x4fe>
 8007732:	2b00      	cmp	r3, #0
 8007734:	d1d3      	bne.n	80076de <_dtoa_r+0x346>
 8007736:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007738:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800773c:	2b00      	cmp	r3, #0
 800773e:	f000 80b7 	beq.w	80078b0 <_dtoa_r+0x518>
 8007742:	4b86      	ldr	r3, [pc, #536]	@ (800795c <_dtoa_r+0x5c4>)
 8007744:	2200      	movs	r2, #0
 8007746:	4620      	mov	r0, r4
 8007748:	4629      	mov	r1, r5
 800774a:	f7f9 f9c7 	bl	8000adc <__aeabi_dcmplt>
 800774e:	2800      	cmp	r0, #0
 8007750:	f000 80ae 	beq.w	80078b0 <_dtoa_r+0x518>
 8007754:	9b07      	ldr	r3, [sp, #28]
 8007756:	2b00      	cmp	r3, #0
 8007758:	f000 80aa 	beq.w	80078b0 <_dtoa_r+0x518>
 800775c:	9b00      	ldr	r3, [sp, #0]
 800775e:	2b00      	cmp	r3, #0
 8007760:	dd37      	ble.n	80077d2 <_dtoa_r+0x43a>
 8007762:	1e7b      	subs	r3, r7, #1
 8007764:	9304      	str	r3, [sp, #16]
 8007766:	4620      	mov	r0, r4
 8007768:	4b7d      	ldr	r3, [pc, #500]	@ (8007960 <_dtoa_r+0x5c8>)
 800776a:	2200      	movs	r2, #0
 800776c:	4629      	mov	r1, r5
 800776e:	f7f8 ff43 	bl	80005f8 <__aeabi_dmul>
 8007772:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007776:	9c00      	ldr	r4, [sp, #0]
 8007778:	3601      	adds	r6, #1
 800777a:	4630      	mov	r0, r6
 800777c:	f7f8 fed2 	bl	8000524 <__aeabi_i2d>
 8007780:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007784:	f7f8 ff38 	bl	80005f8 <__aeabi_dmul>
 8007788:	4b76      	ldr	r3, [pc, #472]	@ (8007964 <_dtoa_r+0x5cc>)
 800778a:	2200      	movs	r2, #0
 800778c:	f7f8 fd7e 	bl	800028c <__adddf3>
 8007790:	4605      	mov	r5, r0
 8007792:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007796:	2c00      	cmp	r4, #0
 8007798:	f040 808d 	bne.w	80078b6 <_dtoa_r+0x51e>
 800779c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077a0:	4b71      	ldr	r3, [pc, #452]	@ (8007968 <_dtoa_r+0x5d0>)
 80077a2:	2200      	movs	r2, #0
 80077a4:	f7f8 fd70 	bl	8000288 <__aeabi_dsub>
 80077a8:	4602      	mov	r2, r0
 80077aa:	460b      	mov	r3, r1
 80077ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80077b0:	462a      	mov	r2, r5
 80077b2:	4633      	mov	r3, r6
 80077b4:	f7f9 f9b0 	bl	8000b18 <__aeabi_dcmpgt>
 80077b8:	2800      	cmp	r0, #0
 80077ba:	f040 828b 	bne.w	8007cd4 <_dtoa_r+0x93c>
 80077be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077c2:	462a      	mov	r2, r5
 80077c4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80077c8:	f7f9 f988 	bl	8000adc <__aeabi_dcmplt>
 80077cc:	2800      	cmp	r0, #0
 80077ce:	f040 8128 	bne.w	8007a22 <_dtoa_r+0x68a>
 80077d2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80077d6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80077da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80077dc:	2b00      	cmp	r3, #0
 80077de:	f2c0 815a 	blt.w	8007a96 <_dtoa_r+0x6fe>
 80077e2:	2f0e      	cmp	r7, #14
 80077e4:	f300 8157 	bgt.w	8007a96 <_dtoa_r+0x6fe>
 80077e8:	4b5a      	ldr	r3, [pc, #360]	@ (8007954 <_dtoa_r+0x5bc>)
 80077ea:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80077ee:	ed93 7b00 	vldr	d7, [r3]
 80077f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	ed8d 7b00 	vstr	d7, [sp]
 80077fa:	da03      	bge.n	8007804 <_dtoa_r+0x46c>
 80077fc:	9b07      	ldr	r3, [sp, #28]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	f340 8101 	ble.w	8007a06 <_dtoa_r+0x66e>
 8007804:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007808:	4656      	mov	r6, sl
 800780a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800780e:	4620      	mov	r0, r4
 8007810:	4629      	mov	r1, r5
 8007812:	f7f9 f81b 	bl	800084c <__aeabi_ddiv>
 8007816:	f7f9 f99f 	bl	8000b58 <__aeabi_d2iz>
 800781a:	4680      	mov	r8, r0
 800781c:	f7f8 fe82 	bl	8000524 <__aeabi_i2d>
 8007820:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007824:	f7f8 fee8 	bl	80005f8 <__aeabi_dmul>
 8007828:	4602      	mov	r2, r0
 800782a:	460b      	mov	r3, r1
 800782c:	4620      	mov	r0, r4
 800782e:	4629      	mov	r1, r5
 8007830:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007834:	f7f8 fd28 	bl	8000288 <__aeabi_dsub>
 8007838:	f806 4b01 	strb.w	r4, [r6], #1
 800783c:	9d07      	ldr	r5, [sp, #28]
 800783e:	eba6 040a 	sub.w	r4, r6, sl
 8007842:	42a5      	cmp	r5, r4
 8007844:	4602      	mov	r2, r0
 8007846:	460b      	mov	r3, r1
 8007848:	f040 8117 	bne.w	8007a7a <_dtoa_r+0x6e2>
 800784c:	f7f8 fd1e 	bl	800028c <__adddf3>
 8007850:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007854:	4604      	mov	r4, r0
 8007856:	460d      	mov	r5, r1
 8007858:	f7f9 f95e 	bl	8000b18 <__aeabi_dcmpgt>
 800785c:	2800      	cmp	r0, #0
 800785e:	f040 80f9 	bne.w	8007a54 <_dtoa_r+0x6bc>
 8007862:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007866:	4620      	mov	r0, r4
 8007868:	4629      	mov	r1, r5
 800786a:	f7f9 f92d 	bl	8000ac8 <__aeabi_dcmpeq>
 800786e:	b118      	cbz	r0, 8007878 <_dtoa_r+0x4e0>
 8007870:	f018 0f01 	tst.w	r8, #1
 8007874:	f040 80ee 	bne.w	8007a54 <_dtoa_r+0x6bc>
 8007878:	4649      	mov	r1, r9
 800787a:	4658      	mov	r0, fp
 800787c:	f000 fc90 	bl	80081a0 <_Bfree>
 8007880:	2300      	movs	r3, #0
 8007882:	7033      	strb	r3, [r6, #0]
 8007884:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007886:	3701      	adds	r7, #1
 8007888:	601f      	str	r7, [r3, #0]
 800788a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800788c:	2b00      	cmp	r3, #0
 800788e:	f000 831d 	beq.w	8007ecc <_dtoa_r+0xb34>
 8007892:	601e      	str	r6, [r3, #0]
 8007894:	e31a      	b.n	8007ecc <_dtoa_r+0xb34>
 8007896:	07e2      	lsls	r2, r4, #31
 8007898:	d505      	bpl.n	80078a6 <_dtoa_r+0x50e>
 800789a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800789e:	f7f8 feab 	bl	80005f8 <__aeabi_dmul>
 80078a2:	3601      	adds	r6, #1
 80078a4:	2301      	movs	r3, #1
 80078a6:	1064      	asrs	r4, r4, #1
 80078a8:	3508      	adds	r5, #8
 80078aa:	e73f      	b.n	800772c <_dtoa_r+0x394>
 80078ac:	2602      	movs	r6, #2
 80078ae:	e742      	b.n	8007736 <_dtoa_r+0x39e>
 80078b0:	9c07      	ldr	r4, [sp, #28]
 80078b2:	9704      	str	r7, [sp, #16]
 80078b4:	e761      	b.n	800777a <_dtoa_r+0x3e2>
 80078b6:	4b27      	ldr	r3, [pc, #156]	@ (8007954 <_dtoa_r+0x5bc>)
 80078b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80078ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80078be:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80078c2:	4454      	add	r4, sl
 80078c4:	2900      	cmp	r1, #0
 80078c6:	d053      	beq.n	8007970 <_dtoa_r+0x5d8>
 80078c8:	4928      	ldr	r1, [pc, #160]	@ (800796c <_dtoa_r+0x5d4>)
 80078ca:	2000      	movs	r0, #0
 80078cc:	f7f8 ffbe 	bl	800084c <__aeabi_ddiv>
 80078d0:	4633      	mov	r3, r6
 80078d2:	462a      	mov	r2, r5
 80078d4:	f7f8 fcd8 	bl	8000288 <__aeabi_dsub>
 80078d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80078dc:	4656      	mov	r6, sl
 80078de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078e2:	f7f9 f939 	bl	8000b58 <__aeabi_d2iz>
 80078e6:	4605      	mov	r5, r0
 80078e8:	f7f8 fe1c 	bl	8000524 <__aeabi_i2d>
 80078ec:	4602      	mov	r2, r0
 80078ee:	460b      	mov	r3, r1
 80078f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078f4:	f7f8 fcc8 	bl	8000288 <__aeabi_dsub>
 80078f8:	3530      	adds	r5, #48	@ 0x30
 80078fa:	4602      	mov	r2, r0
 80078fc:	460b      	mov	r3, r1
 80078fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007902:	f806 5b01 	strb.w	r5, [r6], #1
 8007906:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800790a:	f7f9 f8e7 	bl	8000adc <__aeabi_dcmplt>
 800790e:	2800      	cmp	r0, #0
 8007910:	d171      	bne.n	80079f6 <_dtoa_r+0x65e>
 8007912:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007916:	4911      	ldr	r1, [pc, #68]	@ (800795c <_dtoa_r+0x5c4>)
 8007918:	2000      	movs	r0, #0
 800791a:	f7f8 fcb5 	bl	8000288 <__aeabi_dsub>
 800791e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007922:	f7f9 f8db 	bl	8000adc <__aeabi_dcmplt>
 8007926:	2800      	cmp	r0, #0
 8007928:	f040 8095 	bne.w	8007a56 <_dtoa_r+0x6be>
 800792c:	42a6      	cmp	r6, r4
 800792e:	f43f af50 	beq.w	80077d2 <_dtoa_r+0x43a>
 8007932:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007936:	4b0a      	ldr	r3, [pc, #40]	@ (8007960 <_dtoa_r+0x5c8>)
 8007938:	2200      	movs	r2, #0
 800793a:	f7f8 fe5d 	bl	80005f8 <__aeabi_dmul>
 800793e:	4b08      	ldr	r3, [pc, #32]	@ (8007960 <_dtoa_r+0x5c8>)
 8007940:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007944:	2200      	movs	r2, #0
 8007946:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800794a:	f7f8 fe55 	bl	80005f8 <__aeabi_dmul>
 800794e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007952:	e7c4      	b.n	80078de <_dtoa_r+0x546>
 8007954:	080094d8 	.word	0x080094d8
 8007958:	080094b0 	.word	0x080094b0
 800795c:	3ff00000 	.word	0x3ff00000
 8007960:	40240000 	.word	0x40240000
 8007964:	401c0000 	.word	0x401c0000
 8007968:	40140000 	.word	0x40140000
 800796c:	3fe00000 	.word	0x3fe00000
 8007970:	4631      	mov	r1, r6
 8007972:	4628      	mov	r0, r5
 8007974:	f7f8 fe40 	bl	80005f8 <__aeabi_dmul>
 8007978:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800797c:	9415      	str	r4, [sp, #84]	@ 0x54
 800797e:	4656      	mov	r6, sl
 8007980:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007984:	f7f9 f8e8 	bl	8000b58 <__aeabi_d2iz>
 8007988:	4605      	mov	r5, r0
 800798a:	f7f8 fdcb 	bl	8000524 <__aeabi_i2d>
 800798e:	4602      	mov	r2, r0
 8007990:	460b      	mov	r3, r1
 8007992:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007996:	f7f8 fc77 	bl	8000288 <__aeabi_dsub>
 800799a:	3530      	adds	r5, #48	@ 0x30
 800799c:	f806 5b01 	strb.w	r5, [r6], #1
 80079a0:	4602      	mov	r2, r0
 80079a2:	460b      	mov	r3, r1
 80079a4:	42a6      	cmp	r6, r4
 80079a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80079aa:	f04f 0200 	mov.w	r2, #0
 80079ae:	d124      	bne.n	80079fa <_dtoa_r+0x662>
 80079b0:	4bac      	ldr	r3, [pc, #688]	@ (8007c64 <_dtoa_r+0x8cc>)
 80079b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80079b6:	f7f8 fc69 	bl	800028c <__adddf3>
 80079ba:	4602      	mov	r2, r0
 80079bc:	460b      	mov	r3, r1
 80079be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079c2:	f7f9 f8a9 	bl	8000b18 <__aeabi_dcmpgt>
 80079c6:	2800      	cmp	r0, #0
 80079c8:	d145      	bne.n	8007a56 <_dtoa_r+0x6be>
 80079ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80079ce:	49a5      	ldr	r1, [pc, #660]	@ (8007c64 <_dtoa_r+0x8cc>)
 80079d0:	2000      	movs	r0, #0
 80079d2:	f7f8 fc59 	bl	8000288 <__aeabi_dsub>
 80079d6:	4602      	mov	r2, r0
 80079d8:	460b      	mov	r3, r1
 80079da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079de:	f7f9 f87d 	bl	8000adc <__aeabi_dcmplt>
 80079e2:	2800      	cmp	r0, #0
 80079e4:	f43f aef5 	beq.w	80077d2 <_dtoa_r+0x43a>
 80079e8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80079ea:	1e73      	subs	r3, r6, #1
 80079ec:	9315      	str	r3, [sp, #84]	@ 0x54
 80079ee:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80079f2:	2b30      	cmp	r3, #48	@ 0x30
 80079f4:	d0f8      	beq.n	80079e8 <_dtoa_r+0x650>
 80079f6:	9f04      	ldr	r7, [sp, #16]
 80079f8:	e73e      	b.n	8007878 <_dtoa_r+0x4e0>
 80079fa:	4b9b      	ldr	r3, [pc, #620]	@ (8007c68 <_dtoa_r+0x8d0>)
 80079fc:	f7f8 fdfc 	bl	80005f8 <__aeabi_dmul>
 8007a00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a04:	e7bc      	b.n	8007980 <_dtoa_r+0x5e8>
 8007a06:	d10c      	bne.n	8007a22 <_dtoa_r+0x68a>
 8007a08:	4b98      	ldr	r3, [pc, #608]	@ (8007c6c <_dtoa_r+0x8d4>)
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a10:	f7f8 fdf2 	bl	80005f8 <__aeabi_dmul>
 8007a14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a18:	f7f9 f874 	bl	8000b04 <__aeabi_dcmpge>
 8007a1c:	2800      	cmp	r0, #0
 8007a1e:	f000 8157 	beq.w	8007cd0 <_dtoa_r+0x938>
 8007a22:	2400      	movs	r4, #0
 8007a24:	4625      	mov	r5, r4
 8007a26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a28:	43db      	mvns	r3, r3
 8007a2a:	9304      	str	r3, [sp, #16]
 8007a2c:	4656      	mov	r6, sl
 8007a2e:	2700      	movs	r7, #0
 8007a30:	4621      	mov	r1, r4
 8007a32:	4658      	mov	r0, fp
 8007a34:	f000 fbb4 	bl	80081a0 <_Bfree>
 8007a38:	2d00      	cmp	r5, #0
 8007a3a:	d0dc      	beq.n	80079f6 <_dtoa_r+0x65e>
 8007a3c:	b12f      	cbz	r7, 8007a4a <_dtoa_r+0x6b2>
 8007a3e:	42af      	cmp	r7, r5
 8007a40:	d003      	beq.n	8007a4a <_dtoa_r+0x6b2>
 8007a42:	4639      	mov	r1, r7
 8007a44:	4658      	mov	r0, fp
 8007a46:	f000 fbab 	bl	80081a0 <_Bfree>
 8007a4a:	4629      	mov	r1, r5
 8007a4c:	4658      	mov	r0, fp
 8007a4e:	f000 fba7 	bl	80081a0 <_Bfree>
 8007a52:	e7d0      	b.n	80079f6 <_dtoa_r+0x65e>
 8007a54:	9704      	str	r7, [sp, #16]
 8007a56:	4633      	mov	r3, r6
 8007a58:	461e      	mov	r6, r3
 8007a5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a5e:	2a39      	cmp	r2, #57	@ 0x39
 8007a60:	d107      	bne.n	8007a72 <_dtoa_r+0x6da>
 8007a62:	459a      	cmp	sl, r3
 8007a64:	d1f8      	bne.n	8007a58 <_dtoa_r+0x6c0>
 8007a66:	9a04      	ldr	r2, [sp, #16]
 8007a68:	3201      	adds	r2, #1
 8007a6a:	9204      	str	r2, [sp, #16]
 8007a6c:	2230      	movs	r2, #48	@ 0x30
 8007a6e:	f88a 2000 	strb.w	r2, [sl]
 8007a72:	781a      	ldrb	r2, [r3, #0]
 8007a74:	3201      	adds	r2, #1
 8007a76:	701a      	strb	r2, [r3, #0]
 8007a78:	e7bd      	b.n	80079f6 <_dtoa_r+0x65e>
 8007a7a:	4b7b      	ldr	r3, [pc, #492]	@ (8007c68 <_dtoa_r+0x8d0>)
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f7f8 fdbb 	bl	80005f8 <__aeabi_dmul>
 8007a82:	2200      	movs	r2, #0
 8007a84:	2300      	movs	r3, #0
 8007a86:	4604      	mov	r4, r0
 8007a88:	460d      	mov	r5, r1
 8007a8a:	f7f9 f81d 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a8e:	2800      	cmp	r0, #0
 8007a90:	f43f aebb 	beq.w	800780a <_dtoa_r+0x472>
 8007a94:	e6f0      	b.n	8007878 <_dtoa_r+0x4e0>
 8007a96:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007a98:	2a00      	cmp	r2, #0
 8007a9a:	f000 80db 	beq.w	8007c54 <_dtoa_r+0x8bc>
 8007a9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007aa0:	2a01      	cmp	r2, #1
 8007aa2:	f300 80bf 	bgt.w	8007c24 <_dtoa_r+0x88c>
 8007aa6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007aa8:	2a00      	cmp	r2, #0
 8007aaa:	f000 80b7 	beq.w	8007c1c <_dtoa_r+0x884>
 8007aae:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007ab2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007ab4:	4646      	mov	r6, r8
 8007ab6:	9a08      	ldr	r2, [sp, #32]
 8007ab8:	2101      	movs	r1, #1
 8007aba:	441a      	add	r2, r3
 8007abc:	4658      	mov	r0, fp
 8007abe:	4498      	add	r8, r3
 8007ac0:	9208      	str	r2, [sp, #32]
 8007ac2:	f000 fc21 	bl	8008308 <__i2b>
 8007ac6:	4605      	mov	r5, r0
 8007ac8:	b15e      	cbz	r6, 8007ae2 <_dtoa_r+0x74a>
 8007aca:	9b08      	ldr	r3, [sp, #32]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	dd08      	ble.n	8007ae2 <_dtoa_r+0x74a>
 8007ad0:	42b3      	cmp	r3, r6
 8007ad2:	9a08      	ldr	r2, [sp, #32]
 8007ad4:	bfa8      	it	ge
 8007ad6:	4633      	movge	r3, r6
 8007ad8:	eba8 0803 	sub.w	r8, r8, r3
 8007adc:	1af6      	subs	r6, r6, r3
 8007ade:	1ad3      	subs	r3, r2, r3
 8007ae0:	9308      	str	r3, [sp, #32]
 8007ae2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ae4:	b1f3      	cbz	r3, 8007b24 <_dtoa_r+0x78c>
 8007ae6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	f000 80b7 	beq.w	8007c5c <_dtoa_r+0x8c4>
 8007aee:	b18c      	cbz	r4, 8007b14 <_dtoa_r+0x77c>
 8007af0:	4629      	mov	r1, r5
 8007af2:	4622      	mov	r2, r4
 8007af4:	4658      	mov	r0, fp
 8007af6:	f000 fcc7 	bl	8008488 <__pow5mult>
 8007afa:	464a      	mov	r2, r9
 8007afc:	4601      	mov	r1, r0
 8007afe:	4605      	mov	r5, r0
 8007b00:	4658      	mov	r0, fp
 8007b02:	f000 fc17 	bl	8008334 <__multiply>
 8007b06:	4649      	mov	r1, r9
 8007b08:	9004      	str	r0, [sp, #16]
 8007b0a:	4658      	mov	r0, fp
 8007b0c:	f000 fb48 	bl	80081a0 <_Bfree>
 8007b10:	9b04      	ldr	r3, [sp, #16]
 8007b12:	4699      	mov	r9, r3
 8007b14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b16:	1b1a      	subs	r2, r3, r4
 8007b18:	d004      	beq.n	8007b24 <_dtoa_r+0x78c>
 8007b1a:	4649      	mov	r1, r9
 8007b1c:	4658      	mov	r0, fp
 8007b1e:	f000 fcb3 	bl	8008488 <__pow5mult>
 8007b22:	4681      	mov	r9, r0
 8007b24:	2101      	movs	r1, #1
 8007b26:	4658      	mov	r0, fp
 8007b28:	f000 fbee 	bl	8008308 <__i2b>
 8007b2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b2e:	4604      	mov	r4, r0
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	f000 81cf 	beq.w	8007ed4 <_dtoa_r+0xb3c>
 8007b36:	461a      	mov	r2, r3
 8007b38:	4601      	mov	r1, r0
 8007b3a:	4658      	mov	r0, fp
 8007b3c:	f000 fca4 	bl	8008488 <__pow5mult>
 8007b40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	4604      	mov	r4, r0
 8007b46:	f300 8095 	bgt.w	8007c74 <_dtoa_r+0x8dc>
 8007b4a:	9b02      	ldr	r3, [sp, #8]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	f040 8087 	bne.w	8007c60 <_dtoa_r+0x8c8>
 8007b52:	9b03      	ldr	r3, [sp, #12]
 8007b54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	f040 8089 	bne.w	8007c70 <_dtoa_r+0x8d8>
 8007b5e:	9b03      	ldr	r3, [sp, #12]
 8007b60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007b64:	0d1b      	lsrs	r3, r3, #20
 8007b66:	051b      	lsls	r3, r3, #20
 8007b68:	b12b      	cbz	r3, 8007b76 <_dtoa_r+0x7de>
 8007b6a:	9b08      	ldr	r3, [sp, #32]
 8007b6c:	3301      	adds	r3, #1
 8007b6e:	9308      	str	r3, [sp, #32]
 8007b70:	f108 0801 	add.w	r8, r8, #1
 8007b74:	2301      	movs	r3, #1
 8007b76:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	f000 81b0 	beq.w	8007ee0 <_dtoa_r+0xb48>
 8007b80:	6923      	ldr	r3, [r4, #16]
 8007b82:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007b86:	6918      	ldr	r0, [r3, #16]
 8007b88:	f000 fb72 	bl	8008270 <__hi0bits>
 8007b8c:	f1c0 0020 	rsb	r0, r0, #32
 8007b90:	9b08      	ldr	r3, [sp, #32]
 8007b92:	4418      	add	r0, r3
 8007b94:	f010 001f 	ands.w	r0, r0, #31
 8007b98:	d077      	beq.n	8007c8a <_dtoa_r+0x8f2>
 8007b9a:	f1c0 0320 	rsb	r3, r0, #32
 8007b9e:	2b04      	cmp	r3, #4
 8007ba0:	dd6b      	ble.n	8007c7a <_dtoa_r+0x8e2>
 8007ba2:	9b08      	ldr	r3, [sp, #32]
 8007ba4:	f1c0 001c 	rsb	r0, r0, #28
 8007ba8:	4403      	add	r3, r0
 8007baa:	4480      	add	r8, r0
 8007bac:	4406      	add	r6, r0
 8007bae:	9308      	str	r3, [sp, #32]
 8007bb0:	f1b8 0f00 	cmp.w	r8, #0
 8007bb4:	dd05      	ble.n	8007bc2 <_dtoa_r+0x82a>
 8007bb6:	4649      	mov	r1, r9
 8007bb8:	4642      	mov	r2, r8
 8007bba:	4658      	mov	r0, fp
 8007bbc:	f000 fcbe 	bl	800853c <__lshift>
 8007bc0:	4681      	mov	r9, r0
 8007bc2:	9b08      	ldr	r3, [sp, #32]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	dd05      	ble.n	8007bd4 <_dtoa_r+0x83c>
 8007bc8:	4621      	mov	r1, r4
 8007bca:	461a      	mov	r2, r3
 8007bcc:	4658      	mov	r0, fp
 8007bce:	f000 fcb5 	bl	800853c <__lshift>
 8007bd2:	4604      	mov	r4, r0
 8007bd4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d059      	beq.n	8007c8e <_dtoa_r+0x8f6>
 8007bda:	4621      	mov	r1, r4
 8007bdc:	4648      	mov	r0, r9
 8007bde:	f000 fd19 	bl	8008614 <__mcmp>
 8007be2:	2800      	cmp	r0, #0
 8007be4:	da53      	bge.n	8007c8e <_dtoa_r+0x8f6>
 8007be6:	1e7b      	subs	r3, r7, #1
 8007be8:	9304      	str	r3, [sp, #16]
 8007bea:	4649      	mov	r1, r9
 8007bec:	2300      	movs	r3, #0
 8007bee:	220a      	movs	r2, #10
 8007bf0:	4658      	mov	r0, fp
 8007bf2:	f000 faf7 	bl	80081e4 <__multadd>
 8007bf6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007bf8:	4681      	mov	r9, r0
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	f000 8172 	beq.w	8007ee4 <_dtoa_r+0xb4c>
 8007c00:	2300      	movs	r3, #0
 8007c02:	4629      	mov	r1, r5
 8007c04:	220a      	movs	r2, #10
 8007c06:	4658      	mov	r0, fp
 8007c08:	f000 faec 	bl	80081e4 <__multadd>
 8007c0c:	9b00      	ldr	r3, [sp, #0]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	4605      	mov	r5, r0
 8007c12:	dc67      	bgt.n	8007ce4 <_dtoa_r+0x94c>
 8007c14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c16:	2b02      	cmp	r3, #2
 8007c18:	dc41      	bgt.n	8007c9e <_dtoa_r+0x906>
 8007c1a:	e063      	b.n	8007ce4 <_dtoa_r+0x94c>
 8007c1c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007c1e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007c22:	e746      	b.n	8007ab2 <_dtoa_r+0x71a>
 8007c24:	9b07      	ldr	r3, [sp, #28]
 8007c26:	1e5c      	subs	r4, r3, #1
 8007c28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c2a:	42a3      	cmp	r3, r4
 8007c2c:	bfbf      	itttt	lt
 8007c2e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007c30:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007c32:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007c34:	1ae3      	sublt	r3, r4, r3
 8007c36:	bfb4      	ite	lt
 8007c38:	18d2      	addlt	r2, r2, r3
 8007c3a:	1b1c      	subge	r4, r3, r4
 8007c3c:	9b07      	ldr	r3, [sp, #28]
 8007c3e:	bfbc      	itt	lt
 8007c40:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007c42:	2400      	movlt	r4, #0
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	bfb5      	itete	lt
 8007c48:	eba8 0603 	sublt.w	r6, r8, r3
 8007c4c:	9b07      	ldrge	r3, [sp, #28]
 8007c4e:	2300      	movlt	r3, #0
 8007c50:	4646      	movge	r6, r8
 8007c52:	e730      	b.n	8007ab6 <_dtoa_r+0x71e>
 8007c54:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007c56:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007c58:	4646      	mov	r6, r8
 8007c5a:	e735      	b.n	8007ac8 <_dtoa_r+0x730>
 8007c5c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007c5e:	e75c      	b.n	8007b1a <_dtoa_r+0x782>
 8007c60:	2300      	movs	r3, #0
 8007c62:	e788      	b.n	8007b76 <_dtoa_r+0x7de>
 8007c64:	3fe00000 	.word	0x3fe00000
 8007c68:	40240000 	.word	0x40240000
 8007c6c:	40140000 	.word	0x40140000
 8007c70:	9b02      	ldr	r3, [sp, #8]
 8007c72:	e780      	b.n	8007b76 <_dtoa_r+0x7de>
 8007c74:	2300      	movs	r3, #0
 8007c76:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c78:	e782      	b.n	8007b80 <_dtoa_r+0x7e8>
 8007c7a:	d099      	beq.n	8007bb0 <_dtoa_r+0x818>
 8007c7c:	9a08      	ldr	r2, [sp, #32]
 8007c7e:	331c      	adds	r3, #28
 8007c80:	441a      	add	r2, r3
 8007c82:	4498      	add	r8, r3
 8007c84:	441e      	add	r6, r3
 8007c86:	9208      	str	r2, [sp, #32]
 8007c88:	e792      	b.n	8007bb0 <_dtoa_r+0x818>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	e7f6      	b.n	8007c7c <_dtoa_r+0x8e4>
 8007c8e:	9b07      	ldr	r3, [sp, #28]
 8007c90:	9704      	str	r7, [sp, #16]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	dc20      	bgt.n	8007cd8 <_dtoa_r+0x940>
 8007c96:	9300      	str	r3, [sp, #0]
 8007c98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c9a:	2b02      	cmp	r3, #2
 8007c9c:	dd1e      	ble.n	8007cdc <_dtoa_r+0x944>
 8007c9e:	9b00      	ldr	r3, [sp, #0]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	f47f aec0 	bne.w	8007a26 <_dtoa_r+0x68e>
 8007ca6:	4621      	mov	r1, r4
 8007ca8:	2205      	movs	r2, #5
 8007caa:	4658      	mov	r0, fp
 8007cac:	f000 fa9a 	bl	80081e4 <__multadd>
 8007cb0:	4601      	mov	r1, r0
 8007cb2:	4604      	mov	r4, r0
 8007cb4:	4648      	mov	r0, r9
 8007cb6:	f000 fcad 	bl	8008614 <__mcmp>
 8007cba:	2800      	cmp	r0, #0
 8007cbc:	f77f aeb3 	ble.w	8007a26 <_dtoa_r+0x68e>
 8007cc0:	4656      	mov	r6, sl
 8007cc2:	2331      	movs	r3, #49	@ 0x31
 8007cc4:	f806 3b01 	strb.w	r3, [r6], #1
 8007cc8:	9b04      	ldr	r3, [sp, #16]
 8007cca:	3301      	adds	r3, #1
 8007ccc:	9304      	str	r3, [sp, #16]
 8007cce:	e6ae      	b.n	8007a2e <_dtoa_r+0x696>
 8007cd0:	9c07      	ldr	r4, [sp, #28]
 8007cd2:	9704      	str	r7, [sp, #16]
 8007cd4:	4625      	mov	r5, r4
 8007cd6:	e7f3      	b.n	8007cc0 <_dtoa_r+0x928>
 8007cd8:	9b07      	ldr	r3, [sp, #28]
 8007cda:	9300      	str	r3, [sp, #0]
 8007cdc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	f000 8104 	beq.w	8007eec <_dtoa_r+0xb54>
 8007ce4:	2e00      	cmp	r6, #0
 8007ce6:	dd05      	ble.n	8007cf4 <_dtoa_r+0x95c>
 8007ce8:	4629      	mov	r1, r5
 8007cea:	4632      	mov	r2, r6
 8007cec:	4658      	mov	r0, fp
 8007cee:	f000 fc25 	bl	800853c <__lshift>
 8007cf2:	4605      	mov	r5, r0
 8007cf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d05a      	beq.n	8007db0 <_dtoa_r+0xa18>
 8007cfa:	6869      	ldr	r1, [r5, #4]
 8007cfc:	4658      	mov	r0, fp
 8007cfe:	f000 fa0f 	bl	8008120 <_Balloc>
 8007d02:	4606      	mov	r6, r0
 8007d04:	b928      	cbnz	r0, 8007d12 <_dtoa_r+0x97a>
 8007d06:	4b84      	ldr	r3, [pc, #528]	@ (8007f18 <_dtoa_r+0xb80>)
 8007d08:	4602      	mov	r2, r0
 8007d0a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007d0e:	f7ff bb5a 	b.w	80073c6 <_dtoa_r+0x2e>
 8007d12:	692a      	ldr	r2, [r5, #16]
 8007d14:	3202      	adds	r2, #2
 8007d16:	0092      	lsls	r2, r2, #2
 8007d18:	f105 010c 	add.w	r1, r5, #12
 8007d1c:	300c      	adds	r0, #12
 8007d1e:	f000 ffaf 	bl	8008c80 <memcpy>
 8007d22:	2201      	movs	r2, #1
 8007d24:	4631      	mov	r1, r6
 8007d26:	4658      	mov	r0, fp
 8007d28:	f000 fc08 	bl	800853c <__lshift>
 8007d2c:	f10a 0301 	add.w	r3, sl, #1
 8007d30:	9307      	str	r3, [sp, #28]
 8007d32:	9b00      	ldr	r3, [sp, #0]
 8007d34:	4453      	add	r3, sl
 8007d36:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d38:	9b02      	ldr	r3, [sp, #8]
 8007d3a:	f003 0301 	and.w	r3, r3, #1
 8007d3e:	462f      	mov	r7, r5
 8007d40:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d42:	4605      	mov	r5, r0
 8007d44:	9b07      	ldr	r3, [sp, #28]
 8007d46:	4621      	mov	r1, r4
 8007d48:	3b01      	subs	r3, #1
 8007d4a:	4648      	mov	r0, r9
 8007d4c:	9300      	str	r3, [sp, #0]
 8007d4e:	f7ff fa9a 	bl	8007286 <quorem>
 8007d52:	4639      	mov	r1, r7
 8007d54:	9002      	str	r0, [sp, #8]
 8007d56:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007d5a:	4648      	mov	r0, r9
 8007d5c:	f000 fc5a 	bl	8008614 <__mcmp>
 8007d60:	462a      	mov	r2, r5
 8007d62:	9008      	str	r0, [sp, #32]
 8007d64:	4621      	mov	r1, r4
 8007d66:	4658      	mov	r0, fp
 8007d68:	f000 fc70 	bl	800864c <__mdiff>
 8007d6c:	68c2      	ldr	r2, [r0, #12]
 8007d6e:	4606      	mov	r6, r0
 8007d70:	bb02      	cbnz	r2, 8007db4 <_dtoa_r+0xa1c>
 8007d72:	4601      	mov	r1, r0
 8007d74:	4648      	mov	r0, r9
 8007d76:	f000 fc4d 	bl	8008614 <__mcmp>
 8007d7a:	4602      	mov	r2, r0
 8007d7c:	4631      	mov	r1, r6
 8007d7e:	4658      	mov	r0, fp
 8007d80:	920e      	str	r2, [sp, #56]	@ 0x38
 8007d82:	f000 fa0d 	bl	80081a0 <_Bfree>
 8007d86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d88:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007d8a:	9e07      	ldr	r6, [sp, #28]
 8007d8c:	ea43 0102 	orr.w	r1, r3, r2
 8007d90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d92:	4319      	orrs	r1, r3
 8007d94:	d110      	bne.n	8007db8 <_dtoa_r+0xa20>
 8007d96:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007d9a:	d029      	beq.n	8007df0 <_dtoa_r+0xa58>
 8007d9c:	9b08      	ldr	r3, [sp, #32]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	dd02      	ble.n	8007da8 <_dtoa_r+0xa10>
 8007da2:	9b02      	ldr	r3, [sp, #8]
 8007da4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007da8:	9b00      	ldr	r3, [sp, #0]
 8007daa:	f883 8000 	strb.w	r8, [r3]
 8007dae:	e63f      	b.n	8007a30 <_dtoa_r+0x698>
 8007db0:	4628      	mov	r0, r5
 8007db2:	e7bb      	b.n	8007d2c <_dtoa_r+0x994>
 8007db4:	2201      	movs	r2, #1
 8007db6:	e7e1      	b.n	8007d7c <_dtoa_r+0x9e4>
 8007db8:	9b08      	ldr	r3, [sp, #32]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	db04      	blt.n	8007dc8 <_dtoa_r+0xa30>
 8007dbe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007dc0:	430b      	orrs	r3, r1
 8007dc2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007dc4:	430b      	orrs	r3, r1
 8007dc6:	d120      	bne.n	8007e0a <_dtoa_r+0xa72>
 8007dc8:	2a00      	cmp	r2, #0
 8007dca:	dded      	ble.n	8007da8 <_dtoa_r+0xa10>
 8007dcc:	4649      	mov	r1, r9
 8007dce:	2201      	movs	r2, #1
 8007dd0:	4658      	mov	r0, fp
 8007dd2:	f000 fbb3 	bl	800853c <__lshift>
 8007dd6:	4621      	mov	r1, r4
 8007dd8:	4681      	mov	r9, r0
 8007dda:	f000 fc1b 	bl	8008614 <__mcmp>
 8007dde:	2800      	cmp	r0, #0
 8007de0:	dc03      	bgt.n	8007dea <_dtoa_r+0xa52>
 8007de2:	d1e1      	bne.n	8007da8 <_dtoa_r+0xa10>
 8007de4:	f018 0f01 	tst.w	r8, #1
 8007de8:	d0de      	beq.n	8007da8 <_dtoa_r+0xa10>
 8007dea:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007dee:	d1d8      	bne.n	8007da2 <_dtoa_r+0xa0a>
 8007df0:	9a00      	ldr	r2, [sp, #0]
 8007df2:	2339      	movs	r3, #57	@ 0x39
 8007df4:	7013      	strb	r3, [r2, #0]
 8007df6:	4633      	mov	r3, r6
 8007df8:	461e      	mov	r6, r3
 8007dfa:	3b01      	subs	r3, #1
 8007dfc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007e00:	2a39      	cmp	r2, #57	@ 0x39
 8007e02:	d052      	beq.n	8007eaa <_dtoa_r+0xb12>
 8007e04:	3201      	adds	r2, #1
 8007e06:	701a      	strb	r2, [r3, #0]
 8007e08:	e612      	b.n	8007a30 <_dtoa_r+0x698>
 8007e0a:	2a00      	cmp	r2, #0
 8007e0c:	dd07      	ble.n	8007e1e <_dtoa_r+0xa86>
 8007e0e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007e12:	d0ed      	beq.n	8007df0 <_dtoa_r+0xa58>
 8007e14:	9a00      	ldr	r2, [sp, #0]
 8007e16:	f108 0301 	add.w	r3, r8, #1
 8007e1a:	7013      	strb	r3, [r2, #0]
 8007e1c:	e608      	b.n	8007a30 <_dtoa_r+0x698>
 8007e1e:	9b07      	ldr	r3, [sp, #28]
 8007e20:	9a07      	ldr	r2, [sp, #28]
 8007e22:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007e26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d028      	beq.n	8007e7e <_dtoa_r+0xae6>
 8007e2c:	4649      	mov	r1, r9
 8007e2e:	2300      	movs	r3, #0
 8007e30:	220a      	movs	r2, #10
 8007e32:	4658      	mov	r0, fp
 8007e34:	f000 f9d6 	bl	80081e4 <__multadd>
 8007e38:	42af      	cmp	r7, r5
 8007e3a:	4681      	mov	r9, r0
 8007e3c:	f04f 0300 	mov.w	r3, #0
 8007e40:	f04f 020a 	mov.w	r2, #10
 8007e44:	4639      	mov	r1, r7
 8007e46:	4658      	mov	r0, fp
 8007e48:	d107      	bne.n	8007e5a <_dtoa_r+0xac2>
 8007e4a:	f000 f9cb 	bl	80081e4 <__multadd>
 8007e4e:	4607      	mov	r7, r0
 8007e50:	4605      	mov	r5, r0
 8007e52:	9b07      	ldr	r3, [sp, #28]
 8007e54:	3301      	adds	r3, #1
 8007e56:	9307      	str	r3, [sp, #28]
 8007e58:	e774      	b.n	8007d44 <_dtoa_r+0x9ac>
 8007e5a:	f000 f9c3 	bl	80081e4 <__multadd>
 8007e5e:	4629      	mov	r1, r5
 8007e60:	4607      	mov	r7, r0
 8007e62:	2300      	movs	r3, #0
 8007e64:	220a      	movs	r2, #10
 8007e66:	4658      	mov	r0, fp
 8007e68:	f000 f9bc 	bl	80081e4 <__multadd>
 8007e6c:	4605      	mov	r5, r0
 8007e6e:	e7f0      	b.n	8007e52 <_dtoa_r+0xaba>
 8007e70:	9b00      	ldr	r3, [sp, #0]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	bfcc      	ite	gt
 8007e76:	461e      	movgt	r6, r3
 8007e78:	2601      	movle	r6, #1
 8007e7a:	4456      	add	r6, sl
 8007e7c:	2700      	movs	r7, #0
 8007e7e:	4649      	mov	r1, r9
 8007e80:	2201      	movs	r2, #1
 8007e82:	4658      	mov	r0, fp
 8007e84:	f000 fb5a 	bl	800853c <__lshift>
 8007e88:	4621      	mov	r1, r4
 8007e8a:	4681      	mov	r9, r0
 8007e8c:	f000 fbc2 	bl	8008614 <__mcmp>
 8007e90:	2800      	cmp	r0, #0
 8007e92:	dcb0      	bgt.n	8007df6 <_dtoa_r+0xa5e>
 8007e94:	d102      	bne.n	8007e9c <_dtoa_r+0xb04>
 8007e96:	f018 0f01 	tst.w	r8, #1
 8007e9a:	d1ac      	bne.n	8007df6 <_dtoa_r+0xa5e>
 8007e9c:	4633      	mov	r3, r6
 8007e9e:	461e      	mov	r6, r3
 8007ea0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ea4:	2a30      	cmp	r2, #48	@ 0x30
 8007ea6:	d0fa      	beq.n	8007e9e <_dtoa_r+0xb06>
 8007ea8:	e5c2      	b.n	8007a30 <_dtoa_r+0x698>
 8007eaa:	459a      	cmp	sl, r3
 8007eac:	d1a4      	bne.n	8007df8 <_dtoa_r+0xa60>
 8007eae:	9b04      	ldr	r3, [sp, #16]
 8007eb0:	3301      	adds	r3, #1
 8007eb2:	9304      	str	r3, [sp, #16]
 8007eb4:	2331      	movs	r3, #49	@ 0x31
 8007eb6:	f88a 3000 	strb.w	r3, [sl]
 8007eba:	e5b9      	b.n	8007a30 <_dtoa_r+0x698>
 8007ebc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007ebe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007f1c <_dtoa_r+0xb84>
 8007ec2:	b11b      	cbz	r3, 8007ecc <_dtoa_r+0xb34>
 8007ec4:	f10a 0308 	add.w	r3, sl, #8
 8007ec8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007eca:	6013      	str	r3, [r2, #0]
 8007ecc:	4650      	mov	r0, sl
 8007ece:	b019      	add	sp, #100	@ 0x64
 8007ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ed4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	f77f ae37 	ble.w	8007b4a <_dtoa_r+0x7b2>
 8007edc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ede:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ee0:	2001      	movs	r0, #1
 8007ee2:	e655      	b.n	8007b90 <_dtoa_r+0x7f8>
 8007ee4:	9b00      	ldr	r3, [sp, #0]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	f77f aed6 	ble.w	8007c98 <_dtoa_r+0x900>
 8007eec:	4656      	mov	r6, sl
 8007eee:	4621      	mov	r1, r4
 8007ef0:	4648      	mov	r0, r9
 8007ef2:	f7ff f9c8 	bl	8007286 <quorem>
 8007ef6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007efa:	f806 8b01 	strb.w	r8, [r6], #1
 8007efe:	9b00      	ldr	r3, [sp, #0]
 8007f00:	eba6 020a 	sub.w	r2, r6, sl
 8007f04:	4293      	cmp	r3, r2
 8007f06:	ddb3      	ble.n	8007e70 <_dtoa_r+0xad8>
 8007f08:	4649      	mov	r1, r9
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	220a      	movs	r2, #10
 8007f0e:	4658      	mov	r0, fp
 8007f10:	f000 f968 	bl	80081e4 <__multadd>
 8007f14:	4681      	mov	r9, r0
 8007f16:	e7ea      	b.n	8007eee <_dtoa_r+0xb56>
 8007f18:	08009438 	.word	0x08009438
 8007f1c:	080093bc 	.word	0x080093bc

08007f20 <_free_r>:
 8007f20:	b538      	push	{r3, r4, r5, lr}
 8007f22:	4605      	mov	r5, r0
 8007f24:	2900      	cmp	r1, #0
 8007f26:	d041      	beq.n	8007fac <_free_r+0x8c>
 8007f28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f2c:	1f0c      	subs	r4, r1, #4
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	bfb8      	it	lt
 8007f32:	18e4      	addlt	r4, r4, r3
 8007f34:	f000 f8e8 	bl	8008108 <__malloc_lock>
 8007f38:	4a1d      	ldr	r2, [pc, #116]	@ (8007fb0 <_free_r+0x90>)
 8007f3a:	6813      	ldr	r3, [r2, #0]
 8007f3c:	b933      	cbnz	r3, 8007f4c <_free_r+0x2c>
 8007f3e:	6063      	str	r3, [r4, #4]
 8007f40:	6014      	str	r4, [r2, #0]
 8007f42:	4628      	mov	r0, r5
 8007f44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f48:	f000 b8e4 	b.w	8008114 <__malloc_unlock>
 8007f4c:	42a3      	cmp	r3, r4
 8007f4e:	d908      	bls.n	8007f62 <_free_r+0x42>
 8007f50:	6820      	ldr	r0, [r4, #0]
 8007f52:	1821      	adds	r1, r4, r0
 8007f54:	428b      	cmp	r3, r1
 8007f56:	bf01      	itttt	eq
 8007f58:	6819      	ldreq	r1, [r3, #0]
 8007f5a:	685b      	ldreq	r3, [r3, #4]
 8007f5c:	1809      	addeq	r1, r1, r0
 8007f5e:	6021      	streq	r1, [r4, #0]
 8007f60:	e7ed      	b.n	8007f3e <_free_r+0x1e>
 8007f62:	461a      	mov	r2, r3
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	b10b      	cbz	r3, 8007f6c <_free_r+0x4c>
 8007f68:	42a3      	cmp	r3, r4
 8007f6a:	d9fa      	bls.n	8007f62 <_free_r+0x42>
 8007f6c:	6811      	ldr	r1, [r2, #0]
 8007f6e:	1850      	adds	r0, r2, r1
 8007f70:	42a0      	cmp	r0, r4
 8007f72:	d10b      	bne.n	8007f8c <_free_r+0x6c>
 8007f74:	6820      	ldr	r0, [r4, #0]
 8007f76:	4401      	add	r1, r0
 8007f78:	1850      	adds	r0, r2, r1
 8007f7a:	4283      	cmp	r3, r0
 8007f7c:	6011      	str	r1, [r2, #0]
 8007f7e:	d1e0      	bne.n	8007f42 <_free_r+0x22>
 8007f80:	6818      	ldr	r0, [r3, #0]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	6053      	str	r3, [r2, #4]
 8007f86:	4408      	add	r0, r1
 8007f88:	6010      	str	r0, [r2, #0]
 8007f8a:	e7da      	b.n	8007f42 <_free_r+0x22>
 8007f8c:	d902      	bls.n	8007f94 <_free_r+0x74>
 8007f8e:	230c      	movs	r3, #12
 8007f90:	602b      	str	r3, [r5, #0]
 8007f92:	e7d6      	b.n	8007f42 <_free_r+0x22>
 8007f94:	6820      	ldr	r0, [r4, #0]
 8007f96:	1821      	adds	r1, r4, r0
 8007f98:	428b      	cmp	r3, r1
 8007f9a:	bf04      	itt	eq
 8007f9c:	6819      	ldreq	r1, [r3, #0]
 8007f9e:	685b      	ldreq	r3, [r3, #4]
 8007fa0:	6063      	str	r3, [r4, #4]
 8007fa2:	bf04      	itt	eq
 8007fa4:	1809      	addeq	r1, r1, r0
 8007fa6:	6021      	streq	r1, [r4, #0]
 8007fa8:	6054      	str	r4, [r2, #4]
 8007faa:	e7ca      	b.n	8007f42 <_free_r+0x22>
 8007fac:	bd38      	pop	{r3, r4, r5, pc}
 8007fae:	bf00      	nop
 8007fb0:	20000804 	.word	0x20000804

08007fb4 <malloc>:
 8007fb4:	4b02      	ldr	r3, [pc, #8]	@ (8007fc0 <malloc+0xc>)
 8007fb6:	4601      	mov	r1, r0
 8007fb8:	6818      	ldr	r0, [r3, #0]
 8007fba:	f000 b825 	b.w	8008008 <_malloc_r>
 8007fbe:	bf00      	nop
 8007fc0:	20000030 	.word	0x20000030

08007fc4 <sbrk_aligned>:
 8007fc4:	b570      	push	{r4, r5, r6, lr}
 8007fc6:	4e0f      	ldr	r6, [pc, #60]	@ (8008004 <sbrk_aligned+0x40>)
 8007fc8:	460c      	mov	r4, r1
 8007fca:	6831      	ldr	r1, [r6, #0]
 8007fcc:	4605      	mov	r5, r0
 8007fce:	b911      	cbnz	r1, 8007fd6 <sbrk_aligned+0x12>
 8007fd0:	f000 fe46 	bl	8008c60 <_sbrk_r>
 8007fd4:	6030      	str	r0, [r6, #0]
 8007fd6:	4621      	mov	r1, r4
 8007fd8:	4628      	mov	r0, r5
 8007fda:	f000 fe41 	bl	8008c60 <_sbrk_r>
 8007fde:	1c43      	adds	r3, r0, #1
 8007fe0:	d103      	bne.n	8007fea <sbrk_aligned+0x26>
 8007fe2:	f04f 34ff 	mov.w	r4, #4294967295
 8007fe6:	4620      	mov	r0, r4
 8007fe8:	bd70      	pop	{r4, r5, r6, pc}
 8007fea:	1cc4      	adds	r4, r0, #3
 8007fec:	f024 0403 	bic.w	r4, r4, #3
 8007ff0:	42a0      	cmp	r0, r4
 8007ff2:	d0f8      	beq.n	8007fe6 <sbrk_aligned+0x22>
 8007ff4:	1a21      	subs	r1, r4, r0
 8007ff6:	4628      	mov	r0, r5
 8007ff8:	f000 fe32 	bl	8008c60 <_sbrk_r>
 8007ffc:	3001      	adds	r0, #1
 8007ffe:	d1f2      	bne.n	8007fe6 <sbrk_aligned+0x22>
 8008000:	e7ef      	b.n	8007fe2 <sbrk_aligned+0x1e>
 8008002:	bf00      	nop
 8008004:	20000800 	.word	0x20000800

08008008 <_malloc_r>:
 8008008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800800c:	1ccd      	adds	r5, r1, #3
 800800e:	f025 0503 	bic.w	r5, r5, #3
 8008012:	3508      	adds	r5, #8
 8008014:	2d0c      	cmp	r5, #12
 8008016:	bf38      	it	cc
 8008018:	250c      	movcc	r5, #12
 800801a:	2d00      	cmp	r5, #0
 800801c:	4606      	mov	r6, r0
 800801e:	db01      	blt.n	8008024 <_malloc_r+0x1c>
 8008020:	42a9      	cmp	r1, r5
 8008022:	d904      	bls.n	800802e <_malloc_r+0x26>
 8008024:	230c      	movs	r3, #12
 8008026:	6033      	str	r3, [r6, #0]
 8008028:	2000      	movs	r0, #0
 800802a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800802e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008104 <_malloc_r+0xfc>
 8008032:	f000 f869 	bl	8008108 <__malloc_lock>
 8008036:	f8d8 3000 	ldr.w	r3, [r8]
 800803a:	461c      	mov	r4, r3
 800803c:	bb44      	cbnz	r4, 8008090 <_malloc_r+0x88>
 800803e:	4629      	mov	r1, r5
 8008040:	4630      	mov	r0, r6
 8008042:	f7ff ffbf 	bl	8007fc4 <sbrk_aligned>
 8008046:	1c43      	adds	r3, r0, #1
 8008048:	4604      	mov	r4, r0
 800804a:	d158      	bne.n	80080fe <_malloc_r+0xf6>
 800804c:	f8d8 4000 	ldr.w	r4, [r8]
 8008050:	4627      	mov	r7, r4
 8008052:	2f00      	cmp	r7, #0
 8008054:	d143      	bne.n	80080de <_malloc_r+0xd6>
 8008056:	2c00      	cmp	r4, #0
 8008058:	d04b      	beq.n	80080f2 <_malloc_r+0xea>
 800805a:	6823      	ldr	r3, [r4, #0]
 800805c:	4639      	mov	r1, r7
 800805e:	4630      	mov	r0, r6
 8008060:	eb04 0903 	add.w	r9, r4, r3
 8008064:	f000 fdfc 	bl	8008c60 <_sbrk_r>
 8008068:	4581      	cmp	r9, r0
 800806a:	d142      	bne.n	80080f2 <_malloc_r+0xea>
 800806c:	6821      	ldr	r1, [r4, #0]
 800806e:	1a6d      	subs	r5, r5, r1
 8008070:	4629      	mov	r1, r5
 8008072:	4630      	mov	r0, r6
 8008074:	f7ff ffa6 	bl	8007fc4 <sbrk_aligned>
 8008078:	3001      	adds	r0, #1
 800807a:	d03a      	beq.n	80080f2 <_malloc_r+0xea>
 800807c:	6823      	ldr	r3, [r4, #0]
 800807e:	442b      	add	r3, r5
 8008080:	6023      	str	r3, [r4, #0]
 8008082:	f8d8 3000 	ldr.w	r3, [r8]
 8008086:	685a      	ldr	r2, [r3, #4]
 8008088:	bb62      	cbnz	r2, 80080e4 <_malloc_r+0xdc>
 800808a:	f8c8 7000 	str.w	r7, [r8]
 800808e:	e00f      	b.n	80080b0 <_malloc_r+0xa8>
 8008090:	6822      	ldr	r2, [r4, #0]
 8008092:	1b52      	subs	r2, r2, r5
 8008094:	d420      	bmi.n	80080d8 <_malloc_r+0xd0>
 8008096:	2a0b      	cmp	r2, #11
 8008098:	d917      	bls.n	80080ca <_malloc_r+0xc2>
 800809a:	1961      	adds	r1, r4, r5
 800809c:	42a3      	cmp	r3, r4
 800809e:	6025      	str	r5, [r4, #0]
 80080a0:	bf18      	it	ne
 80080a2:	6059      	strne	r1, [r3, #4]
 80080a4:	6863      	ldr	r3, [r4, #4]
 80080a6:	bf08      	it	eq
 80080a8:	f8c8 1000 	streq.w	r1, [r8]
 80080ac:	5162      	str	r2, [r4, r5]
 80080ae:	604b      	str	r3, [r1, #4]
 80080b0:	4630      	mov	r0, r6
 80080b2:	f000 f82f 	bl	8008114 <__malloc_unlock>
 80080b6:	f104 000b 	add.w	r0, r4, #11
 80080ba:	1d23      	adds	r3, r4, #4
 80080bc:	f020 0007 	bic.w	r0, r0, #7
 80080c0:	1ac2      	subs	r2, r0, r3
 80080c2:	bf1c      	itt	ne
 80080c4:	1a1b      	subne	r3, r3, r0
 80080c6:	50a3      	strne	r3, [r4, r2]
 80080c8:	e7af      	b.n	800802a <_malloc_r+0x22>
 80080ca:	6862      	ldr	r2, [r4, #4]
 80080cc:	42a3      	cmp	r3, r4
 80080ce:	bf0c      	ite	eq
 80080d0:	f8c8 2000 	streq.w	r2, [r8]
 80080d4:	605a      	strne	r2, [r3, #4]
 80080d6:	e7eb      	b.n	80080b0 <_malloc_r+0xa8>
 80080d8:	4623      	mov	r3, r4
 80080da:	6864      	ldr	r4, [r4, #4]
 80080dc:	e7ae      	b.n	800803c <_malloc_r+0x34>
 80080de:	463c      	mov	r4, r7
 80080e0:	687f      	ldr	r7, [r7, #4]
 80080e2:	e7b6      	b.n	8008052 <_malloc_r+0x4a>
 80080e4:	461a      	mov	r2, r3
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	42a3      	cmp	r3, r4
 80080ea:	d1fb      	bne.n	80080e4 <_malloc_r+0xdc>
 80080ec:	2300      	movs	r3, #0
 80080ee:	6053      	str	r3, [r2, #4]
 80080f0:	e7de      	b.n	80080b0 <_malloc_r+0xa8>
 80080f2:	230c      	movs	r3, #12
 80080f4:	6033      	str	r3, [r6, #0]
 80080f6:	4630      	mov	r0, r6
 80080f8:	f000 f80c 	bl	8008114 <__malloc_unlock>
 80080fc:	e794      	b.n	8008028 <_malloc_r+0x20>
 80080fe:	6005      	str	r5, [r0, #0]
 8008100:	e7d6      	b.n	80080b0 <_malloc_r+0xa8>
 8008102:	bf00      	nop
 8008104:	20000804 	.word	0x20000804

08008108 <__malloc_lock>:
 8008108:	4801      	ldr	r0, [pc, #4]	@ (8008110 <__malloc_lock+0x8>)
 800810a:	f7ff b8ba 	b.w	8007282 <__retarget_lock_acquire_recursive>
 800810e:	bf00      	nop
 8008110:	200007fc 	.word	0x200007fc

08008114 <__malloc_unlock>:
 8008114:	4801      	ldr	r0, [pc, #4]	@ (800811c <__malloc_unlock+0x8>)
 8008116:	f7ff b8b5 	b.w	8007284 <__retarget_lock_release_recursive>
 800811a:	bf00      	nop
 800811c:	200007fc 	.word	0x200007fc

08008120 <_Balloc>:
 8008120:	b570      	push	{r4, r5, r6, lr}
 8008122:	69c6      	ldr	r6, [r0, #28]
 8008124:	4604      	mov	r4, r0
 8008126:	460d      	mov	r5, r1
 8008128:	b976      	cbnz	r6, 8008148 <_Balloc+0x28>
 800812a:	2010      	movs	r0, #16
 800812c:	f7ff ff42 	bl	8007fb4 <malloc>
 8008130:	4602      	mov	r2, r0
 8008132:	61e0      	str	r0, [r4, #28]
 8008134:	b920      	cbnz	r0, 8008140 <_Balloc+0x20>
 8008136:	4b18      	ldr	r3, [pc, #96]	@ (8008198 <_Balloc+0x78>)
 8008138:	4818      	ldr	r0, [pc, #96]	@ (800819c <_Balloc+0x7c>)
 800813a:	216b      	movs	r1, #107	@ 0x6b
 800813c:	f000 fdae 	bl	8008c9c <__assert_func>
 8008140:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008144:	6006      	str	r6, [r0, #0]
 8008146:	60c6      	str	r6, [r0, #12]
 8008148:	69e6      	ldr	r6, [r4, #28]
 800814a:	68f3      	ldr	r3, [r6, #12]
 800814c:	b183      	cbz	r3, 8008170 <_Balloc+0x50>
 800814e:	69e3      	ldr	r3, [r4, #28]
 8008150:	68db      	ldr	r3, [r3, #12]
 8008152:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008156:	b9b8      	cbnz	r0, 8008188 <_Balloc+0x68>
 8008158:	2101      	movs	r1, #1
 800815a:	fa01 f605 	lsl.w	r6, r1, r5
 800815e:	1d72      	adds	r2, r6, #5
 8008160:	0092      	lsls	r2, r2, #2
 8008162:	4620      	mov	r0, r4
 8008164:	f000 fdb8 	bl	8008cd8 <_calloc_r>
 8008168:	b160      	cbz	r0, 8008184 <_Balloc+0x64>
 800816a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800816e:	e00e      	b.n	800818e <_Balloc+0x6e>
 8008170:	2221      	movs	r2, #33	@ 0x21
 8008172:	2104      	movs	r1, #4
 8008174:	4620      	mov	r0, r4
 8008176:	f000 fdaf 	bl	8008cd8 <_calloc_r>
 800817a:	69e3      	ldr	r3, [r4, #28]
 800817c:	60f0      	str	r0, [r6, #12]
 800817e:	68db      	ldr	r3, [r3, #12]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d1e4      	bne.n	800814e <_Balloc+0x2e>
 8008184:	2000      	movs	r0, #0
 8008186:	bd70      	pop	{r4, r5, r6, pc}
 8008188:	6802      	ldr	r2, [r0, #0]
 800818a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800818e:	2300      	movs	r3, #0
 8008190:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008194:	e7f7      	b.n	8008186 <_Balloc+0x66>
 8008196:	bf00      	nop
 8008198:	080093c9 	.word	0x080093c9
 800819c:	08009449 	.word	0x08009449

080081a0 <_Bfree>:
 80081a0:	b570      	push	{r4, r5, r6, lr}
 80081a2:	69c6      	ldr	r6, [r0, #28]
 80081a4:	4605      	mov	r5, r0
 80081a6:	460c      	mov	r4, r1
 80081a8:	b976      	cbnz	r6, 80081c8 <_Bfree+0x28>
 80081aa:	2010      	movs	r0, #16
 80081ac:	f7ff ff02 	bl	8007fb4 <malloc>
 80081b0:	4602      	mov	r2, r0
 80081b2:	61e8      	str	r0, [r5, #28]
 80081b4:	b920      	cbnz	r0, 80081c0 <_Bfree+0x20>
 80081b6:	4b09      	ldr	r3, [pc, #36]	@ (80081dc <_Bfree+0x3c>)
 80081b8:	4809      	ldr	r0, [pc, #36]	@ (80081e0 <_Bfree+0x40>)
 80081ba:	218f      	movs	r1, #143	@ 0x8f
 80081bc:	f000 fd6e 	bl	8008c9c <__assert_func>
 80081c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80081c4:	6006      	str	r6, [r0, #0]
 80081c6:	60c6      	str	r6, [r0, #12]
 80081c8:	b13c      	cbz	r4, 80081da <_Bfree+0x3a>
 80081ca:	69eb      	ldr	r3, [r5, #28]
 80081cc:	6862      	ldr	r2, [r4, #4]
 80081ce:	68db      	ldr	r3, [r3, #12]
 80081d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80081d4:	6021      	str	r1, [r4, #0]
 80081d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80081da:	bd70      	pop	{r4, r5, r6, pc}
 80081dc:	080093c9 	.word	0x080093c9
 80081e0:	08009449 	.word	0x08009449

080081e4 <__multadd>:
 80081e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081e8:	690d      	ldr	r5, [r1, #16]
 80081ea:	4607      	mov	r7, r0
 80081ec:	460c      	mov	r4, r1
 80081ee:	461e      	mov	r6, r3
 80081f0:	f101 0c14 	add.w	ip, r1, #20
 80081f4:	2000      	movs	r0, #0
 80081f6:	f8dc 3000 	ldr.w	r3, [ip]
 80081fa:	b299      	uxth	r1, r3
 80081fc:	fb02 6101 	mla	r1, r2, r1, r6
 8008200:	0c1e      	lsrs	r6, r3, #16
 8008202:	0c0b      	lsrs	r3, r1, #16
 8008204:	fb02 3306 	mla	r3, r2, r6, r3
 8008208:	b289      	uxth	r1, r1
 800820a:	3001      	adds	r0, #1
 800820c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008210:	4285      	cmp	r5, r0
 8008212:	f84c 1b04 	str.w	r1, [ip], #4
 8008216:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800821a:	dcec      	bgt.n	80081f6 <__multadd+0x12>
 800821c:	b30e      	cbz	r6, 8008262 <__multadd+0x7e>
 800821e:	68a3      	ldr	r3, [r4, #8]
 8008220:	42ab      	cmp	r3, r5
 8008222:	dc19      	bgt.n	8008258 <__multadd+0x74>
 8008224:	6861      	ldr	r1, [r4, #4]
 8008226:	4638      	mov	r0, r7
 8008228:	3101      	adds	r1, #1
 800822a:	f7ff ff79 	bl	8008120 <_Balloc>
 800822e:	4680      	mov	r8, r0
 8008230:	b928      	cbnz	r0, 800823e <__multadd+0x5a>
 8008232:	4602      	mov	r2, r0
 8008234:	4b0c      	ldr	r3, [pc, #48]	@ (8008268 <__multadd+0x84>)
 8008236:	480d      	ldr	r0, [pc, #52]	@ (800826c <__multadd+0x88>)
 8008238:	21ba      	movs	r1, #186	@ 0xba
 800823a:	f000 fd2f 	bl	8008c9c <__assert_func>
 800823e:	6922      	ldr	r2, [r4, #16]
 8008240:	3202      	adds	r2, #2
 8008242:	f104 010c 	add.w	r1, r4, #12
 8008246:	0092      	lsls	r2, r2, #2
 8008248:	300c      	adds	r0, #12
 800824a:	f000 fd19 	bl	8008c80 <memcpy>
 800824e:	4621      	mov	r1, r4
 8008250:	4638      	mov	r0, r7
 8008252:	f7ff ffa5 	bl	80081a0 <_Bfree>
 8008256:	4644      	mov	r4, r8
 8008258:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800825c:	3501      	adds	r5, #1
 800825e:	615e      	str	r6, [r3, #20]
 8008260:	6125      	str	r5, [r4, #16]
 8008262:	4620      	mov	r0, r4
 8008264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008268:	08009438 	.word	0x08009438
 800826c:	08009449 	.word	0x08009449

08008270 <__hi0bits>:
 8008270:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008274:	4603      	mov	r3, r0
 8008276:	bf36      	itet	cc
 8008278:	0403      	lslcc	r3, r0, #16
 800827a:	2000      	movcs	r0, #0
 800827c:	2010      	movcc	r0, #16
 800827e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008282:	bf3c      	itt	cc
 8008284:	021b      	lslcc	r3, r3, #8
 8008286:	3008      	addcc	r0, #8
 8008288:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800828c:	bf3c      	itt	cc
 800828e:	011b      	lslcc	r3, r3, #4
 8008290:	3004      	addcc	r0, #4
 8008292:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008296:	bf3c      	itt	cc
 8008298:	009b      	lslcc	r3, r3, #2
 800829a:	3002      	addcc	r0, #2
 800829c:	2b00      	cmp	r3, #0
 800829e:	db05      	blt.n	80082ac <__hi0bits+0x3c>
 80082a0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80082a4:	f100 0001 	add.w	r0, r0, #1
 80082a8:	bf08      	it	eq
 80082aa:	2020      	moveq	r0, #32
 80082ac:	4770      	bx	lr

080082ae <__lo0bits>:
 80082ae:	6803      	ldr	r3, [r0, #0]
 80082b0:	4602      	mov	r2, r0
 80082b2:	f013 0007 	ands.w	r0, r3, #7
 80082b6:	d00b      	beq.n	80082d0 <__lo0bits+0x22>
 80082b8:	07d9      	lsls	r1, r3, #31
 80082ba:	d421      	bmi.n	8008300 <__lo0bits+0x52>
 80082bc:	0798      	lsls	r0, r3, #30
 80082be:	bf49      	itett	mi
 80082c0:	085b      	lsrmi	r3, r3, #1
 80082c2:	089b      	lsrpl	r3, r3, #2
 80082c4:	2001      	movmi	r0, #1
 80082c6:	6013      	strmi	r3, [r2, #0]
 80082c8:	bf5c      	itt	pl
 80082ca:	6013      	strpl	r3, [r2, #0]
 80082cc:	2002      	movpl	r0, #2
 80082ce:	4770      	bx	lr
 80082d0:	b299      	uxth	r1, r3
 80082d2:	b909      	cbnz	r1, 80082d8 <__lo0bits+0x2a>
 80082d4:	0c1b      	lsrs	r3, r3, #16
 80082d6:	2010      	movs	r0, #16
 80082d8:	b2d9      	uxtb	r1, r3
 80082da:	b909      	cbnz	r1, 80082e0 <__lo0bits+0x32>
 80082dc:	3008      	adds	r0, #8
 80082de:	0a1b      	lsrs	r3, r3, #8
 80082e0:	0719      	lsls	r1, r3, #28
 80082e2:	bf04      	itt	eq
 80082e4:	091b      	lsreq	r3, r3, #4
 80082e6:	3004      	addeq	r0, #4
 80082e8:	0799      	lsls	r1, r3, #30
 80082ea:	bf04      	itt	eq
 80082ec:	089b      	lsreq	r3, r3, #2
 80082ee:	3002      	addeq	r0, #2
 80082f0:	07d9      	lsls	r1, r3, #31
 80082f2:	d403      	bmi.n	80082fc <__lo0bits+0x4e>
 80082f4:	085b      	lsrs	r3, r3, #1
 80082f6:	f100 0001 	add.w	r0, r0, #1
 80082fa:	d003      	beq.n	8008304 <__lo0bits+0x56>
 80082fc:	6013      	str	r3, [r2, #0]
 80082fe:	4770      	bx	lr
 8008300:	2000      	movs	r0, #0
 8008302:	4770      	bx	lr
 8008304:	2020      	movs	r0, #32
 8008306:	4770      	bx	lr

08008308 <__i2b>:
 8008308:	b510      	push	{r4, lr}
 800830a:	460c      	mov	r4, r1
 800830c:	2101      	movs	r1, #1
 800830e:	f7ff ff07 	bl	8008120 <_Balloc>
 8008312:	4602      	mov	r2, r0
 8008314:	b928      	cbnz	r0, 8008322 <__i2b+0x1a>
 8008316:	4b05      	ldr	r3, [pc, #20]	@ (800832c <__i2b+0x24>)
 8008318:	4805      	ldr	r0, [pc, #20]	@ (8008330 <__i2b+0x28>)
 800831a:	f240 1145 	movw	r1, #325	@ 0x145
 800831e:	f000 fcbd 	bl	8008c9c <__assert_func>
 8008322:	2301      	movs	r3, #1
 8008324:	6144      	str	r4, [r0, #20]
 8008326:	6103      	str	r3, [r0, #16]
 8008328:	bd10      	pop	{r4, pc}
 800832a:	bf00      	nop
 800832c:	08009438 	.word	0x08009438
 8008330:	08009449 	.word	0x08009449

08008334 <__multiply>:
 8008334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008338:	4614      	mov	r4, r2
 800833a:	690a      	ldr	r2, [r1, #16]
 800833c:	6923      	ldr	r3, [r4, #16]
 800833e:	429a      	cmp	r2, r3
 8008340:	bfa8      	it	ge
 8008342:	4623      	movge	r3, r4
 8008344:	460f      	mov	r7, r1
 8008346:	bfa4      	itt	ge
 8008348:	460c      	movge	r4, r1
 800834a:	461f      	movge	r7, r3
 800834c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008350:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008354:	68a3      	ldr	r3, [r4, #8]
 8008356:	6861      	ldr	r1, [r4, #4]
 8008358:	eb0a 0609 	add.w	r6, sl, r9
 800835c:	42b3      	cmp	r3, r6
 800835e:	b085      	sub	sp, #20
 8008360:	bfb8      	it	lt
 8008362:	3101      	addlt	r1, #1
 8008364:	f7ff fedc 	bl	8008120 <_Balloc>
 8008368:	b930      	cbnz	r0, 8008378 <__multiply+0x44>
 800836a:	4602      	mov	r2, r0
 800836c:	4b44      	ldr	r3, [pc, #272]	@ (8008480 <__multiply+0x14c>)
 800836e:	4845      	ldr	r0, [pc, #276]	@ (8008484 <__multiply+0x150>)
 8008370:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008374:	f000 fc92 	bl	8008c9c <__assert_func>
 8008378:	f100 0514 	add.w	r5, r0, #20
 800837c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008380:	462b      	mov	r3, r5
 8008382:	2200      	movs	r2, #0
 8008384:	4543      	cmp	r3, r8
 8008386:	d321      	bcc.n	80083cc <__multiply+0x98>
 8008388:	f107 0114 	add.w	r1, r7, #20
 800838c:	f104 0214 	add.w	r2, r4, #20
 8008390:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008394:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008398:	9302      	str	r3, [sp, #8]
 800839a:	1b13      	subs	r3, r2, r4
 800839c:	3b15      	subs	r3, #21
 800839e:	f023 0303 	bic.w	r3, r3, #3
 80083a2:	3304      	adds	r3, #4
 80083a4:	f104 0715 	add.w	r7, r4, #21
 80083a8:	42ba      	cmp	r2, r7
 80083aa:	bf38      	it	cc
 80083ac:	2304      	movcc	r3, #4
 80083ae:	9301      	str	r3, [sp, #4]
 80083b0:	9b02      	ldr	r3, [sp, #8]
 80083b2:	9103      	str	r1, [sp, #12]
 80083b4:	428b      	cmp	r3, r1
 80083b6:	d80c      	bhi.n	80083d2 <__multiply+0x9e>
 80083b8:	2e00      	cmp	r6, #0
 80083ba:	dd03      	ble.n	80083c4 <__multiply+0x90>
 80083bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d05b      	beq.n	800847c <__multiply+0x148>
 80083c4:	6106      	str	r6, [r0, #16]
 80083c6:	b005      	add	sp, #20
 80083c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083cc:	f843 2b04 	str.w	r2, [r3], #4
 80083d0:	e7d8      	b.n	8008384 <__multiply+0x50>
 80083d2:	f8b1 a000 	ldrh.w	sl, [r1]
 80083d6:	f1ba 0f00 	cmp.w	sl, #0
 80083da:	d024      	beq.n	8008426 <__multiply+0xf2>
 80083dc:	f104 0e14 	add.w	lr, r4, #20
 80083e0:	46a9      	mov	r9, r5
 80083e2:	f04f 0c00 	mov.w	ip, #0
 80083e6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80083ea:	f8d9 3000 	ldr.w	r3, [r9]
 80083ee:	fa1f fb87 	uxth.w	fp, r7
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	fb0a 330b 	mla	r3, sl, fp, r3
 80083f8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80083fc:	f8d9 7000 	ldr.w	r7, [r9]
 8008400:	4463      	add	r3, ip
 8008402:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008406:	fb0a c70b 	mla	r7, sl, fp, ip
 800840a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800840e:	b29b      	uxth	r3, r3
 8008410:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008414:	4572      	cmp	r2, lr
 8008416:	f849 3b04 	str.w	r3, [r9], #4
 800841a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800841e:	d8e2      	bhi.n	80083e6 <__multiply+0xb2>
 8008420:	9b01      	ldr	r3, [sp, #4]
 8008422:	f845 c003 	str.w	ip, [r5, r3]
 8008426:	9b03      	ldr	r3, [sp, #12]
 8008428:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800842c:	3104      	adds	r1, #4
 800842e:	f1b9 0f00 	cmp.w	r9, #0
 8008432:	d021      	beq.n	8008478 <__multiply+0x144>
 8008434:	682b      	ldr	r3, [r5, #0]
 8008436:	f104 0c14 	add.w	ip, r4, #20
 800843a:	46ae      	mov	lr, r5
 800843c:	f04f 0a00 	mov.w	sl, #0
 8008440:	f8bc b000 	ldrh.w	fp, [ip]
 8008444:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008448:	fb09 770b 	mla	r7, r9, fp, r7
 800844c:	4457      	add	r7, sl
 800844e:	b29b      	uxth	r3, r3
 8008450:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008454:	f84e 3b04 	str.w	r3, [lr], #4
 8008458:	f85c 3b04 	ldr.w	r3, [ip], #4
 800845c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008460:	f8be 3000 	ldrh.w	r3, [lr]
 8008464:	fb09 330a 	mla	r3, r9, sl, r3
 8008468:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800846c:	4562      	cmp	r2, ip
 800846e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008472:	d8e5      	bhi.n	8008440 <__multiply+0x10c>
 8008474:	9f01      	ldr	r7, [sp, #4]
 8008476:	51eb      	str	r3, [r5, r7]
 8008478:	3504      	adds	r5, #4
 800847a:	e799      	b.n	80083b0 <__multiply+0x7c>
 800847c:	3e01      	subs	r6, #1
 800847e:	e79b      	b.n	80083b8 <__multiply+0x84>
 8008480:	08009438 	.word	0x08009438
 8008484:	08009449 	.word	0x08009449

08008488 <__pow5mult>:
 8008488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800848c:	4615      	mov	r5, r2
 800848e:	f012 0203 	ands.w	r2, r2, #3
 8008492:	4607      	mov	r7, r0
 8008494:	460e      	mov	r6, r1
 8008496:	d007      	beq.n	80084a8 <__pow5mult+0x20>
 8008498:	4c25      	ldr	r4, [pc, #148]	@ (8008530 <__pow5mult+0xa8>)
 800849a:	3a01      	subs	r2, #1
 800849c:	2300      	movs	r3, #0
 800849e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80084a2:	f7ff fe9f 	bl	80081e4 <__multadd>
 80084a6:	4606      	mov	r6, r0
 80084a8:	10ad      	asrs	r5, r5, #2
 80084aa:	d03d      	beq.n	8008528 <__pow5mult+0xa0>
 80084ac:	69fc      	ldr	r4, [r7, #28]
 80084ae:	b97c      	cbnz	r4, 80084d0 <__pow5mult+0x48>
 80084b0:	2010      	movs	r0, #16
 80084b2:	f7ff fd7f 	bl	8007fb4 <malloc>
 80084b6:	4602      	mov	r2, r0
 80084b8:	61f8      	str	r0, [r7, #28]
 80084ba:	b928      	cbnz	r0, 80084c8 <__pow5mult+0x40>
 80084bc:	4b1d      	ldr	r3, [pc, #116]	@ (8008534 <__pow5mult+0xac>)
 80084be:	481e      	ldr	r0, [pc, #120]	@ (8008538 <__pow5mult+0xb0>)
 80084c0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80084c4:	f000 fbea 	bl	8008c9c <__assert_func>
 80084c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80084cc:	6004      	str	r4, [r0, #0]
 80084ce:	60c4      	str	r4, [r0, #12]
 80084d0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80084d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80084d8:	b94c      	cbnz	r4, 80084ee <__pow5mult+0x66>
 80084da:	f240 2171 	movw	r1, #625	@ 0x271
 80084de:	4638      	mov	r0, r7
 80084e0:	f7ff ff12 	bl	8008308 <__i2b>
 80084e4:	2300      	movs	r3, #0
 80084e6:	f8c8 0008 	str.w	r0, [r8, #8]
 80084ea:	4604      	mov	r4, r0
 80084ec:	6003      	str	r3, [r0, #0]
 80084ee:	f04f 0900 	mov.w	r9, #0
 80084f2:	07eb      	lsls	r3, r5, #31
 80084f4:	d50a      	bpl.n	800850c <__pow5mult+0x84>
 80084f6:	4631      	mov	r1, r6
 80084f8:	4622      	mov	r2, r4
 80084fa:	4638      	mov	r0, r7
 80084fc:	f7ff ff1a 	bl	8008334 <__multiply>
 8008500:	4631      	mov	r1, r6
 8008502:	4680      	mov	r8, r0
 8008504:	4638      	mov	r0, r7
 8008506:	f7ff fe4b 	bl	80081a0 <_Bfree>
 800850a:	4646      	mov	r6, r8
 800850c:	106d      	asrs	r5, r5, #1
 800850e:	d00b      	beq.n	8008528 <__pow5mult+0xa0>
 8008510:	6820      	ldr	r0, [r4, #0]
 8008512:	b938      	cbnz	r0, 8008524 <__pow5mult+0x9c>
 8008514:	4622      	mov	r2, r4
 8008516:	4621      	mov	r1, r4
 8008518:	4638      	mov	r0, r7
 800851a:	f7ff ff0b 	bl	8008334 <__multiply>
 800851e:	6020      	str	r0, [r4, #0]
 8008520:	f8c0 9000 	str.w	r9, [r0]
 8008524:	4604      	mov	r4, r0
 8008526:	e7e4      	b.n	80084f2 <__pow5mult+0x6a>
 8008528:	4630      	mov	r0, r6
 800852a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800852e:	bf00      	nop
 8008530:	080094a4 	.word	0x080094a4
 8008534:	080093c9 	.word	0x080093c9
 8008538:	08009449 	.word	0x08009449

0800853c <__lshift>:
 800853c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008540:	460c      	mov	r4, r1
 8008542:	6849      	ldr	r1, [r1, #4]
 8008544:	6923      	ldr	r3, [r4, #16]
 8008546:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800854a:	68a3      	ldr	r3, [r4, #8]
 800854c:	4607      	mov	r7, r0
 800854e:	4691      	mov	r9, r2
 8008550:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008554:	f108 0601 	add.w	r6, r8, #1
 8008558:	42b3      	cmp	r3, r6
 800855a:	db0b      	blt.n	8008574 <__lshift+0x38>
 800855c:	4638      	mov	r0, r7
 800855e:	f7ff fddf 	bl	8008120 <_Balloc>
 8008562:	4605      	mov	r5, r0
 8008564:	b948      	cbnz	r0, 800857a <__lshift+0x3e>
 8008566:	4602      	mov	r2, r0
 8008568:	4b28      	ldr	r3, [pc, #160]	@ (800860c <__lshift+0xd0>)
 800856a:	4829      	ldr	r0, [pc, #164]	@ (8008610 <__lshift+0xd4>)
 800856c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008570:	f000 fb94 	bl	8008c9c <__assert_func>
 8008574:	3101      	adds	r1, #1
 8008576:	005b      	lsls	r3, r3, #1
 8008578:	e7ee      	b.n	8008558 <__lshift+0x1c>
 800857a:	2300      	movs	r3, #0
 800857c:	f100 0114 	add.w	r1, r0, #20
 8008580:	f100 0210 	add.w	r2, r0, #16
 8008584:	4618      	mov	r0, r3
 8008586:	4553      	cmp	r3, sl
 8008588:	db33      	blt.n	80085f2 <__lshift+0xb6>
 800858a:	6920      	ldr	r0, [r4, #16]
 800858c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008590:	f104 0314 	add.w	r3, r4, #20
 8008594:	f019 091f 	ands.w	r9, r9, #31
 8008598:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800859c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80085a0:	d02b      	beq.n	80085fa <__lshift+0xbe>
 80085a2:	f1c9 0e20 	rsb	lr, r9, #32
 80085a6:	468a      	mov	sl, r1
 80085a8:	2200      	movs	r2, #0
 80085aa:	6818      	ldr	r0, [r3, #0]
 80085ac:	fa00 f009 	lsl.w	r0, r0, r9
 80085b0:	4310      	orrs	r0, r2
 80085b2:	f84a 0b04 	str.w	r0, [sl], #4
 80085b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80085ba:	459c      	cmp	ip, r3
 80085bc:	fa22 f20e 	lsr.w	r2, r2, lr
 80085c0:	d8f3      	bhi.n	80085aa <__lshift+0x6e>
 80085c2:	ebac 0304 	sub.w	r3, ip, r4
 80085c6:	3b15      	subs	r3, #21
 80085c8:	f023 0303 	bic.w	r3, r3, #3
 80085cc:	3304      	adds	r3, #4
 80085ce:	f104 0015 	add.w	r0, r4, #21
 80085d2:	4584      	cmp	ip, r0
 80085d4:	bf38      	it	cc
 80085d6:	2304      	movcc	r3, #4
 80085d8:	50ca      	str	r2, [r1, r3]
 80085da:	b10a      	cbz	r2, 80085e0 <__lshift+0xa4>
 80085dc:	f108 0602 	add.w	r6, r8, #2
 80085e0:	3e01      	subs	r6, #1
 80085e2:	4638      	mov	r0, r7
 80085e4:	612e      	str	r6, [r5, #16]
 80085e6:	4621      	mov	r1, r4
 80085e8:	f7ff fdda 	bl	80081a0 <_Bfree>
 80085ec:	4628      	mov	r0, r5
 80085ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085f2:	f842 0f04 	str.w	r0, [r2, #4]!
 80085f6:	3301      	adds	r3, #1
 80085f8:	e7c5      	b.n	8008586 <__lshift+0x4a>
 80085fa:	3904      	subs	r1, #4
 80085fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008600:	f841 2f04 	str.w	r2, [r1, #4]!
 8008604:	459c      	cmp	ip, r3
 8008606:	d8f9      	bhi.n	80085fc <__lshift+0xc0>
 8008608:	e7ea      	b.n	80085e0 <__lshift+0xa4>
 800860a:	bf00      	nop
 800860c:	08009438 	.word	0x08009438
 8008610:	08009449 	.word	0x08009449

08008614 <__mcmp>:
 8008614:	690a      	ldr	r2, [r1, #16]
 8008616:	4603      	mov	r3, r0
 8008618:	6900      	ldr	r0, [r0, #16]
 800861a:	1a80      	subs	r0, r0, r2
 800861c:	b530      	push	{r4, r5, lr}
 800861e:	d10e      	bne.n	800863e <__mcmp+0x2a>
 8008620:	3314      	adds	r3, #20
 8008622:	3114      	adds	r1, #20
 8008624:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008628:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800862c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008630:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008634:	4295      	cmp	r5, r2
 8008636:	d003      	beq.n	8008640 <__mcmp+0x2c>
 8008638:	d205      	bcs.n	8008646 <__mcmp+0x32>
 800863a:	f04f 30ff 	mov.w	r0, #4294967295
 800863e:	bd30      	pop	{r4, r5, pc}
 8008640:	42a3      	cmp	r3, r4
 8008642:	d3f3      	bcc.n	800862c <__mcmp+0x18>
 8008644:	e7fb      	b.n	800863e <__mcmp+0x2a>
 8008646:	2001      	movs	r0, #1
 8008648:	e7f9      	b.n	800863e <__mcmp+0x2a>
	...

0800864c <__mdiff>:
 800864c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008650:	4689      	mov	r9, r1
 8008652:	4606      	mov	r6, r0
 8008654:	4611      	mov	r1, r2
 8008656:	4648      	mov	r0, r9
 8008658:	4614      	mov	r4, r2
 800865a:	f7ff ffdb 	bl	8008614 <__mcmp>
 800865e:	1e05      	subs	r5, r0, #0
 8008660:	d112      	bne.n	8008688 <__mdiff+0x3c>
 8008662:	4629      	mov	r1, r5
 8008664:	4630      	mov	r0, r6
 8008666:	f7ff fd5b 	bl	8008120 <_Balloc>
 800866a:	4602      	mov	r2, r0
 800866c:	b928      	cbnz	r0, 800867a <__mdiff+0x2e>
 800866e:	4b3f      	ldr	r3, [pc, #252]	@ (800876c <__mdiff+0x120>)
 8008670:	f240 2137 	movw	r1, #567	@ 0x237
 8008674:	483e      	ldr	r0, [pc, #248]	@ (8008770 <__mdiff+0x124>)
 8008676:	f000 fb11 	bl	8008c9c <__assert_func>
 800867a:	2301      	movs	r3, #1
 800867c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008680:	4610      	mov	r0, r2
 8008682:	b003      	add	sp, #12
 8008684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008688:	bfbc      	itt	lt
 800868a:	464b      	movlt	r3, r9
 800868c:	46a1      	movlt	r9, r4
 800868e:	4630      	mov	r0, r6
 8008690:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008694:	bfba      	itte	lt
 8008696:	461c      	movlt	r4, r3
 8008698:	2501      	movlt	r5, #1
 800869a:	2500      	movge	r5, #0
 800869c:	f7ff fd40 	bl	8008120 <_Balloc>
 80086a0:	4602      	mov	r2, r0
 80086a2:	b918      	cbnz	r0, 80086ac <__mdiff+0x60>
 80086a4:	4b31      	ldr	r3, [pc, #196]	@ (800876c <__mdiff+0x120>)
 80086a6:	f240 2145 	movw	r1, #581	@ 0x245
 80086aa:	e7e3      	b.n	8008674 <__mdiff+0x28>
 80086ac:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80086b0:	6926      	ldr	r6, [r4, #16]
 80086b2:	60c5      	str	r5, [r0, #12]
 80086b4:	f109 0310 	add.w	r3, r9, #16
 80086b8:	f109 0514 	add.w	r5, r9, #20
 80086bc:	f104 0e14 	add.w	lr, r4, #20
 80086c0:	f100 0b14 	add.w	fp, r0, #20
 80086c4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80086c8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80086cc:	9301      	str	r3, [sp, #4]
 80086ce:	46d9      	mov	r9, fp
 80086d0:	f04f 0c00 	mov.w	ip, #0
 80086d4:	9b01      	ldr	r3, [sp, #4]
 80086d6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80086da:	f853 af04 	ldr.w	sl, [r3, #4]!
 80086de:	9301      	str	r3, [sp, #4]
 80086e0:	fa1f f38a 	uxth.w	r3, sl
 80086e4:	4619      	mov	r1, r3
 80086e6:	b283      	uxth	r3, r0
 80086e8:	1acb      	subs	r3, r1, r3
 80086ea:	0c00      	lsrs	r0, r0, #16
 80086ec:	4463      	add	r3, ip
 80086ee:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80086f2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80086fc:	4576      	cmp	r6, lr
 80086fe:	f849 3b04 	str.w	r3, [r9], #4
 8008702:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008706:	d8e5      	bhi.n	80086d4 <__mdiff+0x88>
 8008708:	1b33      	subs	r3, r6, r4
 800870a:	3b15      	subs	r3, #21
 800870c:	f023 0303 	bic.w	r3, r3, #3
 8008710:	3415      	adds	r4, #21
 8008712:	3304      	adds	r3, #4
 8008714:	42a6      	cmp	r6, r4
 8008716:	bf38      	it	cc
 8008718:	2304      	movcc	r3, #4
 800871a:	441d      	add	r5, r3
 800871c:	445b      	add	r3, fp
 800871e:	461e      	mov	r6, r3
 8008720:	462c      	mov	r4, r5
 8008722:	4544      	cmp	r4, r8
 8008724:	d30e      	bcc.n	8008744 <__mdiff+0xf8>
 8008726:	f108 0103 	add.w	r1, r8, #3
 800872a:	1b49      	subs	r1, r1, r5
 800872c:	f021 0103 	bic.w	r1, r1, #3
 8008730:	3d03      	subs	r5, #3
 8008732:	45a8      	cmp	r8, r5
 8008734:	bf38      	it	cc
 8008736:	2100      	movcc	r1, #0
 8008738:	440b      	add	r3, r1
 800873a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800873e:	b191      	cbz	r1, 8008766 <__mdiff+0x11a>
 8008740:	6117      	str	r7, [r2, #16]
 8008742:	e79d      	b.n	8008680 <__mdiff+0x34>
 8008744:	f854 1b04 	ldr.w	r1, [r4], #4
 8008748:	46e6      	mov	lr, ip
 800874a:	0c08      	lsrs	r0, r1, #16
 800874c:	fa1c fc81 	uxtah	ip, ip, r1
 8008750:	4471      	add	r1, lr
 8008752:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008756:	b289      	uxth	r1, r1
 8008758:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800875c:	f846 1b04 	str.w	r1, [r6], #4
 8008760:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008764:	e7dd      	b.n	8008722 <__mdiff+0xd6>
 8008766:	3f01      	subs	r7, #1
 8008768:	e7e7      	b.n	800873a <__mdiff+0xee>
 800876a:	bf00      	nop
 800876c:	08009438 	.word	0x08009438
 8008770:	08009449 	.word	0x08009449

08008774 <__d2b>:
 8008774:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008778:	460f      	mov	r7, r1
 800877a:	2101      	movs	r1, #1
 800877c:	ec59 8b10 	vmov	r8, r9, d0
 8008780:	4616      	mov	r6, r2
 8008782:	f7ff fccd 	bl	8008120 <_Balloc>
 8008786:	4604      	mov	r4, r0
 8008788:	b930      	cbnz	r0, 8008798 <__d2b+0x24>
 800878a:	4602      	mov	r2, r0
 800878c:	4b23      	ldr	r3, [pc, #140]	@ (800881c <__d2b+0xa8>)
 800878e:	4824      	ldr	r0, [pc, #144]	@ (8008820 <__d2b+0xac>)
 8008790:	f240 310f 	movw	r1, #783	@ 0x30f
 8008794:	f000 fa82 	bl	8008c9c <__assert_func>
 8008798:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800879c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80087a0:	b10d      	cbz	r5, 80087a6 <__d2b+0x32>
 80087a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80087a6:	9301      	str	r3, [sp, #4]
 80087a8:	f1b8 0300 	subs.w	r3, r8, #0
 80087ac:	d023      	beq.n	80087f6 <__d2b+0x82>
 80087ae:	4668      	mov	r0, sp
 80087b0:	9300      	str	r3, [sp, #0]
 80087b2:	f7ff fd7c 	bl	80082ae <__lo0bits>
 80087b6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80087ba:	b1d0      	cbz	r0, 80087f2 <__d2b+0x7e>
 80087bc:	f1c0 0320 	rsb	r3, r0, #32
 80087c0:	fa02 f303 	lsl.w	r3, r2, r3
 80087c4:	430b      	orrs	r3, r1
 80087c6:	40c2      	lsrs	r2, r0
 80087c8:	6163      	str	r3, [r4, #20]
 80087ca:	9201      	str	r2, [sp, #4]
 80087cc:	9b01      	ldr	r3, [sp, #4]
 80087ce:	61a3      	str	r3, [r4, #24]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	bf0c      	ite	eq
 80087d4:	2201      	moveq	r2, #1
 80087d6:	2202      	movne	r2, #2
 80087d8:	6122      	str	r2, [r4, #16]
 80087da:	b1a5      	cbz	r5, 8008806 <__d2b+0x92>
 80087dc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80087e0:	4405      	add	r5, r0
 80087e2:	603d      	str	r5, [r7, #0]
 80087e4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80087e8:	6030      	str	r0, [r6, #0]
 80087ea:	4620      	mov	r0, r4
 80087ec:	b003      	add	sp, #12
 80087ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80087f2:	6161      	str	r1, [r4, #20]
 80087f4:	e7ea      	b.n	80087cc <__d2b+0x58>
 80087f6:	a801      	add	r0, sp, #4
 80087f8:	f7ff fd59 	bl	80082ae <__lo0bits>
 80087fc:	9b01      	ldr	r3, [sp, #4]
 80087fe:	6163      	str	r3, [r4, #20]
 8008800:	3020      	adds	r0, #32
 8008802:	2201      	movs	r2, #1
 8008804:	e7e8      	b.n	80087d8 <__d2b+0x64>
 8008806:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800880a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800880e:	6038      	str	r0, [r7, #0]
 8008810:	6918      	ldr	r0, [r3, #16]
 8008812:	f7ff fd2d 	bl	8008270 <__hi0bits>
 8008816:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800881a:	e7e5      	b.n	80087e8 <__d2b+0x74>
 800881c:	08009438 	.word	0x08009438
 8008820:	08009449 	.word	0x08009449

08008824 <__ssputs_r>:
 8008824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008828:	688e      	ldr	r6, [r1, #8]
 800882a:	461f      	mov	r7, r3
 800882c:	42be      	cmp	r6, r7
 800882e:	680b      	ldr	r3, [r1, #0]
 8008830:	4682      	mov	sl, r0
 8008832:	460c      	mov	r4, r1
 8008834:	4690      	mov	r8, r2
 8008836:	d82d      	bhi.n	8008894 <__ssputs_r+0x70>
 8008838:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800883c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008840:	d026      	beq.n	8008890 <__ssputs_r+0x6c>
 8008842:	6965      	ldr	r5, [r4, #20]
 8008844:	6909      	ldr	r1, [r1, #16]
 8008846:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800884a:	eba3 0901 	sub.w	r9, r3, r1
 800884e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008852:	1c7b      	adds	r3, r7, #1
 8008854:	444b      	add	r3, r9
 8008856:	106d      	asrs	r5, r5, #1
 8008858:	429d      	cmp	r5, r3
 800885a:	bf38      	it	cc
 800885c:	461d      	movcc	r5, r3
 800885e:	0553      	lsls	r3, r2, #21
 8008860:	d527      	bpl.n	80088b2 <__ssputs_r+0x8e>
 8008862:	4629      	mov	r1, r5
 8008864:	f7ff fbd0 	bl	8008008 <_malloc_r>
 8008868:	4606      	mov	r6, r0
 800886a:	b360      	cbz	r0, 80088c6 <__ssputs_r+0xa2>
 800886c:	6921      	ldr	r1, [r4, #16]
 800886e:	464a      	mov	r2, r9
 8008870:	f000 fa06 	bl	8008c80 <memcpy>
 8008874:	89a3      	ldrh	r3, [r4, #12]
 8008876:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800887a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800887e:	81a3      	strh	r3, [r4, #12]
 8008880:	6126      	str	r6, [r4, #16]
 8008882:	6165      	str	r5, [r4, #20]
 8008884:	444e      	add	r6, r9
 8008886:	eba5 0509 	sub.w	r5, r5, r9
 800888a:	6026      	str	r6, [r4, #0]
 800888c:	60a5      	str	r5, [r4, #8]
 800888e:	463e      	mov	r6, r7
 8008890:	42be      	cmp	r6, r7
 8008892:	d900      	bls.n	8008896 <__ssputs_r+0x72>
 8008894:	463e      	mov	r6, r7
 8008896:	6820      	ldr	r0, [r4, #0]
 8008898:	4632      	mov	r2, r6
 800889a:	4641      	mov	r1, r8
 800889c:	f000 f9c6 	bl	8008c2c <memmove>
 80088a0:	68a3      	ldr	r3, [r4, #8]
 80088a2:	1b9b      	subs	r3, r3, r6
 80088a4:	60a3      	str	r3, [r4, #8]
 80088a6:	6823      	ldr	r3, [r4, #0]
 80088a8:	4433      	add	r3, r6
 80088aa:	6023      	str	r3, [r4, #0]
 80088ac:	2000      	movs	r0, #0
 80088ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088b2:	462a      	mov	r2, r5
 80088b4:	f000 fa36 	bl	8008d24 <_realloc_r>
 80088b8:	4606      	mov	r6, r0
 80088ba:	2800      	cmp	r0, #0
 80088bc:	d1e0      	bne.n	8008880 <__ssputs_r+0x5c>
 80088be:	6921      	ldr	r1, [r4, #16]
 80088c0:	4650      	mov	r0, sl
 80088c2:	f7ff fb2d 	bl	8007f20 <_free_r>
 80088c6:	230c      	movs	r3, #12
 80088c8:	f8ca 3000 	str.w	r3, [sl]
 80088cc:	89a3      	ldrh	r3, [r4, #12]
 80088ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088d2:	81a3      	strh	r3, [r4, #12]
 80088d4:	f04f 30ff 	mov.w	r0, #4294967295
 80088d8:	e7e9      	b.n	80088ae <__ssputs_r+0x8a>
	...

080088dc <_svfiprintf_r>:
 80088dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088e0:	4698      	mov	r8, r3
 80088e2:	898b      	ldrh	r3, [r1, #12]
 80088e4:	061b      	lsls	r3, r3, #24
 80088e6:	b09d      	sub	sp, #116	@ 0x74
 80088e8:	4607      	mov	r7, r0
 80088ea:	460d      	mov	r5, r1
 80088ec:	4614      	mov	r4, r2
 80088ee:	d510      	bpl.n	8008912 <_svfiprintf_r+0x36>
 80088f0:	690b      	ldr	r3, [r1, #16]
 80088f2:	b973      	cbnz	r3, 8008912 <_svfiprintf_r+0x36>
 80088f4:	2140      	movs	r1, #64	@ 0x40
 80088f6:	f7ff fb87 	bl	8008008 <_malloc_r>
 80088fa:	6028      	str	r0, [r5, #0]
 80088fc:	6128      	str	r0, [r5, #16]
 80088fe:	b930      	cbnz	r0, 800890e <_svfiprintf_r+0x32>
 8008900:	230c      	movs	r3, #12
 8008902:	603b      	str	r3, [r7, #0]
 8008904:	f04f 30ff 	mov.w	r0, #4294967295
 8008908:	b01d      	add	sp, #116	@ 0x74
 800890a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800890e:	2340      	movs	r3, #64	@ 0x40
 8008910:	616b      	str	r3, [r5, #20]
 8008912:	2300      	movs	r3, #0
 8008914:	9309      	str	r3, [sp, #36]	@ 0x24
 8008916:	2320      	movs	r3, #32
 8008918:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800891c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008920:	2330      	movs	r3, #48	@ 0x30
 8008922:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008ac0 <_svfiprintf_r+0x1e4>
 8008926:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800892a:	f04f 0901 	mov.w	r9, #1
 800892e:	4623      	mov	r3, r4
 8008930:	469a      	mov	sl, r3
 8008932:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008936:	b10a      	cbz	r2, 800893c <_svfiprintf_r+0x60>
 8008938:	2a25      	cmp	r2, #37	@ 0x25
 800893a:	d1f9      	bne.n	8008930 <_svfiprintf_r+0x54>
 800893c:	ebba 0b04 	subs.w	fp, sl, r4
 8008940:	d00b      	beq.n	800895a <_svfiprintf_r+0x7e>
 8008942:	465b      	mov	r3, fp
 8008944:	4622      	mov	r2, r4
 8008946:	4629      	mov	r1, r5
 8008948:	4638      	mov	r0, r7
 800894a:	f7ff ff6b 	bl	8008824 <__ssputs_r>
 800894e:	3001      	adds	r0, #1
 8008950:	f000 80a7 	beq.w	8008aa2 <_svfiprintf_r+0x1c6>
 8008954:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008956:	445a      	add	r2, fp
 8008958:	9209      	str	r2, [sp, #36]	@ 0x24
 800895a:	f89a 3000 	ldrb.w	r3, [sl]
 800895e:	2b00      	cmp	r3, #0
 8008960:	f000 809f 	beq.w	8008aa2 <_svfiprintf_r+0x1c6>
 8008964:	2300      	movs	r3, #0
 8008966:	f04f 32ff 	mov.w	r2, #4294967295
 800896a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800896e:	f10a 0a01 	add.w	sl, sl, #1
 8008972:	9304      	str	r3, [sp, #16]
 8008974:	9307      	str	r3, [sp, #28]
 8008976:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800897a:	931a      	str	r3, [sp, #104]	@ 0x68
 800897c:	4654      	mov	r4, sl
 800897e:	2205      	movs	r2, #5
 8008980:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008984:	484e      	ldr	r0, [pc, #312]	@ (8008ac0 <_svfiprintf_r+0x1e4>)
 8008986:	f7f7 fc23 	bl	80001d0 <memchr>
 800898a:	9a04      	ldr	r2, [sp, #16]
 800898c:	b9d8      	cbnz	r0, 80089c6 <_svfiprintf_r+0xea>
 800898e:	06d0      	lsls	r0, r2, #27
 8008990:	bf44      	itt	mi
 8008992:	2320      	movmi	r3, #32
 8008994:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008998:	0711      	lsls	r1, r2, #28
 800899a:	bf44      	itt	mi
 800899c:	232b      	movmi	r3, #43	@ 0x2b
 800899e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089a2:	f89a 3000 	ldrb.w	r3, [sl]
 80089a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80089a8:	d015      	beq.n	80089d6 <_svfiprintf_r+0xfa>
 80089aa:	9a07      	ldr	r2, [sp, #28]
 80089ac:	4654      	mov	r4, sl
 80089ae:	2000      	movs	r0, #0
 80089b0:	f04f 0c0a 	mov.w	ip, #10
 80089b4:	4621      	mov	r1, r4
 80089b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089ba:	3b30      	subs	r3, #48	@ 0x30
 80089bc:	2b09      	cmp	r3, #9
 80089be:	d94b      	bls.n	8008a58 <_svfiprintf_r+0x17c>
 80089c0:	b1b0      	cbz	r0, 80089f0 <_svfiprintf_r+0x114>
 80089c2:	9207      	str	r2, [sp, #28]
 80089c4:	e014      	b.n	80089f0 <_svfiprintf_r+0x114>
 80089c6:	eba0 0308 	sub.w	r3, r0, r8
 80089ca:	fa09 f303 	lsl.w	r3, r9, r3
 80089ce:	4313      	orrs	r3, r2
 80089d0:	9304      	str	r3, [sp, #16]
 80089d2:	46a2      	mov	sl, r4
 80089d4:	e7d2      	b.n	800897c <_svfiprintf_r+0xa0>
 80089d6:	9b03      	ldr	r3, [sp, #12]
 80089d8:	1d19      	adds	r1, r3, #4
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	9103      	str	r1, [sp, #12]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	bfbb      	ittet	lt
 80089e2:	425b      	neglt	r3, r3
 80089e4:	f042 0202 	orrlt.w	r2, r2, #2
 80089e8:	9307      	strge	r3, [sp, #28]
 80089ea:	9307      	strlt	r3, [sp, #28]
 80089ec:	bfb8      	it	lt
 80089ee:	9204      	strlt	r2, [sp, #16]
 80089f0:	7823      	ldrb	r3, [r4, #0]
 80089f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80089f4:	d10a      	bne.n	8008a0c <_svfiprintf_r+0x130>
 80089f6:	7863      	ldrb	r3, [r4, #1]
 80089f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80089fa:	d132      	bne.n	8008a62 <_svfiprintf_r+0x186>
 80089fc:	9b03      	ldr	r3, [sp, #12]
 80089fe:	1d1a      	adds	r2, r3, #4
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	9203      	str	r2, [sp, #12]
 8008a04:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008a08:	3402      	adds	r4, #2
 8008a0a:	9305      	str	r3, [sp, #20]
 8008a0c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008ad0 <_svfiprintf_r+0x1f4>
 8008a10:	7821      	ldrb	r1, [r4, #0]
 8008a12:	2203      	movs	r2, #3
 8008a14:	4650      	mov	r0, sl
 8008a16:	f7f7 fbdb 	bl	80001d0 <memchr>
 8008a1a:	b138      	cbz	r0, 8008a2c <_svfiprintf_r+0x150>
 8008a1c:	9b04      	ldr	r3, [sp, #16]
 8008a1e:	eba0 000a 	sub.w	r0, r0, sl
 8008a22:	2240      	movs	r2, #64	@ 0x40
 8008a24:	4082      	lsls	r2, r0
 8008a26:	4313      	orrs	r3, r2
 8008a28:	3401      	adds	r4, #1
 8008a2a:	9304      	str	r3, [sp, #16]
 8008a2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a30:	4824      	ldr	r0, [pc, #144]	@ (8008ac4 <_svfiprintf_r+0x1e8>)
 8008a32:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008a36:	2206      	movs	r2, #6
 8008a38:	f7f7 fbca 	bl	80001d0 <memchr>
 8008a3c:	2800      	cmp	r0, #0
 8008a3e:	d036      	beq.n	8008aae <_svfiprintf_r+0x1d2>
 8008a40:	4b21      	ldr	r3, [pc, #132]	@ (8008ac8 <_svfiprintf_r+0x1ec>)
 8008a42:	bb1b      	cbnz	r3, 8008a8c <_svfiprintf_r+0x1b0>
 8008a44:	9b03      	ldr	r3, [sp, #12]
 8008a46:	3307      	adds	r3, #7
 8008a48:	f023 0307 	bic.w	r3, r3, #7
 8008a4c:	3308      	adds	r3, #8
 8008a4e:	9303      	str	r3, [sp, #12]
 8008a50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a52:	4433      	add	r3, r6
 8008a54:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a56:	e76a      	b.n	800892e <_svfiprintf_r+0x52>
 8008a58:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a5c:	460c      	mov	r4, r1
 8008a5e:	2001      	movs	r0, #1
 8008a60:	e7a8      	b.n	80089b4 <_svfiprintf_r+0xd8>
 8008a62:	2300      	movs	r3, #0
 8008a64:	3401      	adds	r4, #1
 8008a66:	9305      	str	r3, [sp, #20]
 8008a68:	4619      	mov	r1, r3
 8008a6a:	f04f 0c0a 	mov.w	ip, #10
 8008a6e:	4620      	mov	r0, r4
 8008a70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a74:	3a30      	subs	r2, #48	@ 0x30
 8008a76:	2a09      	cmp	r2, #9
 8008a78:	d903      	bls.n	8008a82 <_svfiprintf_r+0x1a6>
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d0c6      	beq.n	8008a0c <_svfiprintf_r+0x130>
 8008a7e:	9105      	str	r1, [sp, #20]
 8008a80:	e7c4      	b.n	8008a0c <_svfiprintf_r+0x130>
 8008a82:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a86:	4604      	mov	r4, r0
 8008a88:	2301      	movs	r3, #1
 8008a8a:	e7f0      	b.n	8008a6e <_svfiprintf_r+0x192>
 8008a8c:	ab03      	add	r3, sp, #12
 8008a8e:	9300      	str	r3, [sp, #0]
 8008a90:	462a      	mov	r2, r5
 8008a92:	4b0e      	ldr	r3, [pc, #56]	@ (8008acc <_svfiprintf_r+0x1f0>)
 8008a94:	a904      	add	r1, sp, #16
 8008a96:	4638      	mov	r0, r7
 8008a98:	f7fd fe64 	bl	8006764 <_printf_float>
 8008a9c:	1c42      	adds	r2, r0, #1
 8008a9e:	4606      	mov	r6, r0
 8008aa0:	d1d6      	bne.n	8008a50 <_svfiprintf_r+0x174>
 8008aa2:	89ab      	ldrh	r3, [r5, #12]
 8008aa4:	065b      	lsls	r3, r3, #25
 8008aa6:	f53f af2d 	bmi.w	8008904 <_svfiprintf_r+0x28>
 8008aaa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008aac:	e72c      	b.n	8008908 <_svfiprintf_r+0x2c>
 8008aae:	ab03      	add	r3, sp, #12
 8008ab0:	9300      	str	r3, [sp, #0]
 8008ab2:	462a      	mov	r2, r5
 8008ab4:	4b05      	ldr	r3, [pc, #20]	@ (8008acc <_svfiprintf_r+0x1f0>)
 8008ab6:	a904      	add	r1, sp, #16
 8008ab8:	4638      	mov	r0, r7
 8008aba:	f7fe f8eb 	bl	8006c94 <_printf_i>
 8008abe:	e7ed      	b.n	8008a9c <_svfiprintf_r+0x1c0>
 8008ac0:	080095a0 	.word	0x080095a0
 8008ac4:	080095aa 	.word	0x080095aa
 8008ac8:	08006765 	.word	0x08006765
 8008acc:	08008825 	.word	0x08008825
 8008ad0:	080095a6 	.word	0x080095a6

08008ad4 <__sflush_r>:
 8008ad4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008adc:	0716      	lsls	r6, r2, #28
 8008ade:	4605      	mov	r5, r0
 8008ae0:	460c      	mov	r4, r1
 8008ae2:	d454      	bmi.n	8008b8e <__sflush_r+0xba>
 8008ae4:	684b      	ldr	r3, [r1, #4]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	dc02      	bgt.n	8008af0 <__sflush_r+0x1c>
 8008aea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	dd48      	ble.n	8008b82 <__sflush_r+0xae>
 8008af0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008af2:	2e00      	cmp	r6, #0
 8008af4:	d045      	beq.n	8008b82 <__sflush_r+0xae>
 8008af6:	2300      	movs	r3, #0
 8008af8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008afc:	682f      	ldr	r7, [r5, #0]
 8008afe:	6a21      	ldr	r1, [r4, #32]
 8008b00:	602b      	str	r3, [r5, #0]
 8008b02:	d030      	beq.n	8008b66 <__sflush_r+0x92>
 8008b04:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008b06:	89a3      	ldrh	r3, [r4, #12]
 8008b08:	0759      	lsls	r1, r3, #29
 8008b0a:	d505      	bpl.n	8008b18 <__sflush_r+0x44>
 8008b0c:	6863      	ldr	r3, [r4, #4]
 8008b0e:	1ad2      	subs	r2, r2, r3
 8008b10:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008b12:	b10b      	cbz	r3, 8008b18 <__sflush_r+0x44>
 8008b14:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008b16:	1ad2      	subs	r2, r2, r3
 8008b18:	2300      	movs	r3, #0
 8008b1a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008b1c:	6a21      	ldr	r1, [r4, #32]
 8008b1e:	4628      	mov	r0, r5
 8008b20:	47b0      	blx	r6
 8008b22:	1c43      	adds	r3, r0, #1
 8008b24:	89a3      	ldrh	r3, [r4, #12]
 8008b26:	d106      	bne.n	8008b36 <__sflush_r+0x62>
 8008b28:	6829      	ldr	r1, [r5, #0]
 8008b2a:	291d      	cmp	r1, #29
 8008b2c:	d82b      	bhi.n	8008b86 <__sflush_r+0xb2>
 8008b2e:	4a2a      	ldr	r2, [pc, #168]	@ (8008bd8 <__sflush_r+0x104>)
 8008b30:	410a      	asrs	r2, r1
 8008b32:	07d6      	lsls	r6, r2, #31
 8008b34:	d427      	bmi.n	8008b86 <__sflush_r+0xb2>
 8008b36:	2200      	movs	r2, #0
 8008b38:	6062      	str	r2, [r4, #4]
 8008b3a:	04d9      	lsls	r1, r3, #19
 8008b3c:	6922      	ldr	r2, [r4, #16]
 8008b3e:	6022      	str	r2, [r4, #0]
 8008b40:	d504      	bpl.n	8008b4c <__sflush_r+0x78>
 8008b42:	1c42      	adds	r2, r0, #1
 8008b44:	d101      	bne.n	8008b4a <__sflush_r+0x76>
 8008b46:	682b      	ldr	r3, [r5, #0]
 8008b48:	b903      	cbnz	r3, 8008b4c <__sflush_r+0x78>
 8008b4a:	6560      	str	r0, [r4, #84]	@ 0x54
 8008b4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008b4e:	602f      	str	r7, [r5, #0]
 8008b50:	b1b9      	cbz	r1, 8008b82 <__sflush_r+0xae>
 8008b52:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008b56:	4299      	cmp	r1, r3
 8008b58:	d002      	beq.n	8008b60 <__sflush_r+0x8c>
 8008b5a:	4628      	mov	r0, r5
 8008b5c:	f7ff f9e0 	bl	8007f20 <_free_r>
 8008b60:	2300      	movs	r3, #0
 8008b62:	6363      	str	r3, [r4, #52]	@ 0x34
 8008b64:	e00d      	b.n	8008b82 <__sflush_r+0xae>
 8008b66:	2301      	movs	r3, #1
 8008b68:	4628      	mov	r0, r5
 8008b6a:	47b0      	blx	r6
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	1c50      	adds	r0, r2, #1
 8008b70:	d1c9      	bne.n	8008b06 <__sflush_r+0x32>
 8008b72:	682b      	ldr	r3, [r5, #0]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d0c6      	beq.n	8008b06 <__sflush_r+0x32>
 8008b78:	2b1d      	cmp	r3, #29
 8008b7a:	d001      	beq.n	8008b80 <__sflush_r+0xac>
 8008b7c:	2b16      	cmp	r3, #22
 8008b7e:	d11e      	bne.n	8008bbe <__sflush_r+0xea>
 8008b80:	602f      	str	r7, [r5, #0]
 8008b82:	2000      	movs	r0, #0
 8008b84:	e022      	b.n	8008bcc <__sflush_r+0xf8>
 8008b86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b8a:	b21b      	sxth	r3, r3
 8008b8c:	e01b      	b.n	8008bc6 <__sflush_r+0xf2>
 8008b8e:	690f      	ldr	r7, [r1, #16]
 8008b90:	2f00      	cmp	r7, #0
 8008b92:	d0f6      	beq.n	8008b82 <__sflush_r+0xae>
 8008b94:	0793      	lsls	r3, r2, #30
 8008b96:	680e      	ldr	r6, [r1, #0]
 8008b98:	bf08      	it	eq
 8008b9a:	694b      	ldreq	r3, [r1, #20]
 8008b9c:	600f      	str	r7, [r1, #0]
 8008b9e:	bf18      	it	ne
 8008ba0:	2300      	movne	r3, #0
 8008ba2:	eba6 0807 	sub.w	r8, r6, r7
 8008ba6:	608b      	str	r3, [r1, #8]
 8008ba8:	f1b8 0f00 	cmp.w	r8, #0
 8008bac:	dde9      	ble.n	8008b82 <__sflush_r+0xae>
 8008bae:	6a21      	ldr	r1, [r4, #32]
 8008bb0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008bb2:	4643      	mov	r3, r8
 8008bb4:	463a      	mov	r2, r7
 8008bb6:	4628      	mov	r0, r5
 8008bb8:	47b0      	blx	r6
 8008bba:	2800      	cmp	r0, #0
 8008bbc:	dc08      	bgt.n	8008bd0 <__sflush_r+0xfc>
 8008bbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008bc6:	81a3      	strh	r3, [r4, #12]
 8008bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bd0:	4407      	add	r7, r0
 8008bd2:	eba8 0800 	sub.w	r8, r8, r0
 8008bd6:	e7e7      	b.n	8008ba8 <__sflush_r+0xd4>
 8008bd8:	dfbffffe 	.word	0xdfbffffe

08008bdc <_fflush_r>:
 8008bdc:	b538      	push	{r3, r4, r5, lr}
 8008bde:	690b      	ldr	r3, [r1, #16]
 8008be0:	4605      	mov	r5, r0
 8008be2:	460c      	mov	r4, r1
 8008be4:	b913      	cbnz	r3, 8008bec <_fflush_r+0x10>
 8008be6:	2500      	movs	r5, #0
 8008be8:	4628      	mov	r0, r5
 8008bea:	bd38      	pop	{r3, r4, r5, pc}
 8008bec:	b118      	cbz	r0, 8008bf6 <_fflush_r+0x1a>
 8008bee:	6a03      	ldr	r3, [r0, #32]
 8008bf0:	b90b      	cbnz	r3, 8008bf6 <_fflush_r+0x1a>
 8008bf2:	f7fe f9fb 	bl	8006fec <__sinit>
 8008bf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d0f3      	beq.n	8008be6 <_fflush_r+0xa>
 8008bfe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008c00:	07d0      	lsls	r0, r2, #31
 8008c02:	d404      	bmi.n	8008c0e <_fflush_r+0x32>
 8008c04:	0599      	lsls	r1, r3, #22
 8008c06:	d402      	bmi.n	8008c0e <_fflush_r+0x32>
 8008c08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c0a:	f7fe fb3a 	bl	8007282 <__retarget_lock_acquire_recursive>
 8008c0e:	4628      	mov	r0, r5
 8008c10:	4621      	mov	r1, r4
 8008c12:	f7ff ff5f 	bl	8008ad4 <__sflush_r>
 8008c16:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008c18:	07da      	lsls	r2, r3, #31
 8008c1a:	4605      	mov	r5, r0
 8008c1c:	d4e4      	bmi.n	8008be8 <_fflush_r+0xc>
 8008c1e:	89a3      	ldrh	r3, [r4, #12]
 8008c20:	059b      	lsls	r3, r3, #22
 8008c22:	d4e1      	bmi.n	8008be8 <_fflush_r+0xc>
 8008c24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c26:	f7fe fb2d 	bl	8007284 <__retarget_lock_release_recursive>
 8008c2a:	e7dd      	b.n	8008be8 <_fflush_r+0xc>

08008c2c <memmove>:
 8008c2c:	4288      	cmp	r0, r1
 8008c2e:	b510      	push	{r4, lr}
 8008c30:	eb01 0402 	add.w	r4, r1, r2
 8008c34:	d902      	bls.n	8008c3c <memmove+0x10>
 8008c36:	4284      	cmp	r4, r0
 8008c38:	4623      	mov	r3, r4
 8008c3a:	d807      	bhi.n	8008c4c <memmove+0x20>
 8008c3c:	1e43      	subs	r3, r0, #1
 8008c3e:	42a1      	cmp	r1, r4
 8008c40:	d008      	beq.n	8008c54 <memmove+0x28>
 8008c42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008c4a:	e7f8      	b.n	8008c3e <memmove+0x12>
 8008c4c:	4402      	add	r2, r0
 8008c4e:	4601      	mov	r1, r0
 8008c50:	428a      	cmp	r2, r1
 8008c52:	d100      	bne.n	8008c56 <memmove+0x2a>
 8008c54:	bd10      	pop	{r4, pc}
 8008c56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008c5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008c5e:	e7f7      	b.n	8008c50 <memmove+0x24>

08008c60 <_sbrk_r>:
 8008c60:	b538      	push	{r3, r4, r5, lr}
 8008c62:	4d06      	ldr	r5, [pc, #24]	@ (8008c7c <_sbrk_r+0x1c>)
 8008c64:	2300      	movs	r3, #0
 8008c66:	4604      	mov	r4, r0
 8008c68:	4608      	mov	r0, r1
 8008c6a:	602b      	str	r3, [r5, #0]
 8008c6c:	f7f8 fa76 	bl	800115c <_sbrk>
 8008c70:	1c43      	adds	r3, r0, #1
 8008c72:	d102      	bne.n	8008c7a <_sbrk_r+0x1a>
 8008c74:	682b      	ldr	r3, [r5, #0]
 8008c76:	b103      	cbz	r3, 8008c7a <_sbrk_r+0x1a>
 8008c78:	6023      	str	r3, [r4, #0]
 8008c7a:	bd38      	pop	{r3, r4, r5, pc}
 8008c7c:	200007f8 	.word	0x200007f8

08008c80 <memcpy>:
 8008c80:	440a      	add	r2, r1
 8008c82:	4291      	cmp	r1, r2
 8008c84:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c88:	d100      	bne.n	8008c8c <memcpy+0xc>
 8008c8a:	4770      	bx	lr
 8008c8c:	b510      	push	{r4, lr}
 8008c8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c96:	4291      	cmp	r1, r2
 8008c98:	d1f9      	bne.n	8008c8e <memcpy+0xe>
 8008c9a:	bd10      	pop	{r4, pc}

08008c9c <__assert_func>:
 8008c9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008c9e:	4614      	mov	r4, r2
 8008ca0:	461a      	mov	r2, r3
 8008ca2:	4b09      	ldr	r3, [pc, #36]	@ (8008cc8 <__assert_func+0x2c>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4605      	mov	r5, r0
 8008ca8:	68d8      	ldr	r0, [r3, #12]
 8008caa:	b954      	cbnz	r4, 8008cc2 <__assert_func+0x26>
 8008cac:	4b07      	ldr	r3, [pc, #28]	@ (8008ccc <__assert_func+0x30>)
 8008cae:	461c      	mov	r4, r3
 8008cb0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008cb4:	9100      	str	r1, [sp, #0]
 8008cb6:	462b      	mov	r3, r5
 8008cb8:	4905      	ldr	r1, [pc, #20]	@ (8008cd0 <__assert_func+0x34>)
 8008cba:	f000 f86f 	bl	8008d9c <fiprintf>
 8008cbe:	f000 f87f 	bl	8008dc0 <abort>
 8008cc2:	4b04      	ldr	r3, [pc, #16]	@ (8008cd4 <__assert_func+0x38>)
 8008cc4:	e7f4      	b.n	8008cb0 <__assert_func+0x14>
 8008cc6:	bf00      	nop
 8008cc8:	20000030 	.word	0x20000030
 8008ccc:	080095f6 	.word	0x080095f6
 8008cd0:	080095c8 	.word	0x080095c8
 8008cd4:	080095bb 	.word	0x080095bb

08008cd8 <_calloc_r>:
 8008cd8:	b570      	push	{r4, r5, r6, lr}
 8008cda:	fba1 5402 	umull	r5, r4, r1, r2
 8008cde:	b93c      	cbnz	r4, 8008cf0 <_calloc_r+0x18>
 8008ce0:	4629      	mov	r1, r5
 8008ce2:	f7ff f991 	bl	8008008 <_malloc_r>
 8008ce6:	4606      	mov	r6, r0
 8008ce8:	b928      	cbnz	r0, 8008cf6 <_calloc_r+0x1e>
 8008cea:	2600      	movs	r6, #0
 8008cec:	4630      	mov	r0, r6
 8008cee:	bd70      	pop	{r4, r5, r6, pc}
 8008cf0:	220c      	movs	r2, #12
 8008cf2:	6002      	str	r2, [r0, #0]
 8008cf4:	e7f9      	b.n	8008cea <_calloc_r+0x12>
 8008cf6:	462a      	mov	r2, r5
 8008cf8:	4621      	mov	r1, r4
 8008cfa:	f7fe fa44 	bl	8007186 <memset>
 8008cfe:	e7f5      	b.n	8008cec <_calloc_r+0x14>

08008d00 <__ascii_mbtowc>:
 8008d00:	b082      	sub	sp, #8
 8008d02:	b901      	cbnz	r1, 8008d06 <__ascii_mbtowc+0x6>
 8008d04:	a901      	add	r1, sp, #4
 8008d06:	b142      	cbz	r2, 8008d1a <__ascii_mbtowc+0x1a>
 8008d08:	b14b      	cbz	r3, 8008d1e <__ascii_mbtowc+0x1e>
 8008d0a:	7813      	ldrb	r3, [r2, #0]
 8008d0c:	600b      	str	r3, [r1, #0]
 8008d0e:	7812      	ldrb	r2, [r2, #0]
 8008d10:	1e10      	subs	r0, r2, #0
 8008d12:	bf18      	it	ne
 8008d14:	2001      	movne	r0, #1
 8008d16:	b002      	add	sp, #8
 8008d18:	4770      	bx	lr
 8008d1a:	4610      	mov	r0, r2
 8008d1c:	e7fb      	b.n	8008d16 <__ascii_mbtowc+0x16>
 8008d1e:	f06f 0001 	mvn.w	r0, #1
 8008d22:	e7f8      	b.n	8008d16 <__ascii_mbtowc+0x16>

08008d24 <_realloc_r>:
 8008d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d28:	4680      	mov	r8, r0
 8008d2a:	4615      	mov	r5, r2
 8008d2c:	460c      	mov	r4, r1
 8008d2e:	b921      	cbnz	r1, 8008d3a <_realloc_r+0x16>
 8008d30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d34:	4611      	mov	r1, r2
 8008d36:	f7ff b967 	b.w	8008008 <_malloc_r>
 8008d3a:	b92a      	cbnz	r2, 8008d48 <_realloc_r+0x24>
 8008d3c:	f7ff f8f0 	bl	8007f20 <_free_r>
 8008d40:	2400      	movs	r4, #0
 8008d42:	4620      	mov	r0, r4
 8008d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d48:	f000 f841 	bl	8008dce <_malloc_usable_size_r>
 8008d4c:	4285      	cmp	r5, r0
 8008d4e:	4606      	mov	r6, r0
 8008d50:	d802      	bhi.n	8008d58 <_realloc_r+0x34>
 8008d52:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008d56:	d8f4      	bhi.n	8008d42 <_realloc_r+0x1e>
 8008d58:	4629      	mov	r1, r5
 8008d5a:	4640      	mov	r0, r8
 8008d5c:	f7ff f954 	bl	8008008 <_malloc_r>
 8008d60:	4607      	mov	r7, r0
 8008d62:	2800      	cmp	r0, #0
 8008d64:	d0ec      	beq.n	8008d40 <_realloc_r+0x1c>
 8008d66:	42b5      	cmp	r5, r6
 8008d68:	462a      	mov	r2, r5
 8008d6a:	4621      	mov	r1, r4
 8008d6c:	bf28      	it	cs
 8008d6e:	4632      	movcs	r2, r6
 8008d70:	f7ff ff86 	bl	8008c80 <memcpy>
 8008d74:	4621      	mov	r1, r4
 8008d76:	4640      	mov	r0, r8
 8008d78:	f7ff f8d2 	bl	8007f20 <_free_r>
 8008d7c:	463c      	mov	r4, r7
 8008d7e:	e7e0      	b.n	8008d42 <_realloc_r+0x1e>

08008d80 <__ascii_wctomb>:
 8008d80:	4603      	mov	r3, r0
 8008d82:	4608      	mov	r0, r1
 8008d84:	b141      	cbz	r1, 8008d98 <__ascii_wctomb+0x18>
 8008d86:	2aff      	cmp	r2, #255	@ 0xff
 8008d88:	d904      	bls.n	8008d94 <__ascii_wctomb+0x14>
 8008d8a:	228a      	movs	r2, #138	@ 0x8a
 8008d8c:	601a      	str	r2, [r3, #0]
 8008d8e:	f04f 30ff 	mov.w	r0, #4294967295
 8008d92:	4770      	bx	lr
 8008d94:	700a      	strb	r2, [r1, #0]
 8008d96:	2001      	movs	r0, #1
 8008d98:	4770      	bx	lr
	...

08008d9c <fiprintf>:
 8008d9c:	b40e      	push	{r1, r2, r3}
 8008d9e:	b503      	push	{r0, r1, lr}
 8008da0:	4601      	mov	r1, r0
 8008da2:	ab03      	add	r3, sp, #12
 8008da4:	4805      	ldr	r0, [pc, #20]	@ (8008dbc <fiprintf+0x20>)
 8008da6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008daa:	6800      	ldr	r0, [r0, #0]
 8008dac:	9301      	str	r3, [sp, #4]
 8008dae:	f000 f83f 	bl	8008e30 <_vfiprintf_r>
 8008db2:	b002      	add	sp, #8
 8008db4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008db8:	b003      	add	sp, #12
 8008dba:	4770      	bx	lr
 8008dbc:	20000030 	.word	0x20000030

08008dc0 <abort>:
 8008dc0:	b508      	push	{r3, lr}
 8008dc2:	2006      	movs	r0, #6
 8008dc4:	f000 fa08 	bl	80091d8 <raise>
 8008dc8:	2001      	movs	r0, #1
 8008dca:	f7f8 f94e 	bl	800106a <_exit>

08008dce <_malloc_usable_size_r>:
 8008dce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dd2:	1f18      	subs	r0, r3, #4
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	bfbc      	itt	lt
 8008dd8:	580b      	ldrlt	r3, [r1, r0]
 8008dda:	18c0      	addlt	r0, r0, r3
 8008ddc:	4770      	bx	lr

08008dde <__sfputc_r>:
 8008dde:	6893      	ldr	r3, [r2, #8]
 8008de0:	3b01      	subs	r3, #1
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	b410      	push	{r4}
 8008de6:	6093      	str	r3, [r2, #8]
 8008de8:	da08      	bge.n	8008dfc <__sfputc_r+0x1e>
 8008dea:	6994      	ldr	r4, [r2, #24]
 8008dec:	42a3      	cmp	r3, r4
 8008dee:	db01      	blt.n	8008df4 <__sfputc_r+0x16>
 8008df0:	290a      	cmp	r1, #10
 8008df2:	d103      	bne.n	8008dfc <__sfputc_r+0x1e>
 8008df4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008df8:	f000 b932 	b.w	8009060 <__swbuf_r>
 8008dfc:	6813      	ldr	r3, [r2, #0]
 8008dfe:	1c58      	adds	r0, r3, #1
 8008e00:	6010      	str	r0, [r2, #0]
 8008e02:	7019      	strb	r1, [r3, #0]
 8008e04:	4608      	mov	r0, r1
 8008e06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e0a:	4770      	bx	lr

08008e0c <__sfputs_r>:
 8008e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e0e:	4606      	mov	r6, r0
 8008e10:	460f      	mov	r7, r1
 8008e12:	4614      	mov	r4, r2
 8008e14:	18d5      	adds	r5, r2, r3
 8008e16:	42ac      	cmp	r4, r5
 8008e18:	d101      	bne.n	8008e1e <__sfputs_r+0x12>
 8008e1a:	2000      	movs	r0, #0
 8008e1c:	e007      	b.n	8008e2e <__sfputs_r+0x22>
 8008e1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e22:	463a      	mov	r2, r7
 8008e24:	4630      	mov	r0, r6
 8008e26:	f7ff ffda 	bl	8008dde <__sfputc_r>
 8008e2a:	1c43      	adds	r3, r0, #1
 8008e2c:	d1f3      	bne.n	8008e16 <__sfputs_r+0xa>
 8008e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008e30 <_vfiprintf_r>:
 8008e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e34:	460d      	mov	r5, r1
 8008e36:	b09d      	sub	sp, #116	@ 0x74
 8008e38:	4614      	mov	r4, r2
 8008e3a:	4698      	mov	r8, r3
 8008e3c:	4606      	mov	r6, r0
 8008e3e:	b118      	cbz	r0, 8008e48 <_vfiprintf_r+0x18>
 8008e40:	6a03      	ldr	r3, [r0, #32]
 8008e42:	b90b      	cbnz	r3, 8008e48 <_vfiprintf_r+0x18>
 8008e44:	f7fe f8d2 	bl	8006fec <__sinit>
 8008e48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e4a:	07d9      	lsls	r1, r3, #31
 8008e4c:	d405      	bmi.n	8008e5a <_vfiprintf_r+0x2a>
 8008e4e:	89ab      	ldrh	r3, [r5, #12]
 8008e50:	059a      	lsls	r2, r3, #22
 8008e52:	d402      	bmi.n	8008e5a <_vfiprintf_r+0x2a>
 8008e54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e56:	f7fe fa14 	bl	8007282 <__retarget_lock_acquire_recursive>
 8008e5a:	89ab      	ldrh	r3, [r5, #12]
 8008e5c:	071b      	lsls	r3, r3, #28
 8008e5e:	d501      	bpl.n	8008e64 <_vfiprintf_r+0x34>
 8008e60:	692b      	ldr	r3, [r5, #16]
 8008e62:	b99b      	cbnz	r3, 8008e8c <_vfiprintf_r+0x5c>
 8008e64:	4629      	mov	r1, r5
 8008e66:	4630      	mov	r0, r6
 8008e68:	f000 f938 	bl	80090dc <__swsetup_r>
 8008e6c:	b170      	cbz	r0, 8008e8c <_vfiprintf_r+0x5c>
 8008e6e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e70:	07dc      	lsls	r4, r3, #31
 8008e72:	d504      	bpl.n	8008e7e <_vfiprintf_r+0x4e>
 8008e74:	f04f 30ff 	mov.w	r0, #4294967295
 8008e78:	b01d      	add	sp, #116	@ 0x74
 8008e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e7e:	89ab      	ldrh	r3, [r5, #12]
 8008e80:	0598      	lsls	r0, r3, #22
 8008e82:	d4f7      	bmi.n	8008e74 <_vfiprintf_r+0x44>
 8008e84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e86:	f7fe f9fd 	bl	8007284 <__retarget_lock_release_recursive>
 8008e8a:	e7f3      	b.n	8008e74 <_vfiprintf_r+0x44>
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e90:	2320      	movs	r3, #32
 8008e92:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008e96:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e9a:	2330      	movs	r3, #48	@ 0x30
 8008e9c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800904c <_vfiprintf_r+0x21c>
 8008ea0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008ea4:	f04f 0901 	mov.w	r9, #1
 8008ea8:	4623      	mov	r3, r4
 8008eaa:	469a      	mov	sl, r3
 8008eac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008eb0:	b10a      	cbz	r2, 8008eb6 <_vfiprintf_r+0x86>
 8008eb2:	2a25      	cmp	r2, #37	@ 0x25
 8008eb4:	d1f9      	bne.n	8008eaa <_vfiprintf_r+0x7a>
 8008eb6:	ebba 0b04 	subs.w	fp, sl, r4
 8008eba:	d00b      	beq.n	8008ed4 <_vfiprintf_r+0xa4>
 8008ebc:	465b      	mov	r3, fp
 8008ebe:	4622      	mov	r2, r4
 8008ec0:	4629      	mov	r1, r5
 8008ec2:	4630      	mov	r0, r6
 8008ec4:	f7ff ffa2 	bl	8008e0c <__sfputs_r>
 8008ec8:	3001      	adds	r0, #1
 8008eca:	f000 80a7 	beq.w	800901c <_vfiprintf_r+0x1ec>
 8008ece:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ed0:	445a      	add	r2, fp
 8008ed2:	9209      	str	r2, [sp, #36]	@ 0x24
 8008ed4:	f89a 3000 	ldrb.w	r3, [sl]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	f000 809f 	beq.w	800901c <_vfiprintf_r+0x1ec>
 8008ede:	2300      	movs	r3, #0
 8008ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8008ee4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ee8:	f10a 0a01 	add.w	sl, sl, #1
 8008eec:	9304      	str	r3, [sp, #16]
 8008eee:	9307      	str	r3, [sp, #28]
 8008ef0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008ef4:	931a      	str	r3, [sp, #104]	@ 0x68
 8008ef6:	4654      	mov	r4, sl
 8008ef8:	2205      	movs	r2, #5
 8008efa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008efe:	4853      	ldr	r0, [pc, #332]	@ (800904c <_vfiprintf_r+0x21c>)
 8008f00:	f7f7 f966 	bl	80001d0 <memchr>
 8008f04:	9a04      	ldr	r2, [sp, #16]
 8008f06:	b9d8      	cbnz	r0, 8008f40 <_vfiprintf_r+0x110>
 8008f08:	06d1      	lsls	r1, r2, #27
 8008f0a:	bf44      	itt	mi
 8008f0c:	2320      	movmi	r3, #32
 8008f0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f12:	0713      	lsls	r3, r2, #28
 8008f14:	bf44      	itt	mi
 8008f16:	232b      	movmi	r3, #43	@ 0x2b
 8008f18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f1c:	f89a 3000 	ldrb.w	r3, [sl]
 8008f20:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f22:	d015      	beq.n	8008f50 <_vfiprintf_r+0x120>
 8008f24:	9a07      	ldr	r2, [sp, #28]
 8008f26:	4654      	mov	r4, sl
 8008f28:	2000      	movs	r0, #0
 8008f2a:	f04f 0c0a 	mov.w	ip, #10
 8008f2e:	4621      	mov	r1, r4
 8008f30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f34:	3b30      	subs	r3, #48	@ 0x30
 8008f36:	2b09      	cmp	r3, #9
 8008f38:	d94b      	bls.n	8008fd2 <_vfiprintf_r+0x1a2>
 8008f3a:	b1b0      	cbz	r0, 8008f6a <_vfiprintf_r+0x13a>
 8008f3c:	9207      	str	r2, [sp, #28]
 8008f3e:	e014      	b.n	8008f6a <_vfiprintf_r+0x13a>
 8008f40:	eba0 0308 	sub.w	r3, r0, r8
 8008f44:	fa09 f303 	lsl.w	r3, r9, r3
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	9304      	str	r3, [sp, #16]
 8008f4c:	46a2      	mov	sl, r4
 8008f4e:	e7d2      	b.n	8008ef6 <_vfiprintf_r+0xc6>
 8008f50:	9b03      	ldr	r3, [sp, #12]
 8008f52:	1d19      	adds	r1, r3, #4
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	9103      	str	r1, [sp, #12]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	bfbb      	ittet	lt
 8008f5c:	425b      	neglt	r3, r3
 8008f5e:	f042 0202 	orrlt.w	r2, r2, #2
 8008f62:	9307      	strge	r3, [sp, #28]
 8008f64:	9307      	strlt	r3, [sp, #28]
 8008f66:	bfb8      	it	lt
 8008f68:	9204      	strlt	r2, [sp, #16]
 8008f6a:	7823      	ldrb	r3, [r4, #0]
 8008f6c:	2b2e      	cmp	r3, #46	@ 0x2e
 8008f6e:	d10a      	bne.n	8008f86 <_vfiprintf_r+0x156>
 8008f70:	7863      	ldrb	r3, [r4, #1]
 8008f72:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f74:	d132      	bne.n	8008fdc <_vfiprintf_r+0x1ac>
 8008f76:	9b03      	ldr	r3, [sp, #12]
 8008f78:	1d1a      	adds	r2, r3, #4
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	9203      	str	r2, [sp, #12]
 8008f7e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008f82:	3402      	adds	r4, #2
 8008f84:	9305      	str	r3, [sp, #20]
 8008f86:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800905c <_vfiprintf_r+0x22c>
 8008f8a:	7821      	ldrb	r1, [r4, #0]
 8008f8c:	2203      	movs	r2, #3
 8008f8e:	4650      	mov	r0, sl
 8008f90:	f7f7 f91e 	bl	80001d0 <memchr>
 8008f94:	b138      	cbz	r0, 8008fa6 <_vfiprintf_r+0x176>
 8008f96:	9b04      	ldr	r3, [sp, #16]
 8008f98:	eba0 000a 	sub.w	r0, r0, sl
 8008f9c:	2240      	movs	r2, #64	@ 0x40
 8008f9e:	4082      	lsls	r2, r0
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	3401      	adds	r4, #1
 8008fa4:	9304      	str	r3, [sp, #16]
 8008fa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008faa:	4829      	ldr	r0, [pc, #164]	@ (8009050 <_vfiprintf_r+0x220>)
 8008fac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008fb0:	2206      	movs	r2, #6
 8008fb2:	f7f7 f90d 	bl	80001d0 <memchr>
 8008fb6:	2800      	cmp	r0, #0
 8008fb8:	d03f      	beq.n	800903a <_vfiprintf_r+0x20a>
 8008fba:	4b26      	ldr	r3, [pc, #152]	@ (8009054 <_vfiprintf_r+0x224>)
 8008fbc:	bb1b      	cbnz	r3, 8009006 <_vfiprintf_r+0x1d6>
 8008fbe:	9b03      	ldr	r3, [sp, #12]
 8008fc0:	3307      	adds	r3, #7
 8008fc2:	f023 0307 	bic.w	r3, r3, #7
 8008fc6:	3308      	adds	r3, #8
 8008fc8:	9303      	str	r3, [sp, #12]
 8008fca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fcc:	443b      	add	r3, r7
 8008fce:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fd0:	e76a      	b.n	8008ea8 <_vfiprintf_r+0x78>
 8008fd2:	fb0c 3202 	mla	r2, ip, r2, r3
 8008fd6:	460c      	mov	r4, r1
 8008fd8:	2001      	movs	r0, #1
 8008fda:	e7a8      	b.n	8008f2e <_vfiprintf_r+0xfe>
 8008fdc:	2300      	movs	r3, #0
 8008fde:	3401      	adds	r4, #1
 8008fe0:	9305      	str	r3, [sp, #20]
 8008fe2:	4619      	mov	r1, r3
 8008fe4:	f04f 0c0a 	mov.w	ip, #10
 8008fe8:	4620      	mov	r0, r4
 8008fea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008fee:	3a30      	subs	r2, #48	@ 0x30
 8008ff0:	2a09      	cmp	r2, #9
 8008ff2:	d903      	bls.n	8008ffc <_vfiprintf_r+0x1cc>
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d0c6      	beq.n	8008f86 <_vfiprintf_r+0x156>
 8008ff8:	9105      	str	r1, [sp, #20]
 8008ffa:	e7c4      	b.n	8008f86 <_vfiprintf_r+0x156>
 8008ffc:	fb0c 2101 	mla	r1, ip, r1, r2
 8009000:	4604      	mov	r4, r0
 8009002:	2301      	movs	r3, #1
 8009004:	e7f0      	b.n	8008fe8 <_vfiprintf_r+0x1b8>
 8009006:	ab03      	add	r3, sp, #12
 8009008:	9300      	str	r3, [sp, #0]
 800900a:	462a      	mov	r2, r5
 800900c:	4b12      	ldr	r3, [pc, #72]	@ (8009058 <_vfiprintf_r+0x228>)
 800900e:	a904      	add	r1, sp, #16
 8009010:	4630      	mov	r0, r6
 8009012:	f7fd fba7 	bl	8006764 <_printf_float>
 8009016:	4607      	mov	r7, r0
 8009018:	1c78      	adds	r0, r7, #1
 800901a:	d1d6      	bne.n	8008fca <_vfiprintf_r+0x19a>
 800901c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800901e:	07d9      	lsls	r1, r3, #31
 8009020:	d405      	bmi.n	800902e <_vfiprintf_r+0x1fe>
 8009022:	89ab      	ldrh	r3, [r5, #12]
 8009024:	059a      	lsls	r2, r3, #22
 8009026:	d402      	bmi.n	800902e <_vfiprintf_r+0x1fe>
 8009028:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800902a:	f7fe f92b 	bl	8007284 <__retarget_lock_release_recursive>
 800902e:	89ab      	ldrh	r3, [r5, #12]
 8009030:	065b      	lsls	r3, r3, #25
 8009032:	f53f af1f 	bmi.w	8008e74 <_vfiprintf_r+0x44>
 8009036:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009038:	e71e      	b.n	8008e78 <_vfiprintf_r+0x48>
 800903a:	ab03      	add	r3, sp, #12
 800903c:	9300      	str	r3, [sp, #0]
 800903e:	462a      	mov	r2, r5
 8009040:	4b05      	ldr	r3, [pc, #20]	@ (8009058 <_vfiprintf_r+0x228>)
 8009042:	a904      	add	r1, sp, #16
 8009044:	4630      	mov	r0, r6
 8009046:	f7fd fe25 	bl	8006c94 <_printf_i>
 800904a:	e7e4      	b.n	8009016 <_vfiprintf_r+0x1e6>
 800904c:	080095a0 	.word	0x080095a0
 8009050:	080095aa 	.word	0x080095aa
 8009054:	08006765 	.word	0x08006765
 8009058:	08008e0d 	.word	0x08008e0d
 800905c:	080095a6 	.word	0x080095a6

08009060 <__swbuf_r>:
 8009060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009062:	460e      	mov	r6, r1
 8009064:	4614      	mov	r4, r2
 8009066:	4605      	mov	r5, r0
 8009068:	b118      	cbz	r0, 8009072 <__swbuf_r+0x12>
 800906a:	6a03      	ldr	r3, [r0, #32]
 800906c:	b90b      	cbnz	r3, 8009072 <__swbuf_r+0x12>
 800906e:	f7fd ffbd 	bl	8006fec <__sinit>
 8009072:	69a3      	ldr	r3, [r4, #24]
 8009074:	60a3      	str	r3, [r4, #8]
 8009076:	89a3      	ldrh	r3, [r4, #12]
 8009078:	071a      	lsls	r2, r3, #28
 800907a:	d501      	bpl.n	8009080 <__swbuf_r+0x20>
 800907c:	6923      	ldr	r3, [r4, #16]
 800907e:	b943      	cbnz	r3, 8009092 <__swbuf_r+0x32>
 8009080:	4621      	mov	r1, r4
 8009082:	4628      	mov	r0, r5
 8009084:	f000 f82a 	bl	80090dc <__swsetup_r>
 8009088:	b118      	cbz	r0, 8009092 <__swbuf_r+0x32>
 800908a:	f04f 37ff 	mov.w	r7, #4294967295
 800908e:	4638      	mov	r0, r7
 8009090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009092:	6823      	ldr	r3, [r4, #0]
 8009094:	6922      	ldr	r2, [r4, #16]
 8009096:	1a98      	subs	r0, r3, r2
 8009098:	6963      	ldr	r3, [r4, #20]
 800909a:	b2f6      	uxtb	r6, r6
 800909c:	4283      	cmp	r3, r0
 800909e:	4637      	mov	r7, r6
 80090a0:	dc05      	bgt.n	80090ae <__swbuf_r+0x4e>
 80090a2:	4621      	mov	r1, r4
 80090a4:	4628      	mov	r0, r5
 80090a6:	f7ff fd99 	bl	8008bdc <_fflush_r>
 80090aa:	2800      	cmp	r0, #0
 80090ac:	d1ed      	bne.n	800908a <__swbuf_r+0x2a>
 80090ae:	68a3      	ldr	r3, [r4, #8]
 80090b0:	3b01      	subs	r3, #1
 80090b2:	60a3      	str	r3, [r4, #8]
 80090b4:	6823      	ldr	r3, [r4, #0]
 80090b6:	1c5a      	adds	r2, r3, #1
 80090b8:	6022      	str	r2, [r4, #0]
 80090ba:	701e      	strb	r6, [r3, #0]
 80090bc:	6962      	ldr	r2, [r4, #20]
 80090be:	1c43      	adds	r3, r0, #1
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d004      	beq.n	80090ce <__swbuf_r+0x6e>
 80090c4:	89a3      	ldrh	r3, [r4, #12]
 80090c6:	07db      	lsls	r3, r3, #31
 80090c8:	d5e1      	bpl.n	800908e <__swbuf_r+0x2e>
 80090ca:	2e0a      	cmp	r6, #10
 80090cc:	d1df      	bne.n	800908e <__swbuf_r+0x2e>
 80090ce:	4621      	mov	r1, r4
 80090d0:	4628      	mov	r0, r5
 80090d2:	f7ff fd83 	bl	8008bdc <_fflush_r>
 80090d6:	2800      	cmp	r0, #0
 80090d8:	d0d9      	beq.n	800908e <__swbuf_r+0x2e>
 80090da:	e7d6      	b.n	800908a <__swbuf_r+0x2a>

080090dc <__swsetup_r>:
 80090dc:	b538      	push	{r3, r4, r5, lr}
 80090de:	4b29      	ldr	r3, [pc, #164]	@ (8009184 <__swsetup_r+0xa8>)
 80090e0:	4605      	mov	r5, r0
 80090e2:	6818      	ldr	r0, [r3, #0]
 80090e4:	460c      	mov	r4, r1
 80090e6:	b118      	cbz	r0, 80090f0 <__swsetup_r+0x14>
 80090e8:	6a03      	ldr	r3, [r0, #32]
 80090ea:	b90b      	cbnz	r3, 80090f0 <__swsetup_r+0x14>
 80090ec:	f7fd ff7e 	bl	8006fec <__sinit>
 80090f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090f4:	0719      	lsls	r1, r3, #28
 80090f6:	d422      	bmi.n	800913e <__swsetup_r+0x62>
 80090f8:	06da      	lsls	r2, r3, #27
 80090fa:	d407      	bmi.n	800910c <__swsetup_r+0x30>
 80090fc:	2209      	movs	r2, #9
 80090fe:	602a      	str	r2, [r5, #0]
 8009100:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009104:	81a3      	strh	r3, [r4, #12]
 8009106:	f04f 30ff 	mov.w	r0, #4294967295
 800910a:	e033      	b.n	8009174 <__swsetup_r+0x98>
 800910c:	0758      	lsls	r0, r3, #29
 800910e:	d512      	bpl.n	8009136 <__swsetup_r+0x5a>
 8009110:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009112:	b141      	cbz	r1, 8009126 <__swsetup_r+0x4a>
 8009114:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009118:	4299      	cmp	r1, r3
 800911a:	d002      	beq.n	8009122 <__swsetup_r+0x46>
 800911c:	4628      	mov	r0, r5
 800911e:	f7fe feff 	bl	8007f20 <_free_r>
 8009122:	2300      	movs	r3, #0
 8009124:	6363      	str	r3, [r4, #52]	@ 0x34
 8009126:	89a3      	ldrh	r3, [r4, #12]
 8009128:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800912c:	81a3      	strh	r3, [r4, #12]
 800912e:	2300      	movs	r3, #0
 8009130:	6063      	str	r3, [r4, #4]
 8009132:	6923      	ldr	r3, [r4, #16]
 8009134:	6023      	str	r3, [r4, #0]
 8009136:	89a3      	ldrh	r3, [r4, #12]
 8009138:	f043 0308 	orr.w	r3, r3, #8
 800913c:	81a3      	strh	r3, [r4, #12]
 800913e:	6923      	ldr	r3, [r4, #16]
 8009140:	b94b      	cbnz	r3, 8009156 <__swsetup_r+0x7a>
 8009142:	89a3      	ldrh	r3, [r4, #12]
 8009144:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009148:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800914c:	d003      	beq.n	8009156 <__swsetup_r+0x7a>
 800914e:	4621      	mov	r1, r4
 8009150:	4628      	mov	r0, r5
 8009152:	f000 f883 	bl	800925c <__smakebuf_r>
 8009156:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800915a:	f013 0201 	ands.w	r2, r3, #1
 800915e:	d00a      	beq.n	8009176 <__swsetup_r+0x9a>
 8009160:	2200      	movs	r2, #0
 8009162:	60a2      	str	r2, [r4, #8]
 8009164:	6962      	ldr	r2, [r4, #20]
 8009166:	4252      	negs	r2, r2
 8009168:	61a2      	str	r2, [r4, #24]
 800916a:	6922      	ldr	r2, [r4, #16]
 800916c:	b942      	cbnz	r2, 8009180 <__swsetup_r+0xa4>
 800916e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009172:	d1c5      	bne.n	8009100 <__swsetup_r+0x24>
 8009174:	bd38      	pop	{r3, r4, r5, pc}
 8009176:	0799      	lsls	r1, r3, #30
 8009178:	bf58      	it	pl
 800917a:	6962      	ldrpl	r2, [r4, #20]
 800917c:	60a2      	str	r2, [r4, #8]
 800917e:	e7f4      	b.n	800916a <__swsetup_r+0x8e>
 8009180:	2000      	movs	r0, #0
 8009182:	e7f7      	b.n	8009174 <__swsetup_r+0x98>
 8009184:	20000030 	.word	0x20000030

08009188 <_raise_r>:
 8009188:	291f      	cmp	r1, #31
 800918a:	b538      	push	{r3, r4, r5, lr}
 800918c:	4605      	mov	r5, r0
 800918e:	460c      	mov	r4, r1
 8009190:	d904      	bls.n	800919c <_raise_r+0x14>
 8009192:	2316      	movs	r3, #22
 8009194:	6003      	str	r3, [r0, #0]
 8009196:	f04f 30ff 	mov.w	r0, #4294967295
 800919a:	bd38      	pop	{r3, r4, r5, pc}
 800919c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800919e:	b112      	cbz	r2, 80091a6 <_raise_r+0x1e>
 80091a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80091a4:	b94b      	cbnz	r3, 80091ba <_raise_r+0x32>
 80091a6:	4628      	mov	r0, r5
 80091a8:	f000 f830 	bl	800920c <_getpid_r>
 80091ac:	4622      	mov	r2, r4
 80091ae:	4601      	mov	r1, r0
 80091b0:	4628      	mov	r0, r5
 80091b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091b6:	f000 b817 	b.w	80091e8 <_kill_r>
 80091ba:	2b01      	cmp	r3, #1
 80091bc:	d00a      	beq.n	80091d4 <_raise_r+0x4c>
 80091be:	1c59      	adds	r1, r3, #1
 80091c0:	d103      	bne.n	80091ca <_raise_r+0x42>
 80091c2:	2316      	movs	r3, #22
 80091c4:	6003      	str	r3, [r0, #0]
 80091c6:	2001      	movs	r0, #1
 80091c8:	e7e7      	b.n	800919a <_raise_r+0x12>
 80091ca:	2100      	movs	r1, #0
 80091cc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80091d0:	4620      	mov	r0, r4
 80091d2:	4798      	blx	r3
 80091d4:	2000      	movs	r0, #0
 80091d6:	e7e0      	b.n	800919a <_raise_r+0x12>

080091d8 <raise>:
 80091d8:	4b02      	ldr	r3, [pc, #8]	@ (80091e4 <raise+0xc>)
 80091da:	4601      	mov	r1, r0
 80091dc:	6818      	ldr	r0, [r3, #0]
 80091de:	f7ff bfd3 	b.w	8009188 <_raise_r>
 80091e2:	bf00      	nop
 80091e4:	20000030 	.word	0x20000030

080091e8 <_kill_r>:
 80091e8:	b538      	push	{r3, r4, r5, lr}
 80091ea:	4d07      	ldr	r5, [pc, #28]	@ (8009208 <_kill_r+0x20>)
 80091ec:	2300      	movs	r3, #0
 80091ee:	4604      	mov	r4, r0
 80091f0:	4608      	mov	r0, r1
 80091f2:	4611      	mov	r1, r2
 80091f4:	602b      	str	r3, [r5, #0]
 80091f6:	f7f7 ff28 	bl	800104a <_kill>
 80091fa:	1c43      	adds	r3, r0, #1
 80091fc:	d102      	bne.n	8009204 <_kill_r+0x1c>
 80091fe:	682b      	ldr	r3, [r5, #0]
 8009200:	b103      	cbz	r3, 8009204 <_kill_r+0x1c>
 8009202:	6023      	str	r3, [r4, #0]
 8009204:	bd38      	pop	{r3, r4, r5, pc}
 8009206:	bf00      	nop
 8009208:	200007f8 	.word	0x200007f8

0800920c <_getpid_r>:
 800920c:	f7f7 bf15 	b.w	800103a <_getpid>

08009210 <__swhatbuf_r>:
 8009210:	b570      	push	{r4, r5, r6, lr}
 8009212:	460c      	mov	r4, r1
 8009214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009218:	2900      	cmp	r1, #0
 800921a:	b096      	sub	sp, #88	@ 0x58
 800921c:	4615      	mov	r5, r2
 800921e:	461e      	mov	r6, r3
 8009220:	da0d      	bge.n	800923e <__swhatbuf_r+0x2e>
 8009222:	89a3      	ldrh	r3, [r4, #12]
 8009224:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009228:	f04f 0100 	mov.w	r1, #0
 800922c:	bf14      	ite	ne
 800922e:	2340      	movne	r3, #64	@ 0x40
 8009230:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009234:	2000      	movs	r0, #0
 8009236:	6031      	str	r1, [r6, #0]
 8009238:	602b      	str	r3, [r5, #0]
 800923a:	b016      	add	sp, #88	@ 0x58
 800923c:	bd70      	pop	{r4, r5, r6, pc}
 800923e:	466a      	mov	r2, sp
 8009240:	f000 f848 	bl	80092d4 <_fstat_r>
 8009244:	2800      	cmp	r0, #0
 8009246:	dbec      	blt.n	8009222 <__swhatbuf_r+0x12>
 8009248:	9901      	ldr	r1, [sp, #4]
 800924a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800924e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009252:	4259      	negs	r1, r3
 8009254:	4159      	adcs	r1, r3
 8009256:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800925a:	e7eb      	b.n	8009234 <__swhatbuf_r+0x24>

0800925c <__smakebuf_r>:
 800925c:	898b      	ldrh	r3, [r1, #12]
 800925e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009260:	079d      	lsls	r5, r3, #30
 8009262:	4606      	mov	r6, r0
 8009264:	460c      	mov	r4, r1
 8009266:	d507      	bpl.n	8009278 <__smakebuf_r+0x1c>
 8009268:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800926c:	6023      	str	r3, [r4, #0]
 800926e:	6123      	str	r3, [r4, #16]
 8009270:	2301      	movs	r3, #1
 8009272:	6163      	str	r3, [r4, #20]
 8009274:	b003      	add	sp, #12
 8009276:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009278:	ab01      	add	r3, sp, #4
 800927a:	466a      	mov	r2, sp
 800927c:	f7ff ffc8 	bl	8009210 <__swhatbuf_r>
 8009280:	9f00      	ldr	r7, [sp, #0]
 8009282:	4605      	mov	r5, r0
 8009284:	4639      	mov	r1, r7
 8009286:	4630      	mov	r0, r6
 8009288:	f7fe febe 	bl	8008008 <_malloc_r>
 800928c:	b948      	cbnz	r0, 80092a2 <__smakebuf_r+0x46>
 800928e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009292:	059a      	lsls	r2, r3, #22
 8009294:	d4ee      	bmi.n	8009274 <__smakebuf_r+0x18>
 8009296:	f023 0303 	bic.w	r3, r3, #3
 800929a:	f043 0302 	orr.w	r3, r3, #2
 800929e:	81a3      	strh	r3, [r4, #12]
 80092a0:	e7e2      	b.n	8009268 <__smakebuf_r+0xc>
 80092a2:	89a3      	ldrh	r3, [r4, #12]
 80092a4:	6020      	str	r0, [r4, #0]
 80092a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092aa:	81a3      	strh	r3, [r4, #12]
 80092ac:	9b01      	ldr	r3, [sp, #4]
 80092ae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80092b2:	b15b      	cbz	r3, 80092cc <__smakebuf_r+0x70>
 80092b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092b8:	4630      	mov	r0, r6
 80092ba:	f000 f81d 	bl	80092f8 <_isatty_r>
 80092be:	b128      	cbz	r0, 80092cc <__smakebuf_r+0x70>
 80092c0:	89a3      	ldrh	r3, [r4, #12]
 80092c2:	f023 0303 	bic.w	r3, r3, #3
 80092c6:	f043 0301 	orr.w	r3, r3, #1
 80092ca:	81a3      	strh	r3, [r4, #12]
 80092cc:	89a3      	ldrh	r3, [r4, #12]
 80092ce:	431d      	orrs	r5, r3
 80092d0:	81a5      	strh	r5, [r4, #12]
 80092d2:	e7cf      	b.n	8009274 <__smakebuf_r+0x18>

080092d4 <_fstat_r>:
 80092d4:	b538      	push	{r3, r4, r5, lr}
 80092d6:	4d07      	ldr	r5, [pc, #28]	@ (80092f4 <_fstat_r+0x20>)
 80092d8:	2300      	movs	r3, #0
 80092da:	4604      	mov	r4, r0
 80092dc:	4608      	mov	r0, r1
 80092de:	4611      	mov	r1, r2
 80092e0:	602b      	str	r3, [r5, #0]
 80092e2:	f7f7 ff12 	bl	800110a <_fstat>
 80092e6:	1c43      	adds	r3, r0, #1
 80092e8:	d102      	bne.n	80092f0 <_fstat_r+0x1c>
 80092ea:	682b      	ldr	r3, [r5, #0]
 80092ec:	b103      	cbz	r3, 80092f0 <_fstat_r+0x1c>
 80092ee:	6023      	str	r3, [r4, #0]
 80092f0:	bd38      	pop	{r3, r4, r5, pc}
 80092f2:	bf00      	nop
 80092f4:	200007f8 	.word	0x200007f8

080092f8 <_isatty_r>:
 80092f8:	b538      	push	{r3, r4, r5, lr}
 80092fa:	4d06      	ldr	r5, [pc, #24]	@ (8009314 <_isatty_r+0x1c>)
 80092fc:	2300      	movs	r3, #0
 80092fe:	4604      	mov	r4, r0
 8009300:	4608      	mov	r0, r1
 8009302:	602b      	str	r3, [r5, #0]
 8009304:	f7f7 ff11 	bl	800112a <_isatty>
 8009308:	1c43      	adds	r3, r0, #1
 800930a:	d102      	bne.n	8009312 <_isatty_r+0x1a>
 800930c:	682b      	ldr	r3, [r5, #0]
 800930e:	b103      	cbz	r3, 8009312 <_isatty_r+0x1a>
 8009310:	6023      	str	r3, [r4, #0]
 8009312:	bd38      	pop	{r3, r4, r5, pc}
 8009314:	200007f8 	.word	0x200007f8

08009318 <_init>:
 8009318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800931a:	bf00      	nop
 800931c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800931e:	bc08      	pop	{r3}
 8009320:	469e      	mov	lr, r3
 8009322:	4770      	bx	lr

08009324 <_fini>:
 8009324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009326:	bf00      	nop
 8009328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800932a:	bc08      	pop	{r3}
 800932c:	469e      	mov	lr, r3
 800932e:	4770      	bx	lr
