
flying_arm_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005edc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800606c  0800606c  0000706c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060e4  080060e4  00008074  2**0
                  CONTENTS
  4 .ARM          00000008  080060e4  080060e4  000070e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060ec  080060ec  00008074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060ec  080060ec  000070ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080060f0  080060f0  000070f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  080060f4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008074  2**0
                  CONTENTS
 10 .bss          00000310  20000078  20000078  00008078  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000388  20000388  00008078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011ede  00000000  00000000  000080a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026ff  00000000  00000000  00019f82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010b8  00000000  00000000  0001c688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d42  00000000  00000000  0001d740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023935  00000000  00000000  0001e482  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015cc7  00000000  00000000  00041db7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db252  00000000  00000000  00057a7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00132cd0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004d50  00000000  00000000  00132d14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  00137a64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006054 	.word	0x08006054

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08006054 	.word	0x08006054

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_uldivmod>:
 8000a1c:	b953      	cbnz	r3, 8000a34 <__aeabi_uldivmod+0x18>
 8000a1e:	b94a      	cbnz	r2, 8000a34 <__aeabi_uldivmod+0x18>
 8000a20:	2900      	cmp	r1, #0
 8000a22:	bf08      	it	eq
 8000a24:	2800      	cmpeq	r0, #0
 8000a26:	bf1c      	itt	ne
 8000a28:	f04f 31ff 	movne.w	r1, #4294967295
 8000a2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a30:	f000 b96a 	b.w	8000d08 <__aeabi_idiv0>
 8000a34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a3c:	f000 f806 	bl	8000a4c <__udivmoddi4>
 8000a40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a48:	b004      	add	sp, #16
 8000a4a:	4770      	bx	lr

08000a4c <__udivmoddi4>:
 8000a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a50:	9d08      	ldr	r5, [sp, #32]
 8000a52:	460c      	mov	r4, r1
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d14e      	bne.n	8000af6 <__udivmoddi4+0xaa>
 8000a58:	4694      	mov	ip, r2
 8000a5a:	458c      	cmp	ip, r1
 8000a5c:	4686      	mov	lr, r0
 8000a5e:	fab2 f282 	clz	r2, r2
 8000a62:	d962      	bls.n	8000b2a <__udivmoddi4+0xde>
 8000a64:	b14a      	cbz	r2, 8000a7a <__udivmoddi4+0x2e>
 8000a66:	f1c2 0320 	rsb	r3, r2, #32
 8000a6a:	4091      	lsls	r1, r2
 8000a6c:	fa20 f303 	lsr.w	r3, r0, r3
 8000a70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a74:	4319      	orrs	r1, r3
 8000a76:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a7e:	fa1f f68c 	uxth.w	r6, ip
 8000a82:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a86:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a8a:	fb07 1114 	mls	r1, r7, r4, r1
 8000a8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a92:	fb04 f106 	mul.w	r1, r4, r6
 8000a96:	4299      	cmp	r1, r3
 8000a98:	d90a      	bls.n	8000ab0 <__udivmoddi4+0x64>
 8000a9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a9e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000aa2:	f080 8112 	bcs.w	8000cca <__udivmoddi4+0x27e>
 8000aa6:	4299      	cmp	r1, r3
 8000aa8:	f240 810f 	bls.w	8000cca <__udivmoddi4+0x27e>
 8000aac:	3c02      	subs	r4, #2
 8000aae:	4463      	add	r3, ip
 8000ab0:	1a59      	subs	r1, r3, r1
 8000ab2:	fa1f f38e 	uxth.w	r3, lr
 8000ab6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000aba:	fb07 1110 	mls	r1, r7, r0, r1
 8000abe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ac2:	fb00 f606 	mul.w	r6, r0, r6
 8000ac6:	429e      	cmp	r6, r3
 8000ac8:	d90a      	bls.n	8000ae0 <__udivmoddi4+0x94>
 8000aca:	eb1c 0303 	adds.w	r3, ip, r3
 8000ace:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ad2:	f080 80fc 	bcs.w	8000cce <__udivmoddi4+0x282>
 8000ad6:	429e      	cmp	r6, r3
 8000ad8:	f240 80f9 	bls.w	8000cce <__udivmoddi4+0x282>
 8000adc:	4463      	add	r3, ip
 8000ade:	3802      	subs	r0, #2
 8000ae0:	1b9b      	subs	r3, r3, r6
 8000ae2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	b11d      	cbz	r5, 8000af2 <__udivmoddi4+0xa6>
 8000aea:	40d3      	lsrs	r3, r2
 8000aec:	2200      	movs	r2, #0
 8000aee:	e9c5 3200 	strd	r3, r2, [r5]
 8000af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af6:	428b      	cmp	r3, r1
 8000af8:	d905      	bls.n	8000b06 <__udivmoddi4+0xba>
 8000afa:	b10d      	cbz	r5, 8000b00 <__udivmoddi4+0xb4>
 8000afc:	e9c5 0100 	strd	r0, r1, [r5]
 8000b00:	2100      	movs	r1, #0
 8000b02:	4608      	mov	r0, r1
 8000b04:	e7f5      	b.n	8000af2 <__udivmoddi4+0xa6>
 8000b06:	fab3 f183 	clz	r1, r3
 8000b0a:	2900      	cmp	r1, #0
 8000b0c:	d146      	bne.n	8000b9c <__udivmoddi4+0x150>
 8000b0e:	42a3      	cmp	r3, r4
 8000b10:	d302      	bcc.n	8000b18 <__udivmoddi4+0xcc>
 8000b12:	4290      	cmp	r0, r2
 8000b14:	f0c0 80f0 	bcc.w	8000cf8 <__udivmoddi4+0x2ac>
 8000b18:	1a86      	subs	r6, r0, r2
 8000b1a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b1e:	2001      	movs	r0, #1
 8000b20:	2d00      	cmp	r5, #0
 8000b22:	d0e6      	beq.n	8000af2 <__udivmoddi4+0xa6>
 8000b24:	e9c5 6300 	strd	r6, r3, [r5]
 8000b28:	e7e3      	b.n	8000af2 <__udivmoddi4+0xa6>
 8000b2a:	2a00      	cmp	r2, #0
 8000b2c:	f040 8090 	bne.w	8000c50 <__udivmoddi4+0x204>
 8000b30:	eba1 040c 	sub.w	r4, r1, ip
 8000b34:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b38:	fa1f f78c 	uxth.w	r7, ip
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b46:	fb08 4416 	mls	r4, r8, r6, r4
 8000b4a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b4e:	fb07 f006 	mul.w	r0, r7, r6
 8000b52:	4298      	cmp	r0, r3
 8000b54:	d908      	bls.n	8000b68 <__udivmoddi4+0x11c>
 8000b56:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b5e:	d202      	bcs.n	8000b66 <__udivmoddi4+0x11a>
 8000b60:	4298      	cmp	r0, r3
 8000b62:	f200 80cd 	bhi.w	8000d00 <__udivmoddi4+0x2b4>
 8000b66:	4626      	mov	r6, r4
 8000b68:	1a1c      	subs	r4, r3, r0
 8000b6a:	fa1f f38e 	uxth.w	r3, lr
 8000b6e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b72:	fb08 4410 	mls	r4, r8, r0, r4
 8000b76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b7a:	fb00 f707 	mul.w	r7, r0, r7
 8000b7e:	429f      	cmp	r7, r3
 8000b80:	d908      	bls.n	8000b94 <__udivmoddi4+0x148>
 8000b82:	eb1c 0303 	adds.w	r3, ip, r3
 8000b86:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b8a:	d202      	bcs.n	8000b92 <__udivmoddi4+0x146>
 8000b8c:	429f      	cmp	r7, r3
 8000b8e:	f200 80b0 	bhi.w	8000cf2 <__udivmoddi4+0x2a6>
 8000b92:	4620      	mov	r0, r4
 8000b94:	1bdb      	subs	r3, r3, r7
 8000b96:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b9a:	e7a5      	b.n	8000ae8 <__udivmoddi4+0x9c>
 8000b9c:	f1c1 0620 	rsb	r6, r1, #32
 8000ba0:	408b      	lsls	r3, r1
 8000ba2:	fa22 f706 	lsr.w	r7, r2, r6
 8000ba6:	431f      	orrs	r7, r3
 8000ba8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bac:	fa04 f301 	lsl.w	r3, r4, r1
 8000bb0:	ea43 030c 	orr.w	r3, r3, ip
 8000bb4:	40f4      	lsrs	r4, r6
 8000bb6:	fa00 f801 	lsl.w	r8, r0, r1
 8000bba:	0c38      	lsrs	r0, r7, #16
 8000bbc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000bc0:	fbb4 fef0 	udiv	lr, r4, r0
 8000bc4:	fa1f fc87 	uxth.w	ip, r7
 8000bc8:	fb00 441e 	mls	r4, r0, lr, r4
 8000bcc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bd0:	fb0e f90c 	mul.w	r9, lr, ip
 8000bd4:	45a1      	cmp	r9, r4
 8000bd6:	fa02 f201 	lsl.w	r2, r2, r1
 8000bda:	d90a      	bls.n	8000bf2 <__udivmoddi4+0x1a6>
 8000bdc:	193c      	adds	r4, r7, r4
 8000bde:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000be2:	f080 8084 	bcs.w	8000cee <__udivmoddi4+0x2a2>
 8000be6:	45a1      	cmp	r9, r4
 8000be8:	f240 8081 	bls.w	8000cee <__udivmoddi4+0x2a2>
 8000bec:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bf0:	443c      	add	r4, r7
 8000bf2:	eba4 0409 	sub.w	r4, r4, r9
 8000bf6:	fa1f f983 	uxth.w	r9, r3
 8000bfa:	fbb4 f3f0 	udiv	r3, r4, r0
 8000bfe:	fb00 4413 	mls	r4, r0, r3, r4
 8000c02:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c06:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c0a:	45a4      	cmp	ip, r4
 8000c0c:	d907      	bls.n	8000c1e <__udivmoddi4+0x1d2>
 8000c0e:	193c      	adds	r4, r7, r4
 8000c10:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c14:	d267      	bcs.n	8000ce6 <__udivmoddi4+0x29a>
 8000c16:	45a4      	cmp	ip, r4
 8000c18:	d965      	bls.n	8000ce6 <__udivmoddi4+0x29a>
 8000c1a:	3b02      	subs	r3, #2
 8000c1c:	443c      	add	r4, r7
 8000c1e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c22:	fba0 9302 	umull	r9, r3, r0, r2
 8000c26:	eba4 040c 	sub.w	r4, r4, ip
 8000c2a:	429c      	cmp	r4, r3
 8000c2c:	46ce      	mov	lr, r9
 8000c2e:	469c      	mov	ip, r3
 8000c30:	d351      	bcc.n	8000cd6 <__udivmoddi4+0x28a>
 8000c32:	d04e      	beq.n	8000cd2 <__udivmoddi4+0x286>
 8000c34:	b155      	cbz	r5, 8000c4c <__udivmoddi4+0x200>
 8000c36:	ebb8 030e 	subs.w	r3, r8, lr
 8000c3a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c3e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c42:	40cb      	lsrs	r3, r1
 8000c44:	431e      	orrs	r6, r3
 8000c46:	40cc      	lsrs	r4, r1
 8000c48:	e9c5 6400 	strd	r6, r4, [r5]
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	e750      	b.n	8000af2 <__udivmoddi4+0xa6>
 8000c50:	f1c2 0320 	rsb	r3, r2, #32
 8000c54:	fa20 f103 	lsr.w	r1, r0, r3
 8000c58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c5c:	fa24 f303 	lsr.w	r3, r4, r3
 8000c60:	4094      	lsls	r4, r2
 8000c62:	430c      	orrs	r4, r1
 8000c64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c68:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c6c:	fa1f f78c 	uxth.w	r7, ip
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3110 	mls	r1, r8, r0, r3
 8000c78:	0c23      	lsrs	r3, r4, #16
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb00 f107 	mul.w	r1, r0, r7
 8000c82:	4299      	cmp	r1, r3
 8000c84:	d908      	bls.n	8000c98 <__udivmoddi4+0x24c>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c8e:	d22c      	bcs.n	8000cea <__udivmoddi4+0x29e>
 8000c90:	4299      	cmp	r1, r3
 8000c92:	d92a      	bls.n	8000cea <__udivmoddi4+0x29e>
 8000c94:	3802      	subs	r0, #2
 8000c96:	4463      	add	r3, ip
 8000c98:	1a5b      	subs	r3, r3, r1
 8000c9a:	b2a4      	uxth	r4, r4
 8000c9c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ca0:	fb08 3311 	mls	r3, r8, r1, r3
 8000ca4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ca8:	fb01 f307 	mul.w	r3, r1, r7
 8000cac:	42a3      	cmp	r3, r4
 8000cae:	d908      	bls.n	8000cc2 <__udivmoddi4+0x276>
 8000cb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cb8:	d213      	bcs.n	8000ce2 <__udivmoddi4+0x296>
 8000cba:	42a3      	cmp	r3, r4
 8000cbc:	d911      	bls.n	8000ce2 <__udivmoddi4+0x296>
 8000cbe:	3902      	subs	r1, #2
 8000cc0:	4464      	add	r4, ip
 8000cc2:	1ae4      	subs	r4, r4, r3
 8000cc4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cc8:	e739      	b.n	8000b3e <__udivmoddi4+0xf2>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	e6f0      	b.n	8000ab0 <__udivmoddi4+0x64>
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e706      	b.n	8000ae0 <__udivmoddi4+0x94>
 8000cd2:	45c8      	cmp	r8, r9
 8000cd4:	d2ae      	bcs.n	8000c34 <__udivmoddi4+0x1e8>
 8000cd6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000cda:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cde:	3801      	subs	r0, #1
 8000ce0:	e7a8      	b.n	8000c34 <__udivmoddi4+0x1e8>
 8000ce2:	4631      	mov	r1, r6
 8000ce4:	e7ed      	b.n	8000cc2 <__udivmoddi4+0x276>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	e799      	b.n	8000c1e <__udivmoddi4+0x1d2>
 8000cea:	4630      	mov	r0, r6
 8000cec:	e7d4      	b.n	8000c98 <__udivmoddi4+0x24c>
 8000cee:	46d6      	mov	lr, sl
 8000cf0:	e77f      	b.n	8000bf2 <__udivmoddi4+0x1a6>
 8000cf2:	4463      	add	r3, ip
 8000cf4:	3802      	subs	r0, #2
 8000cf6:	e74d      	b.n	8000b94 <__udivmoddi4+0x148>
 8000cf8:	4606      	mov	r6, r0
 8000cfa:	4623      	mov	r3, r4
 8000cfc:	4608      	mov	r0, r1
 8000cfe:	e70f      	b.n	8000b20 <__udivmoddi4+0xd4>
 8000d00:	3e02      	subs	r6, #2
 8000d02:	4463      	add	r3, ip
 8000d04:	e730      	b.n	8000b68 <__udivmoddi4+0x11c>
 8000d06:	bf00      	nop

08000d08 <__aeabi_idiv0>:
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop

08000d0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b094      	sub	sp, #80	@ 0x50
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d12:	f001 fa4f 	bl	80021b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d16:	f000 f8d1 	bl	8000ebc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d1a:	f000 fa31 	bl	8001180 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000d1e:	f000 f92b 	bl	8000f78 <MX_ADC1_Init>
  MX_I2C3_Init();
 8000d22:	f000 f989 	bl	8001038 <MX_I2C3_Init>
  MX_TIM4_Init();
 8000d26:	f000 f9b5 	bl	8001094 <MX_TIM4_Init>
  //MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */

  IMU_initialize(115200);
 8000d2a:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
 8000d2e:	f000 fe5f 	bl	80019f0 <IMU_initialize>
  Lcd_PinType pins[] = {FA_Data4_Pin, FA_Data5_Pin, FA_Data6_Pin, FA_Data7_Pin};
  Lcd_HandleTypeDef lcd = Lcd_create(ports, pins, FA_RS_GPIO_Port, FA_RS_Pin, FA_EN_GPIO_Port, FA_EN_Pin, LCD_4_BIT_MODE);*/

  Lcd_HandleTypeDef lcd;

  Lcd_init(&lcd);
 8000d32:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d36:	4618      	mov	r0, r3
 8000d38:	f001 f8fa 	bl	8001f30 <Lcd_init>

  Lcd_clear(&lcd);
 8000d3c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d40:	4618      	mov	r0, r3
 8000d42:	f001 f98f 	bl	8002064 <Lcd_clear>
  Lcd_cursor(&lcd,0,0);
 8000d46:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f001 f96e 	bl	8002030 <Lcd_cursor>
  Lcd_string(&lcd, "Starting...");
 8000d54:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d58:	4951      	ldr	r1, [pc, #324]	@ (8000ea0 <main+0x194>)
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f001 f948 	bl	8001ff0 <Lcd_string>

  HAL_Delay(500);
 8000d60:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d64:	f001 fa98 	bl	8002298 <HAL_Delay>

  Lcd_clear(&lcd);
 8000d68:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f001 f979 	bl	8002064 <Lcd_clear>

  //float adc_value[2];


  uint8_t tram_value[11] = {0};
 8000d72:	2300      	movs	r3, #0
 8000d74:	623b      	str	r3, [r7, #32]
 8000d76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	f8c3 2003 	str.w	r2, [r3, #3]
  uint8_t raw_data[30] = {0};
 8000d82:	2300      	movs	r3, #0
 8000d84:	603b      	str	r3, [r7, #0]
 8000d86:	1d3b      	adds	r3, r7, #4
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]
 8000d94:	615a      	str	r2, [r3, #20]
 8000d96:	831a      	strh	r2, [r3, #24]
  uint8_t state = 0;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		  Lcd_int(&lcd, gyro[2]);

		  _GyroValueUpdated = 0;
	  }*/

	  if ( HAL_GPIO_ReadPin(FA_BP_GPIO_Port, FA_BP_Pin) == GPIO_PIN_SET){
 8000d9e:	2108      	movs	r1, #8
 8000da0:	4840      	ldr	r0, [pc, #256]	@ (8000ea4 <main+0x198>)
 8000da2:	f002 f83f 	bl	8002e24 <HAL_GPIO_ReadPin>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d136      	bne.n	8000e1a <main+0x10e>

		  HAL_UART_Receive(&huart2, raw_data, data_lgth, HAL_MAX_DELAY);
 8000dac:	4639      	mov	r1, r7
 8000dae:	f04f 33ff 	mov.w	r3, #4294967295
 8000db2:	2214      	movs	r2, #20
 8000db4:	483c      	ldr	r0, [pc, #240]	@ (8000ea8 <main+0x19c>)
 8000db6:	f003 fc9a 	bl	80046ee <HAL_UART_Receive>

		  for(int i = 0 ; i < data_lgth ; i++){
 8000dba:	2300      	movs	r3, #0
 8000dbc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000dbe:	e029      	b.n	8000e14 <main+0x108>

			  if(raw_data[i] == 0x55 && raw_data[i+1] == 0x52){
 8000dc0:	463a      	mov	r2, r7
 8000dc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000dc4:	4413      	add	r3, r2
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b55      	cmp	r3, #85	@ 0x55
 8000dca:	d10a      	bne.n	8000de2 <main+0xd6>
 8000dcc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000dce:	3301      	adds	r3, #1
 8000dd0:	3350      	adds	r3, #80	@ 0x50
 8000dd2:	443b      	add	r3, r7
 8000dd4:	f813 3c50 	ldrb.w	r3, [r3, #-80]
 8000dd8:	2b52      	cmp	r3, #82	@ 0x52
 8000dda:	d102      	bne.n	8000de2 <main+0xd6>
				  state = i;
 8000ddc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000dde:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			  }

			  if(state > 0 && i <= state + 11){
 8000de2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d011      	beq.n	8000e0e <main+0x102>
 8000dea:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000dee:	330b      	adds	r3, #11
 8000df0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000df2:	429a      	cmp	r2, r3
 8000df4:	dc0b      	bgt.n	8000e0e <main+0x102>

				  tram_value[i - state] = raw_data[i];
 8000df6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000dfa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	4639      	mov	r1, r7
 8000e00:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000e02:	440a      	add	r2, r1
 8000e04:	7812      	ldrb	r2, [r2, #0]
 8000e06:	3350      	adds	r3, #80	@ 0x50
 8000e08:	443b      	add	r3, r7
 8000e0a:	f803 2c30 	strb.w	r2, [r3, #-48]
		  for(int i = 0 ; i < data_lgth ; i++){
 8000e0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000e10:	3301      	adds	r3, #1
 8000e12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000e14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000e16:	2b13      	cmp	r3, #19
 8000e18:	ddd2      	ble.n	8000dc0 <main+0xb4>

		  }
	  }*/


	  Lcd_cursor(&lcd, 1, 0);
 8000e1a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2101      	movs	r1, #1
 8000e22:	4618      	mov	r0, r3
 8000e24:	f001 f904 	bl	8002030 <Lcd_cursor>
	  Lcd_int(&lcd, position);
 8000e28:	4b20      	ldr	r3, [pc, #128]	@ (8000eac <main+0x1a0>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e32:	4611      	mov	r1, r2
 8000e34:	4618      	mov	r0, r3
 8000e36:	f001 f8c3 	bl	8001fc0 <Lcd_int>
	  Lcd_string(&lcd, "  ");
 8000e3a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e3e:	491c      	ldr	r1, [pc, #112]	@ (8000eb0 <main+0x1a4>)
 8000e40:	4618      	mov	r0, r3
 8000e42:	f001 f8d5 	bl	8001ff0 <Lcd_string>

	  Lcd_cursor(&lcd, 0, 0);
 8000e46:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f001 f8ee 	bl	8002030 <Lcd_cursor>
	  for(int i = position ; i < position + 6 ; i++){
 8000e54:	4b15      	ldr	r3, [pc, #84]	@ (8000eac <main+0x1a0>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	647b      	str	r3, [r7, #68]	@ 0x44
 8000e5a:	e013      	b.n	8000e84 <main+0x178>

		  Lcd_int(&lcd, raw_data[i]);
 8000e5c:	463a      	mov	r2, r7
 8000e5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000e60:	4413      	add	r3, r2
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	461a      	mov	r2, r3
 8000e66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e6a:	4611      	mov	r1, r2
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f001 f8a7 	bl	8001fc0 <Lcd_int>
		  Lcd_string(&lcd, " ");
 8000e72:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e76:	490f      	ldr	r1, [pc, #60]	@ (8000eb4 <main+0x1a8>)
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f001 f8b9 	bl	8001ff0 <Lcd_string>
	  for(int i = position ; i < position + 6 ; i++){
 8000e7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000e80:	3301      	adds	r3, #1
 8000e82:	647b      	str	r3, [r7, #68]	@ 0x44
 8000e84:	4b09      	ldr	r3, [pc, #36]	@ (8000eac <main+0x1a0>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	3305      	adds	r3, #5
 8000e8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	dde5      	ble.n	8000e5c <main+0x150>
	  }
	  Lcd_string(&lcd, "           ");
 8000e90:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e94:	4908      	ldr	r1, [pc, #32]	@ (8000eb8 <main+0x1ac>)
 8000e96:	4618      	mov	r0, r3
 8000e98:	f001 f8aa 	bl	8001ff0 <Lcd_string>
	  if ( HAL_GPIO_ReadPin(FA_BP_GPIO_Port, FA_BP_Pin) == GPIO_PIN_SET){
 8000e9c:	e77f      	b.n	8000d9e <main+0x92>
 8000e9e:	bf00      	nop
 8000ea0:	0800606c 	.word	0x0800606c
 8000ea4:	40020800 	.word	0x40020800
 8000ea8:	2000018c 	.word	0x2000018c
 8000eac:	20000178 	.word	0x20000178
 8000eb0:	08006078 	.word	0x08006078
 8000eb4:	0800607c 	.word	0x0800607c
 8000eb8:	08006080 	.word	0x08006080

08000ebc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b094      	sub	sp, #80	@ 0x50
 8000ec0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ec2:	f107 0320 	add.w	r3, r7, #32
 8000ec6:	2230      	movs	r2, #48	@ 0x30
 8000ec8:	2100      	movs	r1, #0
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f004 fc42 	bl	8005754 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ed0:	f107 030c 	add.w	r3, r7, #12
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	60bb      	str	r3, [r7, #8]
 8000ee4:	4b22      	ldr	r3, [pc, #136]	@ (8000f70 <SystemClock_Config+0xb4>)
 8000ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee8:	4a21      	ldr	r2, [pc, #132]	@ (8000f70 <SystemClock_Config+0xb4>)
 8000eea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000eee:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ef0:	4b1f      	ldr	r3, [pc, #124]	@ (8000f70 <SystemClock_Config+0xb4>)
 8000ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ef8:	60bb      	str	r3, [r7, #8]
 8000efa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000efc:	2300      	movs	r3, #0
 8000efe:	607b      	str	r3, [r7, #4]
 8000f00:	4b1c      	ldr	r3, [pc, #112]	@ (8000f74 <SystemClock_Config+0xb8>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a1b      	ldr	r2, [pc, #108]	@ (8000f74 <SystemClock_Config+0xb8>)
 8000f06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f0a:	6013      	str	r3, [r2, #0]
 8000f0c:	4b19      	ldr	r3, [pc, #100]	@ (8000f74 <SystemClock_Config+0xb8>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f14:	607b      	str	r3, [r7, #4]
 8000f16:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f20:	2310      	movs	r3, #16
 8000f22:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f24:	2300      	movs	r3, #0
 8000f26:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f28:	f107 0320 	add.w	r3, r7, #32
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f002 f907 	bl	8003140 <HAL_RCC_OscConfig>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000f38:	f000 fa2e 	bl	8001398 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f3c:	230f      	movs	r3, #15
 8000f3e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f40:	2300      	movs	r3, #0
 8000f42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f50:	f107 030c 	add.w	r3, r7, #12
 8000f54:	2100      	movs	r1, #0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f002 fb6a 	bl	8003630 <HAL_RCC_ClockConfig>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000f62:	f000 fa19 	bl	8001398 <Error_Handler>
  }
}
 8000f66:	bf00      	nop
 8000f68:	3750      	adds	r7, #80	@ 0x50
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40023800 	.word	0x40023800
 8000f74:	40007000 	.word	0x40007000

08000f78 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f7e:	463b      	mov	r3, r7
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f8a:	4b28      	ldr	r3, [pc, #160]	@ (800102c <MX_ADC1_Init+0xb4>)
 8000f8c:	4a28      	ldr	r2, [pc, #160]	@ (8001030 <MX_ADC1_Init+0xb8>)
 8000f8e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f90:	4b26      	ldr	r3, [pc, #152]	@ (800102c <MX_ADC1_Init+0xb4>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f96:	4b25      	ldr	r3, [pc, #148]	@ (800102c <MX_ADC1_Init+0xb4>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000f9c:	4b23      	ldr	r3, [pc, #140]	@ (800102c <MX_ADC1_Init+0xb4>)
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000fa2:	4b22      	ldr	r3, [pc, #136]	@ (800102c <MX_ADC1_Init+0xb4>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fa8:	4b20      	ldr	r3, [pc, #128]	@ (800102c <MX_ADC1_Init+0xb4>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fb0:	4b1e      	ldr	r3, [pc, #120]	@ (800102c <MX_ADC1_Init+0xb4>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fb6:	4b1d      	ldr	r3, [pc, #116]	@ (800102c <MX_ADC1_Init+0xb4>)
 8000fb8:	4a1e      	ldr	r2, [pc, #120]	@ (8001034 <MX_ADC1_Init+0xbc>)
 8000fba:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fbc:	4b1b      	ldr	r3, [pc, #108]	@ (800102c <MX_ADC1_Init+0xb4>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000fc2:	4b1a      	ldr	r3, [pc, #104]	@ (800102c <MX_ADC1_Init+0xb4>)
 8000fc4:	2202      	movs	r2, #2
 8000fc6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fc8:	4b18      	ldr	r3, [pc, #96]	@ (800102c <MX_ADC1_Init+0xb4>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fd0:	4b16      	ldr	r3, [pc, #88]	@ (800102c <MX_ADC1_Init+0xb4>)
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fd6:	4815      	ldr	r0, [pc, #84]	@ (800102c <MX_ADC1_Init+0xb4>)
 8000fd8:	f001 f982 	bl	80022e0 <HAL_ADC_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000fe2:	f000 f9d9 	bl	8001398 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000fe6:	230a      	movs	r3, #10
 8000fe8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fea:	2301      	movs	r3, #1
 8000fec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ff2:	463b      	mov	r3, r7
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	480d      	ldr	r0, [pc, #52]	@ (800102c <MX_ADC1_Init+0xb4>)
 8000ff8:	f001 f9b6 	bl	8002368 <HAL_ADC_ConfigChannel>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001002:	f000 f9c9 	bl	8001398 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001006:	230c      	movs	r3, #12
 8001008:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800100a:	2302      	movs	r3, #2
 800100c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800100e:	463b      	mov	r3, r7
 8001010:	4619      	mov	r1, r3
 8001012:	4806      	ldr	r0, [pc, #24]	@ (800102c <MX_ADC1_Init+0xb4>)
 8001014:	f001 f9a8 	bl	8002368 <HAL_ADC_ConfigChannel>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800101e:	f000 f9bb 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001022:	bf00      	nop
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000094 	.word	0x20000094
 8001030:	40012000 	.word	0x40012000
 8001034:	0f000001 	.word	0x0f000001

08001038 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800103c:	4b12      	ldr	r3, [pc, #72]	@ (8001088 <MX_I2C3_Init+0x50>)
 800103e:	4a13      	ldr	r2, [pc, #76]	@ (800108c <MX_I2C3_Init+0x54>)
 8001040:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8001042:	4b11      	ldr	r3, [pc, #68]	@ (8001088 <MX_I2C3_Init+0x50>)
 8001044:	4a12      	ldr	r2, [pc, #72]	@ (8001090 <MX_I2C3_Init+0x58>)
 8001046:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001048:	4b0f      	ldr	r3, [pc, #60]	@ (8001088 <MX_I2C3_Init+0x50>)
 800104a:	2200      	movs	r2, #0
 800104c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800104e:	4b0e      	ldr	r3, [pc, #56]	@ (8001088 <MX_I2C3_Init+0x50>)
 8001050:	2200      	movs	r2, #0
 8001052:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001054:	4b0c      	ldr	r3, [pc, #48]	@ (8001088 <MX_I2C3_Init+0x50>)
 8001056:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800105a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800105c:	4b0a      	ldr	r3, [pc, #40]	@ (8001088 <MX_I2C3_Init+0x50>)
 800105e:	2200      	movs	r2, #0
 8001060:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001062:	4b09      	ldr	r3, [pc, #36]	@ (8001088 <MX_I2C3_Init+0x50>)
 8001064:	2200      	movs	r2, #0
 8001066:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001068:	4b07      	ldr	r3, [pc, #28]	@ (8001088 <MX_I2C3_Init+0x50>)
 800106a:	2200      	movs	r2, #0
 800106c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800106e:	4b06      	ldr	r3, [pc, #24]	@ (8001088 <MX_I2C3_Init+0x50>)
 8001070:	2200      	movs	r2, #0
 8001072:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001074:	4804      	ldr	r0, [pc, #16]	@ (8001088 <MX_I2C3_Init+0x50>)
 8001076:	f001 ff1f 	bl	8002eb8 <HAL_I2C_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001080:	f000 f98a 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}
 8001088:	200000dc 	.word	0x200000dc
 800108c:	40005c00 	.word	0x40005c00
 8001090:	00061a80 	.word	0x00061a80

08001094 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08e      	sub	sp, #56	@ 0x38
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800109a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]
 80010a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010a8:	f107 0320 	add.w	r3, r7, #32
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
 80010c0:	615a      	str	r2, [r3, #20]
 80010c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80010c4:	4b2c      	ldr	r3, [pc, #176]	@ (8001178 <MX_TIM4_Init+0xe4>)
 80010c6:	4a2d      	ldr	r2, [pc, #180]	@ (800117c <MX_TIM4_Init+0xe8>)
 80010c8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 204;
 80010ca:	4b2b      	ldr	r3, [pc, #172]	@ (8001178 <MX_TIM4_Init+0xe4>)
 80010cc:	22cc      	movs	r2, #204	@ 0xcc
 80010ce:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d0:	4b29      	ldr	r3, [pc, #164]	@ (8001178 <MX_TIM4_Init+0xe4>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4095;
 80010d6:	4b28      	ldr	r3, [pc, #160]	@ (8001178 <MX_TIM4_Init+0xe4>)
 80010d8:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80010dc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010de:	4b26      	ldr	r3, [pc, #152]	@ (8001178 <MX_TIM4_Init+0xe4>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010e4:	4b24      	ldr	r3, [pc, #144]	@ (8001178 <MX_TIM4_Init+0xe4>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80010ea:	4823      	ldr	r0, [pc, #140]	@ (8001178 <MX_TIM4_Init+0xe4>)
 80010ec:	f002 fc80 	bl	80039f0 <HAL_TIM_Base_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80010f6:	f000 f94f 	bl	8001398 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001100:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001104:	4619      	mov	r1, r3
 8001106:	481c      	ldr	r0, [pc, #112]	@ (8001178 <MX_TIM4_Init+0xe4>)
 8001108:	f002 fddc 	bl	8003cc4 <HAL_TIM_ConfigClockSource>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001112:	f000 f941 	bl	8001398 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001116:	4818      	ldr	r0, [pc, #96]	@ (8001178 <MX_TIM4_Init+0xe4>)
 8001118:	f002 fcb9 	bl	8003a8e <HAL_TIM_PWM_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001122:	f000 f939 	bl	8001398 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001126:	2300      	movs	r3, #0
 8001128:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800112a:	2300      	movs	r3, #0
 800112c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800112e:	f107 0320 	add.w	r3, r7, #32
 8001132:	4619      	mov	r1, r3
 8001134:	4810      	ldr	r0, [pc, #64]	@ (8001178 <MX_TIM4_Init+0xe4>)
 8001136:	f003 f983 	bl	8004440 <HAL_TIMEx_MasterConfigSynchronization>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001140:	f000 f92a 	bl	8001398 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001144:	2360      	movs	r3, #96	@ 0x60
 8001146:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800114c:	2300      	movs	r3, #0
 800114e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001154:	1d3b      	adds	r3, r7, #4
 8001156:	2200      	movs	r2, #0
 8001158:	4619      	mov	r1, r3
 800115a:	4807      	ldr	r0, [pc, #28]	@ (8001178 <MX_TIM4_Init+0xe4>)
 800115c:	f002 fcf0 	bl	8003b40 <HAL_TIM_PWM_ConfigChannel>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001166:	f000 f917 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800116a:	4803      	ldr	r0, [pc, #12]	@ (8001178 <MX_TIM4_Init+0xe4>)
 800116c:	f000 fa12 	bl	8001594 <HAL_TIM_MspPostInit>

}
 8001170:	bf00      	nop
 8001172:	3738      	adds	r7, #56	@ 0x38
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000130 	.word	0x20000130
 800117c:	40000800 	.word	0x40000800

08001180 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08a      	sub	sp, #40	@ 0x28
 8001184:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	605a      	str	r2, [r3, #4]
 8001190:	609a      	str	r2, [r3, #8]
 8001192:	60da      	str	r2, [r3, #12]
 8001194:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	613b      	str	r3, [r7, #16]
 800119a:	4b62      	ldr	r3, [pc, #392]	@ (8001324 <MX_GPIO_Init+0x1a4>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119e:	4a61      	ldr	r2, [pc, #388]	@ (8001324 <MX_GPIO_Init+0x1a4>)
 80011a0:	f043 0304 	orr.w	r3, r3, #4
 80011a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011a6:	4b5f      	ldr	r3, [pc, #380]	@ (8001324 <MX_GPIO_Init+0x1a4>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011aa:	f003 0304 	and.w	r3, r3, #4
 80011ae:	613b      	str	r3, [r7, #16]
 80011b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	4b5b      	ldr	r3, [pc, #364]	@ (8001324 <MX_GPIO_Init+0x1a4>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ba:	4a5a      	ldr	r2, [pc, #360]	@ (8001324 <MX_GPIO_Init+0x1a4>)
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c2:	4b58      	ldr	r3, [pc, #352]	@ (8001324 <MX_GPIO_Init+0x1a4>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	60bb      	str	r3, [r7, #8]
 80011d2:	4b54      	ldr	r3, [pc, #336]	@ (8001324 <MX_GPIO_Init+0x1a4>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d6:	4a53      	ldr	r2, [pc, #332]	@ (8001324 <MX_GPIO_Init+0x1a4>)
 80011d8:	f043 0310 	orr.w	r3, r3, #16
 80011dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011de:	4b51      	ldr	r3, [pc, #324]	@ (8001324 <MX_GPIO_Init+0x1a4>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e2:	f003 0310 	and.w	r3, r3, #16
 80011e6:	60bb      	str	r3, [r7, #8]
 80011e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	607b      	str	r3, [r7, #4]
 80011ee:	4b4d      	ldr	r3, [pc, #308]	@ (8001324 <MX_GPIO_Init+0x1a4>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f2:	4a4c      	ldr	r2, [pc, #304]	@ (8001324 <MX_GPIO_Init+0x1a4>)
 80011f4:	f043 0302 	orr.w	r3, r3, #2
 80011f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011fa:	4b4a      	ldr	r3, [pc, #296]	@ (8001324 <MX_GPIO_Init+0x1a4>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	603b      	str	r3, [r7, #0]
 800120a:	4b46      	ldr	r3, [pc, #280]	@ (8001324 <MX_GPIO_Init+0x1a4>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120e:	4a45      	ldr	r2, [pc, #276]	@ (8001324 <MX_GPIO_Init+0x1a4>)
 8001210:	f043 0308 	orr.w	r3, r3, #8
 8001214:	6313      	str	r3, [r2, #48]	@ 0x30
 8001216:	4b43      	ldr	r3, [pc, #268]	@ (8001324 <MX_GPIO_Init+0x1a4>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121a:	f003 0308 	and.w	r3, r3, #8
 800121e:	603b      	str	r3, [r7, #0]
 8001220:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FA_LED0_GPIO_Port, FA_LED0_Pin, GPIO_PIN_RESET);
 8001222:	2200      	movs	r2, #0
 8001224:	2102      	movs	r1, #2
 8001226:	4840      	ldr	r0, [pc, #256]	@ (8001328 <MX_GPIO_Init+0x1a8>)
 8001228:	f001 fe14 	bl	8002e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FA_LED1_Pin|FA_LED2_Pin, GPIO_PIN_RESET);
 800122c:	2200      	movs	r2, #0
 800122e:	2121      	movs	r1, #33	@ 0x21
 8001230:	483e      	ldr	r0, [pc, #248]	@ (800132c <MX_GPIO_Init+0x1ac>)
 8001232:	f001 fe0f 	bl	8002e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, FA_Data7_Pin|FA_Data6_Pin|FA_Data5_Pin|FA_EN_Pin
 8001236:	2200      	movs	r2, #0
 8001238:	f64a 3180 	movw	r1, #43904	@ 0xab80
 800123c:	483c      	ldr	r0, [pc, #240]	@ (8001330 <MX_GPIO_Init+0x1b0>)
 800123e:	f001 fe09 	bl	8002e54 <HAL_GPIO_WritePin>
                          |FA_RS_Pin|FA_Data4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FA_LED3_GPIO_Port, FA_LED3_Pin, GPIO_PIN_RESET);
 8001242:	2200      	movs	r2, #0
 8001244:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001248:	483a      	ldr	r0, [pc, #232]	@ (8001334 <MX_GPIO_Init+0x1b4>)
 800124a:	f001 fe03 	bl	8002e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : FA_LED0_Pin */
  GPIO_InitStruct.Pin = FA_LED0_Pin;
 800124e:	2302      	movs	r3, #2
 8001250:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001252:	2301      	movs	r3, #1
 8001254:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125a:	2300      	movs	r3, #0
 800125c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FA_LED0_GPIO_Port, &GPIO_InitStruct);
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	4619      	mov	r1, r3
 8001264:	4830      	ldr	r0, [pc, #192]	@ (8001328 <MX_GPIO_Init+0x1a8>)
 8001266:	f001 fc41 	bl	8002aec <HAL_GPIO_Init>

  /*Configure GPIO pin : FA_BP_Pin */
  GPIO_InitStruct.Pin = FA_BP_Pin;
 800126a:	2308      	movs	r3, #8
 800126c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800126e:	2300      	movs	r3, #0
 8001270:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(FA_BP_GPIO_Port, &GPIO_InitStruct);
 8001276:	f107 0314 	add.w	r3, r7, #20
 800127a:	4619      	mov	r1, r3
 800127c:	482a      	ldr	r0, [pc, #168]	@ (8001328 <MX_GPIO_Init+0x1a8>)
 800127e:	f001 fc35 	bl	8002aec <HAL_GPIO_Init>

  /*Configure GPIO pins : FA_LED1_Pin FA_LED2_Pin */
  GPIO_InitStruct.Pin = FA_LED1_Pin|FA_LED2_Pin;
 8001282:	2321      	movs	r3, #33	@ 0x21
 8001284:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001286:	2301      	movs	r3, #1
 8001288:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128e:	2300      	movs	r3, #0
 8001290:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001292:	f107 0314 	add.w	r3, r7, #20
 8001296:	4619      	mov	r1, r3
 8001298:	4824      	ldr	r0, [pc, #144]	@ (800132c <MX_GPIO_Init+0x1ac>)
 800129a:	f001 fc27 	bl	8002aec <HAL_GPIO_Init>

  /*Configure GPIO pins : FA_Cbit3_Pin FA_Cbit1_Pin FA_Cbit0_Pin FA_Cbit2_Pin */
  GPIO_InitStruct.Pin = FA_Cbit3_Pin|FA_Cbit1_Pin|FA_Cbit0_Pin|FA_Cbit2_Pin;
 800129e:	235a      	movs	r3, #90	@ 0x5a
 80012a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a2:	2300      	movs	r3, #0
 80012a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012aa:	f107 0314 	add.w	r3, r7, #20
 80012ae:	4619      	mov	r1, r3
 80012b0:	481e      	ldr	r0, [pc, #120]	@ (800132c <MX_GPIO_Init+0x1ac>)
 80012b2:	f001 fc1b 	bl	8002aec <HAL_GPIO_Init>

  /*Configure GPIO pin : FA_CbitInterrupt_Pin */
  GPIO_InitStruct.Pin = FA_CbitInterrupt_Pin;
 80012b6:	2304      	movs	r3, #4
 80012b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012ba:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80012be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(FA_CbitInterrupt_GPIO_Port, &GPIO_InitStruct);
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	4619      	mov	r1, r3
 80012ca:	4818      	ldr	r0, [pc, #96]	@ (800132c <MX_GPIO_Init+0x1ac>)
 80012cc:	f001 fc0e 	bl	8002aec <HAL_GPIO_Init>

  /*Configure GPIO pins : FA_Data7_Pin FA_Data6_Pin FA_Data5_Pin FA_EN_Pin
                           FA_RS_Pin FA_Data4_Pin */
  GPIO_InitStruct.Pin = FA_Data7_Pin|FA_Data6_Pin|FA_Data5_Pin|FA_EN_Pin
 80012d0:	f64a 3380 	movw	r3, #43904	@ 0xab80
 80012d4:	617b      	str	r3, [r7, #20]
                          |FA_RS_Pin|FA_Data4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d6:	2301      	movs	r3, #1
 80012d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012de:	2300      	movs	r3, #0
 80012e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012e2:	f107 0314 	add.w	r3, r7, #20
 80012e6:	4619      	mov	r1, r3
 80012e8:	4811      	ldr	r0, [pc, #68]	@ (8001330 <MX_GPIO_Init+0x1b0>)
 80012ea:	f001 fbff 	bl	8002aec <HAL_GPIO_Init>

  /*Configure GPIO pin : FA_LED3_Pin */
  GPIO_InitStruct.Pin = FA_LED3_Pin;
 80012ee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80012f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f4:	2301      	movs	r3, #1
 80012f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fc:	2300      	movs	r3, #0
 80012fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FA_LED3_GPIO_Port, &GPIO_InitStruct);
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	4619      	mov	r1, r3
 8001306:	480b      	ldr	r0, [pc, #44]	@ (8001334 <MX_GPIO_Init+0x1b4>)
 8001308:	f001 fbf0 	bl	8002aec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800130c:	2200      	movs	r2, #0
 800130e:	2100      	movs	r1, #0
 8001310:	2008      	movs	r0, #8
 8001312:	f001 fb22 	bl	800295a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001316:	2008      	movs	r0, #8
 8001318:	f001 fb3b 	bl	8002992 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800131c:	bf00      	nop
 800131e:	3728      	adds	r7, #40	@ 0x28
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40023800 	.word	0x40023800
 8001328:	40020800 	.word	0x40020800
 800132c:	40020000 	.word	0x40020000
 8001330:	40021000 	.word	0x40021000
 8001334:	40020400 	.word	0x40020400

08001338 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	80fb      	strh	r3, [r7, #6]

	char letter = keyboardTranslate();
 8001342:	f000 fa63 	bl	800180c <keyboardTranslate>
 8001346:	4603      	mov	r3, r0
 8001348:	73fb      	strb	r3, [r7, #15]

	if (letter == 'D'){
 800134a:	7bfb      	ldrb	r3, [r7, #15]
 800134c:	2b44      	cmp	r3, #68	@ 0x44
 800134e:	d10d      	bne.n	800136c <HAL_GPIO_EXTI_Callback+0x34>

		position++;
 8001350:	4b10      	ldr	r3, [pc, #64]	@ (8001394 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	3301      	adds	r3, #1
 8001356:	b2da      	uxtb	r2, r3
 8001358:	4b0e      	ldr	r3, [pc, #56]	@ (8001394 <HAL_GPIO_EXTI_Callback+0x5c>)
 800135a:	701a      	strb	r2, [r3, #0]
		if(position > data_lgth){ position = data_lgth; }
 800135c:	4b0d      	ldr	r3, [pc, #52]	@ (8001394 <HAL_GPIO_EXTI_Callback+0x5c>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b14      	cmp	r3, #20
 8001362:	d913      	bls.n	800138c <HAL_GPIO_EXTI_Callback+0x54>
 8001364:	4b0b      	ldr	r3, [pc, #44]	@ (8001394 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001366:	2214      	movs	r2, #20
 8001368:	701a      	strb	r2, [r3, #0]
	else if (letter == 'C'){

		if(position == 0){ position = 1; }
		position--;
	}
}
 800136a:	e00f      	b.n	800138c <HAL_GPIO_EXTI_Callback+0x54>
	else if (letter == 'C'){
 800136c:	7bfb      	ldrb	r3, [r7, #15]
 800136e:	2b43      	cmp	r3, #67	@ 0x43
 8001370:	d10c      	bne.n	800138c <HAL_GPIO_EXTI_Callback+0x54>
		if(position == 0){ position = 1; }
 8001372:	4b08      	ldr	r3, [pc, #32]	@ (8001394 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d102      	bne.n	8001380 <HAL_GPIO_EXTI_Callback+0x48>
 800137a:	4b06      	ldr	r3, [pc, #24]	@ (8001394 <HAL_GPIO_EXTI_Callback+0x5c>)
 800137c:	2201      	movs	r2, #1
 800137e:	701a      	strb	r2, [r3, #0]
		position--;
 8001380:	4b04      	ldr	r3, [pc, #16]	@ (8001394 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	3b01      	subs	r3, #1
 8001386:	b2da      	uxtb	r2, r3
 8001388:	4b02      	ldr	r3, [pc, #8]	@ (8001394 <HAL_GPIO_EXTI_Callback+0x5c>)
 800138a:	701a      	strb	r2, [r3, #0]
}
 800138c:	bf00      	nop
 800138e:	3710      	adds	r7, #16
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20000178 	.word	0x20000178

08001398 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800139c:	b672      	cpsid	i
}
 800139e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013a0:	bf00      	nop
 80013a2:	e7fd      	b.n	80013a0 <Error_Handler+0x8>

080013a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	607b      	str	r3, [r7, #4]
 80013ae:	4b10      	ldr	r3, [pc, #64]	@ (80013f0 <HAL_MspInit+0x4c>)
 80013b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013b2:	4a0f      	ldr	r2, [pc, #60]	@ (80013f0 <HAL_MspInit+0x4c>)
 80013b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80013ba:	4b0d      	ldr	r3, [pc, #52]	@ (80013f0 <HAL_MspInit+0x4c>)
 80013bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	603b      	str	r3, [r7, #0]
 80013ca:	4b09      	ldr	r3, [pc, #36]	@ (80013f0 <HAL_MspInit+0x4c>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ce:	4a08      	ldr	r2, [pc, #32]	@ (80013f0 <HAL_MspInit+0x4c>)
 80013d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80013d6:	4b06      	ldr	r3, [pc, #24]	@ (80013f0 <HAL_MspInit+0x4c>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013de:	603b      	str	r3, [r7, #0]
 80013e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	40023800 	.word	0x40023800

080013f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08a      	sub	sp, #40	@ 0x28
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fc:	f107 0314 	add.w	r3, r7, #20
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a17      	ldr	r2, [pc, #92]	@ (8001470 <HAL_ADC_MspInit+0x7c>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d127      	bne.n	8001466 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	613b      	str	r3, [r7, #16]
 800141a:	4b16      	ldr	r3, [pc, #88]	@ (8001474 <HAL_ADC_MspInit+0x80>)
 800141c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800141e:	4a15      	ldr	r2, [pc, #84]	@ (8001474 <HAL_ADC_MspInit+0x80>)
 8001420:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001424:	6453      	str	r3, [r2, #68]	@ 0x44
 8001426:	4b13      	ldr	r3, [pc, #76]	@ (8001474 <HAL_ADC_MspInit+0x80>)
 8001428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800142a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800142e:	613b      	str	r3, [r7, #16]
 8001430:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	4b0f      	ldr	r3, [pc, #60]	@ (8001474 <HAL_ADC_MspInit+0x80>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143a:	4a0e      	ldr	r2, [pc, #56]	@ (8001474 <HAL_ADC_MspInit+0x80>)
 800143c:	f043 0304 	orr.w	r3, r3, #4
 8001440:	6313      	str	r3, [r2, #48]	@ 0x30
 8001442:	4b0c      	ldr	r3, [pc, #48]	@ (8001474 <HAL_ADC_MspInit+0x80>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001446:	f003 0304 	and.w	r3, r3, #4
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = FA_PotArm_Pin|FA_PotBox_Pin;
 800144e:	2305      	movs	r3, #5
 8001450:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001452:	2303      	movs	r3, #3
 8001454:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	4619      	mov	r1, r3
 8001460:	4805      	ldr	r0, [pc, #20]	@ (8001478 <HAL_ADC_MspInit+0x84>)
 8001462:	f001 fb43 	bl	8002aec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001466:	bf00      	nop
 8001468:	3728      	adds	r7, #40	@ 0x28
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40012000 	.word	0x40012000
 8001474:	40023800 	.word	0x40023800
 8001478:	40020800 	.word	0x40020800

0800147c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08a      	sub	sp, #40	@ 0x28
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001484:	f107 0314 	add.w	r3, r7, #20
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a29      	ldr	r2, [pc, #164]	@ (8001540 <HAL_I2C_MspInit+0xc4>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d14b      	bne.n	8001536 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	4b28      	ldr	r3, [pc, #160]	@ (8001544 <HAL_I2C_MspInit+0xc8>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	4a27      	ldr	r2, [pc, #156]	@ (8001544 <HAL_I2C_MspInit+0xc8>)
 80014a8:	f043 0304 	orr.w	r3, r3, #4
 80014ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ae:	4b25      	ldr	r3, [pc, #148]	@ (8001544 <HAL_I2C_MspInit+0xc8>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b2:	f003 0304 	and.w	r3, r3, #4
 80014b6:	613b      	str	r3, [r7, #16]
 80014b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	4b21      	ldr	r3, [pc, #132]	@ (8001544 <HAL_I2C_MspInit+0xc8>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c2:	4a20      	ldr	r2, [pc, #128]	@ (8001544 <HAL_I2C_MspInit+0xc8>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001544 <HAL_I2C_MspInit+0xc8>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = FA_SDA_IMU_Pin;
 80014d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014dc:	2312      	movs	r3, #18
 80014de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e4:	2303      	movs	r3, #3
 80014e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80014e8:	2304      	movs	r3, #4
 80014ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(FA_SDA_IMU_GPIO_Port, &GPIO_InitStruct);
 80014ec:	f107 0314 	add.w	r3, r7, #20
 80014f0:	4619      	mov	r1, r3
 80014f2:	4815      	ldr	r0, [pc, #84]	@ (8001548 <HAL_I2C_MspInit+0xcc>)
 80014f4:	f001 fafa 	bl	8002aec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = FA_SCL_IMU_Pin;
 80014f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014fe:	2312      	movs	r3, #18
 8001500:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001506:	2303      	movs	r3, #3
 8001508:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800150a:	2304      	movs	r3, #4
 800150c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(FA_SCL_IMU_GPIO_Port, &GPIO_InitStruct);
 800150e:	f107 0314 	add.w	r3, r7, #20
 8001512:	4619      	mov	r1, r3
 8001514:	480d      	ldr	r0, [pc, #52]	@ (800154c <HAL_I2C_MspInit+0xd0>)
 8001516:	f001 fae9 	bl	8002aec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	60bb      	str	r3, [r7, #8]
 800151e:	4b09      	ldr	r3, [pc, #36]	@ (8001544 <HAL_I2C_MspInit+0xc8>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001522:	4a08      	ldr	r2, [pc, #32]	@ (8001544 <HAL_I2C_MspInit+0xc8>)
 8001524:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001528:	6413      	str	r3, [r2, #64]	@ 0x40
 800152a:	4b06      	ldr	r3, [pc, #24]	@ (8001544 <HAL_I2C_MspInit+0xc8>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001532:	60bb      	str	r3, [r7, #8]
 8001534:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001536:	bf00      	nop
 8001538:	3728      	adds	r7, #40	@ 0x28
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40005c00 	.word	0x40005c00
 8001544:	40023800 	.word	0x40023800
 8001548:	40020800 	.word	0x40020800
 800154c:	40020000 	.word	0x40020000

08001550 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a0b      	ldr	r2, [pc, #44]	@ (800158c <HAL_TIM_Base_MspInit+0x3c>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d10d      	bne.n	800157e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	4b0a      	ldr	r3, [pc, #40]	@ (8001590 <HAL_TIM_Base_MspInit+0x40>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156a:	4a09      	ldr	r2, [pc, #36]	@ (8001590 <HAL_TIM_Base_MspInit+0x40>)
 800156c:	f043 0304 	orr.w	r3, r3, #4
 8001570:	6413      	str	r3, [r2, #64]	@ 0x40
 8001572:	4b07      	ldr	r3, [pc, #28]	@ (8001590 <HAL_TIM_Base_MspInit+0x40>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001576:	f003 0304 	and.w	r3, r3, #4
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800157e:	bf00      	nop
 8001580:	3714      	adds	r7, #20
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	40000800 	.word	0x40000800
 8001590:	40023800 	.word	0x40023800

08001594 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b088      	sub	sp, #32
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159c:	f107 030c 	add.w	r3, r7, #12
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a12      	ldr	r2, [pc, #72]	@ (80015fc <HAL_TIM_MspPostInit+0x68>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d11e      	bne.n	80015f4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	60bb      	str	r3, [r7, #8]
 80015ba:	4b11      	ldr	r3, [pc, #68]	@ (8001600 <HAL_TIM_MspPostInit+0x6c>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015be:	4a10      	ldr	r2, [pc, #64]	@ (8001600 <HAL_TIM_MspPostInit+0x6c>)
 80015c0:	f043 0308 	orr.w	r3, r3, #8
 80015c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001600 <HAL_TIM_MspPostInit+0x6c>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ca:	f003 0308 	and.w	r3, r3, #8
 80015ce:	60bb      	str	r3, [r7, #8]
 80015d0:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = FA_ESC_PWM_Pin;
 80015d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d8:	2302      	movs	r3, #2
 80015da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e0:	2300      	movs	r3, #0
 80015e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80015e4:	2302      	movs	r3, #2
 80015e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(FA_ESC_PWM_GPIO_Port, &GPIO_InitStruct);
 80015e8:	f107 030c 	add.w	r3, r7, #12
 80015ec:	4619      	mov	r1, r3
 80015ee:	4805      	ldr	r0, [pc, #20]	@ (8001604 <HAL_TIM_MspPostInit+0x70>)
 80015f0:	f001 fa7c 	bl	8002aec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80015f4:	bf00      	nop
 80015f6:	3720      	adds	r7, #32
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40000800 	.word	0x40000800
 8001600:	40023800 	.word	0x40023800
 8001604:	40020c00 	.word	0x40020c00

08001608 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b08a      	sub	sp, #40	@ 0x28
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001610:	f107 0314 	add.w	r3, r7, #20
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a1d      	ldr	r2, [pc, #116]	@ (800169c <HAL_UART_MspInit+0x94>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d133      	bne.n	8001692 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	613b      	str	r3, [r7, #16]
 800162e:	4b1c      	ldr	r3, [pc, #112]	@ (80016a0 <HAL_UART_MspInit+0x98>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001632:	4a1b      	ldr	r2, [pc, #108]	@ (80016a0 <HAL_UART_MspInit+0x98>)
 8001634:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001638:	6413      	str	r3, [r2, #64]	@ 0x40
 800163a:	4b19      	ldr	r3, [pc, #100]	@ (80016a0 <HAL_UART_MspInit+0x98>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001642:	613b      	str	r3, [r7, #16]
 8001644:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	4b15      	ldr	r3, [pc, #84]	@ (80016a0 <HAL_UART_MspInit+0x98>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164e:	4a14      	ldr	r2, [pc, #80]	@ (80016a0 <HAL_UART_MspInit+0x98>)
 8001650:	f043 0308 	orr.w	r3, r3, #8
 8001654:	6313      	str	r3, [r2, #48]	@ 0x30
 8001656:	4b12      	ldr	r3, [pc, #72]	@ (80016a0 <HAL_UART_MspInit+0x98>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165a:	f003 0308 	and.w	r3, r3, #8
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001662:	2360      	movs	r3, #96	@ 0x60
 8001664:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001666:	2302      	movs	r3, #2
 8001668:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166e:	2303      	movs	r3, #3
 8001670:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001672:	2307      	movs	r3, #7
 8001674:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001676:	f107 0314 	add.w	r3, r7, #20
 800167a:	4619      	mov	r1, r3
 800167c:	4809      	ldr	r0, [pc, #36]	@ (80016a4 <HAL_UART_MspInit+0x9c>)
 800167e:	f001 fa35 	bl	8002aec <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001682:	2200      	movs	r2, #0
 8001684:	2100      	movs	r1, #0
 8001686:	2026      	movs	r0, #38	@ 0x26
 8001688:	f001 f967 	bl	800295a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800168c:	2026      	movs	r0, #38	@ 0x26
 800168e:	f001 f980 	bl	8002992 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001692:	bf00      	nop
 8001694:	3728      	adds	r7, #40	@ 0x28
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40004400 	.word	0x40004400
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40020c00 	.word	0x40020c00

080016a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016ac:	bf00      	nop
 80016ae:	e7fd      	b.n	80016ac <NMI_Handler+0x4>

080016b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016b4:	bf00      	nop
 80016b6:	e7fd      	b.n	80016b4 <HardFault_Handler+0x4>

080016b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016bc:	bf00      	nop
 80016be:	e7fd      	b.n	80016bc <MemManage_Handler+0x4>

080016c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016c4:	bf00      	nop
 80016c6:	e7fd      	b.n	80016c4 <BusFault_Handler+0x4>

080016c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016cc:	bf00      	nop
 80016ce:	e7fd      	b.n	80016cc <UsageFault_Handler+0x4>

080016d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016fe:	f000 fdab 	bl	8002258 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}

08001706 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(FA_CbitInterrupt_Pin);
 800170a:	2004      	movs	r0, #4
 800170c:	f001 fbbc 	bl	8002e88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001710:	bf00      	nop
 8001712:	bd80      	pop	{r7, pc}

08001714 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001718:	4802      	ldr	r0, [pc, #8]	@ (8001724 <USART2_IRQHandler+0x10>)
 800171a:	f003 f8a5 	bl	8004868 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	2000018c 	.word	0x2000018c

08001728 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001730:	4a14      	ldr	r2, [pc, #80]	@ (8001784 <_sbrk+0x5c>)
 8001732:	4b15      	ldr	r3, [pc, #84]	@ (8001788 <_sbrk+0x60>)
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800173c:	4b13      	ldr	r3, [pc, #76]	@ (800178c <_sbrk+0x64>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d102      	bne.n	800174a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001744:	4b11      	ldr	r3, [pc, #68]	@ (800178c <_sbrk+0x64>)
 8001746:	4a12      	ldr	r2, [pc, #72]	@ (8001790 <_sbrk+0x68>)
 8001748:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800174a:	4b10      	ldr	r3, [pc, #64]	@ (800178c <_sbrk+0x64>)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4413      	add	r3, r2
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	429a      	cmp	r2, r3
 8001756:	d207      	bcs.n	8001768 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001758:	f004 f804 	bl	8005764 <__errno>
 800175c:	4603      	mov	r3, r0
 800175e:	220c      	movs	r2, #12
 8001760:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001762:	f04f 33ff 	mov.w	r3, #4294967295
 8001766:	e009      	b.n	800177c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001768:	4b08      	ldr	r3, [pc, #32]	@ (800178c <_sbrk+0x64>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800176e:	4b07      	ldr	r3, [pc, #28]	@ (800178c <_sbrk+0x64>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4413      	add	r3, r2
 8001776:	4a05      	ldr	r2, [pc, #20]	@ (800178c <_sbrk+0x64>)
 8001778:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800177a:	68fb      	ldr	r3, [r7, #12]
}
 800177c:	4618      	mov	r0, r3
 800177e:	3718      	adds	r7, #24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20020000 	.word	0x20020000
 8001788:	00000400 	.word	0x00000400
 800178c:	2000017c 	.word	0x2000017c
 8001790:	20000388 	.word	0x20000388

08001794 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001798:	4b06      	ldr	r3, [pc, #24]	@ (80017b4 <SystemInit+0x20>)
 800179a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800179e:	4a05      	ldr	r2, [pc, #20]	@ (80017b4 <SystemInit+0x20>)
 80017a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80017b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017f0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80017bc:	f7ff ffea 	bl	8001794 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017c0:	480c      	ldr	r0, [pc, #48]	@ (80017f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017c2:	490d      	ldr	r1, [pc, #52]	@ (80017f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017c4:	4a0d      	ldr	r2, [pc, #52]	@ (80017fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017c8:	e002      	b.n	80017d0 <LoopCopyDataInit>

080017ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ce:	3304      	adds	r3, #4

080017d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017d4:	d3f9      	bcc.n	80017ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001800 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017d8:	4c0a      	ldr	r4, [pc, #40]	@ (8001804 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017dc:	e001      	b.n	80017e2 <LoopFillZerobss>

080017de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e0:	3204      	adds	r2, #4

080017e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017e4:	d3fb      	bcc.n	80017de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017e6:	f003 ffc3 	bl	8005770 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ea:	f7ff fa8f 	bl	8000d0c <main>
  bx  lr    
 80017ee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80017f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017f8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80017fc:	080060f4 	.word	0x080060f4
  ldr r2, =_sbss
 8001800:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001804:	20000388 	.word	0x20000388

08001808 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001808:	e7fe      	b.n	8001808 <ADC_IRQHandler>
	...

0800180c <keyboardTranslate>:
#include "clavier.h"

char keyboardTranslate(){
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
	/*HAL_GPIO_WritePin(FA_LED0_GPIO_Port, FA_LED0_Pin, HAL_GPIO_ReadPin(FA_Cbit0_GPIO_Port, FA_Cbit0_Pin));
	HAL_GPIO_WritePin(FA_LED1_GPIO_Port, FA_LED1_Pin, HAL_GPIO_ReadPin(FA_Cbit1_GPIO_Port, FA_Cbit1_Pin));
	HAL_GPIO_WritePin(FA_LED2_GPIO_Port, FA_LED2_Pin, HAL_GPIO_ReadPin(FA_Cbit2_GPIO_Port, FA_Cbit2_Pin));
	HAL_GPIO_WritePin(FA_LED3_GPIO_Port, FA_LED3_Pin, HAL_GPIO_ReadPin(FA_Cbit3_GPIO_Port, FA_Cbit3_Pin));*/

	int value = HAL_GPIO_ReadPin(FA_Cbit0_GPIO_Port, FA_Cbit0_Pin);
 8001812:	2110      	movs	r1, #16
 8001814:	4875      	ldr	r0, [pc, #468]	@ (80019ec <keyboardTranslate+0x1e0>)
 8001816:	f001 fb05 	bl	8002e24 <HAL_GPIO_ReadPin>
 800181a:	4603      	mov	r3, r0
 800181c:	607b      	str	r3, [r7, #4]
	value += HAL_GPIO_ReadPin(FA_Cbit1_GPIO_Port, FA_Cbit1_Pin)*10;
 800181e:	2108      	movs	r1, #8
 8001820:	4872      	ldr	r0, [pc, #456]	@ (80019ec <keyboardTranslate+0x1e0>)
 8001822:	f001 faff 	bl	8002e24 <HAL_GPIO_ReadPin>
 8001826:	4603      	mov	r3, r0
 8001828:	461a      	mov	r2, r3
 800182a:	4613      	mov	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4413      	add	r3, r2
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	461a      	mov	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4413      	add	r3, r2
 8001838:	607b      	str	r3, [r7, #4]
	value += HAL_GPIO_ReadPin(FA_Cbit2_GPIO_Port, FA_Cbit2_Pin)*100;
 800183a:	2140      	movs	r1, #64	@ 0x40
 800183c:	486b      	ldr	r0, [pc, #428]	@ (80019ec <keyboardTranslate+0x1e0>)
 800183e:	f001 faf1 	bl	8002e24 <HAL_GPIO_ReadPin>
 8001842:	4603      	mov	r3, r0
 8001844:	461a      	mov	r2, r3
 8001846:	2364      	movs	r3, #100	@ 0x64
 8001848:	fb02 f303 	mul.w	r3, r2, r3
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	4413      	add	r3, r2
 8001850:	607b      	str	r3, [r7, #4]
	value += HAL_GPIO_ReadPin(FA_Cbit3_GPIO_Port, FA_Cbit3_Pin)*1000;
 8001852:	2102      	movs	r1, #2
 8001854:	4865      	ldr	r0, [pc, #404]	@ (80019ec <keyboardTranslate+0x1e0>)
 8001856:	f001 fae5 	bl	8002e24 <HAL_GPIO_ReadPin>
 800185a:	4603      	mov	r3, r0
 800185c:	461a      	mov	r2, r3
 800185e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001862:	fb02 f303 	mul.w	r3, r2, r3
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	607b      	str	r3, [r7, #4]

	switch (value){
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 8001872:	f280 80b4 	bge.w	80019de <keyboardTranslate+0x1d2>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f240 424c 	movw	r2, #1100	@ 0x44c
 800187c:	4293      	cmp	r3, r2
 800187e:	da0f      	bge.n	80018a0 <keyboardTranslate+0x94>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8001886:	f280 80aa 	bge.w	80019de <keyboardTranslate+0x1d2>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001890:	da28      	bge.n	80018e4 <keyboardTranslate+0xd8>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2b09      	cmp	r3, #9
 8001896:	dc7b      	bgt.n	8001990 <keyboardTranslate+0x184>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	da5e      	bge.n	800195c <keyboardTranslate+0x150>
			break;
		case 1111:
			return 'D';
			break;
		default:
			break;
 800189e:	e09e      	b.n	80019de <keyboardTranslate+0x1d2>
	switch (value){
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 80018a6:	2b0b      	cmp	r3, #11
 80018a8:	f200 8099 	bhi.w	80019de <keyboardTranslate+0x1d2>
 80018ac:	a201      	add	r2, pc, #4	@ (adr r2, 80018b4 <keyboardTranslate+0xa8>)
 80018ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018b2:	bf00      	nop
 80018b4:	080019cf 	.word	0x080019cf
 80018b8:	080019d3 	.word	0x080019d3
 80018bc:	080019df 	.word	0x080019df
 80018c0:	080019df 	.word	0x080019df
 80018c4:	080019df 	.word	0x080019df
 80018c8:	080019df 	.word	0x080019df
 80018cc:	080019df 	.word	0x080019df
 80018d0:	080019df 	.word	0x080019df
 80018d4:	080019df 	.word	0x080019df
 80018d8:	080019df 	.word	0x080019df
 80018dc:	080019d7 	.word	0x080019d7
 80018e0:	080019db 	.word	0x080019db
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80018ea:	2b0b      	cmp	r3, #11
 80018ec:	d877      	bhi.n	80019de <keyboardTranslate+0x1d2>
 80018ee:	a201      	add	r2, pc, #4	@ (adr r2, 80018f4 <keyboardTranslate+0xe8>)
 80018f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f4:	080019bf 	.word	0x080019bf
 80018f8:	080019c3 	.word	0x080019c3
 80018fc:	080019df 	.word	0x080019df
 8001900:	080019df 	.word	0x080019df
 8001904:	080019df 	.word	0x080019df
 8001908:	080019df 	.word	0x080019df
 800190c:	080019df 	.word	0x080019df
 8001910:	080019df 	.word	0x080019df
 8001914:	080019df 	.word	0x080019df
 8001918:	080019df 	.word	0x080019df
 800191c:	080019c7 	.word	0x080019c7
 8001920:	080019cb 	.word	0x080019cb
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	3b40      	subs	r3, #64	@ 0x40
 8001928:	2b09      	cmp	r3, #9
 800192a:	d858      	bhi.n	80019de <keyboardTranslate+0x1d2>
 800192c:	a201      	add	r2, pc, #4	@ (adr r2, 8001934 <keyboardTranslate+0x128>)
 800192e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001932:	bf00      	nop
 8001934:	080019af 	.word	0x080019af
 8001938:	080019b3 	.word	0x080019b3
 800193c:	080019df 	.word	0x080019df
 8001940:	080019df 	.word	0x080019df
 8001944:	080019df 	.word	0x080019df
 8001948:	080019df 	.word	0x080019df
 800194c:	080019df 	.word	0x080019df
 8001950:	080019df 	.word	0x080019df
 8001954:	080019b7 	.word	0x080019b7
 8001958:	080019bb 	.word	0x080019bb
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2b09      	cmp	r3, #9
 8001960:	d83d      	bhi.n	80019de <keyboardTranslate+0x1d2>
 8001962:	a201      	add	r2, pc, #4	@ (adr r2, 8001968 <keyboardTranslate+0x15c>)
 8001964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001968:	0800199f 	.word	0x0800199f
 800196c:	080019a3 	.word	0x080019a3
 8001970:	080019df 	.word	0x080019df
 8001974:	080019df 	.word	0x080019df
 8001978:	080019df 	.word	0x080019df
 800197c:	080019df 	.word	0x080019df
 8001980:	080019df 	.word	0x080019df
 8001984:	080019df 	.word	0x080019df
 8001988:	080019a7 	.word	0x080019a7
 800198c:	080019ab 	.word	0x080019ab
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2b49      	cmp	r3, #73	@ 0x49
 8001994:	dc23      	bgt.n	80019de <keyboardTranslate+0x1d2>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2b40      	cmp	r3, #64	@ 0x40
 800199a:	dac3      	bge.n	8001924 <keyboardTranslate+0x118>
			break;
 800199c:	e01f      	b.n	80019de <keyboardTranslate+0x1d2>
			return '0';
 800199e:	2330      	movs	r3, #48	@ 0x30
 80019a0:	e01f      	b.n	80019e2 <keyboardTranslate+0x1d6>
			return '1';
 80019a2:	2331      	movs	r3, #49	@ 0x31
 80019a4:	e01d      	b.n	80019e2 <keyboardTranslate+0x1d6>
			return '2';
 80019a6:	2332      	movs	r3, #50	@ 0x32
 80019a8:	e01b      	b.n	80019e2 <keyboardTranslate+0x1d6>
			return '3';
 80019aa:	2333      	movs	r3, #51	@ 0x33
 80019ac:	e019      	b.n	80019e2 <keyboardTranslate+0x1d6>
			return '4';
 80019ae:	2334      	movs	r3, #52	@ 0x34
 80019b0:	e017      	b.n	80019e2 <keyboardTranslate+0x1d6>
			return '5';
 80019b2:	2335      	movs	r3, #53	@ 0x35
 80019b4:	e015      	b.n	80019e2 <keyboardTranslate+0x1d6>
			return '6';
 80019b6:	2336      	movs	r3, #54	@ 0x36
 80019b8:	e013      	b.n	80019e2 <keyboardTranslate+0x1d6>
			return '7';
 80019ba:	2337      	movs	r3, #55	@ 0x37
 80019bc:	e011      	b.n	80019e2 <keyboardTranslate+0x1d6>
			return '8';
 80019be:	2338      	movs	r3, #56	@ 0x38
 80019c0:	e00f      	b.n	80019e2 <keyboardTranslate+0x1d6>
			return '9';
 80019c2:	2339      	movs	r3, #57	@ 0x39
 80019c4:	e00d      	b.n	80019e2 <keyboardTranslate+0x1d6>
			return '*';
 80019c6:	232a      	movs	r3, #42	@ 0x2a
 80019c8:	e00b      	b.n	80019e2 <keyboardTranslate+0x1d6>
			return '#';
 80019ca:	2323      	movs	r3, #35	@ 0x23
 80019cc:	e009      	b.n	80019e2 <keyboardTranslate+0x1d6>
			return 'A';
 80019ce:	2341      	movs	r3, #65	@ 0x41
 80019d0:	e007      	b.n	80019e2 <keyboardTranslate+0x1d6>
			return 'B';
 80019d2:	2342      	movs	r3, #66	@ 0x42
 80019d4:	e005      	b.n	80019e2 <keyboardTranslate+0x1d6>
			return 'C';
 80019d6:	2343      	movs	r3, #67	@ 0x43
 80019d8:	e003      	b.n	80019e2 <keyboardTranslate+0x1d6>
			return 'D';
 80019da:	2344      	movs	r3, #68	@ 0x44
 80019dc:	e001      	b.n	80019e2 <keyboardTranslate+0x1d6>
			break;
 80019de:	bf00      	nop
	}

	return 0;
 80019e0:	2300      	movs	r3, #0

}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40020000 	.word	0x40020000

080019f0 <IMU_initialize>:
void Decode_IMU_Data(uint8_t IMU_Raw_Data_Buffer[11]);
void GyroOffset_Init(void);
void Imu_Error_Handler(void);

// Fonctions
void IMU_initialize(uint32_t Baudrate) {
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08a      	sub	sp, #40	@ 0x28
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f8:	f107 0314 	add.w	r3, r7, #20
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
 8001a06:	611a      	str	r2, [r3, #16]

    // Enable clocks
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	4b27      	ldr	r3, [pc, #156]	@ (8001aac <IMU_initialize+0xbc>)
 8001a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a10:	4a26      	ldr	r2, [pc, #152]	@ (8001aac <IMU_initialize+0xbc>)
 8001a12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a16:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a18:	4b24      	ldr	r3, [pc, #144]	@ (8001aac <IMU_initialize+0xbc>)
 8001a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a24:	2300      	movs	r3, #0
 8001a26:	60bb      	str	r3, [r7, #8]
 8001a28:	4b20      	ldr	r3, [pc, #128]	@ (8001aac <IMU_initialize+0xbc>)
 8001a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2c:	4a1f      	ldr	r2, [pc, #124]	@ (8001aac <IMU_initialize+0xbc>)
 8001a2e:	f043 0308 	orr.w	r3, r3, #8
 8001a32:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a34:	4b1d      	ldr	r3, [pc, #116]	@ (8001aac <IMU_initialize+0xbc>)
 8001a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a38:	f003 0308 	and.w	r3, r3, #8
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);*/

    // Configure USART2
    huart2.Instance = USART2;
 8001a40:	4b1b      	ldr	r3, [pc, #108]	@ (8001ab0 <IMU_initialize+0xc0>)
 8001a42:	4a1c      	ldr	r2, [pc, #112]	@ (8001ab4 <IMU_initialize+0xc4>)
 8001a44:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = Baudrate;
 8001a46:	4a1a      	ldr	r2, [pc, #104]	@ (8001ab0 <IMU_initialize+0xc0>)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6053      	str	r3, [r2, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a4c:	4b18      	ldr	r3, [pc, #96]	@ (8001ab0 <IMU_initialize+0xc0>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8001a52:	4b17      	ldr	r3, [pc, #92]	@ (8001ab0 <IMU_initialize+0xc0>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8001a58:	4b15      	ldr	r3, [pc, #84]	@ (8001ab0 <IMU_initialize+0xc0>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8001a5e:	4b14      	ldr	r3, [pc, #80]	@ (8001ab0 <IMU_initialize+0xc0>)
 8001a60:	220c      	movs	r2, #12
 8001a62:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a64:	4b12      	ldr	r3, [pc, #72]	@ (8001ab0 <IMU_initialize+0xc0>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a6a:	4b11      	ldr	r3, [pc, #68]	@ (8001ab0 <IMU_initialize+0xc0>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	61da      	str	r2, [r3, #28]

    if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001a70:	480f      	ldr	r0, [pc, #60]	@ (8001ab0 <IMU_initialize+0xc0>)
 8001a72:	f002 fd61 	bl	8004538 <HAL_UART_Init>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <IMU_initialize+0x90>
        // Initialization Error
        Imu_Error_Handler();
 8001a7c:	f000 fa2c 	bl	8001ed8 <Imu_Error_Handler>
    // Configure NVIC for USART
    //HAL_NVIC_SetPriority(USART2_IRQn, 0, 1);
    //HAL_NVIC_EnableIRQ(USART2_IRQn);

    // Send initial commands to IMU
    char gyro_reset[3] = {0xFF, 0xAA, 0x52}; // Angle initialization Z-axis to zero
 8001a80:	4a0d      	ldr	r2, [pc, #52]	@ (8001ab8 <IMU_initialize+0xc8>)
 8001a82:	f107 0310 	add.w	r3, r7, #16
 8001a86:	6812      	ldr	r2, [r2, #0]
 8001a88:	4611      	mov	r1, r2
 8001a8a:	8019      	strh	r1, [r3, #0]
 8001a8c:	3302      	adds	r3, #2
 8001a8e:	0c12      	lsrs	r2, r2, #16
 8001a90:	701a      	strb	r2, [r3, #0]

    HAL_UART_Transmit(&huart2, (uint8_t *)gyro_reset, sizeof(gyro_reset), HAL_MAX_DELAY);
 8001a92:	f107 0110 	add.w	r1, r7, #16
 8001a96:	f04f 33ff 	mov.w	r3, #4294967295
 8001a9a:	2203      	movs	r2, #3
 8001a9c:	4804      	ldr	r0, [pc, #16]	@ (8001ab0 <IMU_initialize+0xc0>)
 8001a9e:	f002 fd9b 	bl	80045d8 <HAL_UART_Transmit>

}
 8001aa2:	bf00      	nop
 8001aa4:	3728      	adds	r7, #40	@ 0x28
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	2000018c 	.word	0x2000018c
 8001ab4:	40004400 	.word	0x40004400
 8001ab8:	0800608c 	.word	0x0800608c

08001abc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	481b      	ldr	r0, [pc, #108]	@ (8001b38 <HAL_UART_RxCpltCallback+0x7c>)
 8001aca:	f001 f9c3 	bl	8002e54 <HAL_GPIO_WritePin>

	if(huart->Instance == USART2) {
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a1a      	ldr	r2, [pc, #104]	@ (8001b3c <HAL_UART_RxCpltCallback+0x80>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d12c      	bne.n	8001b32 <HAL_UART_RxCpltCallback+0x76>
        IMU_Raw_Data_Buffer[IMU_Data_Buffer_counter] = (char)(huart->Instance->DR & (uint8_t)0x00FF);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6859      	ldr	r1, [r3, #4]
 8001ade:	4b18      	ldr	r3, [pc, #96]	@ (8001b40 <HAL_UART_RxCpltCallback+0x84>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	b2c9      	uxtb	r1, r1
 8001ae6:	4b17      	ldr	r3, [pc, #92]	@ (8001b44 <HAL_UART_RxCpltCallback+0x88>)
 8001ae8:	5499      	strb	r1, [r3, r2]

        if(IMU_Data_Buffer_counter == 0 && IMU_Raw_Data_Buffer[0] != 0x55) return;
 8001aea:	4b15      	ldr	r3, [pc, #84]	@ (8001b40 <HAL_UART_RxCpltCallback+0x84>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d103      	bne.n	8001afa <HAL_UART_RxCpltCallback+0x3e>
 8001af2:	4b14      	ldr	r3, [pc, #80]	@ (8001b44 <HAL_UART_RxCpltCallback+0x88>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	2b55      	cmp	r3, #85	@ 0x55
 8001af8:	d11a      	bne.n	8001b30 <HAL_UART_RxCpltCallback+0x74>

        IMU_Data_Buffer_counter++;
 8001afa:	4b11      	ldr	r3, [pc, #68]	@ (8001b40 <HAL_UART_RxCpltCallback+0x84>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	3301      	adds	r3, #1
 8001b00:	b2da      	uxtb	r2, r3
 8001b02:	4b0f      	ldr	r3, [pc, #60]	@ (8001b40 <HAL_UART_RxCpltCallback+0x84>)
 8001b04:	701a      	strb	r2, [r3, #0]

        if(IMU_Data_Buffer_counter == 11) {
 8001b06:	4b0e      	ldr	r3, [pc, #56]	@ (8001b40 <HAL_UART_RxCpltCallback+0x84>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	2b0b      	cmp	r3, #11
 8001b0c:	d105      	bne.n	8001b1a <HAL_UART_RxCpltCallback+0x5e>
            IMU_Data_Buffer_counter = 0;
 8001b0e:	4b0c      	ldr	r3, [pc, #48]	@ (8001b40 <HAL_UART_RxCpltCallback+0x84>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	701a      	strb	r2, [r3, #0]
            Decode_IMU_Data(IMU_Raw_Data_Buffer);
 8001b14:	480b      	ldr	r0, [pc, #44]	@ (8001b44 <HAL_UART_RxCpltCallback+0x88>)
 8001b16:	f000 f819 	bl	8001b4c <Decode_IMU_Data>
        }

        // Enable reception again
        HAL_UART_Receive_IT(&huart2, (uint8_t*)&IMU_Raw_Data_Buffer[IMU_Data_Buffer_counter], 1);
 8001b1a:	4b09      	ldr	r3, [pc, #36]	@ (8001b40 <HAL_UART_RxCpltCallback+0x84>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	461a      	mov	r2, r3
 8001b20:	4b08      	ldr	r3, [pc, #32]	@ (8001b44 <HAL_UART_RxCpltCallback+0x88>)
 8001b22:	4413      	add	r3, r2
 8001b24:	2201      	movs	r2, #1
 8001b26:	4619      	mov	r1, r3
 8001b28:	4807      	ldr	r0, [pc, #28]	@ (8001b48 <HAL_UART_RxCpltCallback+0x8c>)
 8001b2a:	f002 fe77 	bl	800481c <HAL_UART_Receive_IT>
 8001b2e:	e000      	b.n	8001b32 <HAL_UART_RxCpltCallback+0x76>
        if(IMU_Data_Buffer_counter == 0 && IMU_Raw_Data_Buffer[0] != 0x55) return;
 8001b30:	bf00      	nop
    }
}
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40020000 	.word	0x40020000
 8001b3c:	40004400 	.word	0x40004400
 8001b40:	2000018b 	.word	0x2000018b
 8001b44:	20000180 	.word	0x20000180
 8001b48:	2000018c 	.word	0x2000018c

08001b4c <Decode_IMU_Data>:

void Decode_IMU_Data(uint8_t IMU_Raw_Data_Buffer[11]) {
 8001b4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b50:	b088      	sub	sp, #32
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
    if(IMU_Raw_Data_Buffer[0] == 0x55) {
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2b55      	cmp	r3, #85	@ 0x55
 8001b5c:	f040 81a3 	bne.w	8001ea6 <Decode_IMU_Data+0x35a>
        int16_t temp_a[3] = {0, 0, 0};
 8001b60:	2300      	movs	r3, #0
 8001b62:	833b      	strh	r3, [r7, #24]
 8001b64:	2300      	movs	r3, #0
 8001b66:	837b      	strh	r3, [r7, #26]
 8001b68:	2300      	movs	r3, #0
 8001b6a:	83bb      	strh	r3, [r7, #28]
        int16_t temp_w[3] = {0, 0, 0};
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	823b      	strh	r3, [r7, #16]
 8001b70:	2300      	movs	r3, #0
 8001b72:	827b      	strh	r3, [r7, #18]
 8001b74:	2300      	movs	r3, #0
 8001b76:	82bb      	strh	r3, [r7, #20]
        int16_t temp_angle[3] = {0, 0, 0};
 8001b78:	2300      	movs	r3, #0
 8001b7a:	813b      	strh	r3, [r7, #8]
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	817b      	strh	r3, [r7, #10]
 8001b80:	2300      	movs	r3, #0
 8001b82:	81bb      	strh	r3, [r7, #12]

        switch(IMU_Raw_Data_Buffer[1]) {
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3301      	adds	r3, #1
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	2b53      	cmp	r3, #83	@ 0x53
 8001b8c:	f000 8109 	beq.w	8001da2 <Decode_IMU_Data+0x256>
 8001b90:	2b53      	cmp	r3, #83	@ 0x53
 8001b92:	f300 8188 	bgt.w	8001ea6 <Decode_IMU_Data+0x35a>
 8001b96:	2b51      	cmp	r3, #81	@ 0x51
 8001b98:	d002      	beq.n	8001ba0 <Decode_IMU_Data+0x54>
 8001b9a:	2b52      	cmp	r3, #82	@ 0x52
 8001b9c:	d06d      	beq.n	8001c7a <Decode_IMU_Data+0x12e>
                angle[1] = -(((double)temp_angle[1]) * 180.0 / 32768.0) + 90.0;
                angle[2] = -(((double)temp_angle[2]) * 180.0 / 32768.0) + 90.0;
                break;
        }
    }
}
 8001b9e:	e182      	b.n	8001ea6 <Decode_IMU_Data+0x35a>
                temp_a[0] = ((int16_t)IMU_Raw_Data_Buffer[3] << 8) | (int16_t)IMU_Raw_Data_Buffer[2];
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	3303      	adds	r3, #3
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	021b      	lsls	r3, r3, #8
 8001ba8:	b21a      	sxth	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	3302      	adds	r3, #2
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	b21b      	sxth	r3, r3
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	b21b      	sxth	r3, r3
 8001bb6:	833b      	strh	r3, [r7, #24]
                temp_a[1] = ((int16_t)IMU_Raw_Data_Buffer[5] << 8) | (int16_t)IMU_Raw_Data_Buffer[4];
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	3305      	adds	r3, #5
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	021b      	lsls	r3, r3, #8
 8001bc0:	b21a      	sxth	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	3304      	adds	r3, #4
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	b21b      	sxth	r3, r3
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	b21b      	sxth	r3, r3
 8001bce:	837b      	strh	r3, [r7, #26]
                temp_a[2] = ((int16_t)IMU_Raw_Data_Buffer[7] << 8) | (int16_t)IMU_Raw_Data_Buffer[6];
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	3307      	adds	r3, #7
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	021b      	lsls	r3, r3, #8
 8001bd8:	b21a      	sxth	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	3306      	adds	r3, #6
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	b21b      	sxth	r3, r3
 8001be2:	4313      	orrs	r3, r2
 8001be4:	b21b      	sxth	r3, r3
 8001be6:	83bb      	strh	r3, [r7, #28]
                acc[0] = ((double)temp_a[0]) * 16 / 32768.0;
 8001be8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7fe fc99 	bl	8000524 <__aeabi_i2d>
 8001bf2:	f04f 0200 	mov.w	r2, #0
 8001bf6:	4bae      	ldr	r3, [pc, #696]	@ (8001eb0 <Decode_IMU_Data+0x364>)
 8001bf8:	f7fe fcfe 	bl	80005f8 <__aeabi_dmul>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	460b      	mov	r3, r1
 8001c00:	4610      	mov	r0, r2
 8001c02:	4619      	mov	r1, r3
 8001c04:	f04f 0200 	mov.w	r2, #0
 8001c08:	4baa      	ldr	r3, [pc, #680]	@ (8001eb4 <Decode_IMU_Data+0x368>)
 8001c0a:	f7fe fe1f 	bl	800084c <__aeabi_ddiv>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	460b      	mov	r3, r1
 8001c12:	49a9      	ldr	r1, [pc, #676]	@ (8001eb8 <Decode_IMU_Data+0x36c>)
 8001c14:	e9c1 2300 	strd	r2, r3, [r1]
                acc[1] = ((double)temp_a[1]) * 16 / 32768.0;
 8001c18:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7fe fc81 	bl	8000524 <__aeabi_i2d>
 8001c22:	f04f 0200 	mov.w	r2, #0
 8001c26:	4ba2      	ldr	r3, [pc, #648]	@ (8001eb0 <Decode_IMU_Data+0x364>)
 8001c28:	f7fe fce6 	bl	80005f8 <__aeabi_dmul>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	460b      	mov	r3, r1
 8001c30:	4610      	mov	r0, r2
 8001c32:	4619      	mov	r1, r3
 8001c34:	f04f 0200 	mov.w	r2, #0
 8001c38:	4b9e      	ldr	r3, [pc, #632]	@ (8001eb4 <Decode_IMU_Data+0x368>)
 8001c3a:	f7fe fe07 	bl	800084c <__aeabi_ddiv>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	499d      	ldr	r1, [pc, #628]	@ (8001eb8 <Decode_IMU_Data+0x36c>)
 8001c44:	e9c1 2302 	strd	r2, r3, [r1, #8]
                acc[2] = ((double)temp_a[2]) * 16 / 32768.0;
 8001c48:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7fe fc69 	bl	8000524 <__aeabi_i2d>
 8001c52:	f04f 0200 	mov.w	r2, #0
 8001c56:	4b96      	ldr	r3, [pc, #600]	@ (8001eb0 <Decode_IMU_Data+0x364>)
 8001c58:	f7fe fcce 	bl	80005f8 <__aeabi_dmul>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	460b      	mov	r3, r1
 8001c60:	4610      	mov	r0, r2
 8001c62:	4619      	mov	r1, r3
 8001c64:	f04f 0200 	mov.w	r2, #0
 8001c68:	4b92      	ldr	r3, [pc, #584]	@ (8001eb4 <Decode_IMU_Data+0x368>)
 8001c6a:	f7fe fdef 	bl	800084c <__aeabi_ddiv>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	4991      	ldr	r1, [pc, #580]	@ (8001eb8 <Decode_IMU_Data+0x36c>)
 8001c74:	e9c1 2304 	strd	r2, r3, [r1, #16]
                break;
 8001c78:	e115      	b.n	8001ea6 <Decode_IMU_Data+0x35a>
                temp_w[0] = ((int16_t)IMU_Raw_Data_Buffer[3] << 8) | (int16_t)IMU_Raw_Data_Buffer[2];
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	3303      	adds	r3, #3
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	021b      	lsls	r3, r3, #8
 8001c82:	b21a      	sxth	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3302      	adds	r3, #2
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	b21b      	sxth	r3, r3
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	b21b      	sxth	r3, r3
 8001c90:	823b      	strh	r3, [r7, #16]
                temp_w[1] = ((int16_t)IMU_Raw_Data_Buffer[5] << 8) | (int16_t)IMU_Raw_Data_Buffer[4];
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	3305      	adds	r3, #5
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	021b      	lsls	r3, r3, #8
 8001c9a:	b21a      	sxth	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3304      	adds	r3, #4
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	b21b      	sxth	r3, r3
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	b21b      	sxth	r3, r3
 8001ca8:	827b      	strh	r3, [r7, #18]
                temp_w[2] = ((int16_t)IMU_Raw_Data_Buffer[7] << 8) | (int16_t)IMU_Raw_Data_Buffer[6];
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	3307      	adds	r3, #7
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	021b      	lsls	r3, r3, #8
 8001cb2:	b21a      	sxth	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3306      	adds	r3, #6
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	b21b      	sxth	r3, r3
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	b21b      	sxth	r3, r3
 8001cc0:	82bb      	strh	r3, [r7, #20]
                gyro[0] = -(((double)temp_w[0]) * 2000.0 / 32768.0) - gyro_offset[0];
 8001cc2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7fe fc2c 	bl	8000524 <__aeabi_i2d>
 8001ccc:	f04f 0200 	mov.w	r2, #0
 8001cd0:	4b7a      	ldr	r3, [pc, #488]	@ (8001ebc <Decode_IMU_Data+0x370>)
 8001cd2:	f7fe fc91 	bl	80005f8 <__aeabi_dmul>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	460b      	mov	r3, r1
 8001cda:	4610      	mov	r0, r2
 8001cdc:	4619      	mov	r1, r3
 8001cde:	f04f 0200 	mov.w	r2, #0
 8001ce2:	4b74      	ldr	r3, [pc, #464]	@ (8001eb4 <Decode_IMU_Data+0x368>)
 8001ce4:	f7fe fdb2 	bl	800084c <__aeabi_ddiv>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	460b      	mov	r3, r1
 8001cec:	4692      	mov	sl, r2
 8001cee:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
 8001cf2:	4b73      	ldr	r3, [pc, #460]	@ (8001ec0 <Decode_IMU_Data+0x374>)
 8001cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf8:	4650      	mov	r0, sl
 8001cfa:	4659      	mov	r1, fp
 8001cfc:	f7fe fac4 	bl	8000288 <__aeabi_dsub>
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	496f      	ldr	r1, [pc, #444]	@ (8001ec4 <Decode_IMU_Data+0x378>)
 8001d06:	e9c1 2300 	strd	r2, r3, [r1]
                gyro[1] = -(((double)temp_w[1]) * 2000.0 / 32768.0) - gyro_offset[1];
 8001d0a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7fe fc08 	bl	8000524 <__aeabi_i2d>
 8001d14:	f04f 0200 	mov.w	r2, #0
 8001d18:	4b68      	ldr	r3, [pc, #416]	@ (8001ebc <Decode_IMU_Data+0x370>)
 8001d1a:	f7fe fc6d 	bl	80005f8 <__aeabi_dmul>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	460b      	mov	r3, r1
 8001d22:	4610      	mov	r0, r2
 8001d24:	4619      	mov	r1, r3
 8001d26:	f04f 0200 	mov.w	r2, #0
 8001d2a:	4b62      	ldr	r3, [pc, #392]	@ (8001eb4 <Decode_IMU_Data+0x368>)
 8001d2c:	f7fe fd8e 	bl	800084c <__aeabi_ddiv>
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	4690      	mov	r8, r2
 8001d36:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 8001d3a:	4b61      	ldr	r3, [pc, #388]	@ (8001ec0 <Decode_IMU_Data+0x374>)
 8001d3c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001d40:	4640      	mov	r0, r8
 8001d42:	4649      	mov	r1, r9
 8001d44:	f7fe faa0 	bl	8000288 <__aeabi_dsub>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	495d      	ldr	r1, [pc, #372]	@ (8001ec4 <Decode_IMU_Data+0x378>)
 8001d4e:	e9c1 2302 	strd	r2, r3, [r1, #8]
                gyro[2] = -(((double)temp_w[2]) * 2000.0 / 32768.0) - gyro_offset[2];
 8001d52:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7fe fbe4 	bl	8000524 <__aeabi_i2d>
 8001d5c:	f04f 0200 	mov.w	r2, #0
 8001d60:	4b56      	ldr	r3, [pc, #344]	@ (8001ebc <Decode_IMU_Data+0x370>)
 8001d62:	f7fe fc49 	bl	80005f8 <__aeabi_dmul>
 8001d66:	4602      	mov	r2, r0
 8001d68:	460b      	mov	r3, r1
 8001d6a:	4610      	mov	r0, r2
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	f04f 0200 	mov.w	r2, #0
 8001d72:	4b50      	ldr	r3, [pc, #320]	@ (8001eb4 <Decode_IMU_Data+0x368>)
 8001d74:	f7fe fd6a 	bl	800084c <__aeabi_ddiv>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	4614      	mov	r4, r2
 8001d7e:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001d82:	4b4f      	ldr	r3, [pc, #316]	@ (8001ec0 <Decode_IMU_Data+0x374>)
 8001d84:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001d88:	4620      	mov	r0, r4
 8001d8a:	4629      	mov	r1, r5
 8001d8c:	f7fe fa7c 	bl	8000288 <__aeabi_dsub>
 8001d90:	4602      	mov	r2, r0
 8001d92:	460b      	mov	r3, r1
 8001d94:	494b      	ldr	r1, [pc, #300]	@ (8001ec4 <Decode_IMU_Data+0x378>)
 8001d96:	e9c1 2304 	strd	r2, r3, [r1, #16]
                _GyroValueUpdated = 1;
 8001d9a:	4b4b      	ldr	r3, [pc, #300]	@ (8001ec8 <Decode_IMU_Data+0x37c>)
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	601a      	str	r2, [r3, #0]
                break;
 8001da0:	e081      	b.n	8001ea6 <Decode_IMU_Data+0x35a>
                temp_angle[0] = ((int16_t)IMU_Raw_Data_Buffer[3] << 8) | (int16_t)IMU_Raw_Data_Buffer[2];
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	3303      	adds	r3, #3
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	021b      	lsls	r3, r3, #8
 8001daa:	b21a      	sxth	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3302      	adds	r3, #2
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	b21b      	sxth	r3, r3
 8001db4:	4313      	orrs	r3, r2
 8001db6:	b21b      	sxth	r3, r3
 8001db8:	813b      	strh	r3, [r7, #8]
                temp_angle[1] = ((int16_t)IMU_Raw_Data_Buffer[5] << 8) | (int16_t)IMU_Raw_Data_Buffer[4];
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	3305      	adds	r3, #5
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	021b      	lsls	r3, r3, #8
 8001dc2:	b21a      	sxth	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3304      	adds	r3, #4
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	b21b      	sxth	r3, r3
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	b21b      	sxth	r3, r3
 8001dd0:	817b      	strh	r3, [r7, #10]
                temp_angle[2] = ((int16_t)IMU_Raw_Data_Buffer[7] << 8) | (int16_t)IMU_Raw_Data_Buffer[6];
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	3307      	adds	r3, #7
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	021b      	lsls	r3, r3, #8
 8001dda:	b21a      	sxth	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	3306      	adds	r3, #6
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	b21b      	sxth	r3, r3
 8001de4:	4313      	orrs	r3, r2
 8001de6:	b21b      	sxth	r3, r3
 8001de8:	81bb      	strh	r3, [r7, #12]
                angle[0] = -(((double)temp_angle[0]) * 180.0 / 32768.0) + 90.0;
 8001dea:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7fe fb98 	bl	8000524 <__aeabi_i2d>
 8001df4:	f04f 0200 	mov.w	r2, #0
 8001df8:	4b34      	ldr	r3, [pc, #208]	@ (8001ecc <Decode_IMU_Data+0x380>)
 8001dfa:	f7fe fbfd 	bl	80005f8 <__aeabi_dmul>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	460b      	mov	r3, r1
 8001e02:	4610      	mov	r0, r2
 8001e04:	4619      	mov	r1, r3
 8001e06:	f04f 0200 	mov.w	r2, #0
 8001e0a:	4b2a      	ldr	r3, [pc, #168]	@ (8001eb4 <Decode_IMU_Data+0x368>)
 8001e0c:	f7fe fd1e 	bl	800084c <__aeabi_ddiv>
 8001e10:	4602      	mov	r2, r0
 8001e12:	460b      	mov	r3, r1
 8001e14:	f04f 0000 	mov.w	r0, #0
 8001e18:	492d      	ldr	r1, [pc, #180]	@ (8001ed0 <Decode_IMU_Data+0x384>)
 8001e1a:	f7fe fa35 	bl	8000288 <__aeabi_dsub>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	460b      	mov	r3, r1
 8001e22:	492c      	ldr	r1, [pc, #176]	@ (8001ed4 <Decode_IMU_Data+0x388>)
 8001e24:	e9c1 2300 	strd	r2, r3, [r1]
                angle[1] = -(((double)temp_angle[1]) * 180.0 / 32768.0) + 90.0;
 8001e28:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7fe fb79 	bl	8000524 <__aeabi_i2d>
 8001e32:	f04f 0200 	mov.w	r2, #0
 8001e36:	4b25      	ldr	r3, [pc, #148]	@ (8001ecc <Decode_IMU_Data+0x380>)
 8001e38:	f7fe fbde 	bl	80005f8 <__aeabi_dmul>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
 8001e40:	4610      	mov	r0, r2
 8001e42:	4619      	mov	r1, r3
 8001e44:	f04f 0200 	mov.w	r2, #0
 8001e48:	4b1a      	ldr	r3, [pc, #104]	@ (8001eb4 <Decode_IMU_Data+0x368>)
 8001e4a:	f7fe fcff 	bl	800084c <__aeabi_ddiv>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	f04f 0000 	mov.w	r0, #0
 8001e56:	491e      	ldr	r1, [pc, #120]	@ (8001ed0 <Decode_IMU_Data+0x384>)
 8001e58:	f7fe fa16 	bl	8000288 <__aeabi_dsub>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	460b      	mov	r3, r1
 8001e60:	491c      	ldr	r1, [pc, #112]	@ (8001ed4 <Decode_IMU_Data+0x388>)
 8001e62:	e9c1 2302 	strd	r2, r3, [r1, #8]
                angle[2] = -(((double)temp_angle[2]) * 180.0 / 32768.0) + 90.0;
 8001e66:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7fe fb5a 	bl	8000524 <__aeabi_i2d>
 8001e70:	f04f 0200 	mov.w	r2, #0
 8001e74:	4b15      	ldr	r3, [pc, #84]	@ (8001ecc <Decode_IMU_Data+0x380>)
 8001e76:	f7fe fbbf 	bl	80005f8 <__aeabi_dmul>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	4610      	mov	r0, r2
 8001e80:	4619      	mov	r1, r3
 8001e82:	f04f 0200 	mov.w	r2, #0
 8001e86:	4b0b      	ldr	r3, [pc, #44]	@ (8001eb4 <Decode_IMU_Data+0x368>)
 8001e88:	f7fe fce0 	bl	800084c <__aeabi_ddiv>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	460b      	mov	r3, r1
 8001e90:	f04f 0000 	mov.w	r0, #0
 8001e94:	490e      	ldr	r1, [pc, #56]	@ (8001ed0 <Decode_IMU_Data+0x384>)
 8001e96:	f7fe f9f7 	bl	8000288 <__aeabi_dsub>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	490d      	ldr	r1, [pc, #52]	@ (8001ed4 <Decode_IMU_Data+0x388>)
 8001ea0:	e9c1 2304 	strd	r2, r3, [r1, #16]
                break;
 8001ea4:	bf00      	nop
}
 8001ea6:	bf00      	nop
 8001ea8:	3720      	adds	r7, #32
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001eb0:	40300000 	.word	0x40300000
 8001eb4:	40e00000 	.word	0x40e00000
 8001eb8:	200001d8 	.word	0x200001d8
 8001ebc:	409f4000 	.word	0x409f4000
 8001ec0:	20000220 	.word	0x20000220
 8001ec4:	200001f0 	.word	0x200001f0
 8001ec8:	20000238 	.word	0x20000238
 8001ecc:	40668000 	.word	0x40668000
 8001ed0:	40568000 	.word	0x40568000
 8001ed4:	20000208 	.word	0x20000208

08001ed8 <Imu_Error_Handler>:

        _IsGyroIntialized = 1;
    }
}

void Imu_Error_Handler(void) {
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0

    while(1) {
 8001edc:	bf00      	nop
 8001ede:	e7fd      	b.n	8001edc <Imu_Error_Handler+0x4>

08001ee0 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8001ee0:	b4b0      	push	{r4, r5, r7}
 8001ee2:	b08b      	sub	sp, #44	@ 0x2c
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
 8001eec:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8001eee:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001ef2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	lcd.en_pin = en_pin;
 8001ef6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001efa:	84bb      	strh	r3, [r7, #36]	@ 0x24
	lcd.en_port = en_port;
 8001efc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001efe:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8001f00:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001f02:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	613b      	str	r3, [r7, #16]

	return lcd;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	461d      	mov	r5, r3
 8001f14:	f107 0410 	add.w	r4, r7, #16
 8001f18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f1c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f20:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001f24:	68f8      	ldr	r0, [r7, #12]
 8001f26:	372c      	adds	r7, #44	@ 0x2c
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bcb0      	pop	{r4, r5, r7}
 8001f2c:	4770      	bx	lr
	...

08001f30 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8001f30:	b5b0      	push	{r4, r5, r7, lr}
 8001f32:	b08c      	sub	sp, #48	@ 0x30
 8001f34:	af04      	add	r7, sp, #16
 8001f36:	61f8      	str	r0, [r7, #28]
	*lcd = Lcd_create(ports, pins, FA_RS_GPIO_Port, FA_RS_Pin, FA_EN_GPIO_Port, FA_EN_Pin, LCD_4_BIT_MODE);
 8001f38:	69fc      	ldr	r4, [r7, #28]
 8001f3a:	4638      	mov	r0, r7
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	9303      	str	r3, [sp, #12]
 8001f40:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001f44:	9302      	str	r3, [sp, #8]
 8001f46:	4b1b      	ldr	r3, [pc, #108]	@ (8001fb4 <Lcd_init+0x84>)
 8001f48:	9301      	str	r3, [sp, #4]
 8001f4a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f4e:	9300      	str	r3, [sp, #0]
 8001f50:	4b18      	ldr	r3, [pc, #96]	@ (8001fb4 <Lcd_init+0x84>)
 8001f52:	4a19      	ldr	r2, [pc, #100]	@ (8001fb8 <Lcd_init+0x88>)
 8001f54:	4919      	ldr	r1, [pc, #100]	@ (8001fbc <Lcd_init+0x8c>)
 8001f56:	f7ff ffc3 	bl	8001ee0 <Lcd_create>
 8001f5a:	4625      	mov	r5, r4
 8001f5c:	463c      	mov	r4, r7
 8001f5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f62:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f66:	e885 0003 	stmia.w	r5, {r0, r1}

	if(lcd->mode == LCD_4_BIT_MODE)
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	7d9b      	ldrb	r3, [r3, #22]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d10c      	bne.n	8001f8c <Lcd_init+0x5c>
	{
			lcd_write_command(lcd, 0x33);
 8001f72:	2133      	movs	r1, #51	@ 0x33
 8001f74:	69f8      	ldr	r0, [r7, #28]
 8001f76:	f000 f881 	bl	800207c <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8001f7a:	2132      	movs	r1, #50	@ 0x32
 8001f7c:	69f8      	ldr	r0, [r7, #28]
 8001f7e:	f000 f87d 	bl	800207c <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8001f82:	2128      	movs	r1, #40	@ 0x28
 8001f84:	69f8      	ldr	r0, [r7, #28]
 8001f86:	f000 f879 	bl	800207c <lcd_write_command>
 8001f8a:	e003      	b.n	8001f94 <Lcd_init+0x64>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8001f8c:	2138      	movs	r1, #56	@ 0x38
 8001f8e:	69f8      	ldr	r0, [r7, #28]
 8001f90:	f000 f874 	bl	800207c <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8001f94:	2101      	movs	r1, #1
 8001f96:	69f8      	ldr	r0, [r7, #28]
 8001f98:	f000 f870 	bl	800207c <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8001f9c:	210c      	movs	r1, #12
 8001f9e:	69f8      	ldr	r0, [r7, #28]
 8001fa0:	f000 f86c 	bl	800207c <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8001fa4:	2106      	movs	r1, #6
 8001fa6:	69f8      	ldr	r0, [r7, #28]
 8001fa8:	f000 f868 	bl	800207c <lcd_write_command>
}
 8001fac:	bf00      	nop
 8001fae:	3720      	adds	r7, #32
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bdb0      	pop	{r4, r5, r7, pc}
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	20000014 	.word	0x20000014
 8001fbc:	20000004 	.word	0x20000004

08001fc0 <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 8001fca:	f107 030c 	add.w	r3, r7, #12
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	4906      	ldr	r1, [pc, #24]	@ (8001fec <Lcd_int+0x2c>)
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f003 fb9e 	bl	8005714 <siprintf>

	Lcd_string(lcd, buffer);
 8001fd8:	f107 030c 	add.w	r3, r7, #12
 8001fdc:	4619      	mov	r1, r3
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 f806 	bl	8001ff0 <Lcd_string>
}
 8001fe4:	bf00      	nop
 8001fe6:	3718      	adds	r7, #24
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	08006090 	.word	0x08006090

08001ff0 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8001ff0:	b590      	push	{r4, r7, lr}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	73fb      	strb	r3, [r7, #15]
 8001ffe:	e00a      	b.n	8002016 <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8002000:	7bfb      	ldrb	r3, [r7, #15]
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	4413      	add	r3, r2
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	4619      	mov	r1, r3
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 f864 	bl	80020d8 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8002010:	7bfb      	ldrb	r3, [r7, #15]
 8002012:	3301      	adds	r3, #1
 8002014:	73fb      	strb	r3, [r7, #15]
 8002016:	7bfc      	ldrb	r4, [r7, #15]
 8002018:	6838      	ldr	r0, [r7, #0]
 800201a:	f7fe f8d9 	bl	80001d0 <strlen>
 800201e:	4603      	mov	r3, r0
 8002020:	429c      	cmp	r4, r3
 8002022:	d3ed      	bcc.n	8002000 <Lcd_string+0x10>
	}
}
 8002024:	bf00      	nop
 8002026:	bf00      	nop
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	bd90      	pop	{r4, r7, pc}
	...

08002030 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	460b      	mov	r3, r1
 800203a:	70fb      	strb	r3, [r7, #3]
 800203c:	4613      	mov	r3, r2
 800203e:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
 8002040:	78fb      	ldrb	r3, [r7, #3]
 8002042:	4a07      	ldr	r2, [pc, #28]	@ (8002060 <Lcd_cursor+0x30>)
 8002044:	5cd2      	ldrb	r2, [r2, r3]
 8002046:	78bb      	ldrb	r3, [r7, #2]
 8002048:	4413      	add	r3, r2
 800204a:	b2db      	uxtb	r3, r3
 800204c:	3b80      	subs	r3, #128	@ 0x80
 800204e:	b2db      	uxtb	r3, r3
 8002050:	4619      	mov	r1, r3
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f812 	bl	800207c <lcd_write_command>
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
	#endif
}
 8002058:	bf00      	nop
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	080060ac 	.word	0x080060ac

08002064 <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 800206c:	2101      	movs	r1, #1
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 f804 	bl	800207c <lcd_write_command>
}
 8002074:	bf00      	nop
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	460b      	mov	r3, r1
 8002086:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6898      	ldr	r0, [r3, #8]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	899b      	ldrh	r3, [r3, #12]
 8002090:	2200      	movs	r2, #0
 8002092:	4619      	mov	r1, r3
 8002094:	f000 fede 	bl	8002e54 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	7d9b      	ldrb	r3, [r3, #22]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d111      	bne.n	80020c4 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 80020a0:	78fb      	ldrb	r3, [r7, #3]
 80020a2:	091b      	lsrs	r3, r3, #4
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2204      	movs	r2, #4
 80020a8:	4619      	mov	r1, r3
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 f842 	bl	8002134 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 80020b0:	78fb      	ldrb	r3, [r7, #3]
 80020b2:	f003 030f 	and.w	r3, r3, #15
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	2204      	movs	r2, #4
 80020ba:	4619      	mov	r1, r3
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f000 f839 	bl	8002134 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 80020c2:	e005      	b.n	80020d0 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 80020c4:	78fb      	ldrb	r3, [r7, #3]
 80020c6:	2208      	movs	r2, #8
 80020c8:	4619      	mov	r1, r3
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 f832 	bl	8002134 <lcd_write>
}
 80020d0:	bf00      	nop
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	460b      	mov	r3, r1
 80020e2:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6898      	ldr	r0, [r3, #8]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	899b      	ldrh	r3, [r3, #12]
 80020ec:	2201      	movs	r2, #1
 80020ee:	4619      	mov	r1, r3
 80020f0:	f000 feb0 	bl	8002e54 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	7d9b      	ldrb	r3, [r3, #22]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d111      	bne.n	8002120 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 80020fc:	78fb      	ldrb	r3, [r7, #3]
 80020fe:	091b      	lsrs	r3, r3, #4
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2204      	movs	r2, #4
 8002104:	4619      	mov	r1, r3
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 f814 	bl	8002134 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 800210c:	78fb      	ldrb	r3, [r7, #3]
 800210e:	f003 030f 	and.w	r3, r3, #15
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2204      	movs	r2, #4
 8002116:	4619      	mov	r1, r3
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f000 f80b 	bl	8002134 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 800211e:	e005      	b.n	800212c <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8002120:	78fb      	ldrb	r3, [r7, #3]
 8002122:	2208      	movs	r2, #8
 8002124:	4619      	mov	r1, r3
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 f804 	bl	8002134 <lcd_write>
}
 800212c:	bf00      	nop
 800212e:	3708      	adds	r7, #8
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	460b      	mov	r3, r1
 800213e:	70fb      	strb	r3, [r7, #3]
 8002140:	4613      	mov	r3, r2
 8002142:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8002144:	2300      	movs	r3, #0
 8002146:	73fb      	strb	r3, [r7, #15]
 8002148:	e019      	b.n	800217e <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	7bfb      	ldrb	r3, [r7, #15]
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	6818      	ldr	r0, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685a      	ldr	r2, [r3, #4]
 800215a:	7bfb      	ldrb	r3, [r7, #15]
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	4413      	add	r3, r2
 8002160:	8819      	ldrh	r1, [r3, #0]
 8002162:	78fa      	ldrb	r2, [r7, #3]
 8002164:	7bfb      	ldrb	r3, [r7, #15]
 8002166:	fa42 f303 	asr.w	r3, r2, r3
 800216a:	b2db      	uxtb	r3, r3
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	b2db      	uxtb	r3, r3
 8002172:	461a      	mov	r2, r3
 8002174:	f000 fe6e 	bl	8002e54 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8002178:	7bfb      	ldrb	r3, [r7, #15]
 800217a:	3301      	adds	r3, #1
 800217c:	73fb      	strb	r3, [r7, #15]
 800217e:	7bfa      	ldrb	r2, [r7, #15]
 8002180:	78bb      	ldrb	r3, [r7, #2]
 8002182:	429a      	cmp	r2, r3
 8002184:	d3e1      	bcc.n	800214a <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6918      	ldr	r0, [r3, #16]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	8a9b      	ldrh	r3, [r3, #20]
 800218e:	2201      	movs	r2, #1
 8002190:	4619      	mov	r1, r3
 8002192:	f000 fe5f 	bl	8002e54 <HAL_GPIO_WritePin>
	DELAY(1);
 8002196:	2001      	movs	r0, #1
 8002198:	f000 f87e 	bl	8002298 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6918      	ldr	r0, [r3, #16]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	8a9b      	ldrh	r3, [r3, #20]
 80021a4:	2200      	movs	r2, #0
 80021a6:	4619      	mov	r1, r3
 80021a8:	f000 fe54 	bl	8002e54 <HAL_GPIO_WritePin>
}
 80021ac:	bf00      	nop
 80021ae:	3710      	adds	r7, #16
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021b8:	4b0e      	ldr	r3, [pc, #56]	@ (80021f4 <HAL_Init+0x40>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a0d      	ldr	r2, [pc, #52]	@ (80021f4 <HAL_Init+0x40>)
 80021be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021c4:	4b0b      	ldr	r3, [pc, #44]	@ (80021f4 <HAL_Init+0x40>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a0a      	ldr	r2, [pc, #40]	@ (80021f4 <HAL_Init+0x40>)
 80021ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021d0:	4b08      	ldr	r3, [pc, #32]	@ (80021f4 <HAL_Init+0x40>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a07      	ldr	r2, [pc, #28]	@ (80021f4 <HAL_Init+0x40>)
 80021d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021dc:	2003      	movs	r0, #3
 80021de:	f000 fbb1 	bl	8002944 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021e2:	200f      	movs	r0, #15
 80021e4:	f000 f808 	bl	80021f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021e8:	f7ff f8dc 	bl	80013a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40023c00 	.word	0x40023c00

080021f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002200:	4b12      	ldr	r3, [pc, #72]	@ (800224c <HAL_InitTick+0x54>)
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	4b12      	ldr	r3, [pc, #72]	@ (8002250 <HAL_InitTick+0x58>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	4619      	mov	r1, r3
 800220a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800220e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002212:	fbb2 f3f3 	udiv	r3, r2, r3
 8002216:	4618      	mov	r0, r3
 8002218:	f000 fbc9 	bl	80029ae <HAL_SYSTICK_Config>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e00e      	b.n	8002244 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2b0f      	cmp	r3, #15
 800222a:	d80a      	bhi.n	8002242 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800222c:	2200      	movs	r2, #0
 800222e:	6879      	ldr	r1, [r7, #4]
 8002230:	f04f 30ff 	mov.w	r0, #4294967295
 8002234:	f000 fb91 	bl	800295a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002238:	4a06      	ldr	r2, [pc, #24]	@ (8002254 <HAL_InitTick+0x5c>)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800223e:	2300      	movs	r3, #0
 8002240:	e000      	b.n	8002244 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
}
 8002244:	4618      	mov	r0, r3
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	20000000 	.word	0x20000000
 8002250:	20000020 	.word	0x20000020
 8002254:	2000001c 	.word	0x2000001c

08002258 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800225c:	4b06      	ldr	r3, [pc, #24]	@ (8002278 <HAL_IncTick+0x20>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	461a      	mov	r2, r3
 8002262:	4b06      	ldr	r3, [pc, #24]	@ (800227c <HAL_IncTick+0x24>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4413      	add	r3, r2
 8002268:	4a04      	ldr	r2, [pc, #16]	@ (800227c <HAL_IncTick+0x24>)
 800226a:	6013      	str	r3, [r2, #0]
}
 800226c:	bf00      	nop
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	20000020 	.word	0x20000020
 800227c:	2000023c 	.word	0x2000023c

08002280 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  return uwTick;
 8002284:	4b03      	ldr	r3, [pc, #12]	@ (8002294 <HAL_GetTick+0x14>)
 8002286:	681b      	ldr	r3, [r3, #0]
}
 8002288:	4618      	mov	r0, r3
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	2000023c 	.word	0x2000023c

08002298 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022a0:	f7ff ffee 	bl	8002280 <HAL_GetTick>
 80022a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b0:	d005      	beq.n	80022be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022b2:	4b0a      	ldr	r3, [pc, #40]	@ (80022dc <HAL_Delay+0x44>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	461a      	mov	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	4413      	add	r3, r2
 80022bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022be:	bf00      	nop
 80022c0:	f7ff ffde 	bl	8002280 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d8f7      	bhi.n	80022c0 <HAL_Delay+0x28>
  {
  }
}
 80022d0:	bf00      	nop
 80022d2:	bf00      	nop
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	20000020 	.word	0x20000020

080022e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022e8:	2300      	movs	r3, #0
 80022ea:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e033      	b.n	800235e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d109      	bne.n	8002312 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f7ff f878 	bl	80013f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002316:	f003 0310 	and.w	r3, r3, #16
 800231a:	2b00      	cmp	r3, #0
 800231c:	d118      	bne.n	8002350 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002322:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002326:	f023 0302 	bic.w	r3, r3, #2
 800232a:	f043 0202 	orr.w	r2, r3, #2
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 f93a 	bl	80025ac <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002342:	f023 0303 	bic.w	r3, r3, #3
 8002346:	f043 0201 	orr.w	r2, r3, #1
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	641a      	str	r2, [r3, #64]	@ 0x40
 800234e:	e001      	b.n	8002354 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800235c:	7bfb      	ldrb	r3, [r7, #15]
}
 800235e:	4618      	mov	r0, r3
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
	...

08002368 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002372:	2300      	movs	r3, #0
 8002374:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800237c:	2b01      	cmp	r3, #1
 800237e:	d101      	bne.n	8002384 <HAL_ADC_ConfigChannel+0x1c>
 8002380:	2302      	movs	r3, #2
 8002382:	e105      	b.n	8002590 <HAL_ADC_ConfigChannel+0x228>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2b09      	cmp	r3, #9
 8002392:	d925      	bls.n	80023e0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	68d9      	ldr	r1, [r3, #12]
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	b29b      	uxth	r3, r3
 80023a0:	461a      	mov	r2, r3
 80023a2:	4613      	mov	r3, r2
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	4413      	add	r3, r2
 80023a8:	3b1e      	subs	r3, #30
 80023aa:	2207      	movs	r2, #7
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	43da      	mvns	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	400a      	ands	r2, r1
 80023b8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68d9      	ldr	r1, [r3, #12]
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	689a      	ldr	r2, [r3, #8]
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	4618      	mov	r0, r3
 80023cc:	4603      	mov	r3, r0
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	4403      	add	r3, r0
 80023d2:	3b1e      	subs	r3, #30
 80023d4:	409a      	lsls	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	430a      	orrs	r2, r1
 80023dc:	60da      	str	r2, [r3, #12]
 80023de:	e022      	b.n	8002426 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6919      	ldr	r1, [r3, #16]
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	461a      	mov	r2, r3
 80023ee:	4613      	mov	r3, r2
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	4413      	add	r3, r2
 80023f4:	2207      	movs	r2, #7
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	43da      	mvns	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	400a      	ands	r2, r1
 8002402:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6919      	ldr	r1, [r3, #16]
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	689a      	ldr	r2, [r3, #8]
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	b29b      	uxth	r3, r3
 8002414:	4618      	mov	r0, r3
 8002416:	4603      	mov	r3, r0
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	4403      	add	r3, r0
 800241c:	409a      	lsls	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	430a      	orrs	r2, r1
 8002424:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	2b06      	cmp	r3, #6
 800242c:	d824      	bhi.n	8002478 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685a      	ldr	r2, [r3, #4]
 8002438:	4613      	mov	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4413      	add	r3, r2
 800243e:	3b05      	subs	r3, #5
 8002440:	221f      	movs	r2, #31
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	43da      	mvns	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	400a      	ands	r2, r1
 800244e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	b29b      	uxth	r3, r3
 800245c:	4618      	mov	r0, r3
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685a      	ldr	r2, [r3, #4]
 8002462:	4613      	mov	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	3b05      	subs	r3, #5
 800246a:	fa00 f203 	lsl.w	r2, r0, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	430a      	orrs	r2, r1
 8002474:	635a      	str	r2, [r3, #52]	@ 0x34
 8002476:	e04c      	b.n	8002512 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	2b0c      	cmp	r3, #12
 800247e:	d824      	bhi.n	80024ca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685a      	ldr	r2, [r3, #4]
 800248a:	4613      	mov	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4413      	add	r3, r2
 8002490:	3b23      	subs	r3, #35	@ 0x23
 8002492:	221f      	movs	r2, #31
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	43da      	mvns	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	400a      	ands	r2, r1
 80024a0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	4618      	mov	r0, r3
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	4613      	mov	r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	4413      	add	r3, r2
 80024ba:	3b23      	subs	r3, #35	@ 0x23
 80024bc:	fa00 f203 	lsl.w	r2, r0, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	430a      	orrs	r2, r1
 80024c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80024c8:	e023      	b.n	8002512 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685a      	ldr	r2, [r3, #4]
 80024d4:	4613      	mov	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	4413      	add	r3, r2
 80024da:	3b41      	subs	r3, #65	@ 0x41
 80024dc:	221f      	movs	r2, #31
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	43da      	mvns	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	400a      	ands	r2, r1
 80024ea:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	4618      	mov	r0, r3
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685a      	ldr	r2, [r3, #4]
 80024fe:	4613      	mov	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	4413      	add	r3, r2
 8002504:	3b41      	subs	r3, #65	@ 0x41
 8002506:	fa00 f203 	lsl.w	r2, r0, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	430a      	orrs	r2, r1
 8002510:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002512:	4b22      	ldr	r3, [pc, #136]	@ (800259c <HAL_ADC_ConfigChannel+0x234>)
 8002514:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a21      	ldr	r2, [pc, #132]	@ (80025a0 <HAL_ADC_ConfigChannel+0x238>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d109      	bne.n	8002534 <HAL_ADC_ConfigChannel+0x1cc>
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2b12      	cmp	r3, #18
 8002526:	d105      	bne.n	8002534 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a19      	ldr	r2, [pc, #100]	@ (80025a0 <HAL_ADC_ConfigChannel+0x238>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d123      	bne.n	8002586 <HAL_ADC_ConfigChannel+0x21e>
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2b10      	cmp	r3, #16
 8002544:	d003      	beq.n	800254e <HAL_ADC_ConfigChannel+0x1e6>
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2b11      	cmp	r3, #17
 800254c:	d11b      	bne.n	8002586 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2b10      	cmp	r3, #16
 8002560:	d111      	bne.n	8002586 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002562:	4b10      	ldr	r3, [pc, #64]	@ (80025a4 <HAL_ADC_ConfigChannel+0x23c>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a10      	ldr	r2, [pc, #64]	@ (80025a8 <HAL_ADC_ConfigChannel+0x240>)
 8002568:	fba2 2303 	umull	r2, r3, r2, r3
 800256c:	0c9a      	lsrs	r2, r3, #18
 800256e:	4613      	mov	r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	4413      	add	r3, r2
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002578:	e002      	b.n	8002580 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	3b01      	subs	r3, #1
 800257e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1f9      	bne.n	800257a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800258e:	2300      	movs	r3, #0
}
 8002590:	4618      	mov	r0, r3
 8002592:	3714      	adds	r7, #20
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr
 800259c:	40012300 	.word	0x40012300
 80025a0:	40012000 	.word	0x40012000
 80025a4:	20000000 	.word	0x20000000
 80025a8:	431bde83 	.word	0x431bde83

080025ac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025b4:	4b79      	ldr	r3, [pc, #484]	@ (800279c <ADC_Init+0x1f0>)
 80025b6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	685a      	ldr	r2, [r3, #4]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	431a      	orrs	r2, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80025e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	6859      	ldr	r1, [r3, #4]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	021a      	lsls	r2, r3, #8
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	685a      	ldr	r2, [r3, #4]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002604:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6859      	ldr	r1, [r3, #4]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	430a      	orrs	r2, r1
 8002616:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	689a      	ldr	r2, [r3, #8]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002626:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6899      	ldr	r1, [r3, #8]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	68da      	ldr	r2, [r3, #12]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	430a      	orrs	r2, r1
 8002638:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800263e:	4a58      	ldr	r2, [pc, #352]	@ (80027a0 <ADC_Init+0x1f4>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d022      	beq.n	800268a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	689a      	ldr	r2, [r3, #8]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002652:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	6899      	ldr	r1, [r3, #8]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	430a      	orrs	r2, r1
 8002664:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	689a      	ldr	r2, [r3, #8]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002674:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	6899      	ldr	r1, [r3, #8]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	430a      	orrs	r2, r1
 8002686:	609a      	str	r2, [r3, #8]
 8002688:	e00f      	b.n	80026aa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	689a      	ldr	r2, [r3, #8]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002698:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80026a8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 0202 	bic.w	r2, r2, #2
 80026b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	6899      	ldr	r1, [r3, #8]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	7e1b      	ldrb	r3, [r3, #24]
 80026c4:	005a      	lsls	r2, r3, #1
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	430a      	orrs	r2, r1
 80026cc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d01b      	beq.n	8002710 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	685a      	ldr	r2, [r3, #4]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026e6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	685a      	ldr	r2, [r3, #4]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80026f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6859      	ldr	r1, [r3, #4]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002702:	3b01      	subs	r3, #1
 8002704:	035a      	lsls	r2, r3, #13
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	430a      	orrs	r2, r1
 800270c:	605a      	str	r2, [r3, #4]
 800270e:	e007      	b.n	8002720 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	685a      	ldr	r2, [r3, #4]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800271e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800272e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	69db      	ldr	r3, [r3, #28]
 800273a:	3b01      	subs	r3, #1
 800273c:	051a      	lsls	r2, r3, #20
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	430a      	orrs	r2, r1
 8002744:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	689a      	ldr	r2, [r3, #8]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002754:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	6899      	ldr	r1, [r3, #8]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002762:	025a      	lsls	r2, r3, #9
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	430a      	orrs	r2, r1
 800276a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	689a      	ldr	r2, [r3, #8]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800277a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6899      	ldr	r1, [r3, #8]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	029a      	lsls	r2, r3, #10
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	430a      	orrs	r2, r1
 800278e:	609a      	str	r2, [r3, #8]
}
 8002790:	bf00      	nop
 8002792:	3714      	adds	r7, #20
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr
 800279c:	40012300 	.word	0x40012300
 80027a0:	0f000001 	.word	0x0f000001

080027a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f003 0307 	and.w	r3, r3, #7
 80027b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027b4:	4b0c      	ldr	r3, [pc, #48]	@ (80027e8 <__NVIC_SetPriorityGrouping+0x44>)
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027ba:	68ba      	ldr	r2, [r7, #8]
 80027bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027c0:	4013      	ands	r3, r2
 80027c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027d6:	4a04      	ldr	r2, [pc, #16]	@ (80027e8 <__NVIC_SetPriorityGrouping+0x44>)
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	60d3      	str	r3, [r2, #12]
}
 80027dc:	bf00      	nop
 80027de:	3714      	adds	r7, #20
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	e000ed00 	.word	0xe000ed00

080027ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027f0:	4b04      	ldr	r3, [pc, #16]	@ (8002804 <__NVIC_GetPriorityGrouping+0x18>)
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	0a1b      	lsrs	r3, r3, #8
 80027f6:	f003 0307 	and.w	r3, r3, #7
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	e000ed00 	.word	0xe000ed00

08002808 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	4603      	mov	r3, r0
 8002810:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002816:	2b00      	cmp	r3, #0
 8002818:	db0b      	blt.n	8002832 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800281a:	79fb      	ldrb	r3, [r7, #7]
 800281c:	f003 021f 	and.w	r2, r3, #31
 8002820:	4907      	ldr	r1, [pc, #28]	@ (8002840 <__NVIC_EnableIRQ+0x38>)
 8002822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002826:	095b      	lsrs	r3, r3, #5
 8002828:	2001      	movs	r0, #1
 800282a:	fa00 f202 	lsl.w	r2, r0, r2
 800282e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002832:	bf00      	nop
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	e000e100 	.word	0xe000e100

08002844 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	4603      	mov	r3, r0
 800284c:	6039      	str	r1, [r7, #0]
 800284e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002854:	2b00      	cmp	r3, #0
 8002856:	db0a      	blt.n	800286e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	b2da      	uxtb	r2, r3
 800285c:	490c      	ldr	r1, [pc, #48]	@ (8002890 <__NVIC_SetPriority+0x4c>)
 800285e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002862:	0112      	lsls	r2, r2, #4
 8002864:	b2d2      	uxtb	r2, r2
 8002866:	440b      	add	r3, r1
 8002868:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800286c:	e00a      	b.n	8002884 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	b2da      	uxtb	r2, r3
 8002872:	4908      	ldr	r1, [pc, #32]	@ (8002894 <__NVIC_SetPriority+0x50>)
 8002874:	79fb      	ldrb	r3, [r7, #7]
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	3b04      	subs	r3, #4
 800287c:	0112      	lsls	r2, r2, #4
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	440b      	add	r3, r1
 8002882:	761a      	strb	r2, [r3, #24]
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	e000e100 	.word	0xe000e100
 8002894:	e000ed00 	.word	0xe000ed00

08002898 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002898:	b480      	push	{r7}
 800289a:	b089      	sub	sp, #36	@ 0x24
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f003 0307 	and.w	r3, r3, #7
 80028aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	f1c3 0307 	rsb	r3, r3, #7
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	bf28      	it	cs
 80028b6:	2304      	movcs	r3, #4
 80028b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	3304      	adds	r3, #4
 80028be:	2b06      	cmp	r3, #6
 80028c0:	d902      	bls.n	80028c8 <NVIC_EncodePriority+0x30>
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	3b03      	subs	r3, #3
 80028c6:	e000      	b.n	80028ca <NVIC_EncodePriority+0x32>
 80028c8:	2300      	movs	r3, #0
 80028ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028cc:	f04f 32ff 	mov.w	r2, #4294967295
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	43da      	mvns	r2, r3
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	401a      	ands	r2, r3
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028e0:	f04f 31ff 	mov.w	r1, #4294967295
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	fa01 f303 	lsl.w	r3, r1, r3
 80028ea:	43d9      	mvns	r1, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028f0:	4313      	orrs	r3, r2
         );
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3724      	adds	r7, #36	@ 0x24
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
	...

08002900 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	3b01      	subs	r3, #1
 800290c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002910:	d301      	bcc.n	8002916 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002912:	2301      	movs	r3, #1
 8002914:	e00f      	b.n	8002936 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002916:	4a0a      	ldr	r2, [pc, #40]	@ (8002940 <SysTick_Config+0x40>)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	3b01      	subs	r3, #1
 800291c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800291e:	210f      	movs	r1, #15
 8002920:	f04f 30ff 	mov.w	r0, #4294967295
 8002924:	f7ff ff8e 	bl	8002844 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002928:	4b05      	ldr	r3, [pc, #20]	@ (8002940 <SysTick_Config+0x40>)
 800292a:	2200      	movs	r2, #0
 800292c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800292e:	4b04      	ldr	r3, [pc, #16]	@ (8002940 <SysTick_Config+0x40>)
 8002930:	2207      	movs	r2, #7
 8002932:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	e000e010 	.word	0xe000e010

08002944 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f7ff ff29 	bl	80027a4 <__NVIC_SetPriorityGrouping>
}
 8002952:	bf00      	nop
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800295a:	b580      	push	{r7, lr}
 800295c:	b086      	sub	sp, #24
 800295e:	af00      	add	r7, sp, #0
 8002960:	4603      	mov	r3, r0
 8002962:	60b9      	str	r1, [r7, #8]
 8002964:	607a      	str	r2, [r7, #4]
 8002966:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002968:	2300      	movs	r3, #0
 800296a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800296c:	f7ff ff3e 	bl	80027ec <__NVIC_GetPriorityGrouping>
 8002970:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	68b9      	ldr	r1, [r7, #8]
 8002976:	6978      	ldr	r0, [r7, #20]
 8002978:	f7ff ff8e 	bl	8002898 <NVIC_EncodePriority>
 800297c:	4602      	mov	r2, r0
 800297e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002982:	4611      	mov	r1, r2
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff ff5d 	bl	8002844 <__NVIC_SetPriority>
}
 800298a:	bf00      	nop
 800298c:	3718      	adds	r7, #24
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b082      	sub	sp, #8
 8002996:	af00      	add	r7, sp, #0
 8002998:	4603      	mov	r3, r0
 800299a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800299c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff ff31 	bl	8002808 <__NVIC_EnableIRQ>
}
 80029a6:	bf00      	nop
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b082      	sub	sp, #8
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f7ff ffa2 	bl	8002900 <SysTick_Config>
 80029bc:	4603      	mov	r3, r0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b084      	sub	sp, #16
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029d2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80029d4:	f7ff fc54 	bl	8002280 <HAL_GetTick>
 80029d8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d008      	beq.n	80029f8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2280      	movs	r2, #128	@ 0x80
 80029ea:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e052      	b.n	8002a9e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f022 0216 	bic.w	r2, r2, #22
 8002a06:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	695a      	ldr	r2, [r3, #20]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a16:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d103      	bne.n	8002a28 <HAL_DMA_Abort+0x62>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d007      	beq.n	8002a38 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f022 0208 	bic.w	r2, r2, #8
 8002a36:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 0201 	bic.w	r2, r2, #1
 8002a46:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a48:	e013      	b.n	8002a72 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a4a:	f7ff fc19 	bl	8002280 <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	2b05      	cmp	r3, #5
 8002a56:	d90c      	bls.n	8002a72 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2220      	movs	r2, #32
 8002a5c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2203      	movs	r2, #3
 8002a62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e015      	b.n	8002a9e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1e4      	bne.n	8002a4a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a84:	223f      	movs	r2, #63	@ 0x3f
 8002a86:	409a      	lsls	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d004      	beq.n	8002ac4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2280      	movs	r2, #128	@ 0x80
 8002abe:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e00c      	b.n	8002ade <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2205      	movs	r2, #5
 8002ac8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 0201 	bic.w	r2, r2, #1
 8002ada:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
	...

08002aec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b089      	sub	sp, #36	@ 0x24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002af6:	2300      	movs	r3, #0
 8002af8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002afa:	2300      	movs	r3, #0
 8002afc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002afe:	2300      	movs	r3, #0
 8002b00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b02:	2300      	movs	r3, #0
 8002b04:	61fb      	str	r3, [r7, #28]
 8002b06:	e16b      	b.n	8002de0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b08:	2201      	movs	r2, #1
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	f040 815a 	bne.w	8002dda <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f003 0303 	and.w	r3, r3, #3
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d005      	beq.n	8002b3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d130      	bne.n	8002ba0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	2203      	movs	r2, #3
 8002b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4e:	43db      	mvns	r3, r3
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	4013      	ands	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	68da      	ldr	r2, [r3, #12]
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b74:	2201      	movs	r2, #1
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7c:	43db      	mvns	r3, r3
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	4013      	ands	r3, r2
 8002b82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	091b      	lsrs	r3, r3, #4
 8002b8a:	f003 0201 	and.w	r2, r3, #1
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f003 0303 	and.w	r3, r3, #3
 8002ba8:	2b03      	cmp	r3, #3
 8002baa:	d017      	beq.n	8002bdc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	2203      	movs	r2, #3
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	43db      	mvns	r3, r3
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	689a      	ldr	r2, [r3, #8]
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f003 0303 	and.w	r3, r3, #3
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d123      	bne.n	8002c30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	08da      	lsrs	r2, r3, #3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	3208      	adds	r2, #8
 8002bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	f003 0307 	and.w	r3, r3, #7
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	220f      	movs	r2, #15
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	43db      	mvns	r3, r3
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	691a      	ldr	r2, [r3, #16]
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	f003 0307 	and.w	r3, r3, #7
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	08da      	lsrs	r2, r3, #3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	3208      	adds	r2, #8
 8002c2a:	69b9      	ldr	r1, [r7, #24]
 8002c2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	2203      	movs	r2, #3
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	43db      	mvns	r3, r3
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	4013      	ands	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f003 0203 	and.w	r2, r3, #3
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	fa02 f303 	lsl.w	r3, r2, r3
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f000 80b4 	beq.w	8002dda <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c72:	2300      	movs	r3, #0
 8002c74:	60fb      	str	r3, [r7, #12]
 8002c76:	4b60      	ldr	r3, [pc, #384]	@ (8002df8 <HAL_GPIO_Init+0x30c>)
 8002c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c7a:	4a5f      	ldr	r2, [pc, #380]	@ (8002df8 <HAL_GPIO_Init+0x30c>)
 8002c7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c80:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c82:	4b5d      	ldr	r3, [pc, #372]	@ (8002df8 <HAL_GPIO_Init+0x30c>)
 8002c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c8a:	60fb      	str	r3, [r7, #12]
 8002c8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c8e:	4a5b      	ldr	r2, [pc, #364]	@ (8002dfc <HAL_GPIO_Init+0x310>)
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	089b      	lsrs	r3, r3, #2
 8002c94:	3302      	adds	r3, #2
 8002c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	f003 0303 	and.w	r3, r3, #3
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	220f      	movs	r2, #15
 8002ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8002caa:	43db      	mvns	r3, r3
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a52      	ldr	r2, [pc, #328]	@ (8002e00 <HAL_GPIO_Init+0x314>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d02b      	beq.n	8002d12 <HAL_GPIO_Init+0x226>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a51      	ldr	r2, [pc, #324]	@ (8002e04 <HAL_GPIO_Init+0x318>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d025      	beq.n	8002d0e <HAL_GPIO_Init+0x222>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a50      	ldr	r2, [pc, #320]	@ (8002e08 <HAL_GPIO_Init+0x31c>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d01f      	beq.n	8002d0a <HAL_GPIO_Init+0x21e>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a4f      	ldr	r2, [pc, #316]	@ (8002e0c <HAL_GPIO_Init+0x320>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d019      	beq.n	8002d06 <HAL_GPIO_Init+0x21a>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a4e      	ldr	r2, [pc, #312]	@ (8002e10 <HAL_GPIO_Init+0x324>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d013      	beq.n	8002d02 <HAL_GPIO_Init+0x216>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a4d      	ldr	r2, [pc, #308]	@ (8002e14 <HAL_GPIO_Init+0x328>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d00d      	beq.n	8002cfe <HAL_GPIO_Init+0x212>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a4c      	ldr	r2, [pc, #304]	@ (8002e18 <HAL_GPIO_Init+0x32c>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d007      	beq.n	8002cfa <HAL_GPIO_Init+0x20e>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a4b      	ldr	r2, [pc, #300]	@ (8002e1c <HAL_GPIO_Init+0x330>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d101      	bne.n	8002cf6 <HAL_GPIO_Init+0x20a>
 8002cf2:	2307      	movs	r3, #7
 8002cf4:	e00e      	b.n	8002d14 <HAL_GPIO_Init+0x228>
 8002cf6:	2308      	movs	r3, #8
 8002cf8:	e00c      	b.n	8002d14 <HAL_GPIO_Init+0x228>
 8002cfa:	2306      	movs	r3, #6
 8002cfc:	e00a      	b.n	8002d14 <HAL_GPIO_Init+0x228>
 8002cfe:	2305      	movs	r3, #5
 8002d00:	e008      	b.n	8002d14 <HAL_GPIO_Init+0x228>
 8002d02:	2304      	movs	r3, #4
 8002d04:	e006      	b.n	8002d14 <HAL_GPIO_Init+0x228>
 8002d06:	2303      	movs	r3, #3
 8002d08:	e004      	b.n	8002d14 <HAL_GPIO_Init+0x228>
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	e002      	b.n	8002d14 <HAL_GPIO_Init+0x228>
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e000      	b.n	8002d14 <HAL_GPIO_Init+0x228>
 8002d12:	2300      	movs	r3, #0
 8002d14:	69fa      	ldr	r2, [r7, #28]
 8002d16:	f002 0203 	and.w	r2, r2, #3
 8002d1a:	0092      	lsls	r2, r2, #2
 8002d1c:	4093      	lsls	r3, r2
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d24:	4935      	ldr	r1, [pc, #212]	@ (8002dfc <HAL_GPIO_Init+0x310>)
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	089b      	lsrs	r3, r3, #2
 8002d2a:	3302      	adds	r3, #2
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d32:	4b3b      	ldr	r3, [pc, #236]	@ (8002e20 <HAL_GPIO_Init+0x334>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	43db      	mvns	r3, r3
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	4013      	ands	r3, r2
 8002d40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d003      	beq.n	8002d56 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d56:	4a32      	ldr	r2, [pc, #200]	@ (8002e20 <HAL_GPIO_Init+0x334>)
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d5c:	4b30      	ldr	r3, [pc, #192]	@ (8002e20 <HAL_GPIO_Init+0x334>)
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	43db      	mvns	r3, r3
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d003      	beq.n	8002d80 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d80:	4a27      	ldr	r2, [pc, #156]	@ (8002e20 <HAL_GPIO_Init+0x334>)
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d86:	4b26      	ldr	r3, [pc, #152]	@ (8002e20 <HAL_GPIO_Init+0x334>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	43db      	mvns	r3, r3
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	4013      	ands	r3, r2
 8002d94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d003      	beq.n	8002daa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002daa:	4a1d      	ldr	r2, [pc, #116]	@ (8002e20 <HAL_GPIO_Init+0x334>)
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002db0:	4b1b      	ldr	r3, [pc, #108]	@ (8002e20 <HAL_GPIO_Init+0x334>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	43db      	mvns	r3, r3
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d003      	beq.n	8002dd4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dd4:	4a12      	ldr	r2, [pc, #72]	@ (8002e20 <HAL_GPIO_Init+0x334>)
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	3301      	adds	r3, #1
 8002dde:	61fb      	str	r3, [r7, #28]
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	2b0f      	cmp	r3, #15
 8002de4:	f67f ae90 	bls.w	8002b08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002de8:	bf00      	nop
 8002dea:	bf00      	nop
 8002dec:	3724      	adds	r7, #36	@ 0x24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	40023800 	.word	0x40023800
 8002dfc:	40013800 	.word	0x40013800
 8002e00:	40020000 	.word	0x40020000
 8002e04:	40020400 	.word	0x40020400
 8002e08:	40020800 	.word	0x40020800
 8002e0c:	40020c00 	.word	0x40020c00
 8002e10:	40021000 	.word	0x40021000
 8002e14:	40021400 	.word	0x40021400
 8002e18:	40021800 	.word	0x40021800
 8002e1c:	40021c00 	.word	0x40021c00
 8002e20:	40013c00 	.word	0x40013c00

08002e24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b085      	sub	sp, #20
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	691a      	ldr	r2, [r3, #16]
 8002e34:	887b      	ldrh	r3, [r7, #2]
 8002e36:	4013      	ands	r3, r2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d002      	beq.n	8002e42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	73fb      	strb	r3, [r7, #15]
 8002e40:	e001      	b.n	8002e46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e42:	2300      	movs	r3, #0
 8002e44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3714      	adds	r7, #20
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	807b      	strh	r3, [r7, #2]
 8002e60:	4613      	mov	r3, r2
 8002e62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e64:	787b      	ldrb	r3, [r7, #1]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d003      	beq.n	8002e72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e6a:	887a      	ldrh	r2, [r7, #2]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e70:	e003      	b.n	8002e7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e72:	887b      	ldrh	r3, [r7, #2]
 8002e74:	041a      	lsls	r2, r3, #16
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	619a      	str	r2, [r3, #24]
}
 8002e7a:	bf00      	nop
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
	...

08002e88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	4603      	mov	r3, r0
 8002e90:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002e92:	4b08      	ldr	r3, [pc, #32]	@ (8002eb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e94:	695a      	ldr	r2, [r3, #20]
 8002e96:	88fb      	ldrh	r3, [r7, #6]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d006      	beq.n	8002eac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e9e:	4a05      	ldr	r2, [pc, #20]	@ (8002eb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ea0:	88fb      	ldrh	r3, [r7, #6]
 8002ea2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ea4:	88fb      	ldrh	r3, [r7, #6]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7fe fa46 	bl	8001338 <HAL_GPIO_EXTI_Callback>
  }
}
 8002eac:	bf00      	nop
 8002eae:	3708      	adds	r7, #8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	40013c00 	.word	0x40013c00

08002eb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e12b      	b.n	8003122 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d106      	bne.n	8002ee4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f7fe facc 	bl	800147c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2224      	movs	r2, #36	@ 0x24
 8002ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f022 0201 	bic.w	r2, r2, #1
 8002efa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f1c:	f000 fd40 	bl	80039a0 <HAL_RCC_GetPCLK1Freq>
 8002f20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	4a81      	ldr	r2, [pc, #516]	@ (800312c <HAL_I2C_Init+0x274>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d807      	bhi.n	8002f3c <HAL_I2C_Init+0x84>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	4a80      	ldr	r2, [pc, #512]	@ (8003130 <HAL_I2C_Init+0x278>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	bf94      	ite	ls
 8002f34:	2301      	movls	r3, #1
 8002f36:	2300      	movhi	r3, #0
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	e006      	b.n	8002f4a <HAL_I2C_Init+0x92>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	4a7d      	ldr	r2, [pc, #500]	@ (8003134 <HAL_I2C_Init+0x27c>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	bf94      	ite	ls
 8002f44:	2301      	movls	r3, #1
 8002f46:	2300      	movhi	r3, #0
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e0e7      	b.n	8003122 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	4a78      	ldr	r2, [pc, #480]	@ (8003138 <HAL_I2C_Init+0x280>)
 8002f56:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5a:	0c9b      	lsrs	r3, r3, #18
 8002f5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68ba      	ldr	r2, [r7, #8]
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	6a1b      	ldr	r3, [r3, #32]
 8002f78:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	4a6a      	ldr	r2, [pc, #424]	@ (800312c <HAL_I2C_Init+0x274>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d802      	bhi.n	8002f8c <HAL_I2C_Init+0xd4>
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	3301      	adds	r3, #1
 8002f8a:	e009      	b.n	8002fa0 <HAL_I2C_Init+0xe8>
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002f92:	fb02 f303 	mul.w	r3, r2, r3
 8002f96:	4a69      	ldr	r2, [pc, #420]	@ (800313c <HAL_I2C_Init+0x284>)
 8002f98:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9c:	099b      	lsrs	r3, r3, #6
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	6812      	ldr	r2, [r2, #0]
 8002fa4:	430b      	orrs	r3, r1
 8002fa6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002fb2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	495c      	ldr	r1, [pc, #368]	@ (800312c <HAL_I2C_Init+0x274>)
 8002fbc:	428b      	cmp	r3, r1
 8002fbe:	d819      	bhi.n	8002ff4 <HAL_I2C_Init+0x13c>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	1e59      	subs	r1, r3, #1
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fce:	1c59      	adds	r1, r3, #1
 8002fd0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002fd4:	400b      	ands	r3, r1
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00a      	beq.n	8002ff0 <HAL_I2C_Init+0x138>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	1e59      	subs	r1, r3, #1
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fe8:	3301      	adds	r3, #1
 8002fea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fee:	e051      	b.n	8003094 <HAL_I2C_Init+0x1dc>
 8002ff0:	2304      	movs	r3, #4
 8002ff2:	e04f      	b.n	8003094 <HAL_I2C_Init+0x1dc>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d111      	bne.n	8003020 <HAL_I2C_Init+0x168>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	1e58      	subs	r0, r3, #1
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6859      	ldr	r1, [r3, #4]
 8003004:	460b      	mov	r3, r1
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	440b      	add	r3, r1
 800300a:	fbb0 f3f3 	udiv	r3, r0, r3
 800300e:	3301      	adds	r3, #1
 8003010:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003014:	2b00      	cmp	r3, #0
 8003016:	bf0c      	ite	eq
 8003018:	2301      	moveq	r3, #1
 800301a:	2300      	movne	r3, #0
 800301c:	b2db      	uxtb	r3, r3
 800301e:	e012      	b.n	8003046 <HAL_I2C_Init+0x18e>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	1e58      	subs	r0, r3, #1
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6859      	ldr	r1, [r3, #4]
 8003028:	460b      	mov	r3, r1
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	440b      	add	r3, r1
 800302e:	0099      	lsls	r1, r3, #2
 8003030:	440b      	add	r3, r1
 8003032:	fbb0 f3f3 	udiv	r3, r0, r3
 8003036:	3301      	adds	r3, #1
 8003038:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800303c:	2b00      	cmp	r3, #0
 800303e:	bf0c      	ite	eq
 8003040:	2301      	moveq	r3, #1
 8003042:	2300      	movne	r3, #0
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <HAL_I2C_Init+0x196>
 800304a:	2301      	movs	r3, #1
 800304c:	e022      	b.n	8003094 <HAL_I2C_Init+0x1dc>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d10e      	bne.n	8003074 <HAL_I2C_Init+0x1bc>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	1e58      	subs	r0, r3, #1
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6859      	ldr	r1, [r3, #4]
 800305e:	460b      	mov	r3, r1
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	440b      	add	r3, r1
 8003064:	fbb0 f3f3 	udiv	r3, r0, r3
 8003068:	3301      	adds	r3, #1
 800306a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800306e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003072:	e00f      	b.n	8003094 <HAL_I2C_Init+0x1dc>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	1e58      	subs	r0, r3, #1
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6859      	ldr	r1, [r3, #4]
 800307c:	460b      	mov	r3, r1
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	440b      	add	r3, r1
 8003082:	0099      	lsls	r1, r3, #2
 8003084:	440b      	add	r3, r1
 8003086:	fbb0 f3f3 	udiv	r3, r0, r3
 800308a:	3301      	adds	r3, #1
 800308c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003090:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003094:	6879      	ldr	r1, [r7, #4]
 8003096:	6809      	ldr	r1, [r1, #0]
 8003098:	4313      	orrs	r3, r2
 800309a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	69da      	ldr	r2, [r3, #28]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a1b      	ldr	r3, [r3, #32]
 80030ae:	431a      	orrs	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	430a      	orrs	r2, r1
 80030b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80030c2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	6911      	ldr	r1, [r2, #16]
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	68d2      	ldr	r2, [r2, #12]
 80030ce:	4311      	orrs	r1, r2
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	6812      	ldr	r2, [r2, #0]
 80030d4:	430b      	orrs	r3, r1
 80030d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	695a      	ldr	r2, [r3, #20]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	431a      	orrs	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	430a      	orrs	r2, r1
 80030f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f042 0201 	orr.w	r2, r2, #1
 8003102:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2220      	movs	r2, #32
 800310e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3710      	adds	r7, #16
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	000186a0 	.word	0x000186a0
 8003130:	001e847f 	.word	0x001e847f
 8003134:	003d08ff 	.word	0x003d08ff
 8003138:	431bde83 	.word	0x431bde83
 800313c:	10624dd3 	.word	0x10624dd3

08003140 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e267      	b.n	8003622 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b00      	cmp	r3, #0
 800315c:	d075      	beq.n	800324a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800315e:	4b88      	ldr	r3, [pc, #544]	@ (8003380 <HAL_RCC_OscConfig+0x240>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f003 030c 	and.w	r3, r3, #12
 8003166:	2b04      	cmp	r3, #4
 8003168:	d00c      	beq.n	8003184 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800316a:	4b85      	ldr	r3, [pc, #532]	@ (8003380 <HAL_RCC_OscConfig+0x240>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003172:	2b08      	cmp	r3, #8
 8003174:	d112      	bne.n	800319c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003176:	4b82      	ldr	r3, [pc, #520]	@ (8003380 <HAL_RCC_OscConfig+0x240>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800317e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003182:	d10b      	bne.n	800319c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003184:	4b7e      	ldr	r3, [pc, #504]	@ (8003380 <HAL_RCC_OscConfig+0x240>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d05b      	beq.n	8003248 <HAL_RCC_OscConfig+0x108>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d157      	bne.n	8003248 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e242      	b.n	8003622 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031a4:	d106      	bne.n	80031b4 <HAL_RCC_OscConfig+0x74>
 80031a6:	4b76      	ldr	r3, [pc, #472]	@ (8003380 <HAL_RCC_OscConfig+0x240>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a75      	ldr	r2, [pc, #468]	@ (8003380 <HAL_RCC_OscConfig+0x240>)
 80031ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031b0:	6013      	str	r3, [r2, #0]
 80031b2:	e01d      	b.n	80031f0 <HAL_RCC_OscConfig+0xb0>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031bc:	d10c      	bne.n	80031d8 <HAL_RCC_OscConfig+0x98>
 80031be:	4b70      	ldr	r3, [pc, #448]	@ (8003380 <HAL_RCC_OscConfig+0x240>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a6f      	ldr	r2, [pc, #444]	@ (8003380 <HAL_RCC_OscConfig+0x240>)
 80031c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031c8:	6013      	str	r3, [r2, #0]
 80031ca:	4b6d      	ldr	r3, [pc, #436]	@ (8003380 <HAL_RCC_OscConfig+0x240>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a6c      	ldr	r2, [pc, #432]	@ (8003380 <HAL_RCC_OscConfig+0x240>)
 80031d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031d4:	6013      	str	r3, [r2, #0]
 80031d6:	e00b      	b.n	80031f0 <HAL_RCC_OscConfig+0xb0>
 80031d8:	4b69      	ldr	r3, [pc, #420]	@ (8003380 <HAL_RCC_OscConfig+0x240>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a68      	ldr	r2, [pc, #416]	@ (8003380 <HAL_RCC_OscConfig+0x240>)
 80031de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031e2:	6013      	str	r3, [r2, #0]
 80031e4:	4b66      	ldr	r3, [pc, #408]	@ (8003380 <HAL_RCC_OscConfig+0x240>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a65      	ldr	r2, [pc, #404]	@ (8003380 <HAL_RCC_OscConfig+0x240>)
 80031ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d013      	beq.n	8003220 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f8:	f7ff f842 	bl	8002280 <HAL_GetTick>
 80031fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003200:	f7ff f83e 	bl	8002280 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b64      	cmp	r3, #100	@ 0x64
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e207      	b.n	8003622 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003212:	4b5b      	ldr	r3, [pc, #364]	@ (8003380 <HAL_RCC_OscConfig+0x240>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d0f0      	beq.n	8003200 <HAL_RCC_OscConfig+0xc0>
 800321e:	e014      	b.n	800324a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003220:	f7ff f82e 	bl	8002280 <HAL_GetTick>
 8003224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003226:	e008      	b.n	800323a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003228:	f7ff f82a 	bl	8002280 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b64      	cmp	r3, #100	@ 0x64
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e1f3      	b.n	8003622 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800323a:	4b51      	ldr	r3, [pc, #324]	@ (8003380 <HAL_RCC_OscConfig+0x240>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1f0      	bne.n	8003228 <HAL_RCC_OscConfig+0xe8>
 8003246:	e000      	b.n	800324a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003248:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d063      	beq.n	800331e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003256:	4b4a      	ldr	r3, [pc, #296]	@ (8003380 <HAL_RCC_OscConfig+0x240>)
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f003 030c 	and.w	r3, r3, #12
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00b      	beq.n	800327a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003262:	4b47      	ldr	r3, [pc, #284]	@ (8003380 <HAL_RCC_OscConfig+0x240>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800326a:	2b08      	cmp	r3, #8
 800326c:	d11c      	bne.n	80032a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800326e:	4b44      	ldr	r3, [pc, #272]	@ (8003380 <HAL_RCC_OscConfig+0x240>)
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d116      	bne.n	80032a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800327a:	4b41      	ldr	r3, [pc, #260]	@ (8003380 <HAL_RCC_OscConfig+0x240>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d005      	beq.n	8003292 <HAL_RCC_OscConfig+0x152>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d001      	beq.n	8003292 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e1c7      	b.n	8003622 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003292:	4b3b      	ldr	r3, [pc, #236]	@ (8003380 <HAL_RCC_OscConfig+0x240>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	4937      	ldr	r1, [pc, #220]	@ (8003380 <HAL_RCC_OscConfig+0x240>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032a6:	e03a      	b.n	800331e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d020      	beq.n	80032f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032b0:	4b34      	ldr	r3, [pc, #208]	@ (8003384 <HAL_RCC_OscConfig+0x244>)
 80032b2:	2201      	movs	r2, #1
 80032b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b6:	f7fe ffe3 	bl	8002280 <HAL_GetTick>
 80032ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032bc:	e008      	b.n	80032d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032be:	f7fe ffdf 	bl	8002280 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d901      	bls.n	80032d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e1a8      	b.n	8003622 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032d0:	4b2b      	ldr	r3, [pc, #172]	@ (8003380 <HAL_RCC_OscConfig+0x240>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d0f0      	beq.n	80032be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032dc:	4b28      	ldr	r3, [pc, #160]	@ (8003380 <HAL_RCC_OscConfig+0x240>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	4925      	ldr	r1, [pc, #148]	@ (8003380 <HAL_RCC_OscConfig+0x240>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	600b      	str	r3, [r1, #0]
 80032f0:	e015      	b.n	800331e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032f2:	4b24      	ldr	r3, [pc, #144]	@ (8003384 <HAL_RCC_OscConfig+0x244>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f8:	f7fe ffc2 	bl	8002280 <HAL_GetTick>
 80032fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032fe:	e008      	b.n	8003312 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003300:	f7fe ffbe 	bl	8002280 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b02      	cmp	r3, #2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e187      	b.n	8003622 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003312:	4b1b      	ldr	r3, [pc, #108]	@ (8003380 <HAL_RCC_OscConfig+0x240>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1f0      	bne.n	8003300 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0308 	and.w	r3, r3, #8
 8003326:	2b00      	cmp	r3, #0
 8003328:	d036      	beq.n	8003398 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d016      	beq.n	8003360 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003332:	4b15      	ldr	r3, [pc, #84]	@ (8003388 <HAL_RCC_OscConfig+0x248>)
 8003334:	2201      	movs	r2, #1
 8003336:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003338:	f7fe ffa2 	bl	8002280 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003340:	f7fe ff9e 	bl	8002280 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b02      	cmp	r3, #2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e167      	b.n	8003622 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003352:	4b0b      	ldr	r3, [pc, #44]	@ (8003380 <HAL_RCC_OscConfig+0x240>)
 8003354:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0f0      	beq.n	8003340 <HAL_RCC_OscConfig+0x200>
 800335e:	e01b      	b.n	8003398 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003360:	4b09      	ldr	r3, [pc, #36]	@ (8003388 <HAL_RCC_OscConfig+0x248>)
 8003362:	2200      	movs	r2, #0
 8003364:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003366:	f7fe ff8b 	bl	8002280 <HAL_GetTick>
 800336a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800336c:	e00e      	b.n	800338c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800336e:	f7fe ff87 	bl	8002280 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d907      	bls.n	800338c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e150      	b.n	8003622 <HAL_RCC_OscConfig+0x4e2>
 8003380:	40023800 	.word	0x40023800
 8003384:	42470000 	.word	0x42470000
 8003388:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800338c:	4b88      	ldr	r3, [pc, #544]	@ (80035b0 <HAL_RCC_OscConfig+0x470>)
 800338e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d1ea      	bne.n	800336e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0304 	and.w	r3, r3, #4
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f000 8097 	beq.w	80034d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033a6:	2300      	movs	r3, #0
 80033a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033aa:	4b81      	ldr	r3, [pc, #516]	@ (80035b0 <HAL_RCC_OscConfig+0x470>)
 80033ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d10f      	bne.n	80033d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033b6:	2300      	movs	r3, #0
 80033b8:	60bb      	str	r3, [r7, #8]
 80033ba:	4b7d      	ldr	r3, [pc, #500]	@ (80035b0 <HAL_RCC_OscConfig+0x470>)
 80033bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033be:	4a7c      	ldr	r2, [pc, #496]	@ (80035b0 <HAL_RCC_OscConfig+0x470>)
 80033c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80033c6:	4b7a      	ldr	r3, [pc, #488]	@ (80035b0 <HAL_RCC_OscConfig+0x470>)
 80033c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033ce:	60bb      	str	r3, [r7, #8]
 80033d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033d2:	2301      	movs	r3, #1
 80033d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d6:	4b77      	ldr	r3, [pc, #476]	@ (80035b4 <HAL_RCC_OscConfig+0x474>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d118      	bne.n	8003414 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033e2:	4b74      	ldr	r3, [pc, #464]	@ (80035b4 <HAL_RCC_OscConfig+0x474>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a73      	ldr	r2, [pc, #460]	@ (80035b4 <HAL_RCC_OscConfig+0x474>)
 80033e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033ee:	f7fe ff47 	bl	8002280 <HAL_GetTick>
 80033f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f4:	e008      	b.n	8003408 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033f6:	f7fe ff43 	bl	8002280 <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	2b02      	cmp	r3, #2
 8003402:	d901      	bls.n	8003408 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e10c      	b.n	8003622 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003408:	4b6a      	ldr	r3, [pc, #424]	@ (80035b4 <HAL_RCC_OscConfig+0x474>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003410:	2b00      	cmp	r3, #0
 8003412:	d0f0      	beq.n	80033f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d106      	bne.n	800342a <HAL_RCC_OscConfig+0x2ea>
 800341c:	4b64      	ldr	r3, [pc, #400]	@ (80035b0 <HAL_RCC_OscConfig+0x470>)
 800341e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003420:	4a63      	ldr	r2, [pc, #396]	@ (80035b0 <HAL_RCC_OscConfig+0x470>)
 8003422:	f043 0301 	orr.w	r3, r3, #1
 8003426:	6713      	str	r3, [r2, #112]	@ 0x70
 8003428:	e01c      	b.n	8003464 <HAL_RCC_OscConfig+0x324>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	2b05      	cmp	r3, #5
 8003430:	d10c      	bne.n	800344c <HAL_RCC_OscConfig+0x30c>
 8003432:	4b5f      	ldr	r3, [pc, #380]	@ (80035b0 <HAL_RCC_OscConfig+0x470>)
 8003434:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003436:	4a5e      	ldr	r2, [pc, #376]	@ (80035b0 <HAL_RCC_OscConfig+0x470>)
 8003438:	f043 0304 	orr.w	r3, r3, #4
 800343c:	6713      	str	r3, [r2, #112]	@ 0x70
 800343e:	4b5c      	ldr	r3, [pc, #368]	@ (80035b0 <HAL_RCC_OscConfig+0x470>)
 8003440:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003442:	4a5b      	ldr	r2, [pc, #364]	@ (80035b0 <HAL_RCC_OscConfig+0x470>)
 8003444:	f043 0301 	orr.w	r3, r3, #1
 8003448:	6713      	str	r3, [r2, #112]	@ 0x70
 800344a:	e00b      	b.n	8003464 <HAL_RCC_OscConfig+0x324>
 800344c:	4b58      	ldr	r3, [pc, #352]	@ (80035b0 <HAL_RCC_OscConfig+0x470>)
 800344e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003450:	4a57      	ldr	r2, [pc, #348]	@ (80035b0 <HAL_RCC_OscConfig+0x470>)
 8003452:	f023 0301 	bic.w	r3, r3, #1
 8003456:	6713      	str	r3, [r2, #112]	@ 0x70
 8003458:	4b55      	ldr	r3, [pc, #340]	@ (80035b0 <HAL_RCC_OscConfig+0x470>)
 800345a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800345c:	4a54      	ldr	r2, [pc, #336]	@ (80035b0 <HAL_RCC_OscConfig+0x470>)
 800345e:	f023 0304 	bic.w	r3, r3, #4
 8003462:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d015      	beq.n	8003498 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800346c:	f7fe ff08 	bl	8002280 <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003472:	e00a      	b.n	800348a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003474:	f7fe ff04 	bl	8002280 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003482:	4293      	cmp	r3, r2
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e0cb      	b.n	8003622 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800348a:	4b49      	ldr	r3, [pc, #292]	@ (80035b0 <HAL_RCC_OscConfig+0x470>)
 800348c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d0ee      	beq.n	8003474 <HAL_RCC_OscConfig+0x334>
 8003496:	e014      	b.n	80034c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003498:	f7fe fef2 	bl	8002280 <HAL_GetTick>
 800349c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800349e:	e00a      	b.n	80034b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034a0:	f7fe feee 	bl	8002280 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e0b5      	b.n	8003622 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034b6:	4b3e      	ldr	r3, [pc, #248]	@ (80035b0 <HAL_RCC_OscConfig+0x470>)
 80034b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1ee      	bne.n	80034a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034c2:	7dfb      	ldrb	r3, [r7, #23]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d105      	bne.n	80034d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034c8:	4b39      	ldr	r3, [pc, #228]	@ (80035b0 <HAL_RCC_OscConfig+0x470>)
 80034ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034cc:	4a38      	ldr	r2, [pc, #224]	@ (80035b0 <HAL_RCC_OscConfig+0x470>)
 80034ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034d2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f000 80a1 	beq.w	8003620 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034de:	4b34      	ldr	r3, [pc, #208]	@ (80035b0 <HAL_RCC_OscConfig+0x470>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f003 030c 	and.w	r3, r3, #12
 80034e6:	2b08      	cmp	r3, #8
 80034e8:	d05c      	beq.n	80035a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d141      	bne.n	8003576 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034f2:	4b31      	ldr	r3, [pc, #196]	@ (80035b8 <HAL_RCC_OscConfig+0x478>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f8:	f7fe fec2 	bl	8002280 <HAL_GetTick>
 80034fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034fe:	e008      	b.n	8003512 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003500:	f7fe febe 	bl	8002280 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b02      	cmp	r3, #2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e087      	b.n	8003622 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003512:	4b27      	ldr	r3, [pc, #156]	@ (80035b0 <HAL_RCC_OscConfig+0x470>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1f0      	bne.n	8003500 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	69da      	ldr	r2, [r3, #28]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	431a      	orrs	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352c:	019b      	lsls	r3, r3, #6
 800352e:	431a      	orrs	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003534:	085b      	lsrs	r3, r3, #1
 8003536:	3b01      	subs	r3, #1
 8003538:	041b      	lsls	r3, r3, #16
 800353a:	431a      	orrs	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003540:	061b      	lsls	r3, r3, #24
 8003542:	491b      	ldr	r1, [pc, #108]	@ (80035b0 <HAL_RCC_OscConfig+0x470>)
 8003544:	4313      	orrs	r3, r2
 8003546:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003548:	4b1b      	ldr	r3, [pc, #108]	@ (80035b8 <HAL_RCC_OscConfig+0x478>)
 800354a:	2201      	movs	r2, #1
 800354c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800354e:	f7fe fe97 	bl	8002280 <HAL_GetTick>
 8003552:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003554:	e008      	b.n	8003568 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003556:	f7fe fe93 	bl	8002280 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d901      	bls.n	8003568 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e05c      	b.n	8003622 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003568:	4b11      	ldr	r3, [pc, #68]	@ (80035b0 <HAL_RCC_OscConfig+0x470>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d0f0      	beq.n	8003556 <HAL_RCC_OscConfig+0x416>
 8003574:	e054      	b.n	8003620 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003576:	4b10      	ldr	r3, [pc, #64]	@ (80035b8 <HAL_RCC_OscConfig+0x478>)
 8003578:	2200      	movs	r2, #0
 800357a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800357c:	f7fe fe80 	bl	8002280 <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003584:	f7fe fe7c 	bl	8002280 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e045      	b.n	8003622 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003596:	4b06      	ldr	r3, [pc, #24]	@ (80035b0 <HAL_RCC_OscConfig+0x470>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1f0      	bne.n	8003584 <HAL_RCC_OscConfig+0x444>
 80035a2:	e03d      	b.n	8003620 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d107      	bne.n	80035bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e038      	b.n	8003622 <HAL_RCC_OscConfig+0x4e2>
 80035b0:	40023800 	.word	0x40023800
 80035b4:	40007000 	.word	0x40007000
 80035b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035bc:	4b1b      	ldr	r3, [pc, #108]	@ (800362c <HAL_RCC_OscConfig+0x4ec>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d028      	beq.n	800361c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d121      	bne.n	800361c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d11a      	bne.n	800361c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035e6:	68fa      	ldr	r2, [r7, #12]
 80035e8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80035ec:	4013      	ands	r3, r2
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80035f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d111      	bne.n	800361c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003602:	085b      	lsrs	r3, r3, #1
 8003604:	3b01      	subs	r3, #1
 8003606:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003608:	429a      	cmp	r2, r3
 800360a:	d107      	bne.n	800361c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003616:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003618:	429a      	cmp	r2, r3
 800361a:	d001      	beq.n	8003620 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e000      	b.n	8003622 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3718      	adds	r7, #24
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	40023800 	.word	0x40023800

08003630 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d101      	bne.n	8003644 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e0cc      	b.n	80037de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003644:	4b68      	ldr	r3, [pc, #416]	@ (80037e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0307 	and.w	r3, r3, #7
 800364c:	683a      	ldr	r2, [r7, #0]
 800364e:	429a      	cmp	r2, r3
 8003650:	d90c      	bls.n	800366c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003652:	4b65      	ldr	r3, [pc, #404]	@ (80037e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003654:	683a      	ldr	r2, [r7, #0]
 8003656:	b2d2      	uxtb	r2, r2
 8003658:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800365a:	4b63      	ldr	r3, [pc, #396]	@ (80037e8 <HAL_RCC_ClockConfig+0x1b8>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0307 	and.w	r3, r3, #7
 8003662:	683a      	ldr	r2, [r7, #0]
 8003664:	429a      	cmp	r2, r3
 8003666:	d001      	beq.n	800366c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e0b8      	b.n	80037de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	2b00      	cmp	r3, #0
 8003676:	d020      	beq.n	80036ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0304 	and.w	r3, r3, #4
 8003680:	2b00      	cmp	r3, #0
 8003682:	d005      	beq.n	8003690 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003684:	4b59      	ldr	r3, [pc, #356]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	4a58      	ldr	r2, [pc, #352]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 800368a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800368e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0308 	and.w	r3, r3, #8
 8003698:	2b00      	cmp	r3, #0
 800369a:	d005      	beq.n	80036a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800369c:	4b53      	ldr	r3, [pc, #332]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	4a52      	ldr	r2, [pc, #328]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 80036a2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80036a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036a8:	4b50      	ldr	r3, [pc, #320]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	494d      	ldr	r1, [pc, #308]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d044      	beq.n	8003750 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d107      	bne.n	80036de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ce:	4b47      	ldr	r3, [pc, #284]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d119      	bne.n	800370e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e07f      	b.n	80037de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d003      	beq.n	80036ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036ea:	2b03      	cmp	r3, #3
 80036ec:	d107      	bne.n	80036fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ee:	4b3f      	ldr	r3, [pc, #252]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d109      	bne.n	800370e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e06f      	b.n	80037de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036fe:	4b3b      	ldr	r3, [pc, #236]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e067      	b.n	80037de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800370e:	4b37      	ldr	r3, [pc, #220]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f023 0203 	bic.w	r2, r3, #3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	4934      	ldr	r1, [pc, #208]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 800371c:	4313      	orrs	r3, r2
 800371e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003720:	f7fe fdae 	bl	8002280 <HAL_GetTick>
 8003724:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003726:	e00a      	b.n	800373e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003728:	f7fe fdaa 	bl	8002280 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003736:	4293      	cmp	r3, r2
 8003738:	d901      	bls.n	800373e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e04f      	b.n	80037de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800373e:	4b2b      	ldr	r3, [pc, #172]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f003 020c 	and.w	r2, r3, #12
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	429a      	cmp	r2, r3
 800374e:	d1eb      	bne.n	8003728 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003750:	4b25      	ldr	r3, [pc, #148]	@ (80037e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0307 	and.w	r3, r3, #7
 8003758:	683a      	ldr	r2, [r7, #0]
 800375a:	429a      	cmp	r2, r3
 800375c:	d20c      	bcs.n	8003778 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800375e:	4b22      	ldr	r3, [pc, #136]	@ (80037e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	b2d2      	uxtb	r2, r2
 8003764:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003766:	4b20      	ldr	r3, [pc, #128]	@ (80037e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0307 	and.w	r3, r3, #7
 800376e:	683a      	ldr	r2, [r7, #0]
 8003770:	429a      	cmp	r2, r3
 8003772:	d001      	beq.n	8003778 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e032      	b.n	80037de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0304 	and.w	r3, r3, #4
 8003780:	2b00      	cmp	r3, #0
 8003782:	d008      	beq.n	8003796 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003784:	4b19      	ldr	r3, [pc, #100]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	4916      	ldr	r1, [pc, #88]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 8003792:	4313      	orrs	r3, r2
 8003794:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0308 	and.w	r3, r3, #8
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d009      	beq.n	80037b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037a2:	4b12      	ldr	r3, [pc, #72]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	00db      	lsls	r3, r3, #3
 80037b0:	490e      	ldr	r1, [pc, #56]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037b6:	f000 f821 	bl	80037fc <HAL_RCC_GetSysClockFreq>
 80037ba:	4602      	mov	r2, r0
 80037bc:	4b0b      	ldr	r3, [pc, #44]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	091b      	lsrs	r3, r3, #4
 80037c2:	f003 030f 	and.w	r3, r3, #15
 80037c6:	490a      	ldr	r1, [pc, #40]	@ (80037f0 <HAL_RCC_ClockConfig+0x1c0>)
 80037c8:	5ccb      	ldrb	r3, [r1, r3]
 80037ca:	fa22 f303 	lsr.w	r3, r2, r3
 80037ce:	4a09      	ldr	r2, [pc, #36]	@ (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 80037d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037d2:	4b09      	ldr	r3, [pc, #36]	@ (80037f8 <HAL_RCC_ClockConfig+0x1c8>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7fe fd0e 	bl	80021f8 <HAL_InitTick>

  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	40023c00 	.word	0x40023c00
 80037ec:	40023800 	.word	0x40023800
 80037f0:	08006094 	.word	0x08006094
 80037f4:	20000000 	.word	0x20000000
 80037f8:	2000001c 	.word	0x2000001c

080037fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003800:	b090      	sub	sp, #64	@ 0x40
 8003802:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003804:	2300      	movs	r3, #0
 8003806:	637b      	str	r3, [r7, #52]	@ 0x34
 8003808:	2300      	movs	r3, #0
 800380a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800380c:	2300      	movs	r3, #0
 800380e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003810:	2300      	movs	r3, #0
 8003812:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003814:	4b59      	ldr	r3, [pc, #356]	@ (800397c <HAL_RCC_GetSysClockFreq+0x180>)
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f003 030c 	and.w	r3, r3, #12
 800381c:	2b08      	cmp	r3, #8
 800381e:	d00d      	beq.n	800383c <HAL_RCC_GetSysClockFreq+0x40>
 8003820:	2b08      	cmp	r3, #8
 8003822:	f200 80a1 	bhi.w	8003968 <HAL_RCC_GetSysClockFreq+0x16c>
 8003826:	2b00      	cmp	r3, #0
 8003828:	d002      	beq.n	8003830 <HAL_RCC_GetSysClockFreq+0x34>
 800382a:	2b04      	cmp	r3, #4
 800382c:	d003      	beq.n	8003836 <HAL_RCC_GetSysClockFreq+0x3a>
 800382e:	e09b      	b.n	8003968 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003830:	4b53      	ldr	r3, [pc, #332]	@ (8003980 <HAL_RCC_GetSysClockFreq+0x184>)
 8003832:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003834:	e09b      	b.n	800396e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003836:	4b53      	ldr	r3, [pc, #332]	@ (8003984 <HAL_RCC_GetSysClockFreq+0x188>)
 8003838:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800383a:	e098      	b.n	800396e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800383c:	4b4f      	ldr	r3, [pc, #316]	@ (800397c <HAL_RCC_GetSysClockFreq+0x180>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003844:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003846:	4b4d      	ldr	r3, [pc, #308]	@ (800397c <HAL_RCC_GetSysClockFreq+0x180>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d028      	beq.n	80038a4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003852:	4b4a      	ldr	r3, [pc, #296]	@ (800397c <HAL_RCC_GetSysClockFreq+0x180>)
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	099b      	lsrs	r3, r3, #6
 8003858:	2200      	movs	r2, #0
 800385a:	623b      	str	r3, [r7, #32]
 800385c:	627a      	str	r2, [r7, #36]	@ 0x24
 800385e:	6a3b      	ldr	r3, [r7, #32]
 8003860:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003864:	2100      	movs	r1, #0
 8003866:	4b47      	ldr	r3, [pc, #284]	@ (8003984 <HAL_RCC_GetSysClockFreq+0x188>)
 8003868:	fb03 f201 	mul.w	r2, r3, r1
 800386c:	2300      	movs	r3, #0
 800386e:	fb00 f303 	mul.w	r3, r0, r3
 8003872:	4413      	add	r3, r2
 8003874:	4a43      	ldr	r2, [pc, #268]	@ (8003984 <HAL_RCC_GetSysClockFreq+0x188>)
 8003876:	fba0 1202 	umull	r1, r2, r0, r2
 800387a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800387c:	460a      	mov	r2, r1
 800387e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003880:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003882:	4413      	add	r3, r2
 8003884:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003886:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003888:	2200      	movs	r2, #0
 800388a:	61bb      	str	r3, [r7, #24]
 800388c:	61fa      	str	r2, [r7, #28]
 800388e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003892:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003896:	f7fd f8c1 	bl	8000a1c <__aeabi_uldivmod>
 800389a:	4602      	mov	r2, r0
 800389c:	460b      	mov	r3, r1
 800389e:	4613      	mov	r3, r2
 80038a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038a2:	e053      	b.n	800394c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038a4:	4b35      	ldr	r3, [pc, #212]	@ (800397c <HAL_RCC_GetSysClockFreq+0x180>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	099b      	lsrs	r3, r3, #6
 80038aa:	2200      	movs	r2, #0
 80038ac:	613b      	str	r3, [r7, #16]
 80038ae:	617a      	str	r2, [r7, #20]
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80038b6:	f04f 0b00 	mov.w	fp, #0
 80038ba:	4652      	mov	r2, sl
 80038bc:	465b      	mov	r3, fp
 80038be:	f04f 0000 	mov.w	r0, #0
 80038c2:	f04f 0100 	mov.w	r1, #0
 80038c6:	0159      	lsls	r1, r3, #5
 80038c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038cc:	0150      	lsls	r0, r2, #5
 80038ce:	4602      	mov	r2, r0
 80038d0:	460b      	mov	r3, r1
 80038d2:	ebb2 080a 	subs.w	r8, r2, sl
 80038d6:	eb63 090b 	sbc.w	r9, r3, fp
 80038da:	f04f 0200 	mov.w	r2, #0
 80038de:	f04f 0300 	mov.w	r3, #0
 80038e2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80038e6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80038ea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80038ee:	ebb2 0408 	subs.w	r4, r2, r8
 80038f2:	eb63 0509 	sbc.w	r5, r3, r9
 80038f6:	f04f 0200 	mov.w	r2, #0
 80038fa:	f04f 0300 	mov.w	r3, #0
 80038fe:	00eb      	lsls	r3, r5, #3
 8003900:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003904:	00e2      	lsls	r2, r4, #3
 8003906:	4614      	mov	r4, r2
 8003908:	461d      	mov	r5, r3
 800390a:	eb14 030a 	adds.w	r3, r4, sl
 800390e:	603b      	str	r3, [r7, #0]
 8003910:	eb45 030b 	adc.w	r3, r5, fp
 8003914:	607b      	str	r3, [r7, #4]
 8003916:	f04f 0200 	mov.w	r2, #0
 800391a:	f04f 0300 	mov.w	r3, #0
 800391e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003922:	4629      	mov	r1, r5
 8003924:	028b      	lsls	r3, r1, #10
 8003926:	4621      	mov	r1, r4
 8003928:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800392c:	4621      	mov	r1, r4
 800392e:	028a      	lsls	r2, r1, #10
 8003930:	4610      	mov	r0, r2
 8003932:	4619      	mov	r1, r3
 8003934:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003936:	2200      	movs	r2, #0
 8003938:	60bb      	str	r3, [r7, #8]
 800393a:	60fa      	str	r2, [r7, #12]
 800393c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003940:	f7fd f86c 	bl	8000a1c <__aeabi_uldivmod>
 8003944:	4602      	mov	r2, r0
 8003946:	460b      	mov	r3, r1
 8003948:	4613      	mov	r3, r2
 800394a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800394c:	4b0b      	ldr	r3, [pc, #44]	@ (800397c <HAL_RCC_GetSysClockFreq+0x180>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	0c1b      	lsrs	r3, r3, #16
 8003952:	f003 0303 	and.w	r3, r3, #3
 8003956:	3301      	adds	r3, #1
 8003958:	005b      	lsls	r3, r3, #1
 800395a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 800395c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800395e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003960:	fbb2 f3f3 	udiv	r3, r2, r3
 8003964:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003966:	e002      	b.n	800396e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003968:	4b05      	ldr	r3, [pc, #20]	@ (8003980 <HAL_RCC_GetSysClockFreq+0x184>)
 800396a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800396c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800396e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003970:	4618      	mov	r0, r3
 8003972:	3740      	adds	r7, #64	@ 0x40
 8003974:	46bd      	mov	sp, r7
 8003976:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800397a:	bf00      	nop
 800397c:	40023800 	.word	0x40023800
 8003980:	00f42400 	.word	0x00f42400
 8003984:	017d7840 	.word	0x017d7840

08003988 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003988:	b480      	push	{r7}
 800398a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800398c:	4b03      	ldr	r3, [pc, #12]	@ (800399c <HAL_RCC_GetHCLKFreq+0x14>)
 800398e:	681b      	ldr	r3, [r3, #0]
}
 8003990:	4618      	mov	r0, r3
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	20000000 	.word	0x20000000

080039a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80039a4:	f7ff fff0 	bl	8003988 <HAL_RCC_GetHCLKFreq>
 80039a8:	4602      	mov	r2, r0
 80039aa:	4b05      	ldr	r3, [pc, #20]	@ (80039c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	0a9b      	lsrs	r3, r3, #10
 80039b0:	f003 0307 	and.w	r3, r3, #7
 80039b4:	4903      	ldr	r1, [pc, #12]	@ (80039c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039b6:	5ccb      	ldrb	r3, [r1, r3]
 80039b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039bc:	4618      	mov	r0, r3
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	40023800 	.word	0x40023800
 80039c4:	080060a4 	.word	0x080060a4

080039c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80039cc:	f7ff ffdc 	bl	8003988 <HAL_RCC_GetHCLKFreq>
 80039d0:	4602      	mov	r2, r0
 80039d2:	4b05      	ldr	r3, [pc, #20]	@ (80039e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	0b5b      	lsrs	r3, r3, #13
 80039d8:	f003 0307 	and.w	r3, r3, #7
 80039dc:	4903      	ldr	r1, [pc, #12]	@ (80039ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80039de:	5ccb      	ldrb	r3, [r1, r3]
 80039e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	40023800 	.word	0x40023800
 80039ec:	080060a4 	.word	0x080060a4

080039f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d101      	bne.n	8003a02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e041      	b.n	8003a86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d106      	bne.n	8003a1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f7fd fd9a 	bl	8001550 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2202      	movs	r2, #2
 8003a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	3304      	adds	r3, #4
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	4610      	mov	r0, r2
 8003a30:	f000 fa10 	bl	8003e54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3708      	adds	r7, #8
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b082      	sub	sp, #8
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d101      	bne.n	8003aa0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e041      	b.n	8003b24 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d106      	bne.n	8003aba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 f839 	bl	8003b2c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2202      	movs	r2, #2
 8003abe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	3304      	adds	r3, #4
 8003aca:	4619      	mov	r1, r3
 8003acc:	4610      	mov	r0, r2
 8003ace:	f000 f9c1 	bl	8003e54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2201      	movs	r2, #1
 8003af6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2201      	movs	r2, #1
 8003afe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2201      	movs	r2, #1
 8003b06:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2201      	movs	r2, #1
 8003b16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3708      	adds	r7, #8
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d101      	bne.n	8003b5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	e0ae      	b.n	8003cbc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2201      	movs	r2, #1
 8003b62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2b0c      	cmp	r3, #12
 8003b6a:	f200 809f 	bhi.w	8003cac <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003b6e:	a201      	add	r2, pc, #4	@ (adr r2, 8003b74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b74:	08003ba9 	.word	0x08003ba9
 8003b78:	08003cad 	.word	0x08003cad
 8003b7c:	08003cad 	.word	0x08003cad
 8003b80:	08003cad 	.word	0x08003cad
 8003b84:	08003be9 	.word	0x08003be9
 8003b88:	08003cad 	.word	0x08003cad
 8003b8c:	08003cad 	.word	0x08003cad
 8003b90:	08003cad 	.word	0x08003cad
 8003b94:	08003c2b 	.word	0x08003c2b
 8003b98:	08003cad 	.word	0x08003cad
 8003b9c:	08003cad 	.word	0x08003cad
 8003ba0:	08003cad 	.word	0x08003cad
 8003ba4:	08003c6b 	.word	0x08003c6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68b9      	ldr	r1, [r7, #8]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f000 f9fc 	bl	8003fac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	699a      	ldr	r2, [r3, #24]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f042 0208 	orr.w	r2, r2, #8
 8003bc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	699a      	ldr	r2, [r3, #24]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f022 0204 	bic.w	r2, r2, #4
 8003bd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	6999      	ldr	r1, [r3, #24]
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	691a      	ldr	r2, [r3, #16]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	619a      	str	r2, [r3, #24]
      break;
 8003be6:	e064      	b.n	8003cb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68b9      	ldr	r1, [r7, #8]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f000 fa4c 	bl	800408c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	699a      	ldr	r2, [r3, #24]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	699a      	ldr	r2, [r3, #24]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	6999      	ldr	r1, [r3, #24]
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	021a      	lsls	r2, r3, #8
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	430a      	orrs	r2, r1
 8003c26:	619a      	str	r2, [r3, #24]
      break;
 8003c28:	e043      	b.n	8003cb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68b9      	ldr	r1, [r7, #8]
 8003c30:	4618      	mov	r0, r3
 8003c32:	f000 faa1 	bl	8004178 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	69da      	ldr	r2, [r3, #28]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f042 0208 	orr.w	r2, r2, #8
 8003c44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	69da      	ldr	r2, [r3, #28]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f022 0204 	bic.w	r2, r2, #4
 8003c54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	69d9      	ldr	r1, [r3, #28]
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	691a      	ldr	r2, [r3, #16]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	430a      	orrs	r2, r1
 8003c66:	61da      	str	r2, [r3, #28]
      break;
 8003c68:	e023      	b.n	8003cb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68b9      	ldr	r1, [r7, #8]
 8003c70:	4618      	mov	r0, r3
 8003c72:	f000 faf5 	bl	8004260 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	69da      	ldr	r2, [r3, #28]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	69da      	ldr	r2, [r3, #28]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	69d9      	ldr	r1, [r3, #28]
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	021a      	lsls	r2, r3, #8
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	61da      	str	r2, [r3, #28]
      break;
 8003caa:	e002      	b.n	8003cb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	75fb      	strb	r3, [r7, #23]
      break;
 8003cb0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003cba:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3718      	adds	r7, #24
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d101      	bne.n	8003ce0 <HAL_TIM_ConfigClockSource+0x1c>
 8003cdc:	2302      	movs	r3, #2
 8003cde:	e0b4      	b.n	8003e4a <HAL_TIM_ConfigClockSource+0x186>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2202      	movs	r2, #2
 8003cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003cfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68ba      	ldr	r2, [r7, #8]
 8003d0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d18:	d03e      	beq.n	8003d98 <HAL_TIM_ConfigClockSource+0xd4>
 8003d1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d1e:	f200 8087 	bhi.w	8003e30 <HAL_TIM_ConfigClockSource+0x16c>
 8003d22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d26:	f000 8086 	beq.w	8003e36 <HAL_TIM_ConfigClockSource+0x172>
 8003d2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d2e:	d87f      	bhi.n	8003e30 <HAL_TIM_ConfigClockSource+0x16c>
 8003d30:	2b70      	cmp	r3, #112	@ 0x70
 8003d32:	d01a      	beq.n	8003d6a <HAL_TIM_ConfigClockSource+0xa6>
 8003d34:	2b70      	cmp	r3, #112	@ 0x70
 8003d36:	d87b      	bhi.n	8003e30 <HAL_TIM_ConfigClockSource+0x16c>
 8003d38:	2b60      	cmp	r3, #96	@ 0x60
 8003d3a:	d050      	beq.n	8003dde <HAL_TIM_ConfigClockSource+0x11a>
 8003d3c:	2b60      	cmp	r3, #96	@ 0x60
 8003d3e:	d877      	bhi.n	8003e30 <HAL_TIM_ConfigClockSource+0x16c>
 8003d40:	2b50      	cmp	r3, #80	@ 0x50
 8003d42:	d03c      	beq.n	8003dbe <HAL_TIM_ConfigClockSource+0xfa>
 8003d44:	2b50      	cmp	r3, #80	@ 0x50
 8003d46:	d873      	bhi.n	8003e30 <HAL_TIM_ConfigClockSource+0x16c>
 8003d48:	2b40      	cmp	r3, #64	@ 0x40
 8003d4a:	d058      	beq.n	8003dfe <HAL_TIM_ConfigClockSource+0x13a>
 8003d4c:	2b40      	cmp	r3, #64	@ 0x40
 8003d4e:	d86f      	bhi.n	8003e30 <HAL_TIM_ConfigClockSource+0x16c>
 8003d50:	2b30      	cmp	r3, #48	@ 0x30
 8003d52:	d064      	beq.n	8003e1e <HAL_TIM_ConfigClockSource+0x15a>
 8003d54:	2b30      	cmp	r3, #48	@ 0x30
 8003d56:	d86b      	bhi.n	8003e30 <HAL_TIM_ConfigClockSource+0x16c>
 8003d58:	2b20      	cmp	r3, #32
 8003d5a:	d060      	beq.n	8003e1e <HAL_TIM_ConfigClockSource+0x15a>
 8003d5c:	2b20      	cmp	r3, #32
 8003d5e:	d867      	bhi.n	8003e30 <HAL_TIM_ConfigClockSource+0x16c>
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d05c      	beq.n	8003e1e <HAL_TIM_ConfigClockSource+0x15a>
 8003d64:	2b10      	cmp	r3, #16
 8003d66:	d05a      	beq.n	8003e1e <HAL_TIM_ConfigClockSource+0x15a>
 8003d68:	e062      	b.n	8003e30 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d7a:	f000 fb41 	bl	8004400 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003d8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68ba      	ldr	r2, [r7, #8]
 8003d94:	609a      	str	r2, [r3, #8]
      break;
 8003d96:	e04f      	b.n	8003e38 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003da8:	f000 fb2a 	bl	8004400 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	689a      	ldr	r2, [r3, #8]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003dba:	609a      	str	r2, [r3, #8]
      break;
 8003dbc:	e03c      	b.n	8003e38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dca:	461a      	mov	r2, r3
 8003dcc:	f000 fa9e 	bl	800430c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2150      	movs	r1, #80	@ 0x50
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f000 faf7 	bl	80043ca <TIM_ITRx_SetConfig>
      break;
 8003ddc:	e02c      	b.n	8003e38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dea:	461a      	mov	r2, r3
 8003dec:	f000 fabd 	bl	800436a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2160      	movs	r1, #96	@ 0x60
 8003df6:	4618      	mov	r0, r3
 8003df8:	f000 fae7 	bl	80043ca <TIM_ITRx_SetConfig>
      break;
 8003dfc:	e01c      	b.n	8003e38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	f000 fa7e 	bl	800430c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2140      	movs	r1, #64	@ 0x40
 8003e16:	4618      	mov	r0, r3
 8003e18:	f000 fad7 	bl	80043ca <TIM_ITRx_SetConfig>
      break;
 8003e1c:	e00c      	b.n	8003e38 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4619      	mov	r1, r3
 8003e28:	4610      	mov	r0, r2
 8003e2a:	f000 face 	bl	80043ca <TIM_ITRx_SetConfig>
      break;
 8003e2e:	e003      	b.n	8003e38 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	73fb      	strb	r3, [r7, #15]
      break;
 8003e34:	e000      	b.n	8003e38 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
	...

08003e54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b085      	sub	sp, #20
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a46      	ldr	r2, [pc, #280]	@ (8003f80 <TIM_Base_SetConfig+0x12c>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d013      	beq.n	8003e94 <TIM_Base_SetConfig+0x40>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e72:	d00f      	beq.n	8003e94 <TIM_Base_SetConfig+0x40>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a43      	ldr	r2, [pc, #268]	@ (8003f84 <TIM_Base_SetConfig+0x130>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d00b      	beq.n	8003e94 <TIM_Base_SetConfig+0x40>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a42      	ldr	r2, [pc, #264]	@ (8003f88 <TIM_Base_SetConfig+0x134>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d007      	beq.n	8003e94 <TIM_Base_SetConfig+0x40>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a41      	ldr	r2, [pc, #260]	@ (8003f8c <TIM_Base_SetConfig+0x138>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d003      	beq.n	8003e94 <TIM_Base_SetConfig+0x40>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a40      	ldr	r2, [pc, #256]	@ (8003f90 <TIM_Base_SetConfig+0x13c>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d108      	bne.n	8003ea6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a35      	ldr	r2, [pc, #212]	@ (8003f80 <TIM_Base_SetConfig+0x12c>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d02b      	beq.n	8003f06 <TIM_Base_SetConfig+0xb2>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eb4:	d027      	beq.n	8003f06 <TIM_Base_SetConfig+0xb2>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a32      	ldr	r2, [pc, #200]	@ (8003f84 <TIM_Base_SetConfig+0x130>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d023      	beq.n	8003f06 <TIM_Base_SetConfig+0xb2>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a31      	ldr	r2, [pc, #196]	@ (8003f88 <TIM_Base_SetConfig+0x134>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d01f      	beq.n	8003f06 <TIM_Base_SetConfig+0xb2>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a30      	ldr	r2, [pc, #192]	@ (8003f8c <TIM_Base_SetConfig+0x138>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d01b      	beq.n	8003f06 <TIM_Base_SetConfig+0xb2>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a2f      	ldr	r2, [pc, #188]	@ (8003f90 <TIM_Base_SetConfig+0x13c>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d017      	beq.n	8003f06 <TIM_Base_SetConfig+0xb2>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a2e      	ldr	r2, [pc, #184]	@ (8003f94 <TIM_Base_SetConfig+0x140>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d013      	beq.n	8003f06 <TIM_Base_SetConfig+0xb2>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a2d      	ldr	r2, [pc, #180]	@ (8003f98 <TIM_Base_SetConfig+0x144>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d00f      	beq.n	8003f06 <TIM_Base_SetConfig+0xb2>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a2c      	ldr	r2, [pc, #176]	@ (8003f9c <TIM_Base_SetConfig+0x148>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d00b      	beq.n	8003f06 <TIM_Base_SetConfig+0xb2>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a2b      	ldr	r2, [pc, #172]	@ (8003fa0 <TIM_Base_SetConfig+0x14c>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d007      	beq.n	8003f06 <TIM_Base_SetConfig+0xb2>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a2a      	ldr	r2, [pc, #168]	@ (8003fa4 <TIM_Base_SetConfig+0x150>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d003      	beq.n	8003f06 <TIM_Base_SetConfig+0xb2>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a29      	ldr	r2, [pc, #164]	@ (8003fa8 <TIM_Base_SetConfig+0x154>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d108      	bne.n	8003f18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	689a      	ldr	r2, [r3, #8]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a10      	ldr	r2, [pc, #64]	@ (8003f80 <TIM_Base_SetConfig+0x12c>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d003      	beq.n	8003f4c <TIM_Base_SetConfig+0xf8>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a12      	ldr	r2, [pc, #72]	@ (8003f90 <TIM_Base_SetConfig+0x13c>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d103      	bne.n	8003f54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	691a      	ldr	r2, [r3, #16]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d105      	bne.n	8003f72 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	f023 0201 	bic.w	r2, r3, #1
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	611a      	str	r2, [r3, #16]
  }
}
 8003f72:	bf00      	nop
 8003f74:	3714      	adds	r7, #20
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	40010000 	.word	0x40010000
 8003f84:	40000400 	.word	0x40000400
 8003f88:	40000800 	.word	0x40000800
 8003f8c:	40000c00 	.word	0x40000c00
 8003f90:	40010400 	.word	0x40010400
 8003f94:	40014000 	.word	0x40014000
 8003f98:	40014400 	.word	0x40014400
 8003f9c:	40014800 	.word	0x40014800
 8003fa0:	40001800 	.word	0x40001800
 8003fa4:	40001c00 	.word	0x40001c00
 8003fa8:	40002000 	.word	0x40002000

08003fac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b087      	sub	sp, #28
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
 8003fc0:	f023 0201 	bic.w	r2, r3, #1
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f023 0303 	bic.w	r3, r3, #3
 8003fe2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	f023 0302 	bic.w	r3, r3, #2
 8003ff4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a20      	ldr	r2, [pc, #128]	@ (8004084 <TIM_OC1_SetConfig+0xd8>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d003      	beq.n	8004010 <TIM_OC1_SetConfig+0x64>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a1f      	ldr	r2, [pc, #124]	@ (8004088 <TIM_OC1_SetConfig+0xdc>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d10c      	bne.n	800402a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	f023 0308 	bic.w	r3, r3, #8
 8004016:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	697a      	ldr	r2, [r7, #20]
 800401e:	4313      	orrs	r3, r2
 8004020:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	f023 0304 	bic.w	r3, r3, #4
 8004028:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a15      	ldr	r2, [pc, #84]	@ (8004084 <TIM_OC1_SetConfig+0xd8>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d003      	beq.n	800403a <TIM_OC1_SetConfig+0x8e>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a14      	ldr	r2, [pc, #80]	@ (8004088 <TIM_OC1_SetConfig+0xdc>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d111      	bne.n	800405e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004040:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004048:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	4313      	orrs	r3, r2
 8004052:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	693a      	ldr	r2, [r7, #16]
 800405a:	4313      	orrs	r3, r2
 800405c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	685a      	ldr	r2, [r3, #4]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	697a      	ldr	r2, [r7, #20]
 8004076:	621a      	str	r2, [r3, #32]
}
 8004078:	bf00      	nop
 800407a:	371c      	adds	r7, #28
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr
 8004084:	40010000 	.word	0x40010000
 8004088:	40010400 	.word	0x40010400

0800408c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800408c:	b480      	push	{r7}
 800408e:	b087      	sub	sp, #28
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a1b      	ldr	r3, [r3, #32]
 80040a0:	f023 0210 	bic.w	r2, r3, #16
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	021b      	lsls	r3, r3, #8
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	f023 0320 	bic.w	r3, r3, #32
 80040d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	011b      	lsls	r3, r3, #4
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a22      	ldr	r2, [pc, #136]	@ (8004170 <TIM_OC2_SetConfig+0xe4>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d003      	beq.n	80040f4 <TIM_OC2_SetConfig+0x68>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a21      	ldr	r2, [pc, #132]	@ (8004174 <TIM_OC2_SetConfig+0xe8>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d10d      	bne.n	8004110 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	011b      	lsls	r3, r3, #4
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	4313      	orrs	r3, r2
 8004106:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800410e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a17      	ldr	r2, [pc, #92]	@ (8004170 <TIM_OC2_SetConfig+0xe4>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d003      	beq.n	8004120 <TIM_OC2_SetConfig+0x94>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a16      	ldr	r2, [pc, #88]	@ (8004174 <TIM_OC2_SetConfig+0xe8>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d113      	bne.n	8004148 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004126:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800412e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	4313      	orrs	r3, r2
 800413a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	4313      	orrs	r3, r2
 8004146:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	685a      	ldr	r2, [r3, #4]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	621a      	str	r2, [r3, #32]
}
 8004162:	bf00      	nop
 8004164:	371c      	adds	r7, #28
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	40010000 	.word	0x40010000
 8004174:	40010400 	.word	0x40010400

08004178 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004178:	b480      	push	{r7}
 800417a:	b087      	sub	sp, #28
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a1b      	ldr	r3, [r3, #32]
 8004186:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a1b      	ldr	r3, [r3, #32]
 800418c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	69db      	ldr	r3, [r3, #28]
 800419e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f023 0303 	bic.w	r3, r3, #3
 80041ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68fa      	ldr	r2, [r7, #12]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80041c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	021b      	lsls	r3, r3, #8
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a21      	ldr	r2, [pc, #132]	@ (8004258 <TIM_OC3_SetConfig+0xe0>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d003      	beq.n	80041de <TIM_OC3_SetConfig+0x66>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a20      	ldr	r2, [pc, #128]	@ (800425c <TIM_OC3_SetConfig+0xe4>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d10d      	bne.n	80041fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80041e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	021b      	lsls	r3, r3, #8
 80041ec:	697a      	ldr	r2, [r7, #20]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80041f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a16      	ldr	r2, [pc, #88]	@ (8004258 <TIM_OC3_SetConfig+0xe0>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d003      	beq.n	800420a <TIM_OC3_SetConfig+0x92>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a15      	ldr	r2, [pc, #84]	@ (800425c <TIM_OC3_SetConfig+0xe4>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d113      	bne.n	8004232 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004210:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004218:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	011b      	lsls	r3, r3, #4
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	4313      	orrs	r3, r2
 8004224:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	011b      	lsls	r3, r3, #4
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	4313      	orrs	r3, r2
 8004230:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	693a      	ldr	r2, [r7, #16]
 8004236:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	685a      	ldr	r2, [r3, #4]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	621a      	str	r2, [r3, #32]
}
 800424c:	bf00      	nop
 800424e:	371c      	adds	r7, #28
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr
 8004258:	40010000 	.word	0x40010000
 800425c:	40010400 	.word	0x40010400

08004260 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004260:	b480      	push	{r7}
 8004262:	b087      	sub	sp, #28
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a1b      	ldr	r3, [r3, #32]
 800426e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a1b      	ldr	r3, [r3, #32]
 8004274:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	69db      	ldr	r3, [r3, #28]
 8004286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800428e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004296:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	021b      	lsls	r3, r3, #8
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80042aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	031b      	lsls	r3, r3, #12
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a12      	ldr	r2, [pc, #72]	@ (8004304 <TIM_OC4_SetConfig+0xa4>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d003      	beq.n	80042c8 <TIM_OC4_SetConfig+0x68>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a11      	ldr	r2, [pc, #68]	@ (8004308 <TIM_OC4_SetConfig+0xa8>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d109      	bne.n	80042dc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80042ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	695b      	ldr	r3, [r3, #20]
 80042d4:	019b      	lsls	r3, r3, #6
 80042d6:	697a      	ldr	r2, [r7, #20]
 80042d8:	4313      	orrs	r3, r2
 80042da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	697a      	ldr	r2, [r7, #20]
 80042e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	621a      	str	r2, [r3, #32]
}
 80042f6:	bf00      	nop
 80042f8:	371c      	adds	r7, #28
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	40010000 	.word	0x40010000
 8004308:	40010400 	.word	0x40010400

0800430c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800430c:	b480      	push	{r7}
 800430e:	b087      	sub	sp, #28
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6a1b      	ldr	r3, [r3, #32]
 800431c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6a1b      	ldr	r3, [r3, #32]
 8004322:	f023 0201 	bic.w	r2, r3, #1
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004336:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	011b      	lsls	r3, r3, #4
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	4313      	orrs	r3, r2
 8004340:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f023 030a 	bic.w	r3, r3, #10
 8004348:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	4313      	orrs	r3, r2
 8004350:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	621a      	str	r2, [r3, #32]
}
 800435e:	bf00      	nop
 8004360:	371c      	adds	r7, #28
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr

0800436a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800436a:	b480      	push	{r7}
 800436c:	b087      	sub	sp, #28
 800436e:	af00      	add	r7, sp, #0
 8004370:	60f8      	str	r0, [r7, #12]
 8004372:	60b9      	str	r1, [r7, #8]
 8004374:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6a1b      	ldr	r3, [r3, #32]
 8004380:	f023 0210 	bic.w	r2, r3, #16
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004394:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	031b      	lsls	r3, r3, #12
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	4313      	orrs	r3, r2
 800439e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80043a6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	011b      	lsls	r3, r3, #4
 80043ac:	697a      	ldr	r2, [r7, #20]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	693a      	ldr	r2, [r7, #16]
 80043b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	621a      	str	r2, [r3, #32]
}
 80043be:	bf00      	nop
 80043c0:	371c      	adds	r7, #28
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr

080043ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043ca:	b480      	push	{r7}
 80043cc:	b085      	sub	sp, #20
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
 80043d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043e2:	683a      	ldr	r2, [r7, #0]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	f043 0307 	orr.w	r3, r3, #7
 80043ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	609a      	str	r2, [r3, #8]
}
 80043f4:	bf00      	nop
 80043f6:	3714      	adds	r7, #20
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004400:	b480      	push	{r7}
 8004402:	b087      	sub	sp, #28
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
 800440c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800441a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	021a      	lsls	r2, r3, #8
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	431a      	orrs	r2, r3
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	4313      	orrs	r3, r2
 8004428:	697a      	ldr	r2, [r7, #20]
 800442a:	4313      	orrs	r3, r2
 800442c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	697a      	ldr	r2, [r7, #20]
 8004432:	609a      	str	r2, [r3, #8]
}
 8004434:	bf00      	nop
 8004436:	371c      	adds	r7, #28
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004450:	2b01      	cmp	r3, #1
 8004452:	d101      	bne.n	8004458 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004454:	2302      	movs	r3, #2
 8004456:	e05a      	b.n	800450e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2202      	movs	r2, #2
 8004464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800447e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	4313      	orrs	r3, r2
 8004488:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a21      	ldr	r2, [pc, #132]	@ (800451c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d022      	beq.n	80044e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044a4:	d01d      	beq.n	80044e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a1d      	ldr	r2, [pc, #116]	@ (8004520 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d018      	beq.n	80044e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a1b      	ldr	r2, [pc, #108]	@ (8004524 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d013      	beq.n	80044e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a1a      	ldr	r2, [pc, #104]	@ (8004528 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d00e      	beq.n	80044e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a18      	ldr	r2, [pc, #96]	@ (800452c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d009      	beq.n	80044e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a17      	ldr	r2, [pc, #92]	@ (8004530 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d004      	beq.n	80044e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a15      	ldr	r2, [pc, #84]	@ (8004534 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d10c      	bne.n	80044fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	68ba      	ldr	r2, [r7, #8]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68ba      	ldr	r2, [r7, #8]
 80044fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3714      	adds	r7, #20
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	40010000 	.word	0x40010000
 8004520:	40000400 	.word	0x40000400
 8004524:	40000800 	.word	0x40000800
 8004528:	40000c00 	.word	0x40000c00
 800452c:	40010400 	.word	0x40010400
 8004530:	40014000 	.word	0x40014000
 8004534:	40001800 	.word	0x40001800

08004538 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d101      	bne.n	800454a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e042      	b.n	80045d0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004550:	b2db      	uxtb	r3, r3
 8004552:	2b00      	cmp	r3, #0
 8004554:	d106      	bne.n	8004564 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f7fd f852 	bl	8001608 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2224      	movs	r2, #36	@ 0x24
 8004568:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68da      	ldr	r2, [r3, #12]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800457a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 fe55 	bl	800522c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	691a      	ldr	r2, [r3, #16]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004590:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	695a      	ldr	r2, [r3, #20]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80045a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68da      	ldr	r2, [r3, #12]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80045b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2220      	movs	r2, #32
 80045bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2220      	movs	r2, #32
 80045c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3708      	adds	r7, #8
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b08a      	sub	sp, #40	@ 0x28
 80045dc:	af02      	add	r7, sp, #8
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	603b      	str	r3, [r7, #0]
 80045e4:	4613      	mov	r3, r2
 80045e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80045e8:	2300      	movs	r3, #0
 80045ea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	2b20      	cmp	r3, #32
 80045f6:	d175      	bne.n	80046e4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d002      	beq.n	8004604 <HAL_UART_Transmit+0x2c>
 80045fe:	88fb      	ldrh	r3, [r7, #6]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d101      	bne.n	8004608 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e06e      	b.n	80046e6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2200      	movs	r2, #0
 800460c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2221      	movs	r2, #33	@ 0x21
 8004612:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004616:	f7fd fe33 	bl	8002280 <HAL_GetTick>
 800461a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	88fa      	ldrh	r2, [r7, #6]
 8004620:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	88fa      	ldrh	r2, [r7, #6]
 8004626:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004630:	d108      	bne.n	8004644 <HAL_UART_Transmit+0x6c>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d104      	bne.n	8004644 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800463a:	2300      	movs	r3, #0
 800463c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	61bb      	str	r3, [r7, #24]
 8004642:	e003      	b.n	800464c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004648:	2300      	movs	r3, #0
 800464a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800464c:	e02e      	b.n	80046ac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	9300      	str	r3, [sp, #0]
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	2200      	movs	r2, #0
 8004656:	2180      	movs	r1, #128	@ 0x80
 8004658:	68f8      	ldr	r0, [r7, #12]
 800465a:	f000 fbb7 	bl	8004dcc <UART_WaitOnFlagUntilTimeout>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d005      	beq.n	8004670 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2220      	movs	r2, #32
 8004668:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e03a      	b.n	80046e6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d10b      	bne.n	800468e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	881b      	ldrh	r3, [r3, #0]
 800467a:	461a      	mov	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004684:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	3302      	adds	r3, #2
 800468a:	61bb      	str	r3, [r7, #24]
 800468c:	e007      	b.n	800469e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	781a      	ldrb	r2, [r3, #0]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	3301      	adds	r3, #1
 800469c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	3b01      	subs	r3, #1
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1cb      	bne.n	800464e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	9300      	str	r3, [sp, #0]
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	2200      	movs	r2, #0
 80046be:	2140      	movs	r1, #64	@ 0x40
 80046c0:	68f8      	ldr	r0, [r7, #12]
 80046c2:	f000 fb83 	bl	8004dcc <UART_WaitOnFlagUntilTimeout>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d005      	beq.n	80046d8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2220      	movs	r2, #32
 80046d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e006      	b.n	80046e6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2220      	movs	r2, #32
 80046dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80046e0:	2300      	movs	r3, #0
 80046e2:	e000      	b.n	80046e6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80046e4:	2302      	movs	r3, #2
  }
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3720      	adds	r7, #32
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}

080046ee <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046ee:	b580      	push	{r7, lr}
 80046f0:	b08a      	sub	sp, #40	@ 0x28
 80046f2:	af02      	add	r7, sp, #8
 80046f4:	60f8      	str	r0, [r7, #12]
 80046f6:	60b9      	str	r1, [r7, #8]
 80046f8:	603b      	str	r3, [r7, #0]
 80046fa:	4613      	mov	r3, r2
 80046fc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80046fe:	2300      	movs	r3, #0
 8004700:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b20      	cmp	r3, #32
 800470c:	f040 8081 	bne.w	8004812 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d002      	beq.n	800471c <HAL_UART_Receive+0x2e>
 8004716:	88fb      	ldrh	r3, [r7, #6]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d101      	bne.n	8004720 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e079      	b.n	8004814 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2200      	movs	r2, #0
 8004724:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2222      	movs	r2, #34	@ 0x22
 800472a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2200      	movs	r2, #0
 8004732:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004734:	f7fd fda4 	bl	8002280 <HAL_GetTick>
 8004738:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	88fa      	ldrh	r2, [r7, #6]
 800473e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	88fa      	ldrh	r2, [r7, #6]
 8004744:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800474e:	d108      	bne.n	8004762 <HAL_UART_Receive+0x74>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d104      	bne.n	8004762 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8004758:	2300      	movs	r3, #0
 800475a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	61bb      	str	r3, [r7, #24]
 8004760:	e003      	b.n	800476a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004766:	2300      	movs	r3, #0
 8004768:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800476a:	e047      	b.n	80047fc <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	9300      	str	r3, [sp, #0]
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	2200      	movs	r2, #0
 8004774:	2120      	movs	r1, #32
 8004776:	68f8      	ldr	r0, [r7, #12]
 8004778:	f000 fb28 	bl	8004dcc <UART_WaitOnFlagUntilTimeout>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d005      	beq.n	800478e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2220      	movs	r2, #32
 8004786:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e042      	b.n	8004814 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d10c      	bne.n	80047ae <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	b29b      	uxth	r3, r3
 800479c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047a0:	b29a      	uxth	r2, r3
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	3302      	adds	r3, #2
 80047aa:	61bb      	str	r3, [r7, #24]
 80047ac:	e01f      	b.n	80047ee <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047b6:	d007      	beq.n	80047c8 <HAL_UART_Receive+0xda>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d10a      	bne.n	80047d6 <HAL_UART_Receive+0xe8>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d106      	bne.n	80047d6 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	b2da      	uxtb	r2, r3
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	701a      	strb	r2, [r3, #0]
 80047d4:	e008      	b.n	80047e8 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047e2:	b2da      	uxtb	r2, r3
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	3301      	adds	r3, #1
 80047ec:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	3b01      	subs	r3, #1
 80047f6:	b29a      	uxth	r2, r3
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004800:	b29b      	uxth	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1b2      	bne.n	800476c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2220      	movs	r2, #32
 800480a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800480e:	2300      	movs	r3, #0
 8004810:	e000      	b.n	8004814 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004812:	2302      	movs	r3, #2
  }
}
 8004814:	4618      	mov	r0, r3
 8004816:	3720      	adds	r7, #32
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	4613      	mov	r3, r2
 8004828:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004830:	b2db      	uxtb	r3, r3
 8004832:	2b20      	cmp	r3, #32
 8004834:	d112      	bne.n	800485c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d002      	beq.n	8004842 <HAL_UART_Receive_IT+0x26>
 800483c:	88fb      	ldrh	r3, [r7, #6]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d101      	bne.n	8004846 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e00b      	b.n	800485e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2200      	movs	r2, #0
 800484a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800484c:	88fb      	ldrh	r3, [r7, #6]
 800484e:	461a      	mov	r2, r3
 8004850:	68b9      	ldr	r1, [r7, #8]
 8004852:	68f8      	ldr	r0, [r7, #12]
 8004854:	f000 fb13 	bl	8004e7e <UART_Start_Receive_IT>
 8004858:	4603      	mov	r3, r0
 800485a:	e000      	b.n	800485e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800485c:	2302      	movs	r3, #2
  }
}
 800485e:	4618      	mov	r0, r3
 8004860:	3710      	adds	r7, #16
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
	...

08004868 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b0ba      	sub	sp, #232	@ 0xe8
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	695b      	ldr	r3, [r3, #20]
 800488a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800488e:	2300      	movs	r3, #0
 8004890:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004894:	2300      	movs	r3, #0
 8004896:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800489a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800489e:	f003 030f 	and.w	r3, r3, #15
 80048a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80048a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d10f      	bne.n	80048ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048b2:	f003 0320 	and.w	r3, r3, #32
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d009      	beq.n	80048ce <HAL_UART_IRQHandler+0x66>
 80048ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048be:	f003 0320 	and.w	r3, r3, #32
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d003      	beq.n	80048ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 fbf2 	bl	80050b0 <UART_Receive_IT>
      return;
 80048cc:	e25b      	b.n	8004d86 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80048ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	f000 80de 	beq.w	8004a94 <HAL_UART_IRQHandler+0x22c>
 80048d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d106      	bne.n	80048f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80048e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048e8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f000 80d1 	beq.w	8004a94 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80048f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048f6:	f003 0301 	and.w	r3, r3, #1
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00b      	beq.n	8004916 <HAL_UART_IRQHandler+0xae>
 80048fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004902:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004906:	2b00      	cmp	r3, #0
 8004908:	d005      	beq.n	8004916 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800490e:	f043 0201 	orr.w	r2, r3, #1
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800491a:	f003 0304 	and.w	r3, r3, #4
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00b      	beq.n	800493a <HAL_UART_IRQHandler+0xd2>
 8004922:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b00      	cmp	r3, #0
 800492c:	d005      	beq.n	800493a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004932:	f043 0202 	orr.w	r2, r3, #2
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800493a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800493e:	f003 0302 	and.w	r3, r3, #2
 8004942:	2b00      	cmp	r3, #0
 8004944:	d00b      	beq.n	800495e <HAL_UART_IRQHandler+0xf6>
 8004946:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	2b00      	cmp	r3, #0
 8004950:	d005      	beq.n	800495e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004956:	f043 0204 	orr.w	r2, r3, #4
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800495e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004962:	f003 0308 	and.w	r3, r3, #8
 8004966:	2b00      	cmp	r3, #0
 8004968:	d011      	beq.n	800498e <HAL_UART_IRQHandler+0x126>
 800496a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800496e:	f003 0320 	and.w	r3, r3, #32
 8004972:	2b00      	cmp	r3, #0
 8004974:	d105      	bne.n	8004982 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004976:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800497a:	f003 0301 	and.w	r3, r3, #1
 800497e:	2b00      	cmp	r3, #0
 8004980:	d005      	beq.n	800498e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004986:	f043 0208 	orr.w	r2, r3, #8
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004992:	2b00      	cmp	r3, #0
 8004994:	f000 81f2 	beq.w	8004d7c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800499c:	f003 0320 	and.w	r3, r3, #32
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d008      	beq.n	80049b6 <HAL_UART_IRQHandler+0x14e>
 80049a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049a8:	f003 0320 	and.w	r3, r3, #32
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d002      	beq.n	80049b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f000 fb7d 	bl	80050b0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	695b      	ldr	r3, [r3, #20]
 80049bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049c0:	2b40      	cmp	r3, #64	@ 0x40
 80049c2:	bf0c      	ite	eq
 80049c4:	2301      	moveq	r3, #1
 80049c6:	2300      	movne	r3, #0
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049d2:	f003 0308 	and.w	r3, r3, #8
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d103      	bne.n	80049e2 <HAL_UART_IRQHandler+0x17a>
 80049da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d04f      	beq.n	8004a82 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 fa85 	bl	8004ef2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049f2:	2b40      	cmp	r3, #64	@ 0x40
 80049f4:	d141      	bne.n	8004a7a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	3314      	adds	r3, #20
 80049fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a00:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004a04:	e853 3f00 	ldrex	r3, [r3]
 8004a08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004a0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004a10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	3314      	adds	r3, #20
 8004a1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004a22:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004a26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004a2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004a32:	e841 2300 	strex	r3, r2, [r1]
 8004a36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004a3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1d9      	bne.n	80049f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d013      	beq.n	8004a72 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a4e:	4a7e      	ldr	r2, [pc, #504]	@ (8004c48 <HAL_UART_IRQHandler+0x3e0>)
 8004a50:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7fe f825 	bl	8002aa6 <HAL_DMA_Abort_IT>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d016      	beq.n	8004a90 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004a6c:	4610      	mov	r0, r2
 8004a6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a70:	e00e      	b.n	8004a90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f994 	bl	8004da0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a78:	e00a      	b.n	8004a90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 f990 	bl	8004da0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a80:	e006      	b.n	8004a90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 f98c 	bl	8004da0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004a8e:	e175      	b.n	8004d7c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a90:	bf00      	nop
    return;
 8004a92:	e173      	b.n	8004d7c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	f040 814f 	bne.w	8004d3c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004aa2:	f003 0310 	and.w	r3, r3, #16
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	f000 8148 	beq.w	8004d3c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004aac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ab0:	f003 0310 	and.w	r3, r3, #16
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	f000 8141 	beq.w	8004d3c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004aba:	2300      	movs	r3, #0
 8004abc:	60bb      	str	r3, [r7, #8]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	60bb      	str	r3, [r7, #8]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	60bb      	str	r3, [r7, #8]
 8004ace:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ada:	2b40      	cmp	r3, #64	@ 0x40
 8004adc:	f040 80b6 	bne.w	8004c4c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004aec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	f000 8145 	beq.w	8004d80 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004afa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004afe:	429a      	cmp	r2, r3
 8004b00:	f080 813e 	bcs.w	8004d80 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004b0a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b10:	69db      	ldr	r3, [r3, #28]
 8004b12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b16:	f000 8088 	beq.w	8004c2a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	330c      	adds	r3, #12
 8004b20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b24:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004b28:	e853 3f00 	ldrex	r3, [r3]
 8004b2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004b30:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004b34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	330c      	adds	r3, #12
 8004b42:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004b46:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004b4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004b52:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004b56:	e841 2300 	strex	r3, r2, [r1]
 8004b5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004b5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1d9      	bne.n	8004b1a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	3314      	adds	r3, #20
 8004b6c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b70:	e853 3f00 	ldrex	r3, [r3]
 8004b74:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004b76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b78:	f023 0301 	bic.w	r3, r3, #1
 8004b7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	3314      	adds	r3, #20
 8004b86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004b8a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004b8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b90:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004b92:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004b96:	e841 2300 	strex	r3, r2, [r1]
 8004b9a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004b9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1e1      	bne.n	8004b66 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	3314      	adds	r3, #20
 8004ba8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004baa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004bac:	e853 3f00 	ldrex	r3, [r3]
 8004bb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004bb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004bb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004bb8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	3314      	adds	r3, #20
 8004bc2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004bc6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004bc8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004bcc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004bce:	e841 2300 	strex	r3, r2, [r1]
 8004bd2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004bd4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1e3      	bne.n	8004ba2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2220      	movs	r2, #32
 8004bde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	330c      	adds	r3, #12
 8004bee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bf2:	e853 3f00 	ldrex	r3, [r3]
 8004bf6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004bf8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004bfa:	f023 0310 	bic.w	r3, r3, #16
 8004bfe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	330c      	adds	r3, #12
 8004c08:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004c0c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004c0e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c10:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004c12:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004c14:	e841 2300 	strex	r3, r2, [r1]
 8004c18:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004c1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1e3      	bne.n	8004be8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c24:	4618      	mov	r0, r3
 8004c26:	f7fd fece 	bl	80029c6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2202      	movs	r2, #2
 8004c2e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	4619      	mov	r1, r3
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f000 f8b7 	bl	8004db4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c46:	e09b      	b.n	8004d80 <HAL_UART_IRQHandler+0x518>
 8004c48:	08004fb9 	.word	0x08004fb9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	f000 808e 	beq.w	8004d84 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004c68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	f000 8089 	beq.w	8004d84 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	330c      	adds	r3, #12
 8004c78:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c7c:	e853 3f00 	ldrex	r3, [r3]
 8004c80:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c84:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c88:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	330c      	adds	r3, #12
 8004c92:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004c96:	647a      	str	r2, [r7, #68]	@ 0x44
 8004c98:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c9a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c9c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c9e:	e841 2300 	strex	r3, r2, [r1]
 8004ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004ca4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d1e3      	bne.n	8004c72 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	3314      	adds	r3, #20
 8004cb0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb4:	e853 3f00 	ldrex	r3, [r3]
 8004cb8:	623b      	str	r3, [r7, #32]
   return(result);
 8004cba:	6a3b      	ldr	r3, [r7, #32]
 8004cbc:	f023 0301 	bic.w	r3, r3, #1
 8004cc0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	3314      	adds	r3, #20
 8004cca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004cce:	633a      	str	r2, [r7, #48]	@ 0x30
 8004cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004cd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cd6:	e841 2300 	strex	r3, r2, [r1]
 8004cda:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004cdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1e3      	bne.n	8004caa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2220      	movs	r2, #32
 8004ce6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	330c      	adds	r3, #12
 8004cf6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	e853 3f00 	ldrex	r3, [r3]
 8004cfe:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f023 0310 	bic.w	r3, r3, #16
 8004d06:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	330c      	adds	r3, #12
 8004d10:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004d14:	61fa      	str	r2, [r7, #28]
 8004d16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d18:	69b9      	ldr	r1, [r7, #24]
 8004d1a:	69fa      	ldr	r2, [r7, #28]
 8004d1c:	e841 2300 	strex	r3, r2, [r1]
 8004d20:	617b      	str	r3, [r7, #20]
   return(result);
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d1e3      	bne.n	8004cf0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d2e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004d32:	4619      	mov	r1, r3
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 f83d 	bl	8004db4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d3a:	e023      	b.n	8004d84 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004d3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d009      	beq.n	8004d5c <HAL_UART_IRQHandler+0x4f4>
 8004d48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d003      	beq.n	8004d5c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f000 f943 	bl	8004fe0 <UART_Transmit_IT>
    return;
 8004d5a:	e014      	b.n	8004d86 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00e      	beq.n	8004d86 <HAL_UART_IRQHandler+0x51e>
 8004d68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d008      	beq.n	8004d86 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f000 f983 	bl	8005080 <UART_EndTransmit_IT>
    return;
 8004d7a:	e004      	b.n	8004d86 <HAL_UART_IRQHandler+0x51e>
    return;
 8004d7c:	bf00      	nop
 8004d7e:	e002      	b.n	8004d86 <HAL_UART_IRQHandler+0x51e>
      return;
 8004d80:	bf00      	nop
 8004d82:	e000      	b.n	8004d86 <HAL_UART_IRQHandler+0x51e>
      return;
 8004d84:	bf00      	nop
  }
}
 8004d86:	37e8      	adds	r7, #232	@ 0xe8
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004d94:	bf00      	nop
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004da8:	bf00      	nop
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004dc0:	bf00      	nop
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b086      	sub	sp, #24
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	603b      	str	r3, [r7, #0]
 8004dd8:	4613      	mov	r3, r2
 8004dda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ddc:	e03b      	b.n	8004e56 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dde:	6a3b      	ldr	r3, [r7, #32]
 8004de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de4:	d037      	beq.n	8004e56 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004de6:	f7fd fa4b 	bl	8002280 <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	6a3a      	ldr	r2, [r7, #32]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d302      	bcc.n	8004dfc <UART_WaitOnFlagUntilTimeout+0x30>
 8004df6:	6a3b      	ldr	r3, [r7, #32]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d101      	bne.n	8004e00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e03a      	b.n	8004e76 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	f003 0304 	and.w	r3, r3, #4
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d023      	beq.n	8004e56 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	2b80      	cmp	r3, #128	@ 0x80
 8004e12:	d020      	beq.n	8004e56 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	2b40      	cmp	r3, #64	@ 0x40
 8004e18:	d01d      	beq.n	8004e56 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0308 	and.w	r3, r3, #8
 8004e24:	2b08      	cmp	r3, #8
 8004e26:	d116      	bne.n	8004e56 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004e28:	2300      	movs	r3, #0
 8004e2a:	617b      	str	r3, [r7, #20]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	617b      	str	r3, [r7, #20]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	617b      	str	r3, [r7, #20]
 8004e3c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e3e:	68f8      	ldr	r0, [r7, #12]
 8004e40:	f000 f857 	bl	8004ef2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2208      	movs	r2, #8
 8004e48:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e00f      	b.n	8004e76 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	4013      	ands	r3, r2
 8004e60:	68ba      	ldr	r2, [r7, #8]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	bf0c      	ite	eq
 8004e66:	2301      	moveq	r3, #1
 8004e68:	2300      	movne	r3, #0
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	79fb      	ldrb	r3, [r7, #7]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d0b4      	beq.n	8004dde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3718      	adds	r7, #24
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}

08004e7e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e7e:	b480      	push	{r7}
 8004e80:	b085      	sub	sp, #20
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	60f8      	str	r0, [r7, #12]
 8004e86:	60b9      	str	r1, [r7, #8]
 8004e88:	4613      	mov	r3, r2
 8004e8a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	68ba      	ldr	r2, [r7, #8]
 8004e90:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	88fa      	ldrh	r2, [r7, #6]
 8004e96:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	88fa      	ldrh	r2, [r7, #6]
 8004e9c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2222      	movs	r2, #34	@ 0x22
 8004ea8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d007      	beq.n	8004ec4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68da      	ldr	r2, [r3, #12]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ec2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	695a      	ldr	r2, [r3, #20]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f042 0201 	orr.w	r2, r2, #1
 8004ed2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68da      	ldr	r2, [r3, #12]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f042 0220 	orr.w	r2, r2, #32
 8004ee2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3714      	adds	r7, #20
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr

08004ef2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ef2:	b480      	push	{r7}
 8004ef4:	b095      	sub	sp, #84	@ 0x54
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	330c      	adds	r3, #12
 8004f00:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f04:	e853 3f00 	ldrex	r3, [r3]
 8004f08:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	330c      	adds	r3, #12
 8004f18:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004f1a:	643a      	str	r2, [r7, #64]	@ 0x40
 8004f1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f20:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f22:	e841 2300 	strex	r3, r2, [r1]
 8004f26:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d1e5      	bne.n	8004efa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	3314      	adds	r3, #20
 8004f34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f36:	6a3b      	ldr	r3, [r7, #32]
 8004f38:	e853 3f00 	ldrex	r3, [r3]
 8004f3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	f023 0301 	bic.w	r3, r3, #1
 8004f44:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	3314      	adds	r3, #20
 8004f4c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f50:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f52:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f56:	e841 2300 	strex	r3, r2, [r1]
 8004f5a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1e5      	bne.n	8004f2e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d119      	bne.n	8004f9e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	330c      	adds	r3, #12
 8004f70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	e853 3f00 	ldrex	r3, [r3]
 8004f78:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	f023 0310 	bic.w	r3, r3, #16
 8004f80:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	330c      	adds	r3, #12
 8004f88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f8a:	61ba      	str	r2, [r7, #24]
 8004f8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8e:	6979      	ldr	r1, [r7, #20]
 8004f90:	69ba      	ldr	r2, [r7, #24]
 8004f92:	e841 2300 	strex	r3, r2, [r1]
 8004f96:	613b      	str	r3, [r7, #16]
   return(result);
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d1e5      	bne.n	8004f6a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2220      	movs	r2, #32
 8004fa2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004fac:	bf00      	nop
 8004fae:	3754      	adds	r7, #84	@ 0x54
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fc4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f7ff fee4 	bl	8004da0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fd8:	bf00      	nop
 8004fda:	3710      	adds	r7, #16
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b085      	sub	sp, #20
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	2b21      	cmp	r3, #33	@ 0x21
 8004ff2:	d13e      	bne.n	8005072 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ffc:	d114      	bne.n	8005028 <UART_Transmit_IT+0x48>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d110      	bne.n	8005028 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	881b      	ldrh	r3, [r3, #0]
 8005010:	461a      	mov	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800501a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a1b      	ldr	r3, [r3, #32]
 8005020:	1c9a      	adds	r2, r3, #2
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	621a      	str	r2, [r3, #32]
 8005026:	e008      	b.n	800503a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a1b      	ldr	r3, [r3, #32]
 800502c:	1c59      	adds	r1, r3, #1
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	6211      	str	r1, [r2, #32]
 8005032:	781a      	ldrb	r2, [r3, #0]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800503e:	b29b      	uxth	r3, r3
 8005040:	3b01      	subs	r3, #1
 8005042:	b29b      	uxth	r3, r3
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	4619      	mov	r1, r3
 8005048:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800504a:	2b00      	cmp	r3, #0
 800504c:	d10f      	bne.n	800506e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68da      	ldr	r2, [r3, #12]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800505c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68da      	ldr	r2, [r3, #12]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800506c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800506e:	2300      	movs	r3, #0
 8005070:	e000      	b.n	8005074 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005072:	2302      	movs	r3, #2
  }
}
 8005074:	4618      	mov	r0, r3
 8005076:	3714      	adds	r7, #20
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68da      	ldr	r2, [r3, #12]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005096:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2220      	movs	r2, #32
 800509c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f7ff fe73 	bl	8004d8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3708      	adds	r7, #8
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b08c      	sub	sp, #48	@ 0x30
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	2b22      	cmp	r3, #34	@ 0x22
 80050c2:	f040 80ae 	bne.w	8005222 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050ce:	d117      	bne.n	8005100 <UART_Receive_IT+0x50>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d113      	bne.n	8005100 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80050d8:	2300      	movs	r3, #0
 80050da:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050e0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050f2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050f8:	1c9a      	adds	r2, r3, #2
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	629a      	str	r2, [r3, #40]	@ 0x28
 80050fe:	e026      	b.n	800514e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005104:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005106:	2300      	movs	r3, #0
 8005108:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005112:	d007      	beq.n	8005124 <UART_Receive_IT+0x74>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d10a      	bne.n	8005132 <UART_Receive_IT+0x82>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	691b      	ldr	r3, [r3, #16]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d106      	bne.n	8005132 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	b2da      	uxtb	r2, r3
 800512c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800512e:	701a      	strb	r2, [r3, #0]
 8005130:	e008      	b.n	8005144 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	b2db      	uxtb	r3, r3
 800513a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800513e:	b2da      	uxtb	r2, r3
 8005140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005142:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005148:	1c5a      	adds	r2, r3, #1
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005152:	b29b      	uxth	r3, r3
 8005154:	3b01      	subs	r3, #1
 8005156:	b29b      	uxth	r3, r3
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	4619      	mov	r1, r3
 800515c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800515e:	2b00      	cmp	r3, #0
 8005160:	d15d      	bne.n	800521e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68da      	ldr	r2, [r3, #12]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f022 0220 	bic.w	r2, r2, #32
 8005170:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	68da      	ldr	r2, [r3, #12]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005180:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	695a      	ldr	r2, [r3, #20]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f022 0201 	bic.w	r2, r2, #1
 8005190:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2220      	movs	r2, #32
 8005196:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d135      	bne.n	8005214 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	330c      	adds	r3, #12
 80051b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	e853 3f00 	ldrex	r3, [r3]
 80051bc:	613b      	str	r3, [r7, #16]
   return(result);
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	f023 0310 	bic.w	r3, r3, #16
 80051c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	330c      	adds	r3, #12
 80051cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051ce:	623a      	str	r2, [r7, #32]
 80051d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d2:	69f9      	ldr	r1, [r7, #28]
 80051d4:	6a3a      	ldr	r2, [r7, #32]
 80051d6:	e841 2300 	strex	r3, r2, [r1]
 80051da:	61bb      	str	r3, [r7, #24]
   return(result);
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d1e5      	bne.n	80051ae <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0310 	and.w	r3, r3, #16
 80051ec:	2b10      	cmp	r3, #16
 80051ee:	d10a      	bne.n	8005206 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051f0:	2300      	movs	r3, #0
 80051f2:	60fb      	str	r3, [r7, #12]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	60fb      	str	r3, [r7, #12]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	60fb      	str	r3, [r7, #12]
 8005204:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800520a:	4619      	mov	r1, r3
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f7ff fdd1 	bl	8004db4 <HAL_UARTEx_RxEventCallback>
 8005212:	e002      	b.n	800521a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f7fc fc51 	bl	8001abc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800521a:	2300      	movs	r3, #0
 800521c:	e002      	b.n	8005224 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800521e:	2300      	movs	r3, #0
 8005220:	e000      	b.n	8005224 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005222:	2302      	movs	r3, #2
  }
}
 8005224:	4618      	mov	r0, r3
 8005226:	3730      	adds	r7, #48	@ 0x30
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800522c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005230:	b0c0      	sub	sp, #256	@ 0x100
 8005232:	af00      	add	r7, sp, #0
 8005234:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005248:	68d9      	ldr	r1, [r3, #12]
 800524a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	ea40 0301 	orr.w	r3, r0, r1
 8005254:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800525a:	689a      	ldr	r2, [r3, #8]
 800525c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	431a      	orrs	r2, r3
 8005264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	431a      	orrs	r2, r3
 800526c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005270:	69db      	ldr	r3, [r3, #28]
 8005272:	4313      	orrs	r3, r2
 8005274:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005284:	f021 010c 	bic.w	r1, r1, #12
 8005288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005292:	430b      	orrs	r3, r1
 8005294:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80052a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052a6:	6999      	ldr	r1, [r3, #24]
 80052a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	ea40 0301 	orr.w	r3, r0, r1
 80052b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80052b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	4b8f      	ldr	r3, [pc, #572]	@ (80054f8 <UART_SetConfig+0x2cc>)
 80052bc:	429a      	cmp	r2, r3
 80052be:	d005      	beq.n	80052cc <UART_SetConfig+0xa0>
 80052c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	4b8d      	ldr	r3, [pc, #564]	@ (80054fc <UART_SetConfig+0x2d0>)
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d104      	bne.n	80052d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80052cc:	f7fe fb7c 	bl	80039c8 <HAL_RCC_GetPCLK2Freq>
 80052d0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80052d4:	e003      	b.n	80052de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80052d6:	f7fe fb63 	bl	80039a0 <HAL_RCC_GetPCLK1Freq>
 80052da:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052e2:	69db      	ldr	r3, [r3, #28]
 80052e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052e8:	f040 810c 	bne.w	8005504 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80052ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052f0:	2200      	movs	r2, #0
 80052f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80052f6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80052fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80052fe:	4622      	mov	r2, r4
 8005300:	462b      	mov	r3, r5
 8005302:	1891      	adds	r1, r2, r2
 8005304:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005306:	415b      	adcs	r3, r3
 8005308:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800530a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800530e:	4621      	mov	r1, r4
 8005310:	eb12 0801 	adds.w	r8, r2, r1
 8005314:	4629      	mov	r1, r5
 8005316:	eb43 0901 	adc.w	r9, r3, r1
 800531a:	f04f 0200 	mov.w	r2, #0
 800531e:	f04f 0300 	mov.w	r3, #0
 8005322:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005326:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800532a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800532e:	4690      	mov	r8, r2
 8005330:	4699      	mov	r9, r3
 8005332:	4623      	mov	r3, r4
 8005334:	eb18 0303 	adds.w	r3, r8, r3
 8005338:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800533c:	462b      	mov	r3, r5
 800533e:	eb49 0303 	adc.w	r3, r9, r3
 8005342:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005352:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005356:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800535a:	460b      	mov	r3, r1
 800535c:	18db      	adds	r3, r3, r3
 800535e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005360:	4613      	mov	r3, r2
 8005362:	eb42 0303 	adc.w	r3, r2, r3
 8005366:	657b      	str	r3, [r7, #84]	@ 0x54
 8005368:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800536c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005370:	f7fb fb54 	bl	8000a1c <__aeabi_uldivmod>
 8005374:	4602      	mov	r2, r0
 8005376:	460b      	mov	r3, r1
 8005378:	4b61      	ldr	r3, [pc, #388]	@ (8005500 <UART_SetConfig+0x2d4>)
 800537a:	fba3 2302 	umull	r2, r3, r3, r2
 800537e:	095b      	lsrs	r3, r3, #5
 8005380:	011c      	lsls	r4, r3, #4
 8005382:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005386:	2200      	movs	r2, #0
 8005388:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800538c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005390:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005394:	4642      	mov	r2, r8
 8005396:	464b      	mov	r3, r9
 8005398:	1891      	adds	r1, r2, r2
 800539a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800539c:	415b      	adcs	r3, r3
 800539e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80053a4:	4641      	mov	r1, r8
 80053a6:	eb12 0a01 	adds.w	sl, r2, r1
 80053aa:	4649      	mov	r1, r9
 80053ac:	eb43 0b01 	adc.w	fp, r3, r1
 80053b0:	f04f 0200 	mov.w	r2, #0
 80053b4:	f04f 0300 	mov.w	r3, #0
 80053b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80053bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80053c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053c4:	4692      	mov	sl, r2
 80053c6:	469b      	mov	fp, r3
 80053c8:	4643      	mov	r3, r8
 80053ca:	eb1a 0303 	adds.w	r3, sl, r3
 80053ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80053d2:	464b      	mov	r3, r9
 80053d4:	eb4b 0303 	adc.w	r3, fp, r3
 80053d8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80053dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80053e8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80053ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80053f0:	460b      	mov	r3, r1
 80053f2:	18db      	adds	r3, r3, r3
 80053f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80053f6:	4613      	mov	r3, r2
 80053f8:	eb42 0303 	adc.w	r3, r2, r3
 80053fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80053fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005402:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005406:	f7fb fb09 	bl	8000a1c <__aeabi_uldivmod>
 800540a:	4602      	mov	r2, r0
 800540c:	460b      	mov	r3, r1
 800540e:	4611      	mov	r1, r2
 8005410:	4b3b      	ldr	r3, [pc, #236]	@ (8005500 <UART_SetConfig+0x2d4>)
 8005412:	fba3 2301 	umull	r2, r3, r3, r1
 8005416:	095b      	lsrs	r3, r3, #5
 8005418:	2264      	movs	r2, #100	@ 0x64
 800541a:	fb02 f303 	mul.w	r3, r2, r3
 800541e:	1acb      	subs	r3, r1, r3
 8005420:	00db      	lsls	r3, r3, #3
 8005422:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005426:	4b36      	ldr	r3, [pc, #216]	@ (8005500 <UART_SetConfig+0x2d4>)
 8005428:	fba3 2302 	umull	r2, r3, r3, r2
 800542c:	095b      	lsrs	r3, r3, #5
 800542e:	005b      	lsls	r3, r3, #1
 8005430:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005434:	441c      	add	r4, r3
 8005436:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800543a:	2200      	movs	r2, #0
 800543c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005440:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005444:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005448:	4642      	mov	r2, r8
 800544a:	464b      	mov	r3, r9
 800544c:	1891      	adds	r1, r2, r2
 800544e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005450:	415b      	adcs	r3, r3
 8005452:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005454:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005458:	4641      	mov	r1, r8
 800545a:	1851      	adds	r1, r2, r1
 800545c:	6339      	str	r1, [r7, #48]	@ 0x30
 800545e:	4649      	mov	r1, r9
 8005460:	414b      	adcs	r3, r1
 8005462:	637b      	str	r3, [r7, #52]	@ 0x34
 8005464:	f04f 0200 	mov.w	r2, #0
 8005468:	f04f 0300 	mov.w	r3, #0
 800546c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005470:	4659      	mov	r1, fp
 8005472:	00cb      	lsls	r3, r1, #3
 8005474:	4651      	mov	r1, sl
 8005476:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800547a:	4651      	mov	r1, sl
 800547c:	00ca      	lsls	r2, r1, #3
 800547e:	4610      	mov	r0, r2
 8005480:	4619      	mov	r1, r3
 8005482:	4603      	mov	r3, r0
 8005484:	4642      	mov	r2, r8
 8005486:	189b      	adds	r3, r3, r2
 8005488:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800548c:	464b      	mov	r3, r9
 800548e:	460a      	mov	r2, r1
 8005490:	eb42 0303 	adc.w	r3, r2, r3
 8005494:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80054a4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80054a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80054ac:	460b      	mov	r3, r1
 80054ae:	18db      	adds	r3, r3, r3
 80054b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054b2:	4613      	mov	r3, r2
 80054b4:	eb42 0303 	adc.w	r3, r2, r3
 80054b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80054be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80054c2:	f7fb faab 	bl	8000a1c <__aeabi_uldivmod>
 80054c6:	4602      	mov	r2, r0
 80054c8:	460b      	mov	r3, r1
 80054ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005500 <UART_SetConfig+0x2d4>)
 80054cc:	fba3 1302 	umull	r1, r3, r3, r2
 80054d0:	095b      	lsrs	r3, r3, #5
 80054d2:	2164      	movs	r1, #100	@ 0x64
 80054d4:	fb01 f303 	mul.w	r3, r1, r3
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	00db      	lsls	r3, r3, #3
 80054dc:	3332      	adds	r3, #50	@ 0x32
 80054de:	4a08      	ldr	r2, [pc, #32]	@ (8005500 <UART_SetConfig+0x2d4>)
 80054e0:	fba2 2303 	umull	r2, r3, r2, r3
 80054e4:	095b      	lsrs	r3, r3, #5
 80054e6:	f003 0207 	and.w	r2, r3, #7
 80054ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4422      	add	r2, r4
 80054f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80054f4:	e106      	b.n	8005704 <UART_SetConfig+0x4d8>
 80054f6:	bf00      	nop
 80054f8:	40011000 	.word	0x40011000
 80054fc:	40011400 	.word	0x40011400
 8005500:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005504:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005508:	2200      	movs	r2, #0
 800550a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800550e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005512:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005516:	4642      	mov	r2, r8
 8005518:	464b      	mov	r3, r9
 800551a:	1891      	adds	r1, r2, r2
 800551c:	6239      	str	r1, [r7, #32]
 800551e:	415b      	adcs	r3, r3
 8005520:	627b      	str	r3, [r7, #36]	@ 0x24
 8005522:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005526:	4641      	mov	r1, r8
 8005528:	1854      	adds	r4, r2, r1
 800552a:	4649      	mov	r1, r9
 800552c:	eb43 0501 	adc.w	r5, r3, r1
 8005530:	f04f 0200 	mov.w	r2, #0
 8005534:	f04f 0300 	mov.w	r3, #0
 8005538:	00eb      	lsls	r3, r5, #3
 800553a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800553e:	00e2      	lsls	r2, r4, #3
 8005540:	4614      	mov	r4, r2
 8005542:	461d      	mov	r5, r3
 8005544:	4643      	mov	r3, r8
 8005546:	18e3      	adds	r3, r4, r3
 8005548:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800554c:	464b      	mov	r3, r9
 800554e:	eb45 0303 	adc.w	r3, r5, r3
 8005552:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005562:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005566:	f04f 0200 	mov.w	r2, #0
 800556a:	f04f 0300 	mov.w	r3, #0
 800556e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005572:	4629      	mov	r1, r5
 8005574:	008b      	lsls	r3, r1, #2
 8005576:	4621      	mov	r1, r4
 8005578:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800557c:	4621      	mov	r1, r4
 800557e:	008a      	lsls	r2, r1, #2
 8005580:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005584:	f7fb fa4a 	bl	8000a1c <__aeabi_uldivmod>
 8005588:	4602      	mov	r2, r0
 800558a:	460b      	mov	r3, r1
 800558c:	4b60      	ldr	r3, [pc, #384]	@ (8005710 <UART_SetConfig+0x4e4>)
 800558e:	fba3 2302 	umull	r2, r3, r3, r2
 8005592:	095b      	lsrs	r3, r3, #5
 8005594:	011c      	lsls	r4, r3, #4
 8005596:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800559a:	2200      	movs	r2, #0
 800559c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80055a0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80055a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80055a8:	4642      	mov	r2, r8
 80055aa:	464b      	mov	r3, r9
 80055ac:	1891      	adds	r1, r2, r2
 80055ae:	61b9      	str	r1, [r7, #24]
 80055b0:	415b      	adcs	r3, r3
 80055b2:	61fb      	str	r3, [r7, #28]
 80055b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055b8:	4641      	mov	r1, r8
 80055ba:	1851      	adds	r1, r2, r1
 80055bc:	6139      	str	r1, [r7, #16]
 80055be:	4649      	mov	r1, r9
 80055c0:	414b      	adcs	r3, r1
 80055c2:	617b      	str	r3, [r7, #20]
 80055c4:	f04f 0200 	mov.w	r2, #0
 80055c8:	f04f 0300 	mov.w	r3, #0
 80055cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055d0:	4659      	mov	r1, fp
 80055d2:	00cb      	lsls	r3, r1, #3
 80055d4:	4651      	mov	r1, sl
 80055d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055da:	4651      	mov	r1, sl
 80055dc:	00ca      	lsls	r2, r1, #3
 80055de:	4610      	mov	r0, r2
 80055e0:	4619      	mov	r1, r3
 80055e2:	4603      	mov	r3, r0
 80055e4:	4642      	mov	r2, r8
 80055e6:	189b      	adds	r3, r3, r2
 80055e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80055ec:	464b      	mov	r3, r9
 80055ee:	460a      	mov	r2, r1
 80055f0:	eb42 0303 	adc.w	r3, r2, r3
 80055f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80055f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005602:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005604:	f04f 0200 	mov.w	r2, #0
 8005608:	f04f 0300 	mov.w	r3, #0
 800560c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005610:	4649      	mov	r1, r9
 8005612:	008b      	lsls	r3, r1, #2
 8005614:	4641      	mov	r1, r8
 8005616:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800561a:	4641      	mov	r1, r8
 800561c:	008a      	lsls	r2, r1, #2
 800561e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005622:	f7fb f9fb 	bl	8000a1c <__aeabi_uldivmod>
 8005626:	4602      	mov	r2, r0
 8005628:	460b      	mov	r3, r1
 800562a:	4611      	mov	r1, r2
 800562c:	4b38      	ldr	r3, [pc, #224]	@ (8005710 <UART_SetConfig+0x4e4>)
 800562e:	fba3 2301 	umull	r2, r3, r3, r1
 8005632:	095b      	lsrs	r3, r3, #5
 8005634:	2264      	movs	r2, #100	@ 0x64
 8005636:	fb02 f303 	mul.w	r3, r2, r3
 800563a:	1acb      	subs	r3, r1, r3
 800563c:	011b      	lsls	r3, r3, #4
 800563e:	3332      	adds	r3, #50	@ 0x32
 8005640:	4a33      	ldr	r2, [pc, #204]	@ (8005710 <UART_SetConfig+0x4e4>)
 8005642:	fba2 2303 	umull	r2, r3, r2, r3
 8005646:	095b      	lsrs	r3, r3, #5
 8005648:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800564c:	441c      	add	r4, r3
 800564e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005652:	2200      	movs	r2, #0
 8005654:	673b      	str	r3, [r7, #112]	@ 0x70
 8005656:	677a      	str	r2, [r7, #116]	@ 0x74
 8005658:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800565c:	4642      	mov	r2, r8
 800565e:	464b      	mov	r3, r9
 8005660:	1891      	adds	r1, r2, r2
 8005662:	60b9      	str	r1, [r7, #8]
 8005664:	415b      	adcs	r3, r3
 8005666:	60fb      	str	r3, [r7, #12]
 8005668:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800566c:	4641      	mov	r1, r8
 800566e:	1851      	adds	r1, r2, r1
 8005670:	6039      	str	r1, [r7, #0]
 8005672:	4649      	mov	r1, r9
 8005674:	414b      	adcs	r3, r1
 8005676:	607b      	str	r3, [r7, #4]
 8005678:	f04f 0200 	mov.w	r2, #0
 800567c:	f04f 0300 	mov.w	r3, #0
 8005680:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005684:	4659      	mov	r1, fp
 8005686:	00cb      	lsls	r3, r1, #3
 8005688:	4651      	mov	r1, sl
 800568a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800568e:	4651      	mov	r1, sl
 8005690:	00ca      	lsls	r2, r1, #3
 8005692:	4610      	mov	r0, r2
 8005694:	4619      	mov	r1, r3
 8005696:	4603      	mov	r3, r0
 8005698:	4642      	mov	r2, r8
 800569a:	189b      	adds	r3, r3, r2
 800569c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800569e:	464b      	mov	r3, r9
 80056a0:	460a      	mov	r2, r1
 80056a2:	eb42 0303 	adc.w	r3, r2, r3
 80056a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80056a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80056b2:	667a      	str	r2, [r7, #100]	@ 0x64
 80056b4:	f04f 0200 	mov.w	r2, #0
 80056b8:	f04f 0300 	mov.w	r3, #0
 80056bc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80056c0:	4649      	mov	r1, r9
 80056c2:	008b      	lsls	r3, r1, #2
 80056c4:	4641      	mov	r1, r8
 80056c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056ca:	4641      	mov	r1, r8
 80056cc:	008a      	lsls	r2, r1, #2
 80056ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80056d2:	f7fb f9a3 	bl	8000a1c <__aeabi_uldivmod>
 80056d6:	4602      	mov	r2, r0
 80056d8:	460b      	mov	r3, r1
 80056da:	4b0d      	ldr	r3, [pc, #52]	@ (8005710 <UART_SetConfig+0x4e4>)
 80056dc:	fba3 1302 	umull	r1, r3, r3, r2
 80056e0:	095b      	lsrs	r3, r3, #5
 80056e2:	2164      	movs	r1, #100	@ 0x64
 80056e4:	fb01 f303 	mul.w	r3, r1, r3
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	011b      	lsls	r3, r3, #4
 80056ec:	3332      	adds	r3, #50	@ 0x32
 80056ee:	4a08      	ldr	r2, [pc, #32]	@ (8005710 <UART_SetConfig+0x4e4>)
 80056f0:	fba2 2303 	umull	r2, r3, r2, r3
 80056f4:	095b      	lsrs	r3, r3, #5
 80056f6:	f003 020f 	and.w	r2, r3, #15
 80056fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4422      	add	r2, r4
 8005702:	609a      	str	r2, [r3, #8]
}
 8005704:	bf00      	nop
 8005706:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800570a:	46bd      	mov	sp, r7
 800570c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005710:	51eb851f 	.word	0x51eb851f

08005714 <siprintf>:
 8005714:	b40e      	push	{r1, r2, r3}
 8005716:	b500      	push	{lr}
 8005718:	b09c      	sub	sp, #112	@ 0x70
 800571a:	ab1d      	add	r3, sp, #116	@ 0x74
 800571c:	9002      	str	r0, [sp, #8]
 800571e:	9006      	str	r0, [sp, #24]
 8005720:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005724:	4809      	ldr	r0, [pc, #36]	@ (800574c <siprintf+0x38>)
 8005726:	9107      	str	r1, [sp, #28]
 8005728:	9104      	str	r1, [sp, #16]
 800572a:	4909      	ldr	r1, [pc, #36]	@ (8005750 <siprintf+0x3c>)
 800572c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005730:	9105      	str	r1, [sp, #20]
 8005732:	6800      	ldr	r0, [r0, #0]
 8005734:	9301      	str	r3, [sp, #4]
 8005736:	a902      	add	r1, sp, #8
 8005738:	f000 f994 	bl	8005a64 <_svfiprintf_r>
 800573c:	9b02      	ldr	r3, [sp, #8]
 800573e:	2200      	movs	r2, #0
 8005740:	701a      	strb	r2, [r3, #0]
 8005742:	b01c      	add	sp, #112	@ 0x70
 8005744:	f85d eb04 	ldr.w	lr, [sp], #4
 8005748:	b003      	add	sp, #12
 800574a:	4770      	bx	lr
 800574c:	20000024 	.word	0x20000024
 8005750:	ffff0208 	.word	0xffff0208

08005754 <memset>:
 8005754:	4402      	add	r2, r0
 8005756:	4603      	mov	r3, r0
 8005758:	4293      	cmp	r3, r2
 800575a:	d100      	bne.n	800575e <memset+0xa>
 800575c:	4770      	bx	lr
 800575e:	f803 1b01 	strb.w	r1, [r3], #1
 8005762:	e7f9      	b.n	8005758 <memset+0x4>

08005764 <__errno>:
 8005764:	4b01      	ldr	r3, [pc, #4]	@ (800576c <__errno+0x8>)
 8005766:	6818      	ldr	r0, [r3, #0]
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop
 800576c:	20000024 	.word	0x20000024

08005770 <__libc_init_array>:
 8005770:	b570      	push	{r4, r5, r6, lr}
 8005772:	4d0d      	ldr	r5, [pc, #52]	@ (80057a8 <__libc_init_array+0x38>)
 8005774:	4c0d      	ldr	r4, [pc, #52]	@ (80057ac <__libc_init_array+0x3c>)
 8005776:	1b64      	subs	r4, r4, r5
 8005778:	10a4      	asrs	r4, r4, #2
 800577a:	2600      	movs	r6, #0
 800577c:	42a6      	cmp	r6, r4
 800577e:	d109      	bne.n	8005794 <__libc_init_array+0x24>
 8005780:	4d0b      	ldr	r5, [pc, #44]	@ (80057b0 <__libc_init_array+0x40>)
 8005782:	4c0c      	ldr	r4, [pc, #48]	@ (80057b4 <__libc_init_array+0x44>)
 8005784:	f000 fc66 	bl	8006054 <_init>
 8005788:	1b64      	subs	r4, r4, r5
 800578a:	10a4      	asrs	r4, r4, #2
 800578c:	2600      	movs	r6, #0
 800578e:	42a6      	cmp	r6, r4
 8005790:	d105      	bne.n	800579e <__libc_init_array+0x2e>
 8005792:	bd70      	pop	{r4, r5, r6, pc}
 8005794:	f855 3b04 	ldr.w	r3, [r5], #4
 8005798:	4798      	blx	r3
 800579a:	3601      	adds	r6, #1
 800579c:	e7ee      	b.n	800577c <__libc_init_array+0xc>
 800579e:	f855 3b04 	ldr.w	r3, [r5], #4
 80057a2:	4798      	blx	r3
 80057a4:	3601      	adds	r6, #1
 80057a6:	e7f2      	b.n	800578e <__libc_init_array+0x1e>
 80057a8:	080060ec 	.word	0x080060ec
 80057ac:	080060ec 	.word	0x080060ec
 80057b0:	080060ec 	.word	0x080060ec
 80057b4:	080060f0 	.word	0x080060f0

080057b8 <__retarget_lock_acquire_recursive>:
 80057b8:	4770      	bx	lr

080057ba <__retarget_lock_release_recursive>:
 80057ba:	4770      	bx	lr

080057bc <_free_r>:
 80057bc:	b538      	push	{r3, r4, r5, lr}
 80057be:	4605      	mov	r5, r0
 80057c0:	2900      	cmp	r1, #0
 80057c2:	d041      	beq.n	8005848 <_free_r+0x8c>
 80057c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057c8:	1f0c      	subs	r4, r1, #4
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	bfb8      	it	lt
 80057ce:	18e4      	addlt	r4, r4, r3
 80057d0:	f000 f8e0 	bl	8005994 <__malloc_lock>
 80057d4:	4a1d      	ldr	r2, [pc, #116]	@ (800584c <_free_r+0x90>)
 80057d6:	6813      	ldr	r3, [r2, #0]
 80057d8:	b933      	cbnz	r3, 80057e8 <_free_r+0x2c>
 80057da:	6063      	str	r3, [r4, #4]
 80057dc:	6014      	str	r4, [r2, #0]
 80057de:	4628      	mov	r0, r5
 80057e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80057e4:	f000 b8dc 	b.w	80059a0 <__malloc_unlock>
 80057e8:	42a3      	cmp	r3, r4
 80057ea:	d908      	bls.n	80057fe <_free_r+0x42>
 80057ec:	6820      	ldr	r0, [r4, #0]
 80057ee:	1821      	adds	r1, r4, r0
 80057f0:	428b      	cmp	r3, r1
 80057f2:	bf01      	itttt	eq
 80057f4:	6819      	ldreq	r1, [r3, #0]
 80057f6:	685b      	ldreq	r3, [r3, #4]
 80057f8:	1809      	addeq	r1, r1, r0
 80057fa:	6021      	streq	r1, [r4, #0]
 80057fc:	e7ed      	b.n	80057da <_free_r+0x1e>
 80057fe:	461a      	mov	r2, r3
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	b10b      	cbz	r3, 8005808 <_free_r+0x4c>
 8005804:	42a3      	cmp	r3, r4
 8005806:	d9fa      	bls.n	80057fe <_free_r+0x42>
 8005808:	6811      	ldr	r1, [r2, #0]
 800580a:	1850      	adds	r0, r2, r1
 800580c:	42a0      	cmp	r0, r4
 800580e:	d10b      	bne.n	8005828 <_free_r+0x6c>
 8005810:	6820      	ldr	r0, [r4, #0]
 8005812:	4401      	add	r1, r0
 8005814:	1850      	adds	r0, r2, r1
 8005816:	4283      	cmp	r3, r0
 8005818:	6011      	str	r1, [r2, #0]
 800581a:	d1e0      	bne.n	80057de <_free_r+0x22>
 800581c:	6818      	ldr	r0, [r3, #0]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	6053      	str	r3, [r2, #4]
 8005822:	4408      	add	r0, r1
 8005824:	6010      	str	r0, [r2, #0]
 8005826:	e7da      	b.n	80057de <_free_r+0x22>
 8005828:	d902      	bls.n	8005830 <_free_r+0x74>
 800582a:	230c      	movs	r3, #12
 800582c:	602b      	str	r3, [r5, #0]
 800582e:	e7d6      	b.n	80057de <_free_r+0x22>
 8005830:	6820      	ldr	r0, [r4, #0]
 8005832:	1821      	adds	r1, r4, r0
 8005834:	428b      	cmp	r3, r1
 8005836:	bf04      	itt	eq
 8005838:	6819      	ldreq	r1, [r3, #0]
 800583a:	685b      	ldreq	r3, [r3, #4]
 800583c:	6063      	str	r3, [r4, #4]
 800583e:	bf04      	itt	eq
 8005840:	1809      	addeq	r1, r1, r0
 8005842:	6021      	streq	r1, [r4, #0]
 8005844:	6054      	str	r4, [r2, #4]
 8005846:	e7ca      	b.n	80057de <_free_r+0x22>
 8005848:	bd38      	pop	{r3, r4, r5, pc}
 800584a:	bf00      	nop
 800584c:	20000384 	.word	0x20000384

08005850 <sbrk_aligned>:
 8005850:	b570      	push	{r4, r5, r6, lr}
 8005852:	4e0f      	ldr	r6, [pc, #60]	@ (8005890 <sbrk_aligned+0x40>)
 8005854:	460c      	mov	r4, r1
 8005856:	6831      	ldr	r1, [r6, #0]
 8005858:	4605      	mov	r5, r0
 800585a:	b911      	cbnz	r1, 8005862 <sbrk_aligned+0x12>
 800585c:	f000 fba6 	bl	8005fac <_sbrk_r>
 8005860:	6030      	str	r0, [r6, #0]
 8005862:	4621      	mov	r1, r4
 8005864:	4628      	mov	r0, r5
 8005866:	f000 fba1 	bl	8005fac <_sbrk_r>
 800586a:	1c43      	adds	r3, r0, #1
 800586c:	d103      	bne.n	8005876 <sbrk_aligned+0x26>
 800586e:	f04f 34ff 	mov.w	r4, #4294967295
 8005872:	4620      	mov	r0, r4
 8005874:	bd70      	pop	{r4, r5, r6, pc}
 8005876:	1cc4      	adds	r4, r0, #3
 8005878:	f024 0403 	bic.w	r4, r4, #3
 800587c:	42a0      	cmp	r0, r4
 800587e:	d0f8      	beq.n	8005872 <sbrk_aligned+0x22>
 8005880:	1a21      	subs	r1, r4, r0
 8005882:	4628      	mov	r0, r5
 8005884:	f000 fb92 	bl	8005fac <_sbrk_r>
 8005888:	3001      	adds	r0, #1
 800588a:	d1f2      	bne.n	8005872 <sbrk_aligned+0x22>
 800588c:	e7ef      	b.n	800586e <sbrk_aligned+0x1e>
 800588e:	bf00      	nop
 8005890:	20000380 	.word	0x20000380

08005894 <_malloc_r>:
 8005894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005898:	1ccd      	adds	r5, r1, #3
 800589a:	f025 0503 	bic.w	r5, r5, #3
 800589e:	3508      	adds	r5, #8
 80058a0:	2d0c      	cmp	r5, #12
 80058a2:	bf38      	it	cc
 80058a4:	250c      	movcc	r5, #12
 80058a6:	2d00      	cmp	r5, #0
 80058a8:	4606      	mov	r6, r0
 80058aa:	db01      	blt.n	80058b0 <_malloc_r+0x1c>
 80058ac:	42a9      	cmp	r1, r5
 80058ae:	d904      	bls.n	80058ba <_malloc_r+0x26>
 80058b0:	230c      	movs	r3, #12
 80058b2:	6033      	str	r3, [r6, #0]
 80058b4:	2000      	movs	r0, #0
 80058b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005990 <_malloc_r+0xfc>
 80058be:	f000 f869 	bl	8005994 <__malloc_lock>
 80058c2:	f8d8 3000 	ldr.w	r3, [r8]
 80058c6:	461c      	mov	r4, r3
 80058c8:	bb44      	cbnz	r4, 800591c <_malloc_r+0x88>
 80058ca:	4629      	mov	r1, r5
 80058cc:	4630      	mov	r0, r6
 80058ce:	f7ff ffbf 	bl	8005850 <sbrk_aligned>
 80058d2:	1c43      	adds	r3, r0, #1
 80058d4:	4604      	mov	r4, r0
 80058d6:	d158      	bne.n	800598a <_malloc_r+0xf6>
 80058d8:	f8d8 4000 	ldr.w	r4, [r8]
 80058dc:	4627      	mov	r7, r4
 80058de:	2f00      	cmp	r7, #0
 80058e0:	d143      	bne.n	800596a <_malloc_r+0xd6>
 80058e2:	2c00      	cmp	r4, #0
 80058e4:	d04b      	beq.n	800597e <_malloc_r+0xea>
 80058e6:	6823      	ldr	r3, [r4, #0]
 80058e8:	4639      	mov	r1, r7
 80058ea:	4630      	mov	r0, r6
 80058ec:	eb04 0903 	add.w	r9, r4, r3
 80058f0:	f000 fb5c 	bl	8005fac <_sbrk_r>
 80058f4:	4581      	cmp	r9, r0
 80058f6:	d142      	bne.n	800597e <_malloc_r+0xea>
 80058f8:	6821      	ldr	r1, [r4, #0]
 80058fa:	1a6d      	subs	r5, r5, r1
 80058fc:	4629      	mov	r1, r5
 80058fe:	4630      	mov	r0, r6
 8005900:	f7ff ffa6 	bl	8005850 <sbrk_aligned>
 8005904:	3001      	adds	r0, #1
 8005906:	d03a      	beq.n	800597e <_malloc_r+0xea>
 8005908:	6823      	ldr	r3, [r4, #0]
 800590a:	442b      	add	r3, r5
 800590c:	6023      	str	r3, [r4, #0]
 800590e:	f8d8 3000 	ldr.w	r3, [r8]
 8005912:	685a      	ldr	r2, [r3, #4]
 8005914:	bb62      	cbnz	r2, 8005970 <_malloc_r+0xdc>
 8005916:	f8c8 7000 	str.w	r7, [r8]
 800591a:	e00f      	b.n	800593c <_malloc_r+0xa8>
 800591c:	6822      	ldr	r2, [r4, #0]
 800591e:	1b52      	subs	r2, r2, r5
 8005920:	d420      	bmi.n	8005964 <_malloc_r+0xd0>
 8005922:	2a0b      	cmp	r2, #11
 8005924:	d917      	bls.n	8005956 <_malloc_r+0xc2>
 8005926:	1961      	adds	r1, r4, r5
 8005928:	42a3      	cmp	r3, r4
 800592a:	6025      	str	r5, [r4, #0]
 800592c:	bf18      	it	ne
 800592e:	6059      	strne	r1, [r3, #4]
 8005930:	6863      	ldr	r3, [r4, #4]
 8005932:	bf08      	it	eq
 8005934:	f8c8 1000 	streq.w	r1, [r8]
 8005938:	5162      	str	r2, [r4, r5]
 800593a:	604b      	str	r3, [r1, #4]
 800593c:	4630      	mov	r0, r6
 800593e:	f000 f82f 	bl	80059a0 <__malloc_unlock>
 8005942:	f104 000b 	add.w	r0, r4, #11
 8005946:	1d23      	adds	r3, r4, #4
 8005948:	f020 0007 	bic.w	r0, r0, #7
 800594c:	1ac2      	subs	r2, r0, r3
 800594e:	bf1c      	itt	ne
 8005950:	1a1b      	subne	r3, r3, r0
 8005952:	50a3      	strne	r3, [r4, r2]
 8005954:	e7af      	b.n	80058b6 <_malloc_r+0x22>
 8005956:	6862      	ldr	r2, [r4, #4]
 8005958:	42a3      	cmp	r3, r4
 800595a:	bf0c      	ite	eq
 800595c:	f8c8 2000 	streq.w	r2, [r8]
 8005960:	605a      	strne	r2, [r3, #4]
 8005962:	e7eb      	b.n	800593c <_malloc_r+0xa8>
 8005964:	4623      	mov	r3, r4
 8005966:	6864      	ldr	r4, [r4, #4]
 8005968:	e7ae      	b.n	80058c8 <_malloc_r+0x34>
 800596a:	463c      	mov	r4, r7
 800596c:	687f      	ldr	r7, [r7, #4]
 800596e:	e7b6      	b.n	80058de <_malloc_r+0x4a>
 8005970:	461a      	mov	r2, r3
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	42a3      	cmp	r3, r4
 8005976:	d1fb      	bne.n	8005970 <_malloc_r+0xdc>
 8005978:	2300      	movs	r3, #0
 800597a:	6053      	str	r3, [r2, #4]
 800597c:	e7de      	b.n	800593c <_malloc_r+0xa8>
 800597e:	230c      	movs	r3, #12
 8005980:	6033      	str	r3, [r6, #0]
 8005982:	4630      	mov	r0, r6
 8005984:	f000 f80c 	bl	80059a0 <__malloc_unlock>
 8005988:	e794      	b.n	80058b4 <_malloc_r+0x20>
 800598a:	6005      	str	r5, [r0, #0]
 800598c:	e7d6      	b.n	800593c <_malloc_r+0xa8>
 800598e:	bf00      	nop
 8005990:	20000384 	.word	0x20000384

08005994 <__malloc_lock>:
 8005994:	4801      	ldr	r0, [pc, #4]	@ (800599c <__malloc_lock+0x8>)
 8005996:	f7ff bf0f 	b.w	80057b8 <__retarget_lock_acquire_recursive>
 800599a:	bf00      	nop
 800599c:	2000037c 	.word	0x2000037c

080059a0 <__malloc_unlock>:
 80059a0:	4801      	ldr	r0, [pc, #4]	@ (80059a8 <__malloc_unlock+0x8>)
 80059a2:	f7ff bf0a 	b.w	80057ba <__retarget_lock_release_recursive>
 80059a6:	bf00      	nop
 80059a8:	2000037c 	.word	0x2000037c

080059ac <__ssputs_r>:
 80059ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059b0:	688e      	ldr	r6, [r1, #8]
 80059b2:	461f      	mov	r7, r3
 80059b4:	42be      	cmp	r6, r7
 80059b6:	680b      	ldr	r3, [r1, #0]
 80059b8:	4682      	mov	sl, r0
 80059ba:	460c      	mov	r4, r1
 80059bc:	4690      	mov	r8, r2
 80059be:	d82d      	bhi.n	8005a1c <__ssputs_r+0x70>
 80059c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80059c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80059c8:	d026      	beq.n	8005a18 <__ssputs_r+0x6c>
 80059ca:	6965      	ldr	r5, [r4, #20]
 80059cc:	6909      	ldr	r1, [r1, #16]
 80059ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80059d2:	eba3 0901 	sub.w	r9, r3, r1
 80059d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80059da:	1c7b      	adds	r3, r7, #1
 80059dc:	444b      	add	r3, r9
 80059de:	106d      	asrs	r5, r5, #1
 80059e0:	429d      	cmp	r5, r3
 80059e2:	bf38      	it	cc
 80059e4:	461d      	movcc	r5, r3
 80059e6:	0553      	lsls	r3, r2, #21
 80059e8:	d527      	bpl.n	8005a3a <__ssputs_r+0x8e>
 80059ea:	4629      	mov	r1, r5
 80059ec:	f7ff ff52 	bl	8005894 <_malloc_r>
 80059f0:	4606      	mov	r6, r0
 80059f2:	b360      	cbz	r0, 8005a4e <__ssputs_r+0xa2>
 80059f4:	6921      	ldr	r1, [r4, #16]
 80059f6:	464a      	mov	r2, r9
 80059f8:	f000 fae8 	bl	8005fcc <memcpy>
 80059fc:	89a3      	ldrh	r3, [r4, #12]
 80059fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005a02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a06:	81a3      	strh	r3, [r4, #12]
 8005a08:	6126      	str	r6, [r4, #16]
 8005a0a:	6165      	str	r5, [r4, #20]
 8005a0c:	444e      	add	r6, r9
 8005a0e:	eba5 0509 	sub.w	r5, r5, r9
 8005a12:	6026      	str	r6, [r4, #0]
 8005a14:	60a5      	str	r5, [r4, #8]
 8005a16:	463e      	mov	r6, r7
 8005a18:	42be      	cmp	r6, r7
 8005a1a:	d900      	bls.n	8005a1e <__ssputs_r+0x72>
 8005a1c:	463e      	mov	r6, r7
 8005a1e:	6820      	ldr	r0, [r4, #0]
 8005a20:	4632      	mov	r2, r6
 8005a22:	4641      	mov	r1, r8
 8005a24:	f000 faa8 	bl	8005f78 <memmove>
 8005a28:	68a3      	ldr	r3, [r4, #8]
 8005a2a:	1b9b      	subs	r3, r3, r6
 8005a2c:	60a3      	str	r3, [r4, #8]
 8005a2e:	6823      	ldr	r3, [r4, #0]
 8005a30:	4433      	add	r3, r6
 8005a32:	6023      	str	r3, [r4, #0]
 8005a34:	2000      	movs	r0, #0
 8005a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a3a:	462a      	mov	r2, r5
 8005a3c:	f000 fad4 	bl	8005fe8 <_realloc_r>
 8005a40:	4606      	mov	r6, r0
 8005a42:	2800      	cmp	r0, #0
 8005a44:	d1e0      	bne.n	8005a08 <__ssputs_r+0x5c>
 8005a46:	6921      	ldr	r1, [r4, #16]
 8005a48:	4650      	mov	r0, sl
 8005a4a:	f7ff feb7 	bl	80057bc <_free_r>
 8005a4e:	230c      	movs	r3, #12
 8005a50:	f8ca 3000 	str.w	r3, [sl]
 8005a54:	89a3      	ldrh	r3, [r4, #12]
 8005a56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a5a:	81a3      	strh	r3, [r4, #12]
 8005a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a60:	e7e9      	b.n	8005a36 <__ssputs_r+0x8a>
	...

08005a64 <_svfiprintf_r>:
 8005a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a68:	4698      	mov	r8, r3
 8005a6a:	898b      	ldrh	r3, [r1, #12]
 8005a6c:	061b      	lsls	r3, r3, #24
 8005a6e:	b09d      	sub	sp, #116	@ 0x74
 8005a70:	4607      	mov	r7, r0
 8005a72:	460d      	mov	r5, r1
 8005a74:	4614      	mov	r4, r2
 8005a76:	d510      	bpl.n	8005a9a <_svfiprintf_r+0x36>
 8005a78:	690b      	ldr	r3, [r1, #16]
 8005a7a:	b973      	cbnz	r3, 8005a9a <_svfiprintf_r+0x36>
 8005a7c:	2140      	movs	r1, #64	@ 0x40
 8005a7e:	f7ff ff09 	bl	8005894 <_malloc_r>
 8005a82:	6028      	str	r0, [r5, #0]
 8005a84:	6128      	str	r0, [r5, #16]
 8005a86:	b930      	cbnz	r0, 8005a96 <_svfiprintf_r+0x32>
 8005a88:	230c      	movs	r3, #12
 8005a8a:	603b      	str	r3, [r7, #0]
 8005a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a90:	b01d      	add	sp, #116	@ 0x74
 8005a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a96:	2340      	movs	r3, #64	@ 0x40
 8005a98:	616b      	str	r3, [r5, #20]
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a9e:	2320      	movs	r3, #32
 8005aa0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005aa4:	f8cd 800c 	str.w	r8, [sp, #12]
 8005aa8:	2330      	movs	r3, #48	@ 0x30
 8005aaa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005c48 <_svfiprintf_r+0x1e4>
 8005aae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005ab2:	f04f 0901 	mov.w	r9, #1
 8005ab6:	4623      	mov	r3, r4
 8005ab8:	469a      	mov	sl, r3
 8005aba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005abe:	b10a      	cbz	r2, 8005ac4 <_svfiprintf_r+0x60>
 8005ac0:	2a25      	cmp	r2, #37	@ 0x25
 8005ac2:	d1f9      	bne.n	8005ab8 <_svfiprintf_r+0x54>
 8005ac4:	ebba 0b04 	subs.w	fp, sl, r4
 8005ac8:	d00b      	beq.n	8005ae2 <_svfiprintf_r+0x7e>
 8005aca:	465b      	mov	r3, fp
 8005acc:	4622      	mov	r2, r4
 8005ace:	4629      	mov	r1, r5
 8005ad0:	4638      	mov	r0, r7
 8005ad2:	f7ff ff6b 	bl	80059ac <__ssputs_r>
 8005ad6:	3001      	adds	r0, #1
 8005ad8:	f000 80a7 	beq.w	8005c2a <_svfiprintf_r+0x1c6>
 8005adc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ade:	445a      	add	r2, fp
 8005ae0:	9209      	str	r2, [sp, #36]	@ 0x24
 8005ae2:	f89a 3000 	ldrb.w	r3, [sl]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	f000 809f 	beq.w	8005c2a <_svfiprintf_r+0x1c6>
 8005aec:	2300      	movs	r3, #0
 8005aee:	f04f 32ff 	mov.w	r2, #4294967295
 8005af2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005af6:	f10a 0a01 	add.w	sl, sl, #1
 8005afa:	9304      	str	r3, [sp, #16]
 8005afc:	9307      	str	r3, [sp, #28]
 8005afe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005b02:	931a      	str	r3, [sp, #104]	@ 0x68
 8005b04:	4654      	mov	r4, sl
 8005b06:	2205      	movs	r2, #5
 8005b08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b0c:	484e      	ldr	r0, [pc, #312]	@ (8005c48 <_svfiprintf_r+0x1e4>)
 8005b0e:	f7fa fb67 	bl	80001e0 <memchr>
 8005b12:	9a04      	ldr	r2, [sp, #16]
 8005b14:	b9d8      	cbnz	r0, 8005b4e <_svfiprintf_r+0xea>
 8005b16:	06d0      	lsls	r0, r2, #27
 8005b18:	bf44      	itt	mi
 8005b1a:	2320      	movmi	r3, #32
 8005b1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b20:	0711      	lsls	r1, r2, #28
 8005b22:	bf44      	itt	mi
 8005b24:	232b      	movmi	r3, #43	@ 0x2b
 8005b26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b2a:	f89a 3000 	ldrb.w	r3, [sl]
 8005b2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b30:	d015      	beq.n	8005b5e <_svfiprintf_r+0xfa>
 8005b32:	9a07      	ldr	r2, [sp, #28]
 8005b34:	4654      	mov	r4, sl
 8005b36:	2000      	movs	r0, #0
 8005b38:	f04f 0c0a 	mov.w	ip, #10
 8005b3c:	4621      	mov	r1, r4
 8005b3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b42:	3b30      	subs	r3, #48	@ 0x30
 8005b44:	2b09      	cmp	r3, #9
 8005b46:	d94b      	bls.n	8005be0 <_svfiprintf_r+0x17c>
 8005b48:	b1b0      	cbz	r0, 8005b78 <_svfiprintf_r+0x114>
 8005b4a:	9207      	str	r2, [sp, #28]
 8005b4c:	e014      	b.n	8005b78 <_svfiprintf_r+0x114>
 8005b4e:	eba0 0308 	sub.w	r3, r0, r8
 8005b52:	fa09 f303 	lsl.w	r3, r9, r3
 8005b56:	4313      	orrs	r3, r2
 8005b58:	9304      	str	r3, [sp, #16]
 8005b5a:	46a2      	mov	sl, r4
 8005b5c:	e7d2      	b.n	8005b04 <_svfiprintf_r+0xa0>
 8005b5e:	9b03      	ldr	r3, [sp, #12]
 8005b60:	1d19      	adds	r1, r3, #4
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	9103      	str	r1, [sp, #12]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	bfbb      	ittet	lt
 8005b6a:	425b      	neglt	r3, r3
 8005b6c:	f042 0202 	orrlt.w	r2, r2, #2
 8005b70:	9307      	strge	r3, [sp, #28]
 8005b72:	9307      	strlt	r3, [sp, #28]
 8005b74:	bfb8      	it	lt
 8005b76:	9204      	strlt	r2, [sp, #16]
 8005b78:	7823      	ldrb	r3, [r4, #0]
 8005b7a:	2b2e      	cmp	r3, #46	@ 0x2e
 8005b7c:	d10a      	bne.n	8005b94 <_svfiprintf_r+0x130>
 8005b7e:	7863      	ldrb	r3, [r4, #1]
 8005b80:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b82:	d132      	bne.n	8005bea <_svfiprintf_r+0x186>
 8005b84:	9b03      	ldr	r3, [sp, #12]
 8005b86:	1d1a      	adds	r2, r3, #4
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	9203      	str	r2, [sp, #12]
 8005b8c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005b90:	3402      	adds	r4, #2
 8005b92:	9305      	str	r3, [sp, #20]
 8005b94:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005c58 <_svfiprintf_r+0x1f4>
 8005b98:	7821      	ldrb	r1, [r4, #0]
 8005b9a:	2203      	movs	r2, #3
 8005b9c:	4650      	mov	r0, sl
 8005b9e:	f7fa fb1f 	bl	80001e0 <memchr>
 8005ba2:	b138      	cbz	r0, 8005bb4 <_svfiprintf_r+0x150>
 8005ba4:	9b04      	ldr	r3, [sp, #16]
 8005ba6:	eba0 000a 	sub.w	r0, r0, sl
 8005baa:	2240      	movs	r2, #64	@ 0x40
 8005bac:	4082      	lsls	r2, r0
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	3401      	adds	r4, #1
 8005bb2:	9304      	str	r3, [sp, #16]
 8005bb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bb8:	4824      	ldr	r0, [pc, #144]	@ (8005c4c <_svfiprintf_r+0x1e8>)
 8005bba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005bbe:	2206      	movs	r2, #6
 8005bc0:	f7fa fb0e 	bl	80001e0 <memchr>
 8005bc4:	2800      	cmp	r0, #0
 8005bc6:	d036      	beq.n	8005c36 <_svfiprintf_r+0x1d2>
 8005bc8:	4b21      	ldr	r3, [pc, #132]	@ (8005c50 <_svfiprintf_r+0x1ec>)
 8005bca:	bb1b      	cbnz	r3, 8005c14 <_svfiprintf_r+0x1b0>
 8005bcc:	9b03      	ldr	r3, [sp, #12]
 8005bce:	3307      	adds	r3, #7
 8005bd0:	f023 0307 	bic.w	r3, r3, #7
 8005bd4:	3308      	adds	r3, #8
 8005bd6:	9303      	str	r3, [sp, #12]
 8005bd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bda:	4433      	add	r3, r6
 8005bdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005bde:	e76a      	b.n	8005ab6 <_svfiprintf_r+0x52>
 8005be0:	fb0c 3202 	mla	r2, ip, r2, r3
 8005be4:	460c      	mov	r4, r1
 8005be6:	2001      	movs	r0, #1
 8005be8:	e7a8      	b.n	8005b3c <_svfiprintf_r+0xd8>
 8005bea:	2300      	movs	r3, #0
 8005bec:	3401      	adds	r4, #1
 8005bee:	9305      	str	r3, [sp, #20]
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	f04f 0c0a 	mov.w	ip, #10
 8005bf6:	4620      	mov	r0, r4
 8005bf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005bfc:	3a30      	subs	r2, #48	@ 0x30
 8005bfe:	2a09      	cmp	r2, #9
 8005c00:	d903      	bls.n	8005c0a <_svfiprintf_r+0x1a6>
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d0c6      	beq.n	8005b94 <_svfiprintf_r+0x130>
 8005c06:	9105      	str	r1, [sp, #20]
 8005c08:	e7c4      	b.n	8005b94 <_svfiprintf_r+0x130>
 8005c0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c0e:	4604      	mov	r4, r0
 8005c10:	2301      	movs	r3, #1
 8005c12:	e7f0      	b.n	8005bf6 <_svfiprintf_r+0x192>
 8005c14:	ab03      	add	r3, sp, #12
 8005c16:	9300      	str	r3, [sp, #0]
 8005c18:	462a      	mov	r2, r5
 8005c1a:	4b0e      	ldr	r3, [pc, #56]	@ (8005c54 <_svfiprintf_r+0x1f0>)
 8005c1c:	a904      	add	r1, sp, #16
 8005c1e:	4638      	mov	r0, r7
 8005c20:	f3af 8000 	nop.w
 8005c24:	1c42      	adds	r2, r0, #1
 8005c26:	4606      	mov	r6, r0
 8005c28:	d1d6      	bne.n	8005bd8 <_svfiprintf_r+0x174>
 8005c2a:	89ab      	ldrh	r3, [r5, #12]
 8005c2c:	065b      	lsls	r3, r3, #25
 8005c2e:	f53f af2d 	bmi.w	8005a8c <_svfiprintf_r+0x28>
 8005c32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005c34:	e72c      	b.n	8005a90 <_svfiprintf_r+0x2c>
 8005c36:	ab03      	add	r3, sp, #12
 8005c38:	9300      	str	r3, [sp, #0]
 8005c3a:	462a      	mov	r2, r5
 8005c3c:	4b05      	ldr	r3, [pc, #20]	@ (8005c54 <_svfiprintf_r+0x1f0>)
 8005c3e:	a904      	add	r1, sp, #16
 8005c40:	4638      	mov	r0, r7
 8005c42:	f000 f879 	bl	8005d38 <_printf_i>
 8005c46:	e7ed      	b.n	8005c24 <_svfiprintf_r+0x1c0>
 8005c48:	080060b0 	.word	0x080060b0
 8005c4c:	080060ba 	.word	0x080060ba
 8005c50:	00000000 	.word	0x00000000
 8005c54:	080059ad 	.word	0x080059ad
 8005c58:	080060b6 	.word	0x080060b6

08005c5c <_printf_common>:
 8005c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c60:	4616      	mov	r6, r2
 8005c62:	4698      	mov	r8, r3
 8005c64:	688a      	ldr	r2, [r1, #8]
 8005c66:	690b      	ldr	r3, [r1, #16]
 8005c68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	bfb8      	it	lt
 8005c70:	4613      	movlt	r3, r2
 8005c72:	6033      	str	r3, [r6, #0]
 8005c74:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005c78:	4607      	mov	r7, r0
 8005c7a:	460c      	mov	r4, r1
 8005c7c:	b10a      	cbz	r2, 8005c82 <_printf_common+0x26>
 8005c7e:	3301      	adds	r3, #1
 8005c80:	6033      	str	r3, [r6, #0]
 8005c82:	6823      	ldr	r3, [r4, #0]
 8005c84:	0699      	lsls	r1, r3, #26
 8005c86:	bf42      	ittt	mi
 8005c88:	6833      	ldrmi	r3, [r6, #0]
 8005c8a:	3302      	addmi	r3, #2
 8005c8c:	6033      	strmi	r3, [r6, #0]
 8005c8e:	6825      	ldr	r5, [r4, #0]
 8005c90:	f015 0506 	ands.w	r5, r5, #6
 8005c94:	d106      	bne.n	8005ca4 <_printf_common+0x48>
 8005c96:	f104 0a19 	add.w	sl, r4, #25
 8005c9a:	68e3      	ldr	r3, [r4, #12]
 8005c9c:	6832      	ldr	r2, [r6, #0]
 8005c9e:	1a9b      	subs	r3, r3, r2
 8005ca0:	42ab      	cmp	r3, r5
 8005ca2:	dc26      	bgt.n	8005cf2 <_printf_common+0x96>
 8005ca4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005ca8:	6822      	ldr	r2, [r4, #0]
 8005caa:	3b00      	subs	r3, #0
 8005cac:	bf18      	it	ne
 8005cae:	2301      	movne	r3, #1
 8005cb0:	0692      	lsls	r2, r2, #26
 8005cb2:	d42b      	bmi.n	8005d0c <_printf_common+0xb0>
 8005cb4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005cb8:	4641      	mov	r1, r8
 8005cba:	4638      	mov	r0, r7
 8005cbc:	47c8      	blx	r9
 8005cbe:	3001      	adds	r0, #1
 8005cc0:	d01e      	beq.n	8005d00 <_printf_common+0xa4>
 8005cc2:	6823      	ldr	r3, [r4, #0]
 8005cc4:	6922      	ldr	r2, [r4, #16]
 8005cc6:	f003 0306 	and.w	r3, r3, #6
 8005cca:	2b04      	cmp	r3, #4
 8005ccc:	bf02      	ittt	eq
 8005cce:	68e5      	ldreq	r5, [r4, #12]
 8005cd0:	6833      	ldreq	r3, [r6, #0]
 8005cd2:	1aed      	subeq	r5, r5, r3
 8005cd4:	68a3      	ldr	r3, [r4, #8]
 8005cd6:	bf0c      	ite	eq
 8005cd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cdc:	2500      	movne	r5, #0
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	bfc4      	itt	gt
 8005ce2:	1a9b      	subgt	r3, r3, r2
 8005ce4:	18ed      	addgt	r5, r5, r3
 8005ce6:	2600      	movs	r6, #0
 8005ce8:	341a      	adds	r4, #26
 8005cea:	42b5      	cmp	r5, r6
 8005cec:	d11a      	bne.n	8005d24 <_printf_common+0xc8>
 8005cee:	2000      	movs	r0, #0
 8005cf0:	e008      	b.n	8005d04 <_printf_common+0xa8>
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	4652      	mov	r2, sl
 8005cf6:	4641      	mov	r1, r8
 8005cf8:	4638      	mov	r0, r7
 8005cfa:	47c8      	blx	r9
 8005cfc:	3001      	adds	r0, #1
 8005cfe:	d103      	bne.n	8005d08 <_printf_common+0xac>
 8005d00:	f04f 30ff 	mov.w	r0, #4294967295
 8005d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d08:	3501      	adds	r5, #1
 8005d0a:	e7c6      	b.n	8005c9a <_printf_common+0x3e>
 8005d0c:	18e1      	adds	r1, r4, r3
 8005d0e:	1c5a      	adds	r2, r3, #1
 8005d10:	2030      	movs	r0, #48	@ 0x30
 8005d12:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005d16:	4422      	add	r2, r4
 8005d18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005d1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005d20:	3302      	adds	r3, #2
 8005d22:	e7c7      	b.n	8005cb4 <_printf_common+0x58>
 8005d24:	2301      	movs	r3, #1
 8005d26:	4622      	mov	r2, r4
 8005d28:	4641      	mov	r1, r8
 8005d2a:	4638      	mov	r0, r7
 8005d2c:	47c8      	blx	r9
 8005d2e:	3001      	adds	r0, #1
 8005d30:	d0e6      	beq.n	8005d00 <_printf_common+0xa4>
 8005d32:	3601      	adds	r6, #1
 8005d34:	e7d9      	b.n	8005cea <_printf_common+0x8e>
	...

08005d38 <_printf_i>:
 8005d38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d3c:	7e0f      	ldrb	r7, [r1, #24]
 8005d3e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005d40:	2f78      	cmp	r7, #120	@ 0x78
 8005d42:	4691      	mov	r9, r2
 8005d44:	4680      	mov	r8, r0
 8005d46:	460c      	mov	r4, r1
 8005d48:	469a      	mov	sl, r3
 8005d4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005d4e:	d807      	bhi.n	8005d60 <_printf_i+0x28>
 8005d50:	2f62      	cmp	r7, #98	@ 0x62
 8005d52:	d80a      	bhi.n	8005d6a <_printf_i+0x32>
 8005d54:	2f00      	cmp	r7, #0
 8005d56:	f000 80d2 	beq.w	8005efe <_printf_i+0x1c6>
 8005d5a:	2f58      	cmp	r7, #88	@ 0x58
 8005d5c:	f000 80b9 	beq.w	8005ed2 <_printf_i+0x19a>
 8005d60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005d68:	e03a      	b.n	8005de0 <_printf_i+0xa8>
 8005d6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005d6e:	2b15      	cmp	r3, #21
 8005d70:	d8f6      	bhi.n	8005d60 <_printf_i+0x28>
 8005d72:	a101      	add	r1, pc, #4	@ (adr r1, 8005d78 <_printf_i+0x40>)
 8005d74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d78:	08005dd1 	.word	0x08005dd1
 8005d7c:	08005de5 	.word	0x08005de5
 8005d80:	08005d61 	.word	0x08005d61
 8005d84:	08005d61 	.word	0x08005d61
 8005d88:	08005d61 	.word	0x08005d61
 8005d8c:	08005d61 	.word	0x08005d61
 8005d90:	08005de5 	.word	0x08005de5
 8005d94:	08005d61 	.word	0x08005d61
 8005d98:	08005d61 	.word	0x08005d61
 8005d9c:	08005d61 	.word	0x08005d61
 8005da0:	08005d61 	.word	0x08005d61
 8005da4:	08005ee5 	.word	0x08005ee5
 8005da8:	08005e0f 	.word	0x08005e0f
 8005dac:	08005e9f 	.word	0x08005e9f
 8005db0:	08005d61 	.word	0x08005d61
 8005db4:	08005d61 	.word	0x08005d61
 8005db8:	08005f07 	.word	0x08005f07
 8005dbc:	08005d61 	.word	0x08005d61
 8005dc0:	08005e0f 	.word	0x08005e0f
 8005dc4:	08005d61 	.word	0x08005d61
 8005dc8:	08005d61 	.word	0x08005d61
 8005dcc:	08005ea7 	.word	0x08005ea7
 8005dd0:	6833      	ldr	r3, [r6, #0]
 8005dd2:	1d1a      	adds	r2, r3, #4
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	6032      	str	r2, [r6, #0]
 8005dd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ddc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005de0:	2301      	movs	r3, #1
 8005de2:	e09d      	b.n	8005f20 <_printf_i+0x1e8>
 8005de4:	6833      	ldr	r3, [r6, #0]
 8005de6:	6820      	ldr	r0, [r4, #0]
 8005de8:	1d19      	adds	r1, r3, #4
 8005dea:	6031      	str	r1, [r6, #0]
 8005dec:	0606      	lsls	r6, r0, #24
 8005dee:	d501      	bpl.n	8005df4 <_printf_i+0xbc>
 8005df0:	681d      	ldr	r5, [r3, #0]
 8005df2:	e003      	b.n	8005dfc <_printf_i+0xc4>
 8005df4:	0645      	lsls	r5, r0, #25
 8005df6:	d5fb      	bpl.n	8005df0 <_printf_i+0xb8>
 8005df8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005dfc:	2d00      	cmp	r5, #0
 8005dfe:	da03      	bge.n	8005e08 <_printf_i+0xd0>
 8005e00:	232d      	movs	r3, #45	@ 0x2d
 8005e02:	426d      	negs	r5, r5
 8005e04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e08:	4859      	ldr	r0, [pc, #356]	@ (8005f70 <_printf_i+0x238>)
 8005e0a:	230a      	movs	r3, #10
 8005e0c:	e011      	b.n	8005e32 <_printf_i+0xfa>
 8005e0e:	6821      	ldr	r1, [r4, #0]
 8005e10:	6833      	ldr	r3, [r6, #0]
 8005e12:	0608      	lsls	r0, r1, #24
 8005e14:	f853 5b04 	ldr.w	r5, [r3], #4
 8005e18:	d402      	bmi.n	8005e20 <_printf_i+0xe8>
 8005e1a:	0649      	lsls	r1, r1, #25
 8005e1c:	bf48      	it	mi
 8005e1e:	b2ad      	uxthmi	r5, r5
 8005e20:	2f6f      	cmp	r7, #111	@ 0x6f
 8005e22:	4853      	ldr	r0, [pc, #332]	@ (8005f70 <_printf_i+0x238>)
 8005e24:	6033      	str	r3, [r6, #0]
 8005e26:	bf14      	ite	ne
 8005e28:	230a      	movne	r3, #10
 8005e2a:	2308      	moveq	r3, #8
 8005e2c:	2100      	movs	r1, #0
 8005e2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005e32:	6866      	ldr	r6, [r4, #4]
 8005e34:	60a6      	str	r6, [r4, #8]
 8005e36:	2e00      	cmp	r6, #0
 8005e38:	bfa2      	ittt	ge
 8005e3a:	6821      	ldrge	r1, [r4, #0]
 8005e3c:	f021 0104 	bicge.w	r1, r1, #4
 8005e40:	6021      	strge	r1, [r4, #0]
 8005e42:	b90d      	cbnz	r5, 8005e48 <_printf_i+0x110>
 8005e44:	2e00      	cmp	r6, #0
 8005e46:	d04b      	beq.n	8005ee0 <_printf_i+0x1a8>
 8005e48:	4616      	mov	r6, r2
 8005e4a:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e4e:	fb03 5711 	mls	r7, r3, r1, r5
 8005e52:	5dc7      	ldrb	r7, [r0, r7]
 8005e54:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e58:	462f      	mov	r7, r5
 8005e5a:	42bb      	cmp	r3, r7
 8005e5c:	460d      	mov	r5, r1
 8005e5e:	d9f4      	bls.n	8005e4a <_printf_i+0x112>
 8005e60:	2b08      	cmp	r3, #8
 8005e62:	d10b      	bne.n	8005e7c <_printf_i+0x144>
 8005e64:	6823      	ldr	r3, [r4, #0]
 8005e66:	07df      	lsls	r7, r3, #31
 8005e68:	d508      	bpl.n	8005e7c <_printf_i+0x144>
 8005e6a:	6923      	ldr	r3, [r4, #16]
 8005e6c:	6861      	ldr	r1, [r4, #4]
 8005e6e:	4299      	cmp	r1, r3
 8005e70:	bfde      	ittt	le
 8005e72:	2330      	movle	r3, #48	@ 0x30
 8005e74:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005e78:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005e7c:	1b92      	subs	r2, r2, r6
 8005e7e:	6122      	str	r2, [r4, #16]
 8005e80:	f8cd a000 	str.w	sl, [sp]
 8005e84:	464b      	mov	r3, r9
 8005e86:	aa03      	add	r2, sp, #12
 8005e88:	4621      	mov	r1, r4
 8005e8a:	4640      	mov	r0, r8
 8005e8c:	f7ff fee6 	bl	8005c5c <_printf_common>
 8005e90:	3001      	adds	r0, #1
 8005e92:	d14a      	bne.n	8005f2a <_printf_i+0x1f2>
 8005e94:	f04f 30ff 	mov.w	r0, #4294967295
 8005e98:	b004      	add	sp, #16
 8005e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e9e:	6823      	ldr	r3, [r4, #0]
 8005ea0:	f043 0320 	orr.w	r3, r3, #32
 8005ea4:	6023      	str	r3, [r4, #0]
 8005ea6:	4833      	ldr	r0, [pc, #204]	@ (8005f74 <_printf_i+0x23c>)
 8005ea8:	2778      	movs	r7, #120	@ 0x78
 8005eaa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005eae:	6823      	ldr	r3, [r4, #0]
 8005eb0:	6831      	ldr	r1, [r6, #0]
 8005eb2:	061f      	lsls	r7, r3, #24
 8005eb4:	f851 5b04 	ldr.w	r5, [r1], #4
 8005eb8:	d402      	bmi.n	8005ec0 <_printf_i+0x188>
 8005eba:	065f      	lsls	r7, r3, #25
 8005ebc:	bf48      	it	mi
 8005ebe:	b2ad      	uxthmi	r5, r5
 8005ec0:	6031      	str	r1, [r6, #0]
 8005ec2:	07d9      	lsls	r1, r3, #31
 8005ec4:	bf44      	itt	mi
 8005ec6:	f043 0320 	orrmi.w	r3, r3, #32
 8005eca:	6023      	strmi	r3, [r4, #0]
 8005ecc:	b11d      	cbz	r5, 8005ed6 <_printf_i+0x19e>
 8005ece:	2310      	movs	r3, #16
 8005ed0:	e7ac      	b.n	8005e2c <_printf_i+0xf4>
 8005ed2:	4827      	ldr	r0, [pc, #156]	@ (8005f70 <_printf_i+0x238>)
 8005ed4:	e7e9      	b.n	8005eaa <_printf_i+0x172>
 8005ed6:	6823      	ldr	r3, [r4, #0]
 8005ed8:	f023 0320 	bic.w	r3, r3, #32
 8005edc:	6023      	str	r3, [r4, #0]
 8005ede:	e7f6      	b.n	8005ece <_printf_i+0x196>
 8005ee0:	4616      	mov	r6, r2
 8005ee2:	e7bd      	b.n	8005e60 <_printf_i+0x128>
 8005ee4:	6833      	ldr	r3, [r6, #0]
 8005ee6:	6825      	ldr	r5, [r4, #0]
 8005ee8:	6961      	ldr	r1, [r4, #20]
 8005eea:	1d18      	adds	r0, r3, #4
 8005eec:	6030      	str	r0, [r6, #0]
 8005eee:	062e      	lsls	r6, r5, #24
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	d501      	bpl.n	8005ef8 <_printf_i+0x1c0>
 8005ef4:	6019      	str	r1, [r3, #0]
 8005ef6:	e002      	b.n	8005efe <_printf_i+0x1c6>
 8005ef8:	0668      	lsls	r0, r5, #25
 8005efa:	d5fb      	bpl.n	8005ef4 <_printf_i+0x1bc>
 8005efc:	8019      	strh	r1, [r3, #0]
 8005efe:	2300      	movs	r3, #0
 8005f00:	6123      	str	r3, [r4, #16]
 8005f02:	4616      	mov	r6, r2
 8005f04:	e7bc      	b.n	8005e80 <_printf_i+0x148>
 8005f06:	6833      	ldr	r3, [r6, #0]
 8005f08:	1d1a      	adds	r2, r3, #4
 8005f0a:	6032      	str	r2, [r6, #0]
 8005f0c:	681e      	ldr	r6, [r3, #0]
 8005f0e:	6862      	ldr	r2, [r4, #4]
 8005f10:	2100      	movs	r1, #0
 8005f12:	4630      	mov	r0, r6
 8005f14:	f7fa f964 	bl	80001e0 <memchr>
 8005f18:	b108      	cbz	r0, 8005f1e <_printf_i+0x1e6>
 8005f1a:	1b80      	subs	r0, r0, r6
 8005f1c:	6060      	str	r0, [r4, #4]
 8005f1e:	6863      	ldr	r3, [r4, #4]
 8005f20:	6123      	str	r3, [r4, #16]
 8005f22:	2300      	movs	r3, #0
 8005f24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f28:	e7aa      	b.n	8005e80 <_printf_i+0x148>
 8005f2a:	6923      	ldr	r3, [r4, #16]
 8005f2c:	4632      	mov	r2, r6
 8005f2e:	4649      	mov	r1, r9
 8005f30:	4640      	mov	r0, r8
 8005f32:	47d0      	blx	sl
 8005f34:	3001      	adds	r0, #1
 8005f36:	d0ad      	beq.n	8005e94 <_printf_i+0x15c>
 8005f38:	6823      	ldr	r3, [r4, #0]
 8005f3a:	079b      	lsls	r3, r3, #30
 8005f3c:	d413      	bmi.n	8005f66 <_printf_i+0x22e>
 8005f3e:	68e0      	ldr	r0, [r4, #12]
 8005f40:	9b03      	ldr	r3, [sp, #12]
 8005f42:	4298      	cmp	r0, r3
 8005f44:	bfb8      	it	lt
 8005f46:	4618      	movlt	r0, r3
 8005f48:	e7a6      	b.n	8005e98 <_printf_i+0x160>
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	4632      	mov	r2, r6
 8005f4e:	4649      	mov	r1, r9
 8005f50:	4640      	mov	r0, r8
 8005f52:	47d0      	blx	sl
 8005f54:	3001      	adds	r0, #1
 8005f56:	d09d      	beq.n	8005e94 <_printf_i+0x15c>
 8005f58:	3501      	adds	r5, #1
 8005f5a:	68e3      	ldr	r3, [r4, #12]
 8005f5c:	9903      	ldr	r1, [sp, #12]
 8005f5e:	1a5b      	subs	r3, r3, r1
 8005f60:	42ab      	cmp	r3, r5
 8005f62:	dcf2      	bgt.n	8005f4a <_printf_i+0x212>
 8005f64:	e7eb      	b.n	8005f3e <_printf_i+0x206>
 8005f66:	2500      	movs	r5, #0
 8005f68:	f104 0619 	add.w	r6, r4, #25
 8005f6c:	e7f5      	b.n	8005f5a <_printf_i+0x222>
 8005f6e:	bf00      	nop
 8005f70:	080060c1 	.word	0x080060c1
 8005f74:	080060d2 	.word	0x080060d2

08005f78 <memmove>:
 8005f78:	4288      	cmp	r0, r1
 8005f7a:	b510      	push	{r4, lr}
 8005f7c:	eb01 0402 	add.w	r4, r1, r2
 8005f80:	d902      	bls.n	8005f88 <memmove+0x10>
 8005f82:	4284      	cmp	r4, r0
 8005f84:	4623      	mov	r3, r4
 8005f86:	d807      	bhi.n	8005f98 <memmove+0x20>
 8005f88:	1e43      	subs	r3, r0, #1
 8005f8a:	42a1      	cmp	r1, r4
 8005f8c:	d008      	beq.n	8005fa0 <memmove+0x28>
 8005f8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f92:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f96:	e7f8      	b.n	8005f8a <memmove+0x12>
 8005f98:	4402      	add	r2, r0
 8005f9a:	4601      	mov	r1, r0
 8005f9c:	428a      	cmp	r2, r1
 8005f9e:	d100      	bne.n	8005fa2 <memmove+0x2a>
 8005fa0:	bd10      	pop	{r4, pc}
 8005fa2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005fa6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005faa:	e7f7      	b.n	8005f9c <memmove+0x24>

08005fac <_sbrk_r>:
 8005fac:	b538      	push	{r3, r4, r5, lr}
 8005fae:	4d06      	ldr	r5, [pc, #24]	@ (8005fc8 <_sbrk_r+0x1c>)
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	4604      	mov	r4, r0
 8005fb4:	4608      	mov	r0, r1
 8005fb6:	602b      	str	r3, [r5, #0]
 8005fb8:	f7fb fbb6 	bl	8001728 <_sbrk>
 8005fbc:	1c43      	adds	r3, r0, #1
 8005fbe:	d102      	bne.n	8005fc6 <_sbrk_r+0x1a>
 8005fc0:	682b      	ldr	r3, [r5, #0]
 8005fc2:	b103      	cbz	r3, 8005fc6 <_sbrk_r+0x1a>
 8005fc4:	6023      	str	r3, [r4, #0]
 8005fc6:	bd38      	pop	{r3, r4, r5, pc}
 8005fc8:	20000378 	.word	0x20000378

08005fcc <memcpy>:
 8005fcc:	440a      	add	r2, r1
 8005fce:	4291      	cmp	r1, r2
 8005fd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8005fd4:	d100      	bne.n	8005fd8 <memcpy+0xc>
 8005fd6:	4770      	bx	lr
 8005fd8:	b510      	push	{r4, lr}
 8005fda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fde:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fe2:	4291      	cmp	r1, r2
 8005fe4:	d1f9      	bne.n	8005fda <memcpy+0xe>
 8005fe6:	bd10      	pop	{r4, pc}

08005fe8 <_realloc_r>:
 8005fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fec:	4680      	mov	r8, r0
 8005fee:	4615      	mov	r5, r2
 8005ff0:	460c      	mov	r4, r1
 8005ff2:	b921      	cbnz	r1, 8005ffe <_realloc_r+0x16>
 8005ff4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ff8:	4611      	mov	r1, r2
 8005ffa:	f7ff bc4b 	b.w	8005894 <_malloc_r>
 8005ffe:	b92a      	cbnz	r2, 800600c <_realloc_r+0x24>
 8006000:	f7ff fbdc 	bl	80057bc <_free_r>
 8006004:	2400      	movs	r4, #0
 8006006:	4620      	mov	r0, r4
 8006008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800600c:	f000 f81a 	bl	8006044 <_malloc_usable_size_r>
 8006010:	4285      	cmp	r5, r0
 8006012:	4606      	mov	r6, r0
 8006014:	d802      	bhi.n	800601c <_realloc_r+0x34>
 8006016:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800601a:	d8f4      	bhi.n	8006006 <_realloc_r+0x1e>
 800601c:	4629      	mov	r1, r5
 800601e:	4640      	mov	r0, r8
 8006020:	f7ff fc38 	bl	8005894 <_malloc_r>
 8006024:	4607      	mov	r7, r0
 8006026:	2800      	cmp	r0, #0
 8006028:	d0ec      	beq.n	8006004 <_realloc_r+0x1c>
 800602a:	42b5      	cmp	r5, r6
 800602c:	462a      	mov	r2, r5
 800602e:	4621      	mov	r1, r4
 8006030:	bf28      	it	cs
 8006032:	4632      	movcs	r2, r6
 8006034:	f7ff ffca 	bl	8005fcc <memcpy>
 8006038:	4621      	mov	r1, r4
 800603a:	4640      	mov	r0, r8
 800603c:	f7ff fbbe 	bl	80057bc <_free_r>
 8006040:	463c      	mov	r4, r7
 8006042:	e7e0      	b.n	8006006 <_realloc_r+0x1e>

08006044 <_malloc_usable_size_r>:
 8006044:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006048:	1f18      	subs	r0, r3, #4
 800604a:	2b00      	cmp	r3, #0
 800604c:	bfbc      	itt	lt
 800604e:	580b      	ldrlt	r3, [r1, r0]
 8006050:	18c0      	addlt	r0, r0, r3
 8006052:	4770      	bx	lr

08006054 <_init>:
 8006054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006056:	bf00      	nop
 8006058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800605a:	bc08      	pop	{r3}
 800605c:	469e      	mov	lr, r3
 800605e:	4770      	bx	lr

08006060 <_fini>:
 8006060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006062:	bf00      	nop
 8006064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006066:	bc08      	pop	{r3}
 8006068:	469e      	mov	lr, r3
 800606a:	4770      	bx	lr
